<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Javascript DOM编程艺术学习笔记一（第三章兼高程三）]]></title>
      <url>%2F2017%2F03%2F26%2FJavascript%20Dom%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0%E5%85%BC%E9%AB%98%E7%A8%8B%E4%B8%89%EF%BC%89%2F</url>
      <content type="text"><![CDATA[1.Dom基础Element 三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取 getElementById 根据Id获取元素节点 getElementByTagName 根据Html获取元素节点 getElementByClassName 根据ClassName（class）获取元素节点 高程三中学到Html元素 id，元素在文档中的唯一标识 - title，有关元素的附加说明信息，一般通过工具提示条显示出来 lang，元素内容的语言比如中文zh-hans dir，语言的方向，值为”ltr”（left-to-right，从左至右）或”rtl”（right-to-left，从右至左），很少使用 className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。 1&lt;div id="myDiv" class="bd" title="Body text" lang="en" dir="ltr"&gt;Some text&lt;/div&gt; 可以获得元素中指定的所有信息。 123456div = document.getElementById("myDiv"); alert(div.id); //"myDiv" alert(div.className); //"bd" alert(div.title); //"Body text" alert(div.lang); //"en" alert(div.dir); //"ltr" 还可以为每个属性赋予新的值。 123456div = document.getElementById("myDiv"); div.id = "someOtherId"; div.className = "ft"; div.title = "Some other text"; div.lang = "fr"; div.dir ="rtl"; 获取和设置属性 getAttribute getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：1object.getAttribute(attribute); setAttribute 它允许我们对属性节点的值做出修改。 1object.setAttribute(&quot;attribute&quot;,value);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017Web程序员技术发展路线图]]></title>
      <url>%2F2017%2F03%2F22%2F2017Web%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E8%B7%AF%E7%BA%BF%E5%9B%BE%2F</url>
      <content type="text"><![CDATA[这个是国外一个工程师的总结，在知乎上的前端技术文章精选专栏看见的，看着实用转来到这。 2017 年 Web 开发工程师技术发展路线图 下面的脑图展现了前端、后端以及 devops 技术栈的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。 简介 前端开发工程师路线图 后端开发工程师路线图对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！ DevOps [GitHub链接:][1] [1] : kamranahmedse/developer-roadmap]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[配置SSH Key+Next主题以及个性化改动]]></title>
      <url>%2F2017%2F03%2F20%2F%E9%85%8D%E7%BD%AESSH%20Key%2BNext%E4%B8%BB%E9%A2%98%E4%BB%A5%E5%8F%8A%E4%B8%AA%E6%80%A7%E5%8C%96%E6%94%B9%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[Git SSH Key 生成步骤Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。 第一次使用要设置Git的user name 和email1$ git config --global user.name 1$ git config --global user.email 查看你是否已经拥有密钥 1$cd ~/.ssh 如果没有的话就不会有此文件，有的话就会备份删除掉 生成密钥 1$ ssh-keygen -t rsa -C “user.email” 你将会遇到以下情况的处理： 12345678 Generating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): 直接回车Enter passphrase (empty for no passphrase): 直接回车Enter same passphrase again:Your identification has been saved in /root/.ssh/id_rsa. 公钥Your public key has been saved in /root/.ssh/id_rsa.pub. 私钥The key fingerprint is:4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53 就是按3次回车，密码为空！最后你会得到两个文件：id_rsa和id_rsa.pub 把密钥加到Github或者码云或者Coding的SSH上我们需要把id_rsa.pub中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。 测试SSHGithub：1$ssh -T git@github.com 码云：1$ssh -T git@git.oschina.net Coding:1$ssh -T git@coding.net 若返回则配置成功github:1234The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts. 码云：Welcome to Git@OSC, yourname!Coding：Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]那么配置好，我们就可以把Hexo部署到Git上了1$hexo deploy Hexo之Next Hexo有很多主题，有大道至简的maupassant 也有casper还有uno。但是我还是最喜欢next的风格。 安装Next安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 还有一种方法是下载稳定版本 前往Next版本发布页面 一直下拉找到Source code(zip)点击即可下载 之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为next。 启用Next 你需要打开你的站点目录找到_config.yml这个文件，记住不是themes下next中的_config.yml。 我们需要在站点文件_config.yml中ctrl+F打入theme字段，并将其值改为next：1theme:next 验证主题是否生成完成首先我们要右击你的站点然后选择Git Bash Here，并开启调试模式。1$ hexo s --debug 命令行出现：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 那么我们就可以在网址上输入http://0.0.0.0:4000去查看效果，检查站点是否正确运行。 Next各种细节主题设定Scheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。 Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新Scheme 的切换通过更改 主题配置文件（theme/next下的_config.yml），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。123#scheme: Muse#scheme: Mistscheme: Pisces 还有更多的小东西大家可以去Next官方文档看。比如说 菜单， 侧栏， 头像， 作者昵称， 站点描述， 第三方服务等。 Next中foot更改我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。我们需要打开next下的layout接着打开_partials下的footer.swig。然后我们要把其中红框里的删除。紧接着我们回到next下，找到languages，打开zh-Hans.yml。我们可以改成如下：123footer: powered: &quot;个人专属 &quot; theme: Adherent 看大家的想法自己随意发挥！好啦，我要去研究SEO了！！祝大家建博成功]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Node.js+hexo部署博客]]></title>
      <url>%2F2017%2F03%2F20%2FNode.js%2Bhexo%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[初衷想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。Node.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装Node下载安装Node注意事项Node.js根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。 环境配置各种都要配置环境，Node也不例外。如果你的文件路径为D:\node也就是你Node.exe所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量在Path项中加入D:\node这个路径。之后我们win+R打入cmd命令行去执行npm命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。 配置国内镜像在国内可以用淘宝NPM镜像，这样各种安装和使用npm快很多而且还可以代替npm。你只要运行下面的命令1npm install -g cnpm --registry=https://registry.npm.taobao.org 同样测试有没有安装好，这次打cnpm就行拉，结果显示与上述相同。那么以后我们只要执行跟npm的命令时我们只要把npm替换成cnpm就行了！ 安装Git下载Git程序包作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。 windows下安装Git SCM Mac下安装GitSCM Linux and Unix下安装GitSCM 附上git使用简易指南 环境配置同样Git也需要环境配置，与Node配置一致。你Git的路径C:\Git\bin那么在Path中就可以这样写C:\Git\bin。下面要进入重点了！ 安装HexoHexo中文文档，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。1$ npm install -g hexo-cli 有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了淘宝NPM镜像我们直接使用以下命令：1$ cnpm install -g hexo-cli Windows Mac Linux Unix系统编译时遇到的问题则可以去Hexo中文文档里面寻找解决办法。 使用Hexo建站Hexo建站后产生的文件如下：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。 创建站点找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。1$ hexo init site 然后我们再右键site文件夹执行以下命令：1$ hexo generate 这时，我们点开site会发现里面有个public的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。 自动化部署Hexo自动Git部署需要安装hexo-deployer-git，执行下列命令1cnpm install hexo-deployer-git --save 然后修改系统配置文件_config.yml（不是themes子目录下的主题配置文件）。修改deploy这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。注意缩进，yml中使用缩进表示从属关系，用-表示一个序列（可以同时部署到多个仓库）。这里减号后有一个空格。以我的项目为例，配置内容如下：1234deploy:- type: git repo: git@git.coding.net:Adherent/Adherent.git branch: coding-pages type值不用修改，因为这里使用的是git的pages服务，类型就是git。repo为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考生成并部署SSH key。branch为开启pages服务的分支名称。一般的，码云为osc-pages，Coding为coding-pages，GitHub为gh-pages。配置好部署信息后，即可用Hexo把静态页面部署到git上了。1hexo deploy 部署完成后，通过域名，应该就能访问到这些页面了。 部署SSH key则可以看我的部署SSH key的文章 Pages服务的选择都说做编程必须有GitHub而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的码云或者Coding以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用Coding。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启以我的网站为例，项目地址为https://coding.net/u/Adherent/p/Adherent/git，开启pages服务的分支名称为coding-pages。项目初始化时并没有codingc-pages分支，可以等Hexo部署静态文件后再开启pages服务。 添加新文章博客建成，那么我们就可以写自己的博文了！执行下列命令：1$ hexo n 文章题目 以上命令就可以在source/_posts/目录中生成一个文件名为文章题目后缀名为.md`的文件。剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见Markdown 语法说明 (简体中文版)我推荐一款Cmd Markdown个人感觉用的还是很舒服的。这是Cmd Markdown的简明语法手册。然后执行以下命令即可生成新的页面，部署到git。1hexo g -d 同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。123git add *git commit -m &quot;新的文章&quot;git push 到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考文档|Hexo即可。 参考文章 淘宝NPM镜像 git使用简易指南 文档|Hexo Cmd Markdown 启蒙`]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello, World!]]></title>
      <url>%2F2017%2F03%2F19%2FHello%20World%2F</url>
      <content type="text"><![CDATA[Hello World Hello World 第一篇就和大家打个招呼！ 多种语言的Hello World C 123456#include &lt;stdio.h&gt;int main()&#123; printf("Hello, World"); return 0;&#125; Java 12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println("Hello World!"); &#125;&#125; Javascript 1console.log("Hello, World!"); Python 1print("Hello, World!") PHP 1echo 'Hello,World!'; Go 12345package mainimport "fmt"func main()&#123; fmt.Print("Hello, World!");&#125; setTimeout(function(){ console.log("I Love Mu"); alert("Hello, World!"); }, 5000);]]></content>
    </entry>

    
  
  
</search>
