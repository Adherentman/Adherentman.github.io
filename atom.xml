<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>壮壮-Technology</title>
  
  <subtitle>宠辱不惊，闲看庭前花落花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzihao.fun/"/>
  <updated>2018-05-01T12:24:43.365Z</updated>
  <id>http://xuzihao.fun/</id>
  
  <author>
    <name>XuZiHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微微学习Docker</title>
    <link href="http://xuzihao.fun/%E5%BE%AE%E5%BE%AE%E5%AD%A6%E4%B9%A0%20Docker.html"/>
    <id>http://xuzihao.fun/微微学习 Docker.html</id>
    <published>2018-05-01T12:24:00.000Z</published>
    <updated>2018-05-01T12:24:43.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微微学习-Docker"><a href="#微微学习-Docker" class="headerlink" title="微微学习 Docker"></a>微微学习 Docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">跑镜像</span><br><span class="line">docker run -it imageName bash</span><br><span class="line"></span><br><span class="line">创建一个容器，但不启动</span><br><span class="line">docker create</span><br><span class="line"></span><br><span class="line">改镜像名</span><br><span class="line">docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0</span><br><span class="line"></span><br><span class="line">commit容器</span><br><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Docker-file"><a href="#Docker-file" class="headerlink" title="Docker file"></a>Docker file</h2><ul><li>FROM  拉镜像</li><li>MAINTAINER  指定创建镜像的用户</li><li>RUN  在当前镜像基础上执行指定命令，并提交为新的镜像</li><li>CMD  启动容器时提供一个默认的命令执行选项</li><li>EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。</li><li>ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留</li><li>ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中</li><li>COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS</li><li>ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。</li><li>VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点</li><li>USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户</li><li>WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。</li><li>ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微微学习-Docker&quot;&gt;&lt;a href=&quot;#微微学习-Docker&quot; class=&quot;headerlink&quot; title=&quot;微微学习 Docker&quot;&gt;&lt;/a&gt;微微学习 Docker&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;跑镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -it imageName bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建一个容器，但不启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改镜像名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://xuzihao.fun/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xuzihao.fun/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>配置阿里云服务器之Docker服务</title>
    <link href="http://xuzihao.fun/%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8BDocker%E6%9C%8D%E5%8A%A1.html"/>
    <id>http://xuzihao.fun/配置阿里云服务器之Docker服务.html</id>
    <published>2018-04-30T04:00:00.000Z</published>
    <updated>2018-04-30T03:59:31.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置阿里云服务器之Docker服务"><a href="#配置阿里云服务器之Docker服务" class="headerlink" title="配置阿里云服务器之Docker服务"></a>配置阿里云服务器之Docker服务</h1><p>阿里云搜索容器镜像服务。<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">网址地址</a></p><p>具体操作看别人的博文:<a href="https://yq.aliyun.com/articles/70756" target="_blank" rel="noopener">博文地址</a><br>下面讲一点使用docker注意事项和上传至阿里云<br><a id="more"></a></p><h2 id="保存容器"><a href="#保存容器" class="headerlink" title="保存容器"></a>保存容器</h2><p>我们进到容器里一顿<code>apt update &amp;&amp; apt install 巴拉巴拉</code><br>但是只要<code>exit</code>一<code>pull</code>就发现所有做的都没了。<br>原来我是没<code>commit</code><br>命令如下：<br><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p><p>OPTIONS:</p><ul><li>–author , -a 作者</li><li>–change , -c 将Docker file指令应用于创建的映像</li><li>–message , -m 提交信息</li><li>–pause , -p 在提交期间暂停容器<h2 id="因为我得是私有镜像仓库可能会有以下情况："><a href="#因为我得是私有镜像仓库可能会有以下情况：" class="headerlink" title="因为我得是私有镜像仓库可能会有以下情况："></a>因为我得是私有镜像仓库可能会有以下情况：</h2><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png" alt="docker-push"><br>如果出现这种情况那么我们可以直接pull该镜像即可</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置阿里云服务器之Docker服务&quot;&gt;&lt;a href=&quot;#配置阿里云服务器之Docker服务&quot; class=&quot;headerlink&quot; title=&quot;配置阿里云服务器之Docker服务&quot;&gt;&lt;/a&gt;配置阿里云服务器之Docker服务&lt;/h1&gt;&lt;p&gt;阿里云搜索容器镜像服务。&lt;a href=&quot;https://cr.console.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网址地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体操作看别人的博文:&lt;a href=&quot;https://yq.aliyun.com/articles/70756&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文地址&lt;/a&gt;&lt;br&gt;下面讲一点使用docker注意事项和上传至阿里云&lt;br&gt;
    
    </summary>
    
      <category term="阿里云服务的使用" scheme="http://xuzihao.fun/categories/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="docker" scheme="http://xuzihao.fun/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Typescript配置采坑之路</title>
    <link href="http://xuzihao.fun/Typescript%E9%85%8D%E7%BD%AE%E9%87%87%E5%9D%91%E4%B9%8B%E8%B7%AF.html"/>
    <id>http://xuzihao.fun/Typescript配置采坑之路.html</id>
    <published>2018-04-27T16:03:52.000Z</published>
    <updated>2018-04-28T07:45:55.243Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png" alt=""></p><blockquote><p>这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8</p></blockquote><a id="more"></a><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png" alt=""></p><blockquote><p>tsconfig文件加这条：    “module”: “commonjs”, </p></blockquote><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png" alt=""></p><blockquote><p>tsconfig文件加这条：    “lib”: [“es2015”]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Typescript" scheme="http://xuzihao.fun/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="http://xuzihao.fun/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4配置指南！Up！</title>
    <link href="http://xuzihao.fun/Webpack4%E9%85%8D%E7%BD%AE.html"/>
    <id>http://xuzihao.fun/Webpack4配置.html</id>
    <published>2018-04-23T08:02:00.000Z</published>
    <updated>2018-04-21T11:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir simpleFE &amp;&amp; <span class="built_in">cd</span> simpleFE</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">or</span><br><span class="line">mkdir simpleFE &amp;&amp; <span class="built_in">cd</span> simpleFE</span><br><span class="line">yarn init -y</span><br><span class="line">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>不要问为什么装了<code>webpack</code> 还要装<code>webpack-cli</code>。。因为你不装就报错。。官方提示还让你去装。。</p><hr><a id="more"></a><h2 id="配置Sass"><a href="#配置Sass" class="headerlink" title="配置Sass"></a>配置Sass</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader node-sass sass-loader style-loader --save-dev</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">yarn add css-loader node-sass sass-loader style-loader -D</span><br></pre></td></tr></table></figure><p> 配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取css文件成单独的文件</span></span><br><span class="line"><span class="keyword">const</span> extractSass = <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">  filename: <span class="string">"styles/[name].[hash].css"</span>,</span><br><span class="line">  disable: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: extractSass.extract(&#123;</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">"css-loader"</span>, <span class="comment">// 将CSS翻译成CommonJS</span></span><br><span class="line">              options: &#123;</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// 会导致速度变慢</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">"sass-loader"</span>, <span class="comment">// 将Sass编译成CSS</span></span><br><span class="line">              options: &#123;</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// 会导致速度变慢</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="comment">// 在dev环境下配置这条</span></span><br><span class="line">          fallback: <span class="string">"style-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [extractSass]</span><br></pre></td></tr></table></figure><p>安装<code>extract-text-webpack-plugin</code>这是为了把css呀这些文件单独打包成一个</p><p>但是会遇到报错：</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png" alt="extract-text-webpack-plugin"></p><p>然后我们去<code>package.json</code>会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。</p><p><code>yarn add extract-text-webpack-plugin@next -D</code></p><h1 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h1><p><a href="https://webpack.js.org/plugins/commons-chunk-plugin" target="_blank" rel="noopener"><code>CommonsChunkPlugin</code></a>已被移除。。被 <strong>SplitChunksPlugin</strong> 和 <strong>runtimeChunk</strong> 替代了。</p><p>CommonsChunkPlugin存在很多问题：</p><ul><li>它可能导致更多的代码被下载</li><li>它在异步块上效率低下。</li><li>很难用</li><li>实施难以理解</li></ul><p>SplitChunksPlugin很棒的地方：</p><ul><li>它对异步块也有效</li><li>它在默认情况下用于异步块</li><li>它处理vendor并拆分多个verdor块</li><li>它更容易使用</li><li>它不依赖chunk块</li><li>大部分是自动的</li></ul><p>我们只要把原有的<code>new webpack.optimize.CommonsChunkPlugin(options)</code>删了。加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">"async"</span>,</span><br><span class="line">    minSize: <span class="number">30000</span>,</span><br><span class="line">    minChunks: <span class="number">1</span>,</span><br><span class="line">    maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">    maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">    automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">    name: <span class="literal">true</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">            test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">            priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">            minChunks: <span class="number">2</span>,</span><br><span class="line">            priority: <span class="number">-20</span>,</span><br><span class="line">            reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir simpleFE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; simpleFE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install webpack webpack-cli --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir simpleFE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; simpleFE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add webpack webpack-cli -D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要问为什么装了&lt;code&gt;webpack&lt;/code&gt; 还要装&lt;code&gt;webpack-cli&lt;/code&gt;。。因为你不装就报错。。官方提示还让你去装。。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Webpack" scheme="http://xuzihao.fun/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://xuzihao.fun/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>事件处理</title>
    <link href="http://xuzihao.fun/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.html"/>
    <id>http://xuzihao.fun/事件处理.html</id>
    <published>2018-04-18T14:39:15.250Z</published>
    <updated>2018-04-19T13:31:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>事件简要分析：</p><ul><li>事件类型<ul><li>“load”..etc..</li></ul></li><li>事件目标<ul><li>各种load、load事件</li></ul></li><li>事件处理程序</li><li>事件对象</li><li>事件传播</li></ul><a id="more"></a><h1 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h1><ul><li><code>addEventListener()</code></li><li>IE9 之前: <code>attachEvent()</code></li></ul><p>按照约定，事件处理程序属性的名字由”on”后面跟着时间名组成：<code>onclick</code>、<code>onchange</code>、<code>onload</code>、<code>onmouseover</code>.并且所有都是小写。</p><p>但是在 <code>addEventListener()</code> 中第一个参数却是不用带<code>on</code>的，<code>attachEvent()</code> 却要加的。</p><p><a href="https://codepan.net/gist/500a52945c31109d769f0fa4a6bc9cf5" target="_blank" rel="noopener">Demo</a></p><h1 id="事件调用顺序"><a href="#事件调用顺序" class="headerlink" title="事件调用顺序"></a>事件调用顺序</h1><ul><li>通过设置对象属性或者HTML属性注册的处理程序一直优先调用</li><li>使用<code>addEventListener()</code> 注册的处理程序按照它们的注册顺序调用</li><li>使用 <code>attachEvent()</code> 注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事件简要分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件类型&lt;ul&gt;
&lt;li&gt;“load”..etc..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件目标&lt;ul&gt;
&lt;li&gt;各种load、load事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事件处理程序&lt;/li&gt;
&lt;li&gt;事件对象&lt;/li&gt;
&lt;li&gt;事件传播&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://xuzihao.fun/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Contenteditable与变成输入普通文本</title>
    <link href="http://xuzihao.fun/contenteditable.html"/>
    <id>http://xuzihao.fun/contenteditable.html</id>
    <published>2018-04-15T11:36:26.000Z</published>
    <updated>2018-04-17T15:44:56.767Z</updated>
    
    <content type="html"><![CDATA[<p>我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫<code>contenteditable</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>&gt;</span>我是个富文本哟！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很简单这就是一个富文本啦！</p><a id="more"></a><p>经过百度一番，看见张鑫旭大神的很久以前的文章。为了实现普通输入文本我们只能借助css啦！</p><p><strong>user-modify</strong></p><ul><li>user-modify: read-only;<ul><li>只能看</li></ul></li><li>user-modify: read-write;<ul><li>支持富文本</li></ul></li><li><del>user-modify: write-only;</del><ul><li>无所谓的东西</li></ul></li><li>user-modify: read-write-plaintext-only;<ul><li>纯文本</li></ul></li></ul><p>OK~~问题解决啦。那就是只要给那个元素设个css</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">"user-modify:read-write-plaintext-only"</span>&gt;</span></span><br><span class="line">    我是纯文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/" target="_blank" rel="noopener">张鑫旭大神博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫&lt;code&gt;contenteditable&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;contenteditable&lt;/span&gt;&amp;gt;&lt;/span&gt;我是个富文本哟！&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很简单这就是一个富文本啦！&lt;/p&gt;
    
    </summary>
    
      <category term="Html" scheme="http://xuzihao.fun/categories/Html/"/>
    
    
      <category term="Html" scheme="http://xuzihao.fun/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式js和ts实现</title>
    <link href="http://xuzihao.fun/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xuzihao.fun/设计模式之工厂模式.html</id>
    <published>2018-04-12T13:21:15.484Z</published>
    <updated>2018-04-12T14:36:45.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>简单来说就是：由一个对象决定创建某一种产品对象类的实例。</p><p>Js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name, price, type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    a.name = name;</span><br><span class="line">    a.price = price;</span><br><span class="line">    a.type = type;</span><br><span class="line">    </span><br><span class="line">    a.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    a.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.price);</span><br><span class="line">    &#125;</span><br><span class="line">    a.getType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = Book(<span class="string">"Js"</span>, <span class="number">14</span>, <span class="string">"语言书籍"</span>);</span><br><span class="line">b.getName();</span><br></pre></td></tr></table></figure><a id="more"></a><p>Ts:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> BookType&#123;</span><br><span class="line">    Js,</span><br><span class="line">    Ts,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> BookAction&#123;</span><br><span class="line">    read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Book <span class="keyword">implements</span> BookAction&#123; <span class="comment">// 抽象产品 - 书</span></span><br><span class="line">    <span class="keyword">abstract</span> read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> JSbook <span class="keyword">extends</span> Book&#123; <span class="comment">//具体产品 - Jsbook</span></span><br><span class="line">    read()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'js book.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Tsbook <span class="keyword">extends</span> Book&#123; <span class="comment">//具体产品 - Tsbook</span></span><br><span class="line">    read()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ts book.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BookFactory&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> createBook(<span class="keyword">type</span>: BookType): Book&#123;</span><br><span class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> BookType.Js:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JSbook();</span><br><span class="line">            <span class="keyword">case</span> BookType.Ts:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tsbook();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'not support book'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BookFactory.createBook(BookType.Js).read();</span><br><span class="line">BookFactory.createBook(BookType.Ts).read();</span><br></pre></td></tr></table></figure><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p><p>JS:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Factory = <span class="function"><span class="keyword">function</span>(<span class="params">type, content</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="keyword">new</span> Factory(type, content)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factory.prototype = &#123;</span><br><span class="line">    Book: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.content)</span><br><span class="line">&#125;,</span><br><span class="line">    Note: <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Factory(<span class="string">'Book'</span>, <span class="string">'Hello, i\'m a book'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot; title=&quot;简单工厂&quot;&gt;&lt;/a&gt;简单工厂&lt;/h1&gt;&lt;p&gt;简单来说就是：由一个对象决定创建某一种产品对象类的实例。&lt;/p&gt;
&lt;p&gt;Js:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Book&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, price, type&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.price = price;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.type = type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.getPrice = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a.getType = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = Book(&lt;span class=&quot;string&quot;&gt;&quot;Js&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;语言书籍&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b.getName();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://xuzihao.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://xuzihao.fun/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>React新生命周期</title>
    <link href="http://xuzihao.fun/React%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>http://xuzihao.fun/React新生命周期.html</id>
    <published>2018-04-10T12:39:26.000Z</published>
    <updated>2018-04-11T13:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React16-3-1"><a href="#React16-3-1" class="headerlink" title="React16.3.1"></a>React16.3.1</h1><p>React发生了重大的变化。并且更新了新的生命周期我们来了解一下。</p><p>献上一个图！</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p><blockquote><p>地址：<a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React新生命周期图</a></p></blockquote><a id="more"></a><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="Mounting-挂载"><a href="#Mounting-挂载" class="headerlink" title="Mounting/挂载"></a>Mounting/挂载</h2><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>UNSAFE_componentWillMount()</li><li>render()</li><li>componentDidMount()</li></ul><h2 id="Updating-更新"><a href="#Updating-更新" class="headerlink" title="Updating/更新"></a>Updating/更新</h2><ul><li>UNSAFE_componentWillReceiveProps()</li><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate(prevProps, prevState)</li><li>UNSAFE_componentWillUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate(prevProps, prevState, snapshot)</li></ul><h2 id="Unmounting-卸载"><a href="#Unmounting-卸载" class="headerlink" title="Unmounting/卸载"></a>Unmounting/卸载</h2><ul><li>componentWillUnmount()</li></ul><h1 id="Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate"><a href="#Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate" class="headerlink" title="Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:"></a>Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:</h1><p>链接： <a href="https://codesandbox.io/s/2xv69l269j" target="_blank" rel="noopener">小demo，了解一下</a></p><p>componentDidUpdate是个做网络请求的好地方。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;styles&#125;&gt;</span><br><span class="line">    &lt;Hello name=<span class="string">"CodeSandbox"</span> /&gt;</span><br><span class="line">    &lt;h2&gt;Start editing to see some magic happen &#123;<span class="string">"\u2728"</span>&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;B /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">class B extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  state = &#123;</span></span><br><span class="line"><span class="regexp">    myParentValue: ""</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.setState(&#123; myParentValue: "XuZiHao" &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;, 1000);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;C foo=&#123;this.state.myParentValue&#125; /</span>&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    foo: <span class="string">""</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.foo === <span class="string">"XuZiHao"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        foo: <span class="string">"bar"</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.foo === <span class="string">"bar"</span>) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">foo</span>: <span class="string">"Hello!!!!"</span> &#125;);</span><br><span class="line">      &#125;, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Value of `foo` is &#123;this.state.foo&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><h1 id="Demo-shouldComponentUpdate-prevProps-prevState"><a href="#Demo-shouldComponentUpdate-prevProps-prevState" class="headerlink" title="Demo-shouldComponentUpdate(prevProps, prevState)"></a>Demo-shouldComponentUpdate(prevProps, prevState)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      <span class="built_in">Number</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//这里调用了setState但是并没有改变setState中的值</span></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> preNumber = <span class="keyword">this</span>.state.Number</span><br><span class="line">     <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        <span class="built_in">Number</span>:<span class="keyword">this</span>.state.Number</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用</span></span><br><span class="line">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class="line">      <span class="keyword">if</span>(nextState.Number == <span class="keyword">this</span>.state.Number)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="comment">//当render函数被调用时，打印当前的Number</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.Number)</span><br><span class="line">    <span class="keyword">return</span>(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span> <span class="attr">style</span> =<span class="string">&#123;&#123;margin:30&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">             &#123;this.state.Number&#125;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Demo-getSnapshotBeforeUpdate"><a href="#Demo-getSnapshotBeforeUpdate" class="headerlink" title="Demo-getSnapshotBeforeUpdate()"></a>Demo-getSnapshotBeforeUpdate()</h1><p>官方例子：</p><blockquote><p><a href="https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate" target="_blank" rel="noopener">官网地址</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  listRef = React.createRef();</span><br><span class="line"></span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="comment">// 是否将新项目添加到列表中？</span></span><br><span class="line">    <span class="comment">// 捕获列表的当前高度，以便稍后调整滚动。</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.listRef.current.scrollHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="comment">// 如果我们有快照值，我们刚刚添加了新items</span></span><br><span class="line">    <span class="comment">// 调整滚动条，以便这些新items不会将旧的推出视图。</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.listRef.current.scrollTop +=</span><br><span class="line">        <span class="keyword">this</span>.listRef.current.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.listRef&#125;&gt;&#123;<span class="comment">/* ...contents... */</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React16-3-1&quot;&gt;&lt;a href=&quot;#React16-3-1&quot; class=&quot;headerlink&quot; title=&quot;React16.3.1&quot;&gt;&lt;/a&gt;React16.3.1&lt;/h1&gt;&lt;p&gt;React发生了重大的变化。并且更新了新的生命周期我们来了解一下。&lt;/p&gt;
&lt;p&gt;献上一个图！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;地址：&lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React新生命周期图&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="http://xuzihao.fun/categories/React/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>RegExp正则表达式</title>
    <link href="http://xuzihao.fun/RegExp.html"/>
    <id>http://xuzihao.fun/RegExp.html</id>
    <published>2018-04-06T13:44:57.528Z</published>
    <updated>2018-04-01T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="仨标志"><a href="#仨标志" class="headerlink" title="仨标志"></a>仨标志</h2><ul><li>g<ul><li>全局查</li></ul></li><li>i<ul><li>忽略大小写</li></ul></li><li>m<ul><li>多行查</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="regexp">/at/i</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="regexp">/.at/gi</span>;</span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;仨标志&quot;&gt;&lt;a href=&quot;#仨标志&quot; class=&quot;headerlink&quot; title=&quot;仨标志&quot;&gt;&lt;/a&gt;仨标志&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;g&lt;ul&gt;
&lt;li&gt;全局查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i&lt;ul&gt;
&lt;li&gt;忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;m&lt;ul&gt;
&lt;li&gt;多行查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;regexp&quot;&gt;/a/g&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;regexp&quot;&gt;/at/i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;regexp&quot;&gt;/.at/gi&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《高性能JavaScript》读书笔记</title>
    <link href="http://xuzihao.fun/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://xuzihao.fun/《高性能JavaScript》读书笔记.html</id>
    <published>2018-04-02T06:39:00.000Z</published>
    <updated>2018-04-02T06:55:27.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p><code>&lt;script&gt;</code>方面的我写了一篇博文链接地址：<a href="http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html">浅谈script标签</a></p><h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2><p>数据存储：</p><ol><li>把数据存在访问字面量和局部变量是然后去访问速度最快的。</li><li>全局变量总是在作用域的最末端所以访问速度也是最慢的。</li><li>对象的深度嵌套拿值会影响性能。</li></ol><a id="more"></a><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">var</span> getClass = documnent.getElementsByClassName(<span class="string">"class"</span>);</span><br><span class="line">    getId.style.width......</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//after</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> doc = <span class="built_in">document</span>;</span><br><span class="line">        <span class="keyword">var</span> getId = doc.getElementById(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">var</span> getClass = doc.getElementsByClassName(<span class="string">"class"</span>);</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First&quot;&gt;&lt;a href=&quot;#First&quot; class=&quot;headerlink&quot; title=&quot;First&quot;&gt;&lt;/a&gt;First&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;方面的我写了一篇博文链接地址：&lt;a href=&quot;http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html&quot;&gt;浅谈script标签&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Second&quot;&gt;&lt;a href=&quot;#Second&quot; class=&quot;headerlink&quot; title=&quot;Second&quot;&gt;&lt;/a&gt;Second&lt;/h2&gt;&lt;p&gt;数据存储：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把数据存在访问字面量和局部变量是然后去访问速度最快的。&lt;/li&gt;
&lt;li&gt;全局变量总是在作用域的最末端所以访问速度也是最慢的。&lt;/li&gt;
&lt;li&gt;对象的深度嵌套拿值会影响性能。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局</title>
    <link href="http://xuzihao.fun/CSS%E5%B8%83%E5%B1%80.html"/>
    <id>http://xuzihao.fun/CSS布局.html</id>
    <published>2018-04-01T06:50:00.000Z</published>
    <updated>2018-04-01T07:28:26.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两栏——左固定右自适应布局"><a href="#两栏——左固定右自适应布局" class="headerlink" title="两栏——左固定右自适应布局"></a>两栏——左固定右自适应布局</h2><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// css </span><br><span class="line">.left &#123;</span><br><span class="line">  width: 40px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background: red;</span><br><span class="line">  float: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right &#123;</span><br><span class="line">  height: 200px;</span><br><span class="line">  margin-left: 40px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561" target="_blank" rel="noopener">Demo</a></p><a id="more"></a><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//css</span><br><span class="line">.left &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  height: 200px;</span><br><span class="line">  width: 40px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  height: 200px;</span><br><span class="line">  margin-left: 40px;</span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两栏——左固定右自适应布局&quot;&gt;&lt;a href=&quot;#两栏——左固定右自适应布局&quot; class=&quot;headerlink&quot; title=&quot;两栏——左固定右自适应布局&quot;&gt;&lt;/a&gt;两栏——左固定右自适应布局&lt;/h2&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// css &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.left &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  width: 40px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  float: left&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.right &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  margin-left: 40px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  background: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>React-Saga笔记</title>
    <link href="http://xuzihao.fun/ReduxSaga.html"/>
    <id>http://xuzihao.fun/ReduxSaga.html</id>
    <published>2018-03-31T14:55:00.000Z</published>
    <updated>2018-04-01T06:20:41.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><h3 id="takeEvery"><a href="#takeEvery" class="headerlink" title="takeEvery:"></a>takeEvery:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">watchFetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* takeEvery(<span class="string">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许多个<code>fetchData</code>同时进行，即使上一个还没执行完成。<br><a id="more"></a></p><h3 id="takeLatest："><a href="#takeLatest：" class="headerlink" title="takeLatest："></a>takeLatest：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">watchFetchData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* takeLatest(<span class="string">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>始终执行最新的那个请求的响应。</p><p>总结一下就是：</p><p>我们疯狂点击一个按钮，它触发也疯狂触发了多次<code>fetchData</code>。</p><p>如果我们是<code>takeEvery</code>那将你点击几次他执行几次<code>fetchData</code>。</p><p>如果我们是<code>takeLatest</code>那将只执行你最后点击的那一次<code>fetchData</code>。</p><p>##Effect</p><p>从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 <em>Effect</em>。</p><p>可以使用 <code>redux-saga/effects</code> 包里<strong>提供的函数</strong>来创建 Effect。</p><h3 id="call："><a href="#call：" class="headerlink" title="call："></a>call：</h3><p><code>call(fn, ...args)</code> 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息</p><p>简单来说，call就是redux里的Action Creator。 </p><p>###put：</p><p>这个函数用于创建 dispatch Effect。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchProducts</span>(<span class="params">dispatch</span>)</span></span><br><span class="line"><span class="function">  <span class="title">const</span> <span class="title">products</span> = <span class="title">yield</span> <span class="title">call</span>(<span class="params">Api.fetch, <span class="string">'/products'</span></span>)</span></span><br><span class="line"><span class="function">  <span class="title">dispatch</span>(<span class="params">&#123; type: <span class="string">'PRODUCTS_RECEIVED'</span>, products &#125;</span>)</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//<span class="title">after</span></span></span><br><span class="line"><span class="function"><span class="title">import</span> </span>&#123; call, put &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchProducts</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> products = <span class="keyword">yield</span> call(Api.fetch, <span class="string">'/products'</span>)</span><br><span class="line">  <span class="comment">// 创建并 yield 一个 dispatch Effect</span></span><br><span class="line">  <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'PRODUCTS_RECEIVED'</span>, products &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="take："><a href="#take：" class="headerlink" title="take："></a>take：</h3><p>它将会暂停 Generator 直到一个匹配的 action 被发起。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">loginFlow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> take(<span class="string">'LOGIN'</span>)</span><br><span class="line">    <span class="comment">// ... perform the login logic</span></span><br><span class="line">    <span class="keyword">yield</span> take(<span class="string">'LOGOUT'</span>)</span><br><span class="line">    <span class="comment">// ... perform the logout logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们可以用<code>take</code>去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监听&quot;&gt;&lt;a href=&quot;#监听&quot; class=&quot;headerlink&quot; title=&quot;监听&quot;&gt;&lt;/a&gt;监听&lt;/h2&gt;&lt;h3 id=&quot;takeEvery&quot;&gt;&lt;a href=&quot;#takeEvery&quot; class=&quot;headerlink&quot; title=&quot;takeEvery:&quot;&gt;&lt;/a&gt;takeEvery:&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;watchFetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;* takeEvery(&lt;span class=&quot;string&quot;&gt;&#39;FETCH_REQUESTED&#39;&lt;/span&gt;, fetchData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;允许多个&lt;code&gt;fetchData&lt;/code&gt;同时进行，即使上一个还没执行完成。&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://xuzihao.fun/categories/React/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative热更新之微软CodePush</title>
    <link href="http://xuzihao.fun/ReactNativeCodePush.html"/>
    <id>http://xuzihao.fun/ReactNativeCodePush.html</id>
    <published>2018-03-28T14:10:23.015Z</published>
    <updated>2018-03-28T14:16:55.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软-CodePush-使用"><a href="#微软-CodePush-使用" class="headerlink" title="微软 CodePush 使用"></a>微软 CodePush 使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn global add code-push-cli</code></p><h2 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h2><p><code>code-push register</code></p><p>会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。</p><a id="more"></a><h2 id="CodePush-登录相关命令"><a href="#CodePush-登录相关命令" class="headerlink" title="CodePush 登录相关命令"></a>CodePush 登录相关命令</h2><ul><li>code-push login 登陆</li><li>code-push logout 注销</li><li>code-push access-key ls 列出登陆的 token</li><li>code-push access-key rm 删除某个 access-key</li></ul><h2 id="CodePush-创建-App-相关命令"><a href="#CodePush-创建-App-相关命令" class="headerlink" title="CodePush 创建 App 相关命令"></a>CodePush 创建 App 相关命令</h2><ul><li>code-push app add<ul><li>如: code-push app add yimutest-ios ios/android react-native</li></ul></li><li>code-push app add<ul><li>在账号里面添加一个新的 app</li></ul></li><li>code-push app remove<ul><li>rm 在账号里移除一个 app</li></ul></li><li>code-push app rename<ul><li>重命名一个存在 app</li></ul></li><li>code-push app list<ul><li>ls 列出账号下面的所有 app</li></ul></li><li>code-push app transfer<ul><li>把 app 的所有权转移到另外一个账号</li></ul></li></ul><h2 id="在项目中-加包"><a href="#在项目中-加包" class="headerlink" title="在项目中  加包"></a>在项目中  加包</h2><ol><li><code>yarn add react-native-code-push</code></li><li><code>react-native link</code></li></ol><p>之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里</p><p>Staging 为测试的 key，Production 为生产打包时用的 key。</p><p>如果忘了  则在终端下做查看:</p><p><code>code-push deployment ls 您的应用名 -k</code></p><h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</span><br><span class="line"><span class="keyword">const</span> codePushOptions = &#123; <span class="attr">checkFrequency</span>: codePush.CheckFrequency.MANUAL &#125;;</span><br><span class="line"></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">  codePush.sync(&#123;</span><br><span class="line">    updateDialog: <span class="literal">true</span>,</span><br><span class="line">    installMode: codePush.InstallMode.IMMEDIATE,</span><br><span class="line">    mandatoryInstallMode:codePush.InstallMode.IMMEDIATE,</span><br><span class="line">    <span class="comment">//deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试</span></span><br><span class="line">    deploymentKey: <span class="string">'xxxxxxx'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上其他的详细 API: <a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md" target="_blank" rel="noopener">详细配置</a></p><h2 id="发布新版本"><a href="#发布新版本" class="headerlink" title="发布新版本"></a>发布新版本</h2><blockquote><p><code>code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</code></p></blockquote><blockquote><p><code>code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description &quot;我也不知道要写啥&quot; --mandatory false</code></p></blockquote><ol><li><code>code-push app add aaa-ios ios react-native</code></li><li><code>yarn start-ios</code></li></ol><h3 id="Android-新版本发布"><a href="#Android-新版本发布" class="headerlink" title="Android 新版本发布"></a>Android 新版本发布</h3><p>修改 App.js 的 deploymentKey 为安卓的</p><ol><li><code>deploymentKey:&#39;android key&#39;</code></li><li><code>code-push release-react aaa-android android</code></li><li><code>yarn start-android</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微软-CodePush-使用&quot;&gt;&lt;a href=&quot;#微软-CodePush-使用&quot; class=&quot;headerlink&quot; title=&quot;微软 CodePush 使用&quot;&gt;&lt;/a&gt;微软 CodePush 使用&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;yarn global add code-push-cli&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;注册账户&quot;&gt;&lt;a href=&quot;#注册账户&quot; class=&quot;headerlink&quot; title=&quot;注册账户&quot;&gt;&lt;/a&gt;注册账户&lt;/h2&gt;&lt;p&gt;&lt;code&gt;code-push register&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://xuzihao.fun/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://xuzihao.fun/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Mac通过ssh连接ecs</title>
    <link href="http://xuzihao.fun/mac%E8%BF%9E%E6%8E%A5ssh.html"/>
    <id>http://xuzihao.fun/mac连接ssh.html</id>
    <published>2018-03-26T13:55:10.689Z</published>
    <updated>2018-03-26T14:09:56.265Z</updated>
    
    <content type="html"><![CDATA[<p>通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。</p><a id="more"></a><p>那不说多的直接进入正题。</p><p>起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png" alt=""></p><p>它居然说！！！</p><p>Timed out!!</p><p>这是Why！！</p><p>之后帮助中心走了一遭，发现原来我是安全组没配置。。</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png" alt=""></p><p>然后我们点击安全组配置。</p><p>之后进入重点！</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png" alt=""></p><p>我们在出和入都配置一样的设置。</p><p>然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云服务的使用" scheme="http://xuzihao.fun/categories/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Linux" scheme="http://xuzihao.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>同源与跨域资源共享</title>
    <link href="http://xuzihao.fun/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html"/>
    <id>http://xuzihao.fun/跨域资源共享.html</id>
    <published>2018-03-23T12:53:35.483Z</published>
    <updated>2018-03-26T13:53:48.550Z</updated>
    
    <content type="html"><![CDATA[<p>说到跨域，我们需要先说说什么是同源策略。</p><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>浏览器安全的基石是”同源政策”（<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="noopener">same-origin policy</a>）。</p><p>也就是说要满足以下条件：</p><blockquote><ol><li>协议相同</li><li>域名相同</li><li>端口相同</li></ol></blockquote><p>也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。</p><p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p><a id="more"></a><p>如果非同源，共有三种行为受到限制：</p><blockquote><ol><li>Cookie、LocalStorage 和 IndexDB 无法读取。</li><li>DOM 无法获得。</li><li>AJAX 请求不能发送。</li></ol></blockquote><p>同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。</p><p>但是有些的跨域请求是被允许的比如：</p><ul><li><code>&lt;script&gt;</code>标签</li><li><code>&lt;link&gt;</code>标签</li><li><code>&lt;img&gt;</code>标签</li><li><code>&lt;a&gt;</code>标签</li><li><code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>嵌入多媒体资源。</li><li><code>&lt;iframe&gt;</code>与<code>&lt;frame&gt;</code></li></ul><h2 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h2><p>那么为了解决这个问题，CORS横空出世！</p><p>IE8可以通过XDomainRequest对象支持CORS。</p><p>其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。</p><p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p><p>其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p><p>CORS分简单请求和非简单请求，满足以下条件就为简单请求：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">简单请求</a></p><h2 id="HTTP-响应首部字段"><a href="#HTTP-响应首部字段" class="headerlink" title="HTTP 响应首部字段"></a>HTTP 响应首部字段</h2><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>根据Reuqest请求头中的<em>Origin</em>来判断该请求的资源是否可以被共享。</p><h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p><h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><p>让服务器把允许浏览器访问的头放入白名单</p><p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p><h3 id="Access-Control-Allow-Credentials-1"><a href="#Access-Control-Allow-Credentials-1" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。</p><p>所以我们需要<strong>附带身份凭证的请求</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p><h2 id="HTTP请求首部字段"><a href="#HTTP请求首部字段" class="headerlink" title="HTTP请求首部字段"></a>HTTP请求首部字段</h2><p>用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p><ul><li>Origin</li><li>Access-Control-Request-Method</li><li>Access-Control-Request-Headers</li></ul><blockquote><p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">MDN-HTTP请求首部字段</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到跨域，我们需要先说说什么是同源策略。&lt;/p&gt;
&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;浏览器安全的基石是”同源政策”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;same-origin policy&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;也就是说要满足以下条件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的&lt;strong&gt;源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax与Fetch？</title>
    <link href="http://xuzihao.fun/Ajax%E4%B8%8EFetch.html"/>
    <id>http://xuzihao.fun/Ajax与Fetch.html</id>
    <published>2018-03-20T14:47:33.812Z</published>
    <updated>2018-03-21T14:14:33.291Z</updated>
    
    <content type="html"><![CDATA[<p>虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。<br><a id="more"></a><br>当我们发起一个请求时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = reqListener;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"yourfile.txt"</span>, <span class="literal">false</span>)</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>那么逐条解释，</p><p>XMLHttpRequest简称XHR。</p><p>在XHR的属性有<code>responseText</code>，也就是代码第2行中，它是作为<em>响应主体被返回的文本</em>，而且无论内容类型是什么，它们都会保存在该属性中。</p><hr><p>第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。</p><hr><p>第5行代码，看以下图：</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png" alt=""></p><p>我们会发现<code>onload</code>是XMLHttpRequestEventTarget的事件处理程序的接口。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onabort</a><ul><li>当请求失败时调用该方法</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onerror</a><ul><li>当请求发生错误时调用该方法</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onload</a><ul><li>当一个HTTP请求正确加载出内容后返回时调用。</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onloadstart</a><ul><li>当一个HTTP请求开始加载数据时调用。</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onprogress</a><ul><li>间歇调用该方法用来获取请求过程中的信息。</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout" target="_blank" rel="noopener">XMLHttpRequestEventTarget.ontimeout</a><ul><li>当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。</li></ul></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend" target="_blank" rel="noopener">XMLHttpRequestEventTarget.onloadend</a><ul><li>当内容加载完成，不管失败与否，都会调用该方法</li></ul></li></ul><blockquote><p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget" target="_blank" rel="noopener">MDN</a></p></blockquote><hr><p>第6行就都是XMLHttpRequest对象的<strong>方法</strong>。</p><ul><li>open(method, url, async, user, password)<ul><li>请求使用Http的方法，如method = ‘GET’ | ‘POST’ | ‘PUT’ | ‘DELET’</li><li>url就是url</li><li>async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。</li><li>user，password: 可选参数,为授权使用</li></ul></li><li>另外在我们<strong>接收到响应之前</strong>还可以调用abort()方法来取消异步请求。</li></ul><hr><p>当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。</p><p>最重要的是当<strong>readyState</strong>属性的值由一个值变为另一个值得时候，都会触发一次<strong>readystatechange</strong>事件。</p><p>那么<strong>readyState</strong>有哪些值呢？</p><ul><li>0，未初始化。还没调用open()方法</li><li>1，启动。已经调用了open()方法</li><li>2，发送。已经调用了send()方法</li><li>3，接受。已经接收到部分响应数据</li><li>4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。</li></ul><p>我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        balbalbal......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有<strong>response</strong>，<strong>responseText</strong>，<strong>responseType</strong>，<strong>responseXML</strong>，<strong>status</strong>，<strong>statusText</strong>，<strong>statusText</strong>，<strong>withCredentials</strong>属性。</p><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><h3 id="Fetch是什么？"><a href="#Fetch是什么？" class="headerlink" title="Fetch是什么？"></a>Fetch是什么？</h3><p>Fetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。</p><p>Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 <strong>CORS</strong>和HTTP的扩展。</p><p>请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：</p><ul><li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li><li>默认情况下, <code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">credentials</a> 选项）.</li></ul><blockquote><p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a></p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">    response.text().then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(text)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这是个很简单的Fetch的小例子。</p><p>.then…这不是和Promise好像吗？</p><p>没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用<code>.abort()</code>去中断请求。。</p><h3 id="自定义请求的参数"><a href="#自定义请求的参数" class="headerlink" title="自定义请求的参数"></a>自定义请求的参数</h3><p>那么，Fetch第二个参数我们可以传一个可以控制不同配置的 <code>init</code> 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInit = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>|<span class="string">'POST'</span>|<span class="string">'PUT'</span>|<span class="string">'DELETE'</span>,</span><br><span class="line">               headers: myHeaders,</span><br><span class="line">               mode: <span class="string">'cors'</span>,</span><br><span class="line">               cache: <span class="string">'default'</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li><li><code>cache</code>:  请求的 cache 模式: <code>default</code>、 <code>no-store 、</code> <code>reload 、</code> <code>no-cache 、</code> <code>force-cache</code>或者 <code>only-if-cached 。</code></li></ul><p>其他可以去参考MDN。</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>在Fetch下可以很方便的操作header：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">responen</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(responen.headers.get(<span class="string">'Content-Type'</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myHeaders = <span class="keyword">new</span> Header();</span><br><span class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</span><br><span class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    headers: myHeaders</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> header = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Type"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Length"</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！&lt;/p&gt;
&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈script标签</title>
    <link href="http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html"/>
    <id>http://xuzihao.fun/浅谈script标签.html</id>
    <published>2018-03-19T12:57:11.911Z</published>
    <updated>2018-04-01T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;script&gt;</code> ? 这不就是直接执行script脚本吗？</p><p>以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。</p><a id="more"></a><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><code>&lt;script&gt;</code>拥有7个属性，没想到吧！</p><ul><li><strong>async</strong><ul><li>boolean</li><li>异步执行该脚本，但不保证按照指定它们的先后顺序执行</li></ul></li><li><strong>defer</strong><ul><li>boolean</li><li>通知浏览器该脚本将在文档完成解析后遇到<code>&lt;/html&gt;</code>，并会按照它们出现的先后顺序执行。但会在触发 <code>DOMContentLoaded</code> 事件前执行。</li></ul></li><li><strong>integrity</strong><ul><li>包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据</li></ul></li><li><strong>src</strong></li><li><strong>type</strong></li><li><strong>text</strong></li><li><strong>crossorigin</strong><ul><li>使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错</li></ul></li></ul><blockquote><p>在XHTML文档中，要把async属性设置为 async = “async”, defer = “defer”</p></blockquote><p>知道了那几个属性接下来，来看看下面这个图：</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png" alt=""></p><ol><li>第一个光秃秃的<code>&lt;script&gt;</code>说明了，在<code>html</code>解析中，如果有<code>&lt;script&gt;</code>的话，<code>html</code>会在<code>Script</code>下载并且执行的时候，暂停解析。</li><li>第二个带<code>async</code>属性的<code>&lt;script&gt;</code>，如图所示，也就是他下载<code>Script</code>的时候是异步的，但是只要<code>Script</code>文件下好了，那么就马上执行。</li><li>第三个带<code>defer</code>属性的<code>&lt;script&gt;</code>，其实和上面带<code>async</code>属性一样都是异步执行去下载<code>Script</code>文件的。但是在这个带有<code>defer</code>的则是在<code>html</code>全部解析完毕之后才去执行<code>Script</code>文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 <code>defer</code> 是最接近我们对于应用脚本加载和执行的要求的</li></ol><h2 id="使用动态创建的-lt-script-gt-标签元素来下载并执行代码"><a href="#使用动态创建的-lt-script-gt-标签元素来下载并执行代码" class="headerlink" title="使用动态创建的&lt;script&gt;标签元素来下载并执行代码"></a>使用动态创建的<code>&lt;script&gt;</code>标签元素来下载并执行代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"file1.js"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><p>这个技术的重点在于：</p><p>无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。</p><p>参考：</p><blockquote><p>《高性能JavaScript》</p></blockquote><h2 id="使用XHR对象下载JS代码注入页面"><a href="#使用XHR对象下载JS代码注入页面" class="headerlink" title="使用XHR对象下载JS代码注入页面"></a>使用XHR对象下载JS代码注入页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(</span><br><span class="line"><span class="string">"e"</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//ie</span></span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>)&#123;</span><br><span class="line">                script.onreadystatechage = <span class="literal">null</span>;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">"the-rest.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Application.init()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script" target="_blank" rel="noopener">MDN</a></li><li><a href="https://segmentfault.com/a/1190000006778717" target="_blank" rel="noopener">SegmentFault</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; ? 这不就是直接执行script脚本吗？&lt;/p&gt;
&lt;p&gt;以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3外轮廓</title>
    <link href="http://xuzihao.fun/CSS%E5%A4%96%E8%BD%AE%E5%BB%93.html"/>
    <id>http://xuzihao.fun/CSS外轮廓.html</id>
    <published>2018-03-18T14:38:00.000Z</published>
    <updated>2018-03-19T13:21:36.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><p>看一个Outline的例子：<a href="https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61" target="_blank" rel="noopener">outline</a></p><p>在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用<code>outline</code>实现的外边框中border为<code>-</code>。</p><h2 id="outline和border对比"><a href="#outline和border对比" class="headerlink" title="outline和border对比"></a>outline和border对比</h2><ul><li>border属于盒模型的一部分，会直接影响盒子大小。</li><li>outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。</li><li>border创建是可以显示单边的，而outline是不行的。看demo：<a href="https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c" target="_blank" rel="noopener">单边</a></li><li>border只可以外轮廓，而outline可以借助<code>outline-offset</code>设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：<a href="https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4" target="_blank" rel="noopener">内轮廓</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;p&gt;看一个Outline的例子：&lt;a href=&quot;https://codepan.net/gist/7a
      
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session</title>
    <link href="http://xuzihao.fun/Cookie-Session.html"/>
    <id>http://xuzihao.fun/Cookie-Session.html</id>
    <published>2018-03-17T06:54:00.000Z</published>
    <updated>2018-03-17T07:43:26.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。</p><blockquote><p>摘自维基百科</p></blockquote><a id="more"></a><p>按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。</p><h3 id="为什么要有Cookie？"><a href="#为什么要有Cookie？" class="headerlink" title="为什么要有Cookie？"></a>为什么要有Cookie？</h3><p>因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。<strong>也就是说服务器会给客户端发送一段cookie</strong>.</p><p>LocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。</p><h2 id="Cookie和Session的关系"><a href="#Cookie和Session的关系" class="headerlink" title="Cookie和Session的关系"></a>Cookie和Session的关系</h2><p>这里我做了一个图<img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://xuzihao.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://xuzihao.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CSS3transform/transition</title>
    <link href="http://xuzihao.fun/CSS3transform.html"/>
    <id>http://xuzihao.fun/CSS3transform.html</id>
    <published>2018-03-15T13:52:00.000Z</published>
    <updated>2018-04-16T04:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-transform"><a href="#CSS3-transform" class="headerlink" title="CSS3 transform"></a>CSS3 transform</h1><p>先来了解下单位：</p><ul><li>度（deg）。一个圆360度</li></ul><p>Transform就指变换。</p><p>transform:</p><ul><li>矩阵  (matrix)<ul><li>用六个指定的值来指定一个均匀的二维（2D）变换矩阵</li></ul></li><li>转换（translate）</li><li>旋转（rotate）</li><li>缩放（scale）</li><li>倾斜（skew）</li></ul><a id="more"></a><p>但是还可以这样玩</p><blockquote><p>scaleX, scaleY</p><p>skewX, skewY</p><p>translateX, translateY</p><p>matrix3d</p><p><code>matrix(a, b, c, d, tx, ty)</code> 是 <code>matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)</code> 的简写</p></blockquote><ul><li><strong>transform-origin</strong><ul><li>以一个点去变形</li></ul></li><li><strong>transform-style</strong><ul><li>确定元素的子元素是否位于3D空间中，还是在该元素所在的平面内被扁平化。</li></ul></li></ul><h1 id="CSS-transition"><a href="#CSS-transition" class="headerlink" title="CSS transition"></a>CSS transition</h1><p><code>transition = &lt;transition-property&gt; | &lt;transition-duration&gt; | &lt;transition-delay&gt; | &lt;transition-timing-function&gt;</code></p><ul><li>Transition-property: 指定过渡的属性值。</li><li>Transition-duration: 指定这个过渡的持续时间</li><li>Transition-delay: 延迟过渡时间</li><li>Transition-timing-function: 指定过渡动画运行类型；<ul><li>ease    越来越慢</li><li>linear      匀速</li><li>ease-in    先慢后快</li><li>ease-out 先快后慢 </li><li>ease-in-out 先慢后快再慢</li><li>cubic-bezier()</li></ul></li></ul><p>先来看一个transform和transition结合的demo：<a href="https://codepan.net/gist/02e3a0857615ee407878f1b46663f950" target="_blank" rel="noopener">字体歪斜变正</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3-transform&quot;&gt;&lt;a href=&quot;#CSS3-transform&quot; class=&quot;headerlink&quot; title=&quot;CSS3 transform&quot;&gt;&lt;/a&gt;CSS3 transform&lt;/h1&gt;&lt;p&gt;先来了解下单位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;度（deg）。一个圆360度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transform就指变换。&lt;/p&gt;
&lt;p&gt;transform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;矩阵  (matrix)&lt;ul&gt;
&lt;li&gt;用六个指定的值来指定一个均匀的二维（2D）变换矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转换（translate）&lt;/li&gt;
&lt;li&gt;旋转（rotate）&lt;/li&gt;
&lt;li&gt;缩放（scale）&lt;/li&gt;
&lt;li&gt;倾斜（skew）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
</feed>
