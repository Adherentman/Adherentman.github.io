<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>壮壮-Technology</title>
  
  <subtitle>宠辱不惊，闲看庭前花落花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xzh.hi.cn/"/>
  <updated>2018-11-28T14:37:57.929Z</updated>
  <id>http://xzh.hi.cn/</id>
  
  <author>
    <name>XuZiHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识RxJS</title>
    <link href="http://xzh.hi.cn/%E5%88%9D%E8%AF%86RxJs.html"/>
    <id>http://xzh.hi.cn/初识RxJs.html</id>
    <published>2018-11-27T14:27:00.000Z</published>
    <updated>2018-11-28T14:37:57.929Z</updated>
    
    <content type="html"><![CDATA[<p>RxJs世界中有一种特殊的对象，称为流（stream）。<br>代表 “流” 的变量标识符，都是用$符号结尾。这被称为“芬兰式命名法”。<br>流对象中流淌的是数据。</p><h2 id="RxJS模型"><a href="#RxJS模型" class="headerlink" title="RxJS模型"></a>RxJS模型</h2><ul><li>数据流抽象了很多现实问题</li><li>擅长处理异步操作</li><li>把复杂问题分解成简单问题的组合</li></ul><a id="more"></a><h2 id="Observable-和-Observer"><a href="#Observable-和-Observer" class="headerlink" title="Observable 和 Observer"></a>Observable 和 Observer</h2><p>Observabel: 可被观察者<br>Observer: 观察者</p><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>它实现了下面两种设计模式：</p><ul><li>观察者模式</li><li>迭代器模式</li></ul><p><code>Observable = Publisher + Iterator</code></p><p>Observable分为:</p><ul><li>Hot Observable<ul><li>只接受从订阅开始Observable产生的数据</li></ul></li><li>Cold Observable<ul><li>不能错过任何数据，需要获取Observable之前产生的数据</li></ul></li></ul><h2 id="弹珠图"><a href="#弹珠图" class="headerlink" title="弹珠图"></a>弹珠图</h2><p>弹珠图： <a href="https://rxviz.com/" target="_blank" rel="noopener">https://rxviz.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RxJs世界中有一种特殊的对象，称为流（stream）。&lt;br&gt;代表 “流” 的变量标识符，都是用$符号结尾。这被称为“芬兰式命名法”。&lt;br&gt;流对象中流淌的是数据。&lt;/p&gt;
&lt;h2 id=&quot;RxJS模型&quot;&gt;&lt;a href=&quot;#RxJS模型&quot; class=&quot;headerlink&quot; title=&quot;RxJS模型&quot;&gt;&lt;/a&gt;RxJS模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据流抽象了很多现实问题&lt;/li&gt;
&lt;li&gt;擅长处理异步操作&lt;/li&gt;
&lt;li&gt;把复杂问题分解成简单问题的组合&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://xzh.hi.cn/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://xzh.hi.cn/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xzh.hi.cn/nginx%E5%9F%BA%E7%A1%80.html"/>
    <id>http://xzh.hi.cn/nginx基础.html</id>
    <published>2018-11-22T12:48:38.562Z</published>
    <updated>2018-11-22T12:52:56.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>user 配置worker进程的用户和组<br>worker_processes worker进程启动的数量<br>error_log 是所有错误写入的文件<br>pid 记录主进程ID的文件<br>use 使用什么样的连接方法<br>worker_connections 设置一个工作进程能够接受并发连接的最大数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;nginx-conf&quot;&gt;&lt;a href=&quot;#nginx-conf&quot; class=&quot;headerlink&quot; title=&quot;nginx
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kubectl常用命令</title>
    <link href="http://xzh.hi.cn/Kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://xzh.hi.cn/Kubectl常用命令.html</id>
    <published>2018-11-17T14:34:00.000Z</published>
    <updated>2018-11-25T13:29:43.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><p>get命令用于获取集群的一个或一些resource信息.<br><code>kubectl get</code>可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。</p><h3 id="获取deployment"><a href="#获取deployment" class="headerlink" title="获取deployment"></a>获取deployment</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl get deployment</span><br><span class="line">NAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">curl    1         1         1            1           43m</span><br><span class="line">nginx   2         2         2            2           107m</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="获取所有运行的pod信息"><a href="#获取所有运行的pod信息" class="headerlink" title="获取所有运行的pod信息"></a>获取所有运行的pod信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl get pods</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">curl-5cc7b478b6-4x7pl    1/1     Running   1          44m</span><br><span class="line">nginx-65d5c4f7cc-khzn8   1/1     Running   0          108m</span><br><span class="line">nginx-65d5c4f7cc-v7x49   1/1     Running   0          107m</span><br></pre></td></tr></table></figure><h3 id="列出Pod以及运行Pod节点信息"><a href="#列出Pod以及运行Pod节点信息" class="headerlink" title="列出Pod以及运行Pod节点信息"></a>列出Pod以及运行Pod节点信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl get pods -o wide </span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE    NOMINATED NODE</span><br><span class="line">nginx-65d5c4f7cc-khzn8   1/1     Running   0          159m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class="line">nginx-65d5c4f7cc-v7x49   1/1     Running   0          158m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="查看集群中所有的node"><a href="#查看集群中所有的node" class="headerlink" title="查看集群中所有的node"></a>查看集群中所有的node</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl get nodes</span><br><span class="line">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class="line">zihao           Ready    &lt;none&gt;   4h15m   v1.12.2</span><br><span class="line">zihao-desktop   Ready    master   21h     v1.12.2</span><br></pre></td></tr></table></figure><h3 id="查看某个Node的详细信息"><a href="#查看某个Node的详细信息" class="headerlink" title="查看某个Node的详细信息"></a>查看某个Node的详细信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl describe node zihao</span><br><span class="line">Name:               zihao</span><br><span class="line">Roles:              &lt;none&gt;</span><br><span class="line">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    kubernetes.io/hostname=zihao</span><br><span class="line">Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class="line">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class="line">                    projectcalico.org/IPv4Address: 172.16.187.132/24</span><br><span class="line">                    volumes.kubernetes.io/controller-managed-attach-detach: true</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><h3 id="删除pod"><a href="#删除pod" class="headerlink" title="删除pod"></a>删除pod</h3><p>这样删除pods后，你会发现可以看到刚刚生成的<code>curl-5cc7b478b6-4x7pl</code>的status为<code>Terminating</code>，随后又一个新的<code>curl-xxxxxx</code>正在创建，这正是确保<code>replicas</code>为1的动作<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl delete pods curl-5cc7b478b6-4x7pl</span><br><span class="line">pod "curl-5cc7b478b6-4x7pl" deleted</span><br></pre></td></tr></table></figure></p><h3 id="删除deployment"><a href="#删除deployment" class="headerlink" title="删除deployment"></a>删除deployment</h3><p>直接删除pod触发了replicas的确保机制，我们需要删除deployment<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl delete deployment curl</span><br><span class="line">deployment.extensions "curl" deleted</span><br></pre></td></tr></table></figure></p><h3 id="强制删除pod"><a href="#强制删除pod" class="headerlink" title="强制删除pod"></a>强制删除pod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zihao@zihao-desktop:~ $ kubectl delete pod curl-5cc7b478b6-4x7pl --grace-period=0 --force</span><br><span class="line">warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.</span><br><span class="line">pod &quot;curl-5cc7b478b6-4x7pl&quot; force deleted</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;get&quot;&gt;&lt;a href=&quot;#get&quot; class=&quot;headerlink&quot; title=&quot;get&quot;&gt;&lt;/a&gt;get&lt;/h2&gt;&lt;p&gt;get命令用于获取集群的一个或一些resource信息.&lt;br&gt;&lt;code&gt;kubectl get&lt;/code&gt;可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。&lt;/p&gt;
&lt;h3 id=&quot;获取deployment&quot;&gt;&lt;a href=&quot;#获取deployment&quot; class=&quot;headerlink&quot; title=&quot;获取deployment&quot;&gt;&lt;/a&gt;获取deployment&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zihao@zihao-desktop:~ $ kubectl get deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl    1         1         1            1           43m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nginx   2         2         2            2           107m&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://xzh.hi.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xzh.hi.cn/tags/docker/"/>
    
      <category term="Kubernetes" scheme="http://xzh.hi.cn/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>部署 Kubernetes 集群</title>
    <link href="http://xzh.hi.cn/%E9%83%A8%E7%BD%B2%20Kubernetes%20%E9%9B%86%E7%BE%A4.html"/>
    <id>http://xzh.hi.cn/部署 Kubernetes 集群.html</id>
    <published>2018-11-14T14:24:00.000Z</published>
    <updated>2018-11-14T14:25:38.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="禁用-swap"><a href="#禁用-swap" class="headerlink" title="禁用 swap"></a>禁用 swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line">sudo vim /etc/fstab</span><br><span class="line">注释掉swap那一行</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，<br>以下是安装 kubeadm kubelet kubectl 流程：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https ca-certificates curl</span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Kubernetes 集群的初始化可以分为三个步骤</p><ul><li>在 Master 上运行控制平面 (Control Plane)</li><li>将 Node 加入到集群中</li><li>安装 Pod 网络的附加组件<a id="more"></a><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3>kubeadm 1.12 使用的是 v1alpha3 API，这里的定义包含了 InitConfiguration 和 ClusterConfiguration 两部分。</li></ul><p><strong>kubeadmInit.yml</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">nodeRegistration:</span><br><span class="line">  kubeletExtraArgs:</span><br><span class="line">    # 从 Aliyun Registry 拉取基础镜像</span><br><span class="line">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line"># 从 Aliyun Registry 拉取 Control Plane 镜像</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line"># 使用确定的 Kubernetes 版本，避免初始化时从 https://dl.k8s.io/release/stable-1.12.txt 读取</span><br><span class="line">kubernetesVersion: v1.12.2</span><br><span class="line">networking:</span><br><span class="line">  # 如使用 flannel 组件应增加如下配置</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure></p><p>kubeadm 将自动下载镜像，以 Static Pod 方式运行 Control Plane。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config kubeadmInit.yml</span><br></pre></td></tr></table></figure><p><img src="https://1mu-test.oss-cn-hangzhou.aliyuncs.com/1mu-test/kubeadmInitRes.png" alt=""><br>这就是初始化成功之后的log，并且界面上会输出一条 kubeadm join 命令，将其记录到本地，稍后会用于 Node 加入集群。命令示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure></p><h3 id="访问集群"><a href="#访问集群" class="headerlink" title="访问集群"></a>访问集群</h3><p>可以参照 kubeadm 初始化后输出的说明，增加使用 kubectl 访问 Kubernetes 集群所需的配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p><p>这时可以使用 <code>kubectl -n kube-system get pods</code> 查看到已部署的 Control Plane Pod。</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>在Node机子上，我们需要去做安装工作(安装 kubeadm kubelet kubectl)。<br>之后用之前那个join后的参数去代替以下<code>&lt;xxx&gt;</code><br><strong>NodeJoin.yml</strong>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class="line">kind: JoinConfiguration</span><br><span class="line">discoveryTokenAPIServers:</span><br><span class="line">- &lt;master-ip&gt;:&lt;master-port&gt;</span><br><span class="line">discoveryTokenCACertHashes:</span><br><span class="line">- sha256:&lt;hash&gt;</span><br><span class="line">nodeRegistration:</span><br><span class="line">  kubeletExtraArgs:</span><br><span class="line">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class="line">token: &lt;token&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们只用输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join --config NodeJoin.yml</span><br></pre></td></tr></table></figure></p><p>运行成功后，我们可以在 Master 上使用 kubectl get nodes 查看到已加入集群的 Node。</p><h3 id="Pod-Network"><a href="#Pod-Network" class="headerlink" title="Pod Network"></a>Pod Network</h3><p>在完成前面两步后，通过 kubectl get nodes 我们可以看到 Master 和 Node 状态是 NotReady，这是因为缺少<a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener"> Pod Network 附加组件</a>。<br>现在部署的 Pod 不会被分配 IP，会维持在 <code>ContainerCreating</code>状态。比如通过 <code>kubectl -n kube-system get pods -l k8s-app=kube-dns</code>查看到的 CoreDNS Pod。<br>可以选择任意一款支持 CNI 的网络组件，这里使用 calico 作为示例，在 Master 上运行如下命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br></pre></td></tr></table></figure></p><p>待网络组件安装完成后，再次运行 kubectl -n kube-system get pods -l k8s-app=kube-dns 可以看到 CoreDNS Pod 已经变为 Running 状态。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network"><a href="#验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network" class="headerlink" title="验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network"></a>验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 部署一个 Nginx Deployment，包含两个 Pod</span><br><span class="line"># https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</span><br><span class="line">kubectl create deployment nginx --image=nginx:alpine</span><br><span class="line">kubectl scale deployment nginx --replicas=2</span><br><span class="line"></span><br><span class="line"># 待启动后，两个 Nginx Pod 应该是 Running 状态，并且各自分配有 10.244 开头的集群内 IP</span><br><span class="line">kubectl get pods -l app=nginx -o wide</span><br><span class="line"># 结果示例</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE</span><br><span class="line">nginx-65d5c4f7cc-khzn8   1/1     Running   0          73m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class="line">nginx-65d5c4f7cc-v7x49   1/1     Running   0          72m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="验证-kube-proxy"><a href="#验证-kube-proxy" class="headerlink" title="验证 kube-proxy"></a>验证 kube-proxy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 以 NodePort 方式对外提供服务</span><br><span class="line"># https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line"></span><br><span class="line"># Nginx 服务应该得到一个 10.96 开头的集群内 IP，以及集群外可访问的 Port</span><br><span class="line">kubectl get services nginx</span><br><span class="line"># 结果示例</span><br><span class="line">NAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">nginx   NodePort   10.100.177.202   &lt;none&gt;        80:32551/TCP   96m</span><br><span class="line"></span><br><span class="line"># 可以通过任意 NodeIP:Port 在集群外部访问这个服务</span><br><span class="line">curl http://node-ip:32630</span><br></pre></td></tr></table></figure><h3 id="验证-dns-pod-network"><a href="#验证-dns-pod-network" class="headerlink" title="验证 dns, pod network"></a>验证 dns, pod network</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 启动一个 Busybox 部署，并进入其内部</span><br><span class="line"># 如果没有出现提示符，按下回车键</span><br><span class="line">kubectl run -it curl --image=radial/busyboxplus:curl</span><br><span class="line"></span><br><span class="line"># 输入命令 nslookup nginx 应可以正确解析出集群内的 IP，证明 DNS 服务正常</span><br><span class="line">[ root@curl-5cc7b478b6-7zxlq:/ ]$ nslookup nginx</span><br><span class="line"># 结果示例</span><br><span class="line"># Server:    10.96.0.10</span><br><span class="line"># Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line">#</span><br><span class="line"># Name:      nginx</span><br><span class="line"># Address 1: 10.98.222.155 nginx.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line"># 输入命令 curl nginx 应可以正确返回 Nginx 首页，证明 kube-proxy 正常</span><br><span class="line">[ root@curl-5cc7b478b6-7zxlq:/ ]$ curl http://nginx/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;禁用-swap&quot;&gt;&lt;a href=&quot;#禁用-swap&quot; class=&quot;headerlink&quot; title=&quot;禁用 swap&quot;&gt;&lt;/a&gt;禁用 swap&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo swapoff -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注释掉swap那一行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，&lt;br&gt;以下是安装 kubeadm kubelet kubectl 流程：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y apt-transport-https ca-certificates curl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;EOF &amp;gt;/etc/apt/sources.list.d/kubernetes.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-get install -y kubelet kubeadm kubectl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apt-mark hold kubelet kubeadm kubectl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;Kubernetes 集群的初始化可以分为三个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Master 上运行控制平面 (Control Plane)&lt;/li&gt;
&lt;li&gt;将 Node 加入到集群中&lt;/li&gt;
&lt;li&gt;安装 Pod 网络的附加组件
    
    </summary>
    
      <category term="docker" scheme="http://xzh.hi.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xzh.hi.cn/tags/docker/"/>
    
      <category term="Kubernetes" scheme="http://xzh.hi.cn/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://xzh.hi.cn/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BAor%E5%9B%A2%E9%98%9F%E9%80%82%E7%94%A8%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83.html"/>
    <id>http://xzh.hi.cn/打造个人or团队适用的开源项目规范.html</id>
    <published>2018-10-03T07:10:14.280Z</published>
    <updated>2018-11-03T12:51:15.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打造个人or团队适用的开源项目规范"><a href="#打造个人or团队适用的开源项目规范" class="headerlink" title="打造个人or团队适用的开源项目规范"></a>打造个人or团队适用的开源项目规范</h1><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541259226466&amp;di=3d9d04f5f77d2f23b7b121fb02083038&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg" alt=""></p><h2 id="lerna"><a href="#lerna" class="headerlink" title="lerna"></a>lerna</h2><p>Lerna 是一个用来优化托管在git\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。</p><p>lerna的文件树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-lerna-repo/</span><br><span class="line">  package.json</span><br><span class="line">  packages/</span><br><span class="line">    package-1/</span><br><span class="line">      package.json</span><br><span class="line">    package-2/</span><br><span class="line">      package.json</span><br></pre></td></tr></table></figure></p><p>首先作为项目拥有者全局安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g lerna</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add lerna</span></span><br></pre></td></tr></table></figure></p><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>在项目使用以下命令：</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lerna init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lerna init --independent</span></span><br></pre></td></tr></table></figure><p>这条命令要注意的是，lerna提供两类管理项目的模式：</p><ol><li>fixed/locked mode（default）<ol><li>Fixed模式下，项目通过单一的版本进行控制。版本号放在项目根目录下的lerna.json文件的version这个字段。当你执行 lerna publish，如果有文件更新，它将发布新的版本。</li></ol></li><li>independent mode（—independent）<ol><li>这种模式下，项目里的各个package独立维护自己的version，它将会忽略lerna.json中定义的version</li></ol></li></ol><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lerna publish</span></span><br></pre></td></tr></table></figure><p>Publish它做了以下几件事情</p><ol><li>发布项目里的每个模块</li><li>执行lerna updated确定是否需要发布</li><li>假如需要发布 给lerna.json 版本号做自增</li><li>更新package.json里的版本号至最新</li><li>为新版本更新dependencies</li><li>为新版本创建一个git commit 和tag</li><li>发布更新项目到npm</li><li>一次发布所有packages<br>只有你在<code>package.json</code>里设置<code>private: true</code>这个包则不会被发布。</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>如果我们使用yarn我们可以在<code>lerna.json</code>做如下配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  "npmClient": "yarn"</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码检查和规范"><a href="#代码检查和规范" class="headerlink" title="代码检查和规范"></a>代码检查和规范</h2><p>在一个项目中，多人开发时会遇到代码格式问题。<br>解决方案：</p><h3 id="使用Eslint"><a href="#使用Eslint" class="headerlink" title="使用Eslint"></a>使用Eslint</h3><p>项目拥有者需要全局安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install eslint -g</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add eslint</span></span><br></pre></td></tr></table></figure></p><p>在项目中执行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> eslint --init</span></span><br></pre></td></tr></table></figure></p><p>React项目推荐使用airbnb规范。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"eslint"</span>: <span class="string">"^4.19.1"</span>,</span><br><span class="line">        <span class="attr">"eslint-config-airbnb"</span>: <span class="string">"^17.0.0"</span>,</span><br><span class="line">        <span class="attr">"eslint-plugin-import"</span>: <span class="string">"^2.13.0"</span>,</span><br><span class="line">        <span class="attr">"eslint-plugin-react"</span>: <span class="string">"^7.10.0"</span>,</span><br><span class="line">        <span class="attr">"eslint-plugin-jsx-a11y"</span>: <span class="string">"^6.1.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用Standard"><a href="#使用Standard" class="headerlink" title="使用Standard"></a>使用Standard</h3><p>参考中文文档 <a href="https://github.com/standard/standard/blob/master/docs/README-zhcn.md#i-disagree-with-rule-x-can-you-change-it" target="_blank" rel="noopener">standard/README-zhcn.md at master · standard/standard · GitHub</a></p><h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><p>Eslint + prettier 解决了代码风格和格式化的所有问题。</p><h3 id="与git-hook来解决何时lint"><a href="#与git-hook来解决何时lint" class="headerlink" title="与git hook来解决何时lint"></a>与git hook来解决何时lint</h3><p>目前比较成熟的是<code>husky</code>与<code>lint-staged</code>两者结合:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install lint-staged husky -D</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add lint-staged husky -D</span></span><br></pre></td></tr></table></figure></p><p>接着在<code>package.json</code>中加入：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"lint-staged": &#123;</span><br><span class="line">    "packages/*/src/**/*.js": [</span><br><span class="line">      "eslint --fix",</span><br><span class="line">      "prettier --write",</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "husky": &#123;</span><br><span class="line">    "hooks": &#123;</span><br><span class="line">      "pre-commit": "lint-staged"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="Tslint"><a href="#Tslint" class="headerlink" title="Tslint"></a>Tslint</h3><p>如果你的项目使<code>TypeScript</code>那么<code>tslint</code>能帮助你许多！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn add -D prettier tslint-config-prettier tslint-plugin-prettier husky pretty-quick</span></span><br></pre></td></tr></table></figure><h4 id="Tslint-json"><a href="#Tslint-json" class="headerlink" title="Tslint.json"></a>Tslint.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"defaultSeverity"</span>: <span class="string">"error"</span>,</span><br><span class="line">    <span class="attr">"extends"</span>: [</span><br><span class="line"><span class="string">"tslint:recommended"</span>,</span><br><span class="line"><span class="string">"tslint-react"</span>,</span><br><span class="line"><span class="string">"tslint-config-prettier"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"jsRules"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line"><span class="attr">"prettier"</span>: [<span class="literal">true</span>, <span class="string">"./prettierrc"</span>]</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">"rulesDirectory"</span>: [</span><br><span class="line"><span class="string">"tslint-plugin-prettier"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑器的不同"><a href="#编辑器的不同" class="headerlink" title="编辑器的不同"></a>编辑器的不同</h2><p>解决方案：<br>主流的都是使用EditorConfig<br>只需要在根目录新建一个<code>.editorconfig</code>文件，然后去根据文档自行定义。再给自己使用的编辑器安装<code>editorConfig</code>的插件即可。<br>官方网站：<a href="https://editorconfig.org/" target="_blank" rel="noopener">EditorConfig</a></p><h2 id="commit-不统一"><a href="#commit-不统一" class="headerlink" title="commit 不统一"></a>commit 不统一</h2><p>主流的方法是commitizen.<br>项目拥有者应当全局安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g commitizen</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add commitizen</span></span><br></pre></td></tr></table></figure></p><p>之后我们在项目里选用angular格式的commit message并在终端下输入以下命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> commitizen init cz-conventional-changelog —save-exact</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> commitizen init cz-conventional-changelog --yarn --dev --exact</span></span><br></pre></td></tr></table></figure></p><p>上面的命令为你做了三件事：</p><ol><li>安装cz-conventional-changelog的adapter的npm模块。</li><li>将其保存到package.json的dependencies或devDependencies。</li><li>将config.commitizen键添加到package.json的根目录，如下所示：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"config": &#123;</span><br><span class="line">    "commitizen": &#123;</span><br><span class="line">      "path": "cz-conventional-changelog"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在<code>package.json</code>里的<code>scripts</code>里加上<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "commit": "git-cz"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>注意：<br>如果你使用像<code>husky</code>这样的<code>precommit hooks</code>，你需要为脚本命名除“commit”之外的其他东西（例如“cm”：“git-cz”）。<br>原因是因为npm-scripts有一个“feature”，它自动运行名称为prexxx的脚本，其中xxx是另一个脚本的名称。<br>本质上，如果您将脚本命名为“commit”，则npm和husky将运行两次“precommit”脚本，并且解决方法是阻止npm触发的precommit脚本。</p><p>之后如果有别人也参与进你的项目开发中，我们最好在仓库里也安装依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -D commitizen</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add commititzen -D</span></span><br></pre></td></tr></table></figure></p><h2 id="changelog"><a href="#changelog" class="headerlink" title="changelog"></a>changelog</h2><p>通过手动去维护changelog在我之前的那个wx-tsApi项目中是非常头疼的一件事情，所以去寻找自动化的东西。</p><p>全局安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g conventional-changelog-cli</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn global add conventional-changelog-cli</span></span><br></pre></td></tr></table></figure></p><p>然后在<code>package.json</code>文件中添加<code>scripts</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"changelog"</span>: <span class="string">"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>官方推荐的工作流程：</p><ol><li>做出改变</li><li>提交这些改变</li><li>确定Travis变成绿色</li><li>改version</li><li>changelog</li><li>commit package.json 和CHANGELOG.md文件</li><li>打Tag</li><li>push</li></ol><p>基于lerna的工作流程(自己研究的有不对请指出)：</p><ol><li>做出改变</li><li>git-cz</li><li>“conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md”</li><li>commit CHANGELOG.md 文件</li><li>Git push</li><li>lerna publish</li></ol><h2 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h2><ul><li>eJayYoung(<a href="https://github.com/eJayYoung/blog/issues/1" target="_blank" rel="noopener">如何打造规范的开源项目workflow · Issue #1 · eJayYoung/blog · GitHub</a>)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;打造个人or团队适用的开源项目规范&quot;&gt;&lt;a href=&quot;#打造个人or团队适用的开源项目规范&quot; class=&quot;headerlink&quot; title=&quot;打造个人or团队适用的开源项目规范&quot;&gt;&lt;/a&gt;打造个人or团队适用的开源项目规范&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1541259226466&amp;amp;di=3d9d04f5f77d2f23b7b121fb02083038&amp;amp;imgtype=jpg&amp;amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;lerna&quot;&gt;&lt;a href=&quot;#lerna&quot; class=&quot;headerlink&quot; title=&quot;lerna&quot;&gt;&lt;/a&gt;lerna&lt;/h2&gt;&lt;p&gt;Lerna 是一个用来优化托管在git\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。&lt;/p&gt;
&lt;p&gt;lerna的文件树：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;my-lerna-repo/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  packages/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    package-1/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    package-2/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      package.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;首先作为项目拥有者全局安装：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; npm install -g lerna&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; yarn global add lerna&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;init&quot;&gt;&lt;a href=&quot;#init&quot; class=&quot;headerlink&quot; title=&quot;init&quot;&gt;&lt;/a&gt;init&lt;/h3&gt;&lt;p&gt;在项目使用以下命令：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git empty object file</title>
    <link href="http://xzh.hi.cn/git-empty-object-file.html"/>
    <id>http://xzh.hi.cn/git-empty-object-file.html</id>
    <published>2018-10-01T07:35:00.000Z</published>
    <updated>2018-11-17T14:41:16.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-empty-object-file"><a href="#git-empty-object-file" class="headerlink" title="git empty object file"></a>git empty object file</h1><p>一次突然断电。。导致之前的commit的没了。。<code>status</code>的时候发现全变空了。。解决过程在如下重现：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803) » git status</span><br><span class="line"></span><br><span class="line">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class="line">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class="line">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803) » git fsck —full    </span><br><span class="line"></span><br><span class="line">error: object file .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568 is empty</span><br><span class="line">error: unable to mmap .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568: 没有那个文件或目录</span><br><span class="line">error: 16cbec146f596b542e174875e8ad0c8c930b2568: object corrupt or missing: .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568</span><br><span class="line">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class="line">error: unable to mmap .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b: 没有那个文件或目录</span><br><span class="line">error: 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b: object corrupt or missing: .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class="line">error: object file .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97 is empty</span><br><span class="line">error: unable to mmap .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97: 没有那个文件或目录</span><br><span class="line">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: object corrupt or missing: .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97</span><br><span class="line">error: object file .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8 is empty</span><br><span class="line">error: unable to mmap .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8: 没有那个文件或目录</span><br><span class="line">error: af0735cb070fe8c8e415102f00e9a9d8825cd8a8: object corrupt or missing: .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8</span><br><span class="line">error: object file .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f is empty</span><br><span class="line">error: unable to mmap .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f: 没有那个文件或目录</span><br><span class="line">error: fea063e56e69f6739e1648ddccd0c5d55a0d052f: object corrupt or missing: .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f</span><br><span class="line">检查对象目录中: 100% (256/256), 完成.</span><br><span class="line">检查对象中: 100% (26504/26504), 完成.</span><br><span class="line">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class="line">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class="line">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803) » cd .git </span><br><span class="line">~/1mu/.git(1803) » find . -type f -empty -delete -print</span><br><span class="line">执行完后再次</span><br><span class="line"></span><br><span class="line">~/1mu/.git(1803) » git fsck —full      </span><br><span class="line"></span><br><span class="line">检查对象目录中: 100% (256/256), 完成.</span><br><span class="line">检查对象中: 100% (26504/26504), 完成.</span><br><span class="line">error: HEAD: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class="line">error: refs/heads/1803: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class="line">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class="line">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class="line">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class="line">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class="line">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class="line">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class="line">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class="line">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class="line">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class="line">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class="line">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class="line">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class="line">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class="line">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure><p>​                                                                                                                                                   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择自己的分支 就能看见之前自己的commit信息</span></span><br><span class="line">~/1mu(1803) » tail -n 2 .git/logs/refs/heads/1803</span><br><span class="line"></span><br><span class="line">9ac273e691830844014b1f1ff85e071bd5c061a2 54ac2f761953dcd0af684b781513472acf553719 xzh &lt;zihao.xu@1mu.club&gt; 1538212290 +0800commit: 改变作品的数据结构</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 回到你想回到的分支上</span></span><br><span class="line">~/1mu(1803) » git update-ref HEAD 54ac2f761953dcd0af684b781513472acf553719</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class="line">检查对象目录中: 100% (256/256), 完成.</span><br><span class="line">检查对象中: 100% (26504/26504), 完成.</span><br><span class="line">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class="line">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class="line">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class="line">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class="line">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class="line">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class="line">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class="line">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class="line">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class="line">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class="line">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class="line">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class="line">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class="line">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure><p>到这步基本上就已经解决了。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803*) » rm .git/index                </span><br><span class="line">~/1mu(1803*) » git reset</span><br><span class="line"></span><br><span class="line">重置后取消暂存的变更：</span><br><span class="line">Minterface/www/cms2/index.html</span><br><span class="line">Minterface/www/cms2/package.json</span><br><span class="line">Minterface/www/cms2/webpack.common.js</span><br><span class="line"></span><br><span class="line">~/1mu(1803*) » git status                                                                                                                                                                   xuzihao@xuzihao</span><br><span class="line">位于分支 1803</span><br><span class="line">您的分支领先 ‘origin/1803' 共 2 个提交。</span><br><span class="line">  （使用 “git push" 来发布您的本地提交）</span><br><span class="line"></span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 “git add &lt;文件&gt;..." 更新要提交的内容）</span><br><span class="line">  （使用 “git checkout -- &lt;文件&gt;..." 丢弃工作区的改动）</span><br><span class="line"></span><br><span class="line">修改：     interface/www/cms2/index.html</span><br><span class="line">修改：     interface/www/cms2/package.json</span><br><span class="line">修改：     interface/www/cms2/webpack.common.js</span><br><span class="line"></span><br><span class="line">修改尚未加入提交（使用 “git add" 和/或 "git commit -a"）</span><br></pre></td></tr></table></figure></p><p>为了放心再次检查下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class="line">检查对象目录中: 100% (256/256), 完成.</span><br><span class="line">检查对象中: 100% (26504/26504), 完成.</span><br><span class="line">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class="line">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class="line">dangling blob 2d32a2045e6e9e2c9eac5e94fc7d4105b2fe7bbf</span><br><span class="line">dangling blob 3e408a4fc423ba3d78d4c9a526f70a12ce749c4a</span><br><span class="line">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class="line">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class="line">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class="line">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class="line">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class="line">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class="line">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class="line">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class="line">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class="line">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class="line">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br><span class="line">dangling blob b0e76a232b70b823379a1cfae36dbf443e46fa6e</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-empty-object-file&quot;&gt;&lt;a href=&quot;#git-empty-object-file&quot; class=&quot;headerlink&quot; title=&quot;git empty object file&quot;&gt;&lt;/a&gt;git empty object file&lt;/h1&gt;&lt;p&gt;一次突然断电。。导致之前的commit的没了。。&lt;code&gt;status&lt;/code&gt;的时候发现全变空了。。解决过程在如下重现：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~/1mu(1803) » git status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://xzh.hi.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://xzh.hi.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>es6解构赋值妙用</title>
    <link href="http://xzh.hi.cn/es6%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%A6%99%E7%94%A8.html"/>
    <id>http://xzh.hi.cn/es6解构赋值妙用.html</id>
    <published>2018-09-25T14:24:21.133Z</published>
    <updated>2018-10-01T07:42:15.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="es6解构赋值妙用"><a href="#es6解构赋值妙用" class="headerlink" title="es6解构赋值妙用"></a>es6解构赋值妙用</h1><p>平常我们都这样去操作对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">isPush: <span class="literal">true</span>,</span><br><span class="line">isOpen: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isPush = options.isPush;</span><br><span class="line"><span class="keyword">let</span> isOpen = options.isOpen;</span><br></pre></td></tr></table></figure></p><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构:"></a>对象解构:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;isPush, isOpen&#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(isPush)<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isOpen)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值："><a href="#解构赋值：" class="headerlink" title="解构赋值："></a>解构赋值：</h2><p>当额外定义一个局部变量<code>isClick</code>，但是在<code>options</code>上没这个对应名称的属性，所以会返回<code>underfined</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;isPush, isOpen, isClick&#125; = options;</span><br><span class="line">console.log(isPush)// true</span><br><span class="line">console.log(isOpen)// false</span><br><span class="line">console.log(isClick)// underfined</span><br></pre></td></tr></table></figure></p><p>但是我们可以给他初始值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let &#123;isPush, isOpen, isClick = false&#125; = options;</span><br><span class="line">console.log(isPush)// true</span><br><span class="line">console.log(isOpen)// false</span><br><span class="line">console.log(isClick)// false</span><br></pre></td></tr></table></figure><p>当然我们可以给未定义的变量赋初始值，那也就可以给变量改名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">isPush</span>: isUnPush, <span class="attr">isOpen</span>: isUnOpen, <span class="attr">isClick</span>: isUnClick = <span class="literal">false</span>&#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(isUnPush)<span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isUnOpen)<span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(isUnClick)<span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>我们还可以发现当<code>isClick</code>不存在这个变量的时候，我们可以边给变量名再赋初始值；</p><h2 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a>嵌套对象解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">name: <span class="string">"Music"</span>,</span><br><span class="line">status: <span class="string">"open"</span>,</span><br><span class="line">musicData: &#123;</span><br><span class="line">link: &#123;</span><br><span class="line">img: <span class="string">"xxxx.com"</span>,</span><br><span class="line">audio: <span class="string">"xxxxxx.com"</span></span><br><span class="line">&#125;,</span><br><span class="line">info: &#123;</span><br><span class="line">time: <span class="string">"2018-09-26"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">musicData</span>: &#123; info &#125; &#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(info);<span class="comment">// &#123;time: "2018-09-26&#125;</span></span><br></pre></td></tr></table></figure><p>与之前提到的给变量改名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">name: <span class="string">"Music"</span>,</span><br><span class="line">status: <span class="string">"open"</span>,</span><br><span class="line">musicData: &#123;</span><br><span class="line">link: &#123;</span><br><span class="line">img: <span class="string">"xxxx.com"</span>,</span><br><span class="line">audio: <span class="string">"xxxxxx.com"</span></span><br><span class="line">&#125;,</span><br><span class="line">info: &#123;</span><br><span class="line">time: <span class="string">"2018-09-26"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">musicData</span>: &#123; <span class="attr">info</span>: createTime &#125; &#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(createTime);<span class="comment">// &#123;time: "2018-09-26&#125;</span></span><br></pre></td></tr></table></figure><p>所以但我们在读数据之后为了防止<code>underfined</code>所以我们都去做<code>&amp;&amp;</code>但是写多了也很烦。趁之前<em>嵌套对象结构</em>则可以解决这个问题。</p><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> aninmal = [<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"duck"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, dier, disan] = aninmal;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dier);<span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(disan);<span class="comment">// duck</span></span><br></pre></td></tr></table></figure><p>这样我们还可以不要第一个，只要后面2个值。</p><h2 id="数组解构-1"><a href="#数组解构-1" class="headerlink" title="数组解构"></a>数组解构</h2><p>数组解构和对象解构很像，可以给<em>默认值</em>，可以<em>嵌套数组解构</em>但是还有一点特殊地方就是可以<em>交换两个变量的值</em>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>,</span><br><span class="line">  y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x)<span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(y)<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="不定元素"><a href="#不定元素" class="headerlink" title="不定元素"></a>不定元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [firstColor, ...anyColors] = colors;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstColor);<span class="comment">// "red"</span></span><br><span class="line"><span class="built_in">console</span>.log(anyColors);<span class="comment">// ["blue", "green"]</span></span><br></pre></td></tr></table></figure><h2 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">name: <span class="string">"Music"</span>,</span><br><span class="line">status: <span class="string">"open"</span>,</span><br><span class="line">musicData: &#123;</span><br><span class="line">link: &#123;</span><br><span class="line">img: <span class="string">"xxxx.com"</span>,</span><br><span class="line">audio: <span class="string">"xxxxxx.com"</span></span><br><span class="line">&#125;,</span><br><span class="line">info: &#123;</span><br><span class="line">time: <span class="string">"2018-09-26"</span></span><br><span class="line">&#125;,</span><br><span class="line">bigArray: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">musicData</span>: &#123;link&#125;, <span class="attr">bigArray</span>: [a] &#125; = options;</span><br><span class="line"><span class="built_in">console</span>.log(link.img);<span class="comment">// "xxxx.com"</span></span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>这种方法很有效，当我们从JSON配置中提取信息的时候，不在需要遍历整个解构了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;es6解构赋值妙用&quot;&gt;&lt;a href=&quot;#es6解构赋值妙用&quot; class=&quot;headerlink&quot; title=&quot;es6解构赋值妙用&quot;&gt;&lt;/a&gt;es6解构赋值妙用&lt;/h1&gt;&lt;p&gt;平常我们都这样去操作对象：&lt;br&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xzh.hi.cn/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xzh.hi.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Koa2—Https</title>
    <link href="http://xzh.hi.cn/Koa2%E2%80%94Https.html"/>
    <id>http://xzh.hi.cn/Koa2—Https.html</id>
    <published>2018-08-27T08:27:00.000Z</published>
    <updated>2018-08-27T12:44:34.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Koa2—Https"><a href="#Koa2—Https" class="headerlink" title="Koa2—Https"></a>Koa2—Https</h1><p>现在信息安全越来越重要，以往的<code>http</code>已经满足不了我们的需求，并且如果你的网站还是<code>http</code>协议的话，<code>chrome</code>还能给你报个错。</p><p>所以我们需要让自己的服务器上<code>https</code>。</p><h2 id="ssl证书"><a href="#ssl证书" class="headerlink" title="ssl证书"></a>ssl证书</h2><p>Ssl证书我是通过阿里云给配的，1年免费。</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>我们需要区分开发环境和生产环境，我们只要开发环境用<code>http</code>，生产环境用<code>https</code>就ok了。所以我就直接上<code>code</code>了：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础的配置</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> https <span class="keyword">from</span> <span class="string">'https'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> http <span class="keyword">from</span> <span class="string">'http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port: <span class="built_in">number</span> = <span class="number">4000</span>;</span><br><span class="line"><span class="keyword">const</span> sslPort: <span class="built_in">number</span> = <span class="number">443</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> environment = process.env.NODE_ENV || <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment === <span class="string">'production'</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> sslFile = &#123;</span><br><span class="line">key: fs.readFileSync(<span class="string">'./ssl/domain.key'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">cert: fs.readFileSync(<span class="string">'./ssl/chained.pem'</span>, <span class="string">'utf8'</span>),</span><br><span class="line">&#125;;</span><br><span class="line">https.createServer(sslFile, app.callback()).listen(sslPort, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🚀 Https Server ready at <span class="subst">$&#123;sslPort&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">http.createServer(app.callback()).listen(port, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`🚀 Server ready at localhots:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置NODE-ENV"><a href="#设置NODE-ENV" class="headerlink" title="设置NODE_ENV"></a>设置NODE_ENV</h2><p>最简单的方法我们需要<code>npm install cross-env</code><br>到<code>package.json</code>配置一下.<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"cross-env NODE_ENV=development nodemon"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production nodemon"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><p>还有一个叫<code>koa-sslify</code>的库，他能帮助我们做到任何访问都走<code>https</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Koa2—Https&quot;&gt;&lt;a href=&quot;#Koa2—Https&quot; class=&quot;headerlink&quot; title=&quot;Koa2—Https&quot;&gt;&lt;/a&gt;Koa2—Https&lt;/h1&gt;&lt;p&gt;现在信息安全越来越重要，以往的&lt;code&gt;http&lt;/code&gt;已经满足不了我们的需求，并且如果你的网站还是&lt;code&gt;http&lt;/code&gt;协议的话，&lt;code&gt;chrome&lt;/code&gt;还能给你报个错。&lt;/p&gt;
&lt;p&gt;所以我们需要让自己的服务器上&lt;code&gt;https&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;ssl证书&quot;&gt;&lt;a href=&quot;#ssl证书&quot; class=&quot;headerlink&quot; title=&quot;ssl证书&quot;&gt;&lt;/a&gt;ssl证书&lt;/h2&gt;&lt;p&gt;Ssl证书我是通过阿里云给配的，1年免费。&lt;/p&gt;
&lt;h2 id=&quot;集成&quot;&gt;&lt;a href=&quot;#集成&quot; class=&quot;headerlink&quot; title=&quot;集成&quot;&gt;&lt;/a&gt;集成&lt;/h2&gt;&lt;p&gt;我们需要区分开发环境和生产环境，我们只要开发环境用&lt;code&gt;http&lt;/code&gt;，生产环境用&lt;code&gt;https&lt;/code&gt;就ok了。所以我就直接上&lt;code&gt;code&lt;/code&gt;了：&lt;br&gt;&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 基础的配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Koa &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Koa();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Koa2" scheme="http://xzh.hi.cn/categories/Koa2/"/>
    
    
      <category term="Koa2" scheme="http://xzh.hi.cn/tags/Koa2/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL基础</title>
    <link href="http://xzh.hi.cn/PostgreSQL%E5%9F%BA%E7%A1%80.html"/>
    <id>http://xzh.hi.cn/PostgreSQL基础.html</id>
    <published>2018-08-26T14:09:00.000Z</published>
    <updated>2018-09-16T07:18:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PostgreSQL基础"><a href="#PostgreSQL基础" class="headerlink" title="PostgreSQL基础"></a>PostgreSQL基础</h1><p>创建新表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> xxx (</span><br><span class="line">xxx<span class="built_in">int</span>,# 普通的整数类型</span><br><span class="line">xxx<span class="built_in">varchar</span>(<span class="number">80</span>), # 一个可以存储最长 <span class="number">80</span> 个字符的任意字符串的数据类型</span><br><span class="line">xxx<span class="built_in">real</span>,# 一种用于存储单精度浮点数的类型</span><br><span class="line">xxx<span class="built_in">date</span># 时间</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>删表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tablename;</span><br></pre></td></tr></table></figure></p><p>在表中增加行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (xx, xx, xx)</span><br><span class="line"><span class="keyword">VALUES</span>(xx, xx, xx)</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="查询一个表"><a href="#查询一个表" class="headerlink" title="查询一个表:"></a>查询一个表:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># * 代表所有列的缩写</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename</span><br><span class="line"># 或者单个查</span><br><span class="line"><span class="keyword">SELECT</span> xxx, xxx, xxx <span class="keyword">FROM</span> tablename</span><br><span class="line"># 带函数的</span><br><span class="line"><span class="keyword">SELECT</span> xx, (mobile+<span class="built_in">number</span>)/<span class="number">2</span> <span class="keyword">AS</span> temp_avg, <span class="built_in">date</span> <span class="keyword">FROM</span> xx;</span><br><span class="line"># 指定需要哪些行</span><br><span class="line"># WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">WHERE</span> city = <span class="string">'San Francisco'</span> <span class="keyword">AND</span> prcp &gt; <span class="number">0.0</span>;</span><br><span class="line"># 查询结果排好序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br><span class="line"># 消除重复行</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city</span><br><span class="line">    <span class="keyword">FROM</span> weather;</span><br><span class="line"># 组合使用DISTINCT和ORDER BY来保证获取一致的结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city</span><br><span class="line">    <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure><h2 id="连表查询："><a href="#连表查询：" class="headerlink" title="连表查询："></a>连表查询：</h2><p>假如我们有一个表t1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> num | name</span><br><span class="line">-----+------</span><br><span class="line">   1 | a</span><br><span class="line">   2 | b</span><br><span class="line">   3 | c</span><br></pre></td></tr></table></figure></p><p>t2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> num | value</span><br><span class="line">-----+-------</span><br><span class="line">   1 | xxx</span><br><span class="line">   3 | yyy</span><br><span class="line">   5 | zzz</span><br></pre></td></tr></table></figure></p><h3 id="如果两个表分别有-N-和-M-行，连接表将有-N-M-行。"><a href="#如果两个表分别有-N-和-M-行，连接表将有-N-M-行。" class="headerlink" title="如果两个表分别有 N 和 M 行，连接表将有 N * M 行。"></a>如果两个表分别有 N 和 M 行，连接表将有 N * M 行。</h3><p><code>FROM T1 CROSS JOIN T2</code>等效于<code>FROM T1 INNER JOIN T2 ON TRUE</code>（见下文）。它也等效于<code>FROM T1,T2</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> t2;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   1 | a    |   3 | yyy</span><br><span class="line">   1 | a    |   5 | zzz</span><br><span class="line">   2 | b    |   1 | xxx</span><br><span class="line">   2 | b    |   3 | yyy</span><br><span class="line">   2 | b    |   5 | zzz</span><br><span class="line">   3 | c    |   1 | xxx</span><br><span class="line">   3 | c    |   3 | yyy</span><br><span class="line">   3 | c    |   5 | zzz</span><br><span class="line">(9 rows)</span><br></pre></td></tr></table></figure></p><p>T1表的 num 和T2表的num 相等的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   3 | c    |   3 | yyy</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure></p><p>是上面的简写，并且<code>JOIN USING</code>的输出会<strong>废除冗余列</strong>:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">USING</span> (<span class="keyword">num</span>);</span><br><span class="line"> num | name | value</span><br><span class="line"><span class="comment">-----+------+-------</span></span><br><span class="line">   1 | a    | xxx</span><br><span class="line">   3 | c    | yyy</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure></p><p><code>NATURAL</code>是<code>USING</code>的缩写形式:<br>该列表由那些在两个表里都出现了的列名组成<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">NATURAL</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2;</span><br><span class="line"> num | name | value</span><br><span class="line"><span class="comment">-----+------+-------</span></span><br><span class="line">   1 | a    | xxx</span><br><span class="line">   3 | c    | yyy</span><br><span class="line">(2 rows)</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   2 | b    |     |</span><br><span class="line">   3 | c    |   3 | yyy</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure><p>生成的连接表里为来自 T1 的每一行都至少包含一行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">USING</span> (<span class="keyword">num</span>);</span><br><span class="line"> num | name | value</span><br><span class="line"><span class="comment">-----+------+-------</span></span><br><span class="line">   1 | a    | xxx</span><br><span class="line">   2 | b    |</span><br><span class="line">   3 | c    | yyy</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure></p><p>因此，生成的连接表里为来自 T2 的每一行都至少包含一行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   3 | c    |   3 | yyy</span><br><span class="line">     |      |   5 | zzz</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure></p><p>为 T2 中每一个无法在连接条件上匹配 T1 里任何一行的行返回一个连接行，该连接行中 T1 的列用空值补齐。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">FULL</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   2 | b    |     |</span><br><span class="line">   3 | c    |   3 | yyy</span><br><span class="line">     |      |   5 | zzz</span><br><span class="line">(4 rows)</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num <span class="keyword">AND</span> t2.value = <span class="string">'xxx'</span>;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">   2 | b    |     |</span><br><span class="line">   3 | c    |     |</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">ON</span> t1.num = t2.num <span class="keyword">WHERE</span> t2.value = <span class="string">'xxx'</span>;</span><br><span class="line"> num | name | num | value</span><br><span class="line"><span class="comment">-----+------+-----+-------</span></span><br><span class="line">   1 | a    |   1 | xxx</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products <span class="keyword">SET</span> xx = <span class="number">10</span> <span class="keyword">WHERE</span> xx = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PostgreSQL基础&quot;&gt;&lt;a href=&quot;#PostgreSQL基础&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL基础&quot;&gt;&lt;/a&gt;PostgreSQL基础&lt;/h1&gt;&lt;p&gt;创建新表：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; xxx (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;,	# 普通的整数类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;), # 一个可以存储最长 &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; 个字符的任意字符串的数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt;,		# 一种用于存储单精度浮点数的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;		# 时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;删表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; tablename;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在表中增加行：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; tablename (xx, xx, xx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt;(xx, xx, xx)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://xzh.hi.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="PostgreSQL" scheme="http://xzh.hi.cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL/"/>
    
    
      <category term="数据库" scheme="http://xzh.hi.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="PostgreSQL" scheme="http://xzh.hi.cn/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>CSS之em/rem</title>
    <link href="http://xzh.hi.cn/CSS%E4%B9%8Bem-rem.html"/>
    <id>http://xzh.hi.cn/CSS之em-rem.html</id>
    <published>2018-08-13T10:51:00.000Z</published>
    <updated>2018-08-13T10:53:40.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS之em-rem"><a href="#CSS之em-rem" class="headerlink" title="CSS之em/rem"></a>CSS之em/rem</h1><p>#blog<br>先来个一句话概括：</p><ul><li><code>em</code>相对于父元素</li><li><code>rem</code>相对于根元素<br>所以这些都是相对单位。</li></ul><p>默认<code>font-size</code>为16px所以我们可以知道<code>1px和1em</code>之间的关系</p><blockquote><p>1em = 16px<br>1px = 1 ÷ 16 = 0.0625em  </p></blockquote><p>那么我们知道具体的px值后我们就能直接换算，比如：</p><blockquote><p>我想要800px转换成<code>em</code><br>800 * 0.0625em = 50em  </p></blockquote><p>那么如果父元素不为16px，根据上面我们可以得出一个公式：</p><blockquote><p>1 ÷ 父元素的font-size × 你想要的像素值 = em值  </p></blockquote><h2 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h2><p>那么REM其实和EM没啥区别。<br>本质在REM以<code>&lt;html&gt;</code>标签中的<code>font-size</code>为依据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS之em-rem&quot;&gt;&lt;a href=&quot;#CSS之em-rem&quot; class=&quot;headerlink&quot; title=&quot;CSS之em/rem&quot;&gt;&lt;/a&gt;CSS之em/rem&lt;/h1&gt;&lt;p&gt;#blog&lt;br&gt;先来个一句话概括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="CSS" scheme="http://xzh.hi.cn/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xzh.hi.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>K8s基本概念</title>
    <link href="http://xzh.hi.cn/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <id>http://xzh.hi.cn/K8s基本概念.html</id>
    <published>2018-07-15T14:24:00.000Z</published>
    <updated>2018-07-15T14:44:54.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8s基本概念"><a href="#K8s基本概念" class="headerlink" title="K8s基本概念"></a>K8s基本概念</h1><p>基本概念<br>以下都可以看作一种资源对象</p><ul><li>Node</li><li>Pod</li><li>Replication Controller</li><li>Service<br>以上通过k8s提高的 <code>kubectl</code> 或者 <code>Api</code> 调用进行操作，并保存在 <code>etcd</code> 中。</li></ul><p>k8s集群由两类节点组成：<strong>Master</strong> 和 <strong>Node</strong>。<br>在<code>Master</code>上运行<code>etcd</code>、<code>API Server</code>、<code>Controller Manager</code>和<code>Scheduler</code>四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。</p><p>在每个<code>Node</code> 上运行<code>kubelet</code>、<code>Proxy</code>和<code>Docker Daemon</code>三个组件。<br>它们负责对本节点上的<code>Pod</code>的生命周期进行管理，以及实现服务代理的功能。<br>另外在所有节点上都可以运行<code>Kubectl</code>命令行工具，它提供了k8s的集群管理工具集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;K8s基本概念&quot;&gt;&lt;a href=&quot;#K8s基本概念&quot; class=&quot;headerlink&quot; title=&quot;K8s基本概念&quot;&gt;&lt;/a&gt;K8s基本概念&lt;/h1&gt;&lt;p&gt;基本概念&lt;br&gt;以下都可以看作一种资源对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
      <category term="docker" scheme="http://xzh.hi.cn/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xzh.hi.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Draft——Entities</title>
    <link href="http://xzh.hi.cn/Draft%E2%80%94%E2%80%94Entities.html"/>
    <id>http://xzh.hi.cn/Draft——Entities.html</id>
    <published>2018-07-07T11:36:00.000Z</published>
    <updated>2018-07-07T11:36:38.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Draft——Entities"><a href="#Draft——Entities" class="headerlink" title="Draft——Entities"></a>Draft——Entities</h1><p>本文讨论实体系统，<code>Draft</code> 用于使用元数据注释文本范围。<code>Entities</code>引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来<code>Entities</code>。</p><p>在<code>Draft</code>存储库中，<a href="https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link" target="_blank" rel="noopener">链接编辑器</a>和<code>Entities</code>演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。</p><p><a href="https://draftjs.org/docs/api-reference-entity.html" target="_blank" rel="noopener">Entity API Reference</a>提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。</p><p>有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的<a href="https://draftjs.org/docs/v0-10-api-migration.html#content" target="_blank" rel="noopener">v0.10 API迁移指南</a>。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Entity</code>是表示<code>Draft</code>编辑器中一系列文本的元数据的对象。它有三个属性：</p><ul><li>type: 一个字符串，表示它是什么类型的实体，例如’LINK’，’MENTION’，’PHOTO’。</li><li>mutability: 不要与不变性的<code>immutable-js</code>混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。</li><li>data: 包含实体元数据的可选对象。例如，<code>LINK</code>实体可能包含一个包含该链接的<code>href</code>值的数据对象。</li></ul><p>所有<code>Entities</code>都存储在<code>ContentState</code>记录中。<code>ContentState</code>中的键引用<code>Entities</code>，用于装饰带注释的范围的React组件。</p><p>使用装饰器或自定义块组件，您可以根据<code>Entities</code>元数据向编辑器添加丰富的渲染。</p><h2 id="创建和回收-Entities"><a href="#创建和回收-Entities" class="headerlink" title="创建和回收 Entities"></a>创建和回收 Entities</h2><p>应使用<code>contentState.createEntity</code>创建<code>Entities</code>，它接受上面的三个属性作为参数。此方法返回更新的<code>ContentState</code>记录以包含新创建的实体，然后您可以调用<code>contentState.getLastCreatedEntityKey</code>来获取新创建的<code>Entities</code>记录的密钥。</p><p>此键是将<code>Entities</code>应用于内容时应使用的值。例如，<code>Modifier</code>模块包含<code>applyEntity</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentState = editorState.getCurrentContent();</span><br><span class="line"><span class="keyword">const</span> contentStateWithEntity = contentState.createEntity(</span><br><span class="line">  <span class="string">'LINK'</span>,</span><br><span class="line">  <span class="string">'MUTABLE'</span>,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">'http://www.zombo.com'</span>&#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> entityKey = contentStateWithEntity.getLastCreatedEntityKey();</span><br><span class="line"><span class="keyword">const</span> contentStateWithLink = Modifier.applyEntity(</span><br><span class="line">  contentStateWithEntity,</span><br><span class="line">  selectionState,</span><br><span class="line">  entityKey</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>对于给定的文本范围，您可以通过在<code>ContentBlock</code>对象上使用<code>getEntityAt()</code>方法提取其关联的实体键，并传入目标偏移值。</p><h2 id="Mutability"><a href="#Mutability" class="headerlink" title="Mutability"></a>Mutability</h2><p><code>Entities</code>可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。</p><p><code>SelectionState</code>对象的最常见用途是通过<code>EditorState.getSelection()</code>，它提供当前在编辑器中呈现的<code>SelectionState</code>。</p><p>由于<code>Draft</code>使用<code>ContentBlock</code>对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的<code>ContentBlock</code>的键，并且偏移值是块内的字符偏移。</p><h2 id="Start-End-vs-Anchor-Focus"><a href="#Start-End-vs-Anchor-Focus" class="headerlink" title="Start/End vs. Anchor/Focus"></a>Start/End vs. Anchor/Focus</h2><p>当实际在浏览器中呈现选择状态时，<code>anchor</code>和<code>focus</code>的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑<code>start</code>和<code>end</code>更合适。</p><p>因此，<code>SelectionState</code>会公开<code>anchor</code>/<code>focus</code>值和<code>start</code>/<code>end</code>值。管理选择行为时，我们建议您使用<code>anchor</code>和<code>focus</code>值来维护选择方向。但是，在管理内容操作时，我们建议您使用<code>start</code>和<code>end</code>值。</p><p>例如，当基于<code>SelectionState</code>从块中提取文本切片时，选择是否向后是无关紧要的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ar selectionState = editorState.getSelection();</span><br><span class="line"><span class="keyword">var</span> anchorKey = selectionState.getAnchorKey();</span><br><span class="line"><span class="keyword">var</span> currentContent = editorState.getCurrentContent();</span><br><span class="line"><span class="keyword">var</span> currentContentBlock = currentContent.getBlockForKey(anchorKey);</span><br><span class="line"><span class="keyword">var</span> start = selectionState.getStartOffset();</span><br><span class="line"><span class="keyword">var</span> end = selectionState.getEndOffset();</span><br><span class="line"><span class="keyword">var</span> selectedText = currentContentBlock.getText().slice(start, end);</span><br></pre></td></tr></table></figure><p>请注意，<code>SelectionState</code>本身仅跟踪锚点和焦点值。导出起始值和结束值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Draft——Entities&quot;&gt;&lt;a href=&quot;#Draft——Entities&quot; class=&quot;headerlink&quot; title=&quot;Draft——Entities&quot;&gt;&lt;/a&gt;Draft——Entities&lt;/h1&gt;&lt;p&gt;本文讨论实体系统，&lt;code&gt;Draft&lt;/code&gt; 用于使用元数据注释文本范围。&lt;code&gt;Entities&lt;/code&gt;引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来&lt;code&gt;Entities&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Draft&lt;/code&gt;存储库中，&lt;a href=&quot;https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接编辑器&lt;/a&gt;和&lt;code&gt;Entities&lt;/code&gt;演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://draftjs.org/docs/api-reference-entity.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entity API Reference&lt;/a&gt;提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。&lt;/p&gt;
&lt;p&gt;有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的&lt;a href=&quot;https://draftjs.org/docs/v0-10-api-migration.html#content&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v0.10 API迁移指南&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xzh.hi.cn/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xzh.hi.cn/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xzh.hi.cn/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Draft —— Rich Styling</title>
    <link href="http://xzh.hi.cn/Draft-RichUtils.html"/>
    <id>http://xzh.hi.cn/Draft-RichUtils.html</id>
    <published>2018-07-06T13:02:00.000Z</published>
    <updated>2018-07-06T13:02:52.463Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到<code>Dragt</code>编辑器中。</p><p>A <a href="https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich" target="_blank" rel="noopener">richTextExample</a> is also available to follow along.</p><h2 id="EditorState-Yours-to-Command"><a href="#EditorState-Yours-to-Command" class="headerlink" title="EditorState: Yours to Command"></a>EditorState: Yours to Command</h2><p>上一篇文章介绍了<code>EditorState</code>对象作为编辑器完整状态的快照,由<code>Editor</code>核心通过<code>onChange props</code>给的.</p><p>但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该<code>EditorState</code>对象。</p><p>例如，对于内联和块样式行为，<code>RichUtils</code> 模块提供了许多有用的函数来帮助操作状态。</p><p>同样，<a href="https://draftjs.org/docs/api-reference-modifier.html" target="_blank" rel="noopener">Modifier</a> 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的<code>EditorState</code>对象。</p><p>对于此示例，我们将坚持使用<code>RichUtils</code>来演示如何在最顶层组件中应用基本的丰富样式。</p><a id="more"></a><h2 id="RichUtils-and-Key-Commands"><a href="#RichUtils-and-Key-Commands" class="headerlink" title="RichUtils and Key Commands"></a>RichUtils and Key Commands</h2><p><code>RichUtils</code> 包含有关Web编辑器可用的核心键命令的信息，例如<code>Cmd + B（粗体）</code>，<code>Cmd + I（斜体）</code>等。</p><p>我们可以通过<code>handleKeyCommand</code> <code>prop</code>观察和处理关键命令，并将它们挂钩到<code>RichUtils</code>中以应用或删除所需的样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Editor, EditorState, RichUtils&#125; <span class="keyword">from</span> <span class="string">'draft-js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;editorState&#125;);</span><br><span class="line">    <span class="keyword">this</span>.handleKeyCommand = <span class="keyword">this</span>.handleKeyCommand.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleKeyCommand(command, editorState) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class="line">    <span class="keyword">if</span> (newState) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onChange(newState);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'handled'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'not-handled'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Editor</span><br><span class="line">        editorState=&#123;<span class="keyword">this</span>.state.editorState&#125;</span><br><span class="line">        handleKeyCommand=&#123;<span class="keyword">this</span>.handleKeyCommand&#125;</span><br><span class="line">        onChange=&#123;<span class="keyword">this</span>.onChange&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>handleKeyCommand  </p><p>提供给<code>handleKeyCommand</code>的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。<code>editorState</code>参数表示最新的编辑器状态，因为在处理密钥时它可能会被<code>Draft</code>内部更改。在<code>handleKeyCommand</code>中使用编辑器状态的这个实例。有关详细信息，请参阅<a href="https://draftjs.org/docs/advanced-topics-key-bindings.html" target="_blank" rel="noopener"> Advanced Topics - Key Binding</a>，以及有关函数返回处理或未处理的详细信息。  </p></blockquote><h2 id="Styling-Controls-in-UI"><a href="#Styling-Controls-in-UI" class="headerlink" title="Styling Controls in UI"></a>Styling Controls in UI</h2><p>在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。</p><p>这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line"></span><br><span class="line">  _onBoldClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.onChange(RichUtils.toggleInlineStyle(<span class="keyword">this</span>.state.editorState, <span class="string">'BOLD'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>._onBoldClick.bind(<span class="keyword">this</span>)&#125;&gt;Bold&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Editor</span></span><br><span class="line"><span class="regexp">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class="line"><span class="regexp">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class="line"><span class="regexp">          onChange=&#123;this.onChange&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到&lt;code&gt;Dragt&lt;/code&gt;编辑器中。&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;richTextExample&lt;/a&gt; is also available to follow along.&lt;/p&gt;
&lt;h2 id=&quot;EditorState-Yours-to-Command&quot;&gt;&lt;a href=&quot;#EditorState-Yours-to-Command&quot; class=&quot;headerlink&quot; title=&quot;EditorState: Yours to Command&quot;&gt;&lt;/a&gt;EditorState: Yours to Command&lt;/h2&gt;&lt;p&gt;上一篇文章介绍了&lt;code&gt;EditorState&lt;/code&gt;对象作为编辑器完整状态的快照,由&lt;code&gt;Editor&lt;/code&gt;核心通过&lt;code&gt;onChange props&lt;/code&gt;给的.&lt;/p&gt;
&lt;p&gt;但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该&lt;code&gt;EditorState&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;例如，对于内联和块样式行为，&lt;code&gt;RichUtils&lt;/code&gt; 模块提供了许多有用的函数来帮助操作状态。&lt;/p&gt;
&lt;p&gt;同样，&lt;a href=&quot;https://draftjs.org/docs/api-reference-modifier.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Modifier&lt;/a&gt; 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的&lt;code&gt;EditorState&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;对于此示例，我们将坚持使用&lt;code&gt;RichUtils&lt;/code&gt;来演示如何在最顶层组件中应用基本的丰富样式。&lt;/p&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xzh.hi.cn/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xzh.hi.cn/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xzh.hi.cn/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Draft.js —— API Basics</title>
    <link href="http://xzh.hi.cn/Draft.js%20%E2%80%94%E2%80%94API%20Basics.html"/>
    <id>http://xzh.hi.cn/Draft.js ——API Basics.html</id>
    <published>2018-07-05T12:49:00.000Z</published>
    <updated>2018-07-05T12:50:47.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Draft-js-——API-Basics"><a href="#Draft-js-——API-Basics" class="headerlink" title="Draft.js ——API Basics"></a>Draft.js ——API Basics</h1><h2 id="API-Basics"><a href="#API-Basics" class="headerlink" title="API Basics"></a>API Basics</h2><p>React组件<code>Editor</code>是作为HTML5的<code>ContentEditable</code>元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。</p><p>简要回顾，受控输入涉及两个关键部分：</p><ol><li>一个<code>state</code> 代表输入<code>value</code>的值。</li><li><code>onChange</code>函数用于接受输入的值并更新。</li></ol><p>这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新<code>DOM</code>以提供有关用户编写的文本的信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">evt</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: evt.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><p>顶级组件可以通过此值state属性保持对输入状态的控制。<br><a id="more"></a></p><h2 id="受控富文本"><a href="#受控富文本" class="headerlink" title="受控富文本"></a>受控富文本</h2><p>在React富文本方案中，有两个明显的问题：</p><ol><li>一串字符串纯文本不足以表示富编辑器的复杂状态</li><li>HTML5的 <code>ContentEditable</code>元素没有可用的<code>onChange</code>事件。</li></ol><p><code>State</code> 因此就被作为一个单个不可变的<code>EditorState</code>对象，并且和<code>onChange</code>一起在<code>Editor</code>核心中实现，以将此状态值提供给顶部。</p><p><code>EditorState</code>对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的<code>EditorState</code>对象。<br>注意：由于横过不可变对象的数据持久性，这仍然有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Editor, EditorState&#125; <span class="keyword">from</span> <span class="string">'draft-js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;editorState&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Editor</span> <span class="attr">editorState</span>=<span class="string">&#123;this.state.editorState&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>对于编辑器DOM中发生的任何编辑或选择更改，<code>onChange</code>处理程序将根据这些更改使用最新的<code>EditorState</code>对象执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Draft-js-——API-Basics&quot;&gt;&lt;a href=&quot;#Draft-js-——API-Basics&quot; class=&quot;headerlink&quot; title=&quot;Draft.js ——API Basics&quot;&gt;&lt;/a&gt;Draft.js ——API Basics&lt;/h1&gt;&lt;h2 id=&quot;API-Basics&quot;&gt;&lt;a href=&quot;#API-Basics&quot; class=&quot;headerlink&quot; title=&quot;API Basics&quot;&gt;&lt;/a&gt;API Basics&lt;/h2&gt;&lt;p&gt;React组件&lt;code&gt;Editor&lt;/code&gt;是作为HTML5的&lt;code&gt;ContentEditable&lt;/code&gt;元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。&lt;/p&gt;
&lt;p&gt;简要回顾，受控输入涉及两个关键部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个&lt;code&gt;state&lt;/code&gt; 代表输入&lt;code&gt;value&lt;/code&gt;的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onChange&lt;/code&gt;函数用于接受输入的值并更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新&lt;code&gt;DOM&lt;/code&gt;以提供有关用户编写的文本的信息。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyInput&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onChange = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;evt&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: evt.target.value&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.state.value&amp;#125;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onChange&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;this.onChange&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;顶级组件可以通过此值state属性保持对输入状态的控制。&lt;br&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xzh.hi.cn/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xzh.hi.cn/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xzh.hi.cn/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-dev-server配合react-router4</title>
    <link href="http://xzh.hi.cn/Webpack-dev-server%E9%85%8D%E5%90%88react-router4.html"/>
    <id>http://xzh.hi.cn/Webpack-dev-server配合react-router4.html</id>
    <published>2018-06-30T13:28:00.000Z</published>
    <updated>2018-06-30T13:28:43.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack-dev-server配合react-router4"><a href="#Webpack-dev-server配合react-router4" class="headerlink" title="Webpack-dev-server配合react-router4"></a>Webpack-dev-server配合react-router4</h1><p>在React-router4下，用 <code>BrowserRouter</code> 路由到一个组件。比如说</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg" alt=""><br>我刷新之后就会显示 <code>Cannot GET /dashboard</code>！？<br>原来devServe需要以下设置：<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg" alt=""><br><a id="more"></a><br>对于单页面程序，浏览器的<code>brower histroy</code>可以设置成<code>html5 history api</code>或者<code>hash</code>，而设置为<code>html5 api</code>的.<br>如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.<br>所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。<br>并且React-router的<code>BrowserRouter</code>就是基于<code>browerhistroy</code>。</p><h2 id="还没完"><a href="#还没完" class="headerlink" title="还没完?"></a>还没完?</h2><p>如果你发现你这样设置了还是报<code>Cannot GET /dashboard</code> 那么我们应该这样设置<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg" alt=""><br>没设置是这样<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg" alt=""></p><p>如此操作之后我们就会发现</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg" alt=""><br>妥了，随意刷新吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Webpack-dev-server配合react-router4&quot;&gt;&lt;a href=&quot;#Webpack-dev-server配合react-router4&quot; class=&quot;headerlink&quot; title=&quot;Webpack-dev-server配合react-router4&quot;&gt;&lt;/a&gt;Webpack-dev-server配合react-router4&lt;/h1&gt;&lt;p&gt;在React-router4下，用 &lt;code&gt;BrowserRouter&lt;/code&gt; 路由到一个组件。比如说&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我刷新之后就会显示 &lt;code&gt;Cannot GET /dashboard&lt;/code&gt;！？&lt;br&gt;原来devServe需要以下设置：&lt;br&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Webpack" scheme="http://xzh.hi.cn/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://xzh.hi.cn/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序客服自动回复消息功能采坑（完）</title>
    <link href="http://xzh.hi.cn/%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD%E5%85%A8%E8%A7%A3.html"/>
    <id>http://xzh.hi.cn/微信客服消息功能全解.html</id>
    <published>2018-06-29T15:19:00.000Z</published>
    <updated>2018-07-04T05:06:17.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序客服自动回复消息功能采坑（完）"><a href="#微信小程序客服自动回复消息功能采坑（完）" class="headerlink" title="微信小程序客服自动回复消息功能采坑（完）"></a>微信小程序客服自动回复消息功能采坑（完）</h1><p>小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 <code>&lt;button open-type=&quot;contact&quot; /&gt;</code> 可以显示进入客服会话按钮。<br>然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。<br>但是有个问题，我们如何做到自动回复呢？<br>那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html" target="_blank" rel="noopener">接入指引 · 小程序</a>附上官网接入指南，这可是相当的简洁。</p><h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p>填写服务器配置的图：<br><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626" alt=""><br><a id="more"></a><br>在这里填写的同时我们需要在后台写<code>get</code>请求验证。<br>官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。<br>这里我是用<code>express</code>写得提供一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = [params.token, params.timestamp, params.nonce].sort().join(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line">    sha1.update(key);</span><br><span class="line">    <span class="keyword">return</span> sha1.digest(<span class="string">'hex'</span>) === params.signature;</span><br><span class="line">  &#125;</span><br><span class="line">app.get(<span class="string">'/wxlalalala'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="string">'xxxxx'</span>; <span class="comment">// 填写服务器配置上所填的token</span></span><br><span class="line">    <span class="keyword">let</span> isCheck = checkSignature(&#123;</span><br><span class="line">      signature: req.query.signature,</span><br><span class="line">      timestamp: req.query.timestamp,</span><br><span class="line">      nonce: req.query.nonce,</span><br><span class="line">      token: token,</span><br><span class="line">    &#125;);</span><br><span class="line">    req.body = req.query.echostr;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">    <span class="keyword">return</span> req.body;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。</p><h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2><p>当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。<br>当然第一我们需要先去拿<code>access_token</code>。没有这个我们啥事情都做不了。<br>给上一个官方网站：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token" target="_blank" rel="noopener">接口调用凭证 · 小程序</a>，但是毫无代码示例，算了还在自己撸吧。<br>以下自己的code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> access_token = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getAccessToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access_token !== <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> access_token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> URL =</span><br><span class="line">      <span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&amp;appid=xxxx&amp;secret=sssss'</span>; <span class="comment">// grant_type一定要填client_credential.</span></span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: URL,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request(options, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">          access_token = <span class="built_in">JSON</span>.parse(body).access_token;</span><br><span class="line">          <span class="keyword">let</span> expires_in = <span class="built_in">parseInt</span>(<span class="built_in">JSON</span>.parse(body).expires_in) - <span class="number">10</span>;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            access_token = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">//getAccessToken();</span></span><br><span class="line">          &#125;, expires_in * <span class="number">1000</span>);</span><br><span class="line">          resolve(access_token);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>因为token有7200s的过期时间，所以就存在内存里了。<br>Ok这个我们就有<code>access_token</code>能去做客服自动回复啦！</p><h2 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h2><p>再来一个官方客服发送消息的文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html" target="_blank" rel="noopener">发送客服消息 · 小程序</a>，发现又是啥都没用。。。<br>还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postJson = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    url: param.url,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: param.body,</span><br><span class="line">    json: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  request(options, <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">error, response, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">      param.success(response.errcode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      param.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTextMessage</span>(<span class="params">content, data, access_token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> postJson(&#123;</span><br><span class="line">    url:</span><br><span class="line">      <span class="string">'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token='</span> +</span><br><span class="line">      access_token,</span><br><span class="line">    body: &#123;</span><br><span class="line">      touser: data.FromUserName,</span><br><span class="line">      msgtype: <span class="string">'text'</span>,</span><br><span class="line">      text: &#123;</span><br><span class="line">        content: content,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res, <span class="string">'send successed!1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h2><p>回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">客服消息 · 小程序</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/wxlallalal'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="string">'xxxxx'</span>;<span class="comment">// 填写服务器配置那的token</span></span><br><span class="line">    <span class="keyword">let</span> reqBody = req.body;</span><br><span class="line">    <span class="keyword">let</span> isCheck = checkSignature(&#123;</span><br><span class="line">      signature: req.query.signature,</span><br><span class="line">      timestamp: req.query.timestamp,</span><br><span class="line">      nonce: req.query.nonce,</span><br><span class="line">      token: token,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (isCheck) &#123;</span><br><span class="line">      <span class="keyword">let</span> welcome= <span class="string">'欢迎'</span>;</span><br><span class="line">         <span class="keyword">switch</span> (reqBody.MsgType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'text'</span>: &#123;</span><br><span class="line">          <span class="comment">//文本消息</span></span><br><span class="line">          sendTextMessage(<span class="string">'您好，【'</span>+reqBody.Content+<span class="string">'】是未知命令，已转发给人工处理。\n'</span>+welcomeTips, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'image'</span>: &#123;</span><br><span class="line">          <span class="comment">//用户在客服会话中发送图片消息</span></span><br><span class="line">          sendImageMessage(<span class="string">'xxxxxxx'</span>, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'event'</span>: &#123;</span><br><span class="line">            sendTextMessage(welcome, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">'success'</span>);</span><br><span class="line">    next();</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>完成啦愉快的使用自动客服回复！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微信小程序客服自动回复消息功能采坑（完）&quot;&gt;&lt;a href=&quot;#微信小程序客服自动回复消息功能采坑（完）&quot; class=&quot;headerlink&quot; title=&quot;微信小程序客服自动回复消息功能采坑（完）&quot;&gt;&lt;/a&gt;微信小程序客服自动回复消息功能采坑（完）&lt;/h1&gt;&lt;p&gt;小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 &lt;code&gt;&amp;lt;button open-type=&amp;quot;contact&amp;quot; /&amp;gt;&lt;/code&gt; 可以显示进入客服会话按钮。&lt;br&gt;然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。&lt;br&gt;但是有个问题，我们如何做到自动回复呢？&lt;br&gt;那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。&lt;br&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;接入指引 · 小程序&lt;/a&gt;附上官网接入指南，这可是相当的简洁。&lt;/p&gt;
&lt;h2 id=&quot;First&quot;&gt;&lt;a href=&quot;#First&quot; class=&quot;headerlink&quot; title=&quot;First&quot;&gt;&lt;/a&gt;First&lt;/h2&gt;&lt;p&gt;填写服务器配置的图：&lt;br&gt;&lt;img src=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://xzh.hi.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://xzh.hi.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Sass小笔记</title>
    <link href="http://xzh.hi.cn/Sass%E5%B0%8F%E7%AC%94%E8%AE%B0.html"/>
    <id>http://xzh.hi.cn/Sass小笔记.html</id>
    <published>2018-06-21T13:26:00.000Z</published>
    <updated>2018-07-12T12:55:07.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br><span class="line">-&gt; </span><br><span class="line">article a &#123; color: blue &#125;</span><br><span class="line">article a:hover &#123; color: red &#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">  style: solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="mixin"><a href="#mixin" class="headerlink" title="@mixin"></a>@mixin</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded-corners &#123;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">notice &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  @<span class="keyword">include</span> rounded-corners;</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin传参"><a href="#mixin传参" class="headerlink" title="@mixin传参"></a>@mixin传参</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> link-colors(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</span><br><span class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sass最终生成的是：</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span>:hover &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span>:visited &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过选择器继承继承样式</span></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;父选择器的标识符-amp&quot;&gt;&lt;a href=&quot;#父选择器的标识符-amp&quot; class=&quot;headerlink&quot; title=&quot;父选择器的标识符&amp;amp;&quot;&gt;&lt;/a&gt;父选择器的标识符&amp;amp;&lt;/h2&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover &amp;#123; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;article a &amp;#123; color: blue &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;article a:hover &amp;#123; color: red &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;嵌套属性&quot;&gt;&lt;a href=&quot;#嵌套属性&quot; class=&quot;headerlink&quot; title=&quot;嵌套属性&quot;&gt;&lt;/a&gt;嵌套属性&lt;/h2&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  style: solid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-style&lt;/span&gt;: solid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://xzh.hi.cn/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xzh.hi.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>玩Deno遇到问题的解决方案</title>
    <link href="http://xzh.hi.cn/%E7%8E%A9Deno%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://xzh.hi.cn/玩Deno遇到问题的解决方案.html</id>
    <published>2018-06-02T07:30:00.000Z</published>
    <updated>2018-08-26T12:07:13.131Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。<br>但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！<br>再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。</p><p>附上项目地址:<br><a href="https://github.com/ry/deno" target="_blank" rel="noopener">GitHub - ry/deno: A secure TypeScript runtime on V8</a></p><a id="more"></a><h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>在开始之前请准备好v<em>p</em>n*。<br>大家需要去安装 <code>Go</code> 环境.并且去 <code>export</code> 各种Go相关的环境变量.</p><p>以下是方正大佬给我提供解决方案，很感谢。<br><a href="https://github.com/ry/deno/issues/92" target="_blank" rel="noopener">https://github.com/ry/deno/issues/92</a><br>Mac OS可以参考以下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )</span><br><span class="line">export GOPATH=$HOME/go # means `~/go` </span><br><span class="line">export PATH=$PATH:$HOME/go/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure></p><p>如果是Mac的话，我们还需要去安装<code>xcode-select</code><br> <a href="http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/" target="_blank" rel="noopener">http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/</a> </p><p>我们还需要安装Protobuf 。Ubuntu下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip</span><br><span class="line">unzip protoc-3.1.0-linux-x86_64.zip</span><br><span class="line">export PATH=$HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>Mac下简单粗暴：<br><code>brew install protobuf</code><br>再来装一个<code>README</code>中没提及的<br><code>brew install pkg-config</code></p><h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>Ok以上一切正常，没出啥幺蛾子。<br>我们继续，现在需要 <code>protoc-gen-go</code>  和  <code>go-bindata</code>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure></p><p>这步需要等一小伙，记得一定要v<em>p</em>n啊!</p><h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>现在我们来困难重重的 <code>v8worker2</code> 啦。我们需要get 然后 build 它。大概会花30min<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/ry/v8worker2</span><br><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">./build.py --use_ccache</span><br></pre></td></tr></table></figure></p><p>接下来大家可能遇到的情况：<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png" alt=""><br>这种情况说明我们 <code>clone</code> 下的v8是有损坏的，然后我们需要做以下操作</p><ol><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">rm -rf v8</span><br><span class="line">git clone https://github.com/v8/v8.git</span><br><span class="line">cd v8</span><br><span class="line">git checkout fe12316ec4b4a101923e395791ca55442e62f4cc</span><br></pre></td></tr></table></figure></li></ol><p>或者</p><ol start="2"><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools</span><br><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">rm -rf v8</span><br><span class="line">fetch v8</span><br><span class="line">cd v8</span><br><span class="line">git checkout fe12316</span><br></pre></td></tr></table></figure></li></ol><p>因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入<code>fetch</code>发现命令行出现<code>command not found: fetch</code>。<br>你可以尝试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">depot_tools/./fetch v8</span><br></pre></td></tr></table></figure></p><p>感谢 <a href="https://github.com/ry/deno/issues/92" target="_blank" rel="noopener">go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub</a> 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz </p><p>如果你发现自己的<code>depot_tools</code>文件夹下啥都没有。你需要执行以下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure></p><p>之后再去<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">./build.py</span><br></pre></td></tr></table></figure></p><p>你看见了以下，那么就恭喜啦！他在编译了<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png" alt=""></p><h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>最后一步<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/ry/deno/...</span><br><span class="line">cd $GOPATH/src/github.com/ry/deno</span><br><span class="line">make # 稍等片刻</span><br><span class="line">./deno testdata/001_hello.js # Output: Hello World</span><br></pre></td></tr></table></figure></p><p>又是熟悉的Hello World！<br>在<code>go get -u github.com/ry/deno/...</code>遇到以下问题不要急，直接<code>make deno</code>走你！<br><a href="https://github.com/ry/deno/issues/71" target="_blank" rel="noopener">deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get  -u github.com/ry/deno/...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> github.com/ry/deno</span></span><br><span class="line">../deno/dispatch.go:10:26: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:30:10: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:62:14: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:68:34: undefined: Msg</span><br><span class="line">../deno/dispatch.go:119:13: select case must be receive, send or assign recv</span><br><span class="line">../deno/fetch.go:13:11: undefined: Msg</span><br><span class="line">../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ</span><br><span class="line">../deno/fetch.go:29:14: undefined: Msg</span><br><span class="line">../deno/main.go:38:15: undefined: Asset</span><br><span class="line">../deno/main.go:110:19: undefined: Msg</span><br><span class="line">../deno/main.go:110:19: too many errors</span><br></pre></td></tr></table></figure></p><p>如果你在这<code>make deno</code>遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png" alt=""></p><p>之后再次运行<code>make deno</code>完成！<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。&lt;br&gt;但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！&lt;br&gt;再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。&lt;/p&gt;
&lt;p&gt;附上项目地址:&lt;br&gt;&lt;a href=&quot;https://github.com/ry/deno&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub - ry/deno: A secure TypeScript runtime on V8&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://xzh.hi.cn/categories/Node-js/"/>
    
    
      <category term="go" scheme="http://xzh.hi.cn/tags/go/"/>
    
      <category term="TypeScript" scheme="http://xzh.hi.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>《Css权威指南》</title>
    <link href="http://xzh.hi.cn/CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.html"/>
    <id>http://xzh.hi.cn/CSS权威指南.html</id>
    <published>2018-05-28T12:18:00.000Z</published>
    <updated>2018-05-28T12:18:47.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS权威指南"><a href="#CSS权威指南" class="headerlink" title="CSS权威指南"></a>CSS权威指南</h1><h2 id="候选样式表"><a href="#候选样式表" class="headerlink" title="候选样式表"></a>候选样式表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span> <span class="attr">title</span>=<span class="string">"Big Text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>候选样式表在大多数<code>Gecko</code>的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.<br>或者设置同样的<code>title</code>属性，之后设置不同的<code>media</code>属性，在各种场景会使用对应的<code>css</code>文件</p><h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>@import也可以应用媒体。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import url(styles.css) all;</span><br><span class="line">@import url(styles1.css) print;</span><br><span class="line">@import url(styles2.css) print, screen;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS权威指南&quot;&gt;&lt;a href=&quot;#CSS权威指南&quot; class=&quot;headerlink&quot; title=&quot;CSS权威指南&quot;&gt;&lt;/a&gt;CSS权威指南&lt;/h1&gt;&lt;h2 id=&quot;候选样式表&quot;&gt;&lt;a href=&quot;#候选样式表&quot; class=&quot;headerlink&quot; title=&quot;候选样式表&quot;&gt;&lt;/a&gt;候选样式表&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;alternate stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Big Text&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xzh.hi.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xzh.hi.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>天总知乎live小结</title>
    <link href="http://xzh.hi.cn/%E5%A4%A9%E6%80%BB%E7%9F%A5%E4%B9%8Elive%E5%B0%8F%E7%BB%93.html"/>
    <id>http://xzh.hi.cn/天总知乎live小结.html</id>
    <published>2018-05-24T05:27:00.000Z</published>
    <updated>2018-05-25T12:16:57.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="误入歧途怎么对编程感兴趣？"><a href="#误入歧途怎么对编程感兴趣？" class="headerlink" title="误入歧途怎么对编程感兴趣？"></a>误入歧途怎么对编程感兴趣？</h2><p>如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。</p><a id="more"></a><h2 id="介绍某端语言"><a href="#介绍某端语言" class="headerlink" title="介绍某端语言"></a>介绍某端语言</h2><p>前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js</p><p>后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。</p><p>大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python</p><p>游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。</p><p>硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。</p><p>机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。</p><p>运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的</p><h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><p>一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。</p><h2 id="学习效率如何提高。"><a href="#学习效率如何提高。" class="headerlink" title="学习效率如何提高。"></a>学习效率如何提高。</h2><p>你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。</p><p>很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。</p><h2 id="补"><a href="#补" class="headerlink" title="补"></a>补</h2><h3 id="C-C"><a href="#C-C" class="headerlink" title="C / C++"></a>C / C++</h3><p>主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。</p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>FIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。</p><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><p>从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;误入歧途怎么对编程感兴趣？&quot;&gt;&lt;a href=&quot;#误入歧途怎么对编程感兴趣？&quot; class=&quot;headerlink&quot; title=&quot;误入歧途怎么对编程感兴趣？&quot;&gt;&lt;/a&gt;误入歧途怎么对编程感兴趣？&lt;/h2&gt;&lt;p&gt;如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://xzh.hi.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="生活" scheme="http://xzh.hi.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
