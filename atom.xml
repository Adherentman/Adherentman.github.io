<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>壮壮-Technology</title>
  <subtitle>宠辱不惊，闲看庭前花落花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzihao.fun/"/>
  <updated>2018-03-23T15:01:13.428Z</updated>
  <id>http://xuzihao.fun/</id>
  
  <author>
    <name>XuZiHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>同源与跨域资源共享</title>
    <link href="http://xuzihao.fun/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html"/>
    <id>http://xuzihao.fun/跨域资源共享.html</id>
    <published>2018-03-23T12:53:35.483Z</published>
    <updated>2018-03-23T15:01:13.428Z</updated>
    
    <content type="html"><![CDATA[<p>说到跨域，我们需要先说说什么是同源策略。</p>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>浏览器安全的基石是”同源政策”（<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">same-origin policy</a>）。</p>
<p>也就是说要满足以下条件：</p>
<blockquote>
<ol>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ol>
</blockquote>
<p>也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。</p>
<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<p>如果非同源，共有三种行为受到限制：</p>
<blockquote>
<ol>
<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>
<li>DOM 无法获得。</li>
<li>AJAX 请求不能发送。</li>
</ol>
</blockquote>
<p>同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。</p>
<p>但是有些的跨域请求是被允许的比如：</p>
<ul>
<li><code>&lt;script&gt;</code>标签</li>
<li><code>&lt;link&gt;</code>标签</li>
<li><code>&lt;img&gt;</code>标签</li>
<li><code>&lt;a&gt;</code>标签</li>
<li><code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>嵌入多媒体资源。</li>
<li><code>&lt;iframe&gt;</code>与<code>&lt;frame&gt;</code></li>
</ul>
<h2 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h2><p>那么为了解决这个问题，CORS横空出世！</p>
<p>IE8可以通过XDomainRequest对象支持CORS。</p>
<p>其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。</p>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p>
<p>其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<p>CORS分简单请求和非简单请求，满足以下条件就为简单请求：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">简单请求</a></p>
<h2 id="HTTP-响应首部字段"><a href="#HTTP-响应首部字段" class="headerlink" title="HTTP 响应首部字段"></a>HTTP 响应首部字段</h2><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>根据Reuqest请求头中的<em>Origin</em>来判断该请求的资源是否可以被共享。</p>
<h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p>
<h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><p>让服务器把允许浏览器访问的头放入白名单</p>
<p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p>
<h3 id="Access-Control-Allow-Credentials-1"><a href="#Access-Control-Allow-Credentials-1" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。</p>
<p>所以我们需要<strong>附带身份凭证的请求</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<h2 id="HTTP请求首部字段"><a href="#HTTP请求首部字段" class="headerlink" title="HTTP请求首部字段"></a>HTTP请求首部字段</h2><p>用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p>
<ul>
<li>Origin</li>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<blockquote>
<p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">MDN-HTTP请求首部字段</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到跨域，我们需要先说说什么是同源策略。&lt;/p&gt;
&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;浏览器安全的基石是”同源政策”（&lt;a href=&quot;https://e
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax与Fetch？</title>
    <link href="http://xuzihao.fun/Ajax%E4%B8%8EFetch.html"/>
    <id>http://xuzihao.fun/Ajax与Fetch.html</id>
    <published>2018-03-20T14:47:33.812Z</published>
    <updated>2018-03-21T14:14:33.291Z</updated>
    
    <content type="html"><![CDATA[<p>虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。<br><a id="more"></a><br>当我们发起一个请求时：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onload = reqListener;</div><div class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"yourfile.txt"</span>, <span class="literal">false</span>)</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<p>那么逐条解释，</p>
<p>XMLHttpRequest简称XHR。</p>
<p>在XHR的属性有<code>responseText</code>，也就是代码第2行中，它是作为<em>响应主体被返回的文本</em>，而且无论内容类型是什么，它们都会保存在该属性中。</p>
<hr>

<p>第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。</p>
<hr>

<p>第5行代码，看以下图：</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png" alt=""></p>
<p>我们会发现<code>onload</code>是XMLHttpRequestEventTarget的事件处理程序的接口。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort" target="_blank" rel="external">XMLHttpRequestEventTarget.onabort</a><ul>
<li>当请求失败时调用该方法</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror" target="_blank" rel="external">XMLHttpRequestEventTarget.onerror</a><ul>
<li>当请求发生错误时调用该方法</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload" target="_blank" rel="external">XMLHttpRequestEventTarget.onload</a><ul>
<li>当一个HTTP请求正确加载出内容后返回时调用。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart" target="_blank" rel="external">XMLHttpRequestEventTarget.onloadstart</a><ul>
<li>当一个HTTP请求开始加载数据时调用。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress" target="_blank" rel="external">XMLHttpRequestEventTarget.onprogress</a><ul>
<li>间歇调用该方法用来获取请求过程中的信息。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout" target="_blank" rel="external">XMLHttpRequestEventTarget.ontimeout</a><ul>
<li>当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend" target="_blank" rel="external">XMLHttpRequestEventTarget.onloadend</a><ul>
<li>当内容加载完成，不管失败与否，都会调用该方法</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget" target="_blank" rel="external">MDN</a></p>
</blockquote>
<hr>

<p>第6行就都是XMLHttpRequest对象的<strong>方法</strong>。</p>
<ul>
<li>open(method, url, async, user, password)<ul>
<li>请求使用Http的方法，如method = ‘GET’ | ‘POST’ | ‘PUT’ | ‘DELET’</li>
<li>url就是url</li>
<li>async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。</li>
<li>user，password: 可选参数,为授权使用</li>
</ul>
</li>
<li>另外在我们<strong>接收到响应之前</strong>还可以调用abort()方法来取消异步请求。</li>
</ul>
<hr>

<p>当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。</p>
<p>最重要的是当<strong>readyState</strong>属性的值由一个值变为另一个值得时候，都会触发一次<strong>readystatechange</strong>事件。</p>
<p>那么<strong>readyState</strong>有哪些值呢？</p>
<ul>
<li>0，未初始化。还没调用open()方法</li>
<li>1，启动。已经调用了open()方法</li>
<li>2，发送。已经调用了send()方法</li>
<li>3，接受。已经接收到部分响应数据</li>
<li>4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。</li>
</ul>
<p>我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">        balbalbal......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有<strong>response</strong>，<strong>responseText</strong>，<strong>responseType</strong>，<strong>responseXML</strong>，<strong>status</strong>，<strong>statusText</strong>，<strong>statusText</strong>，<strong>withCredentials</strong>属性。</p>
<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><h3 id="Fetch是什么？"><a href="#Fetch是什么？" class="headerlink" title="Fetch是什么？"></a>Fetch是什么？</h3><p>Fetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。</p>
<p>Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 <strong>CORS</strong>和HTTP的扩展。</p>
<p>请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：</p>
<ul>
<li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li>
<li>默认情况下, <code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="external">credentials</a> 选项）.</li>
</ul>
<blockquote>
<p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="external">MDN</a></p>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    response.text().then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(text)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这是个很简单的Fetch的小例子。</p>
<p>.then…这不是和Promise好像吗？</p>
<p>没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用<code>.abort()</code>去中断请求。。</p>
<h3 id="自定义请求的参数"><a href="#自定义请求的参数" class="headerlink" title="自定义请求的参数"></a>自定义请求的参数</h3><p>那么，Fetch第二个参数我们可以传一个可以控制不同配置的 <code>init</code> 对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myInit = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>|<span class="string">'POST'</span>|<span class="string">'PUT'</span>|<span class="string">'DELETE'</span>,</div><div class="line">               <span class="attr">headers</span>: myHeaders,</div><div class="line">               <span class="attr">mode</span>: <span class="string">'cors'</span>,</div><div class="line">               <span class="attr">cache</span>: <span class="string">'default'</span> &#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li>
<li><code>cache</code>:  请求的 cache 模式: <code>default</code>、 <code>no-store 、</code> <code>reload 、</code> <code>no-cache 、</code> <code>force-cache</code>或者 <code>only-if-cached 。</code></li>
</ul>
<p>其他可以去参考MDN。</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>在Fetch下可以很方便的操作header：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">responen</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(responen.headers.get(<span class="string">'Content-Type'</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myHeaders = <span class="keyword">new</span> Header();</div><div class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</div><div class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    headers: myHeaders</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> header = <span class="keyword">new</span> Headers(&#123;</div><div class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Type"</span>)); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Length"</span>)); <span class="comment">//false</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！&lt;/p&gt;
&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈script标签</title>
    <link href="http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html"/>
    <id>http://xuzihao.fun/浅谈script标签.html</id>
    <published>2018-03-19T12:57:11.911Z</published>
    <updated>2018-03-23T14:18:39.533Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;script&gt;</code> ? 这不就是直接执行script脚本吗？</p>
<p>以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。</p>
<a id="more"></a>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><code>&lt;script&gt;</code>拥有7个属性，没想到吧！</p>
<ul>
<li><strong>async</strong><ul>
<li>boolean</li>
<li>异步执行该脚本，但不保证按照指定它们的先后顺序执行</li>
</ul>
</li>
<li><strong>defer</strong><ul>
<li>boolean</li>
<li>通知浏览器该脚本将在文档完成解析后遇到<code>&lt;/html&gt;</code>，并会按照它们出现的先后顺序执行。但会在触发 <code>DOMContentLoaded</code> 事件前执行。</li>
</ul>
</li>
<li><strong>integrity</strong><ul>
<li>包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据</li>
</ul>
</li>
<li><strong>src</strong></li>
<li><strong>type</strong></li>
<li><strong>text</strong></li>
<li><strong>crossorigin</strong><ul>
<li>使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错</li>
</ul>
</li>
</ul>
<blockquote>
<p>在XHTML文档中，要把async属性设置为 async = “async”, defer = “defer”</p>
</blockquote>
<p>知道了那几个属性接下来，来看看下面这个图：</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png" alt=""></p>
<ol>
<li>第一个光秃秃的<code>&lt;script&gt;</code>说明了，在<code>html</code>解析中，如果有<code>&lt;script&gt;</code>的话，<code>html</code>会在<code>Script</code>下载并且执行的时候，暂停解析。</li>
<li>第二个带<code>async</code>属性的<code>&lt;script&gt;</code>，如图所示，也就是他下载<code>Script</code>的时候是异步的，但是只要<code>Script</code>文件下好了，那么就马上执行。</li>
<li>第三个带<code>defer</code>属性的<code>&lt;script&gt;</code>，其实和上面带<code>async</code>属性一样都是异步执行去下载<code>Script</code>文件的。但是在这个带有<code>defer</code>的则是在<code>html</code>全部解析完毕之后才去执行<code>Script</code>文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 <code>defer</code> 是最接近我们对于应用脚本加载和执行的要求的</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script" target="_blank" rel="external">MDN</a></li>
<li><a href="https://segmentfault.com/a/1190000006778717" target="_blank" rel="external">SegmentFault</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; ? 这不就是直接执行script脚本吗？&lt;/p&gt;
&lt;p&gt;以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3外轮廓</title>
    <link href="http://xuzihao.fun/CSS%E5%A4%96%E8%BD%AE%E5%BB%93.html"/>
    <id>http://xuzihao.fun/CSS外轮廓.html</id>
    <published>2018-03-18T14:38:00.000Z</published>
    <updated>2018-03-19T13:21:36.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><p>看一个Outline的例子：<a href="https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61" target="_blank" rel="external">outline</a></p>
<p>在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用<code>outline</code>实现的外边框中border为<code>-</code>。</p>
<h2 id="outline和border对比"><a href="#outline和border对比" class="headerlink" title="outline和border对比"></a>outline和border对比</h2><ul>
<li>border属于盒模型的一部分，会直接影响盒子大小。</li>
<li>outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。</li>
<li>border创建是可以显示单边的，而outline是不行的。看demo：<a href="https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c" target="_blank" rel="external">单边</a></li>
<li>border只可以外轮廓，而outline可以借助<code>outline-offset</code>设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：<a href="https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4" target="_blank" rel="external">内轮廓</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;p&gt;看一个Outline的例子：&lt;a href=&quot;https://codepan.net/gist/7a
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session</title>
    <link href="http://xuzihao.fun/Cookie-Session.html"/>
    <id>http://xuzihao.fun/Cookie-Session.html</id>
    <published>2018-03-17T06:54:00.000Z</published>
    <updated>2018-03-17T07:43:26.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。</p>
<blockquote>
<p>摘自维基百科</p>
</blockquote>
<a id="more"></a>
<p>按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。</p>
<h3 id="为什么要有Cookie？"><a href="#为什么要有Cookie？" class="headerlink" title="为什么要有Cookie？"></a>为什么要有Cookie？</h3><p>因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。<strong>也就是说服务器会给客户端发送一段cookie</strong>.</p>
<p>LocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。</p>
<h2 id="Cookie和Session的关系"><a href="#Cookie和Session的关系" class="headerlink" title="Cookie和Session的关系"></a>Cookie和Session的关系</h2><p>这里我做了一个图<img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://xuzihao.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://xuzihao.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CSS3transform/transition</title>
    <link href="http://xuzihao.fun/CSS3transform.html"/>
    <id>http://xuzihao.fun/CSS3transform.html</id>
    <published>2018-03-15T13:52:00.000Z</published>
    <updated>2018-03-15T13:52:07.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-transform-transition"><a href="#CSS3-transform-transition" class="headerlink" title="CSS3 transform/transition"></a>CSS3 transform/transition</h1><p>先来看一个demo：<a href="https://codepan.net/gist/02e3a0857615ee407878f1b46663f950" target="_blank" rel="external">字体歪斜变正</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3-transform-transition&quot;&gt;&lt;a href=&quot;#CSS3-transform-transition&quot; class=&quot;headerlink&quot; title=&quot;CSS3 transform/transition&quot;&gt;&lt;/a&gt;CSS3 transf
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法学习</title>
    <link href="http://xuzihao.fun/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html"/>
    <id>http://xuzihao.fun/数据结构与算法.html</id>
    <published>2018-03-10T07:33:07.614Z</published>
    <updated>2018-03-17T14:21:19.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">array, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> high = array.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</div><div class="line">        <span class="keyword">let</span> mid = (low + high) / <span class="number">2</span> &gt;&gt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">let</span> guess = array[mid];</div><div class="line">        <span class="keyword">if</span>(guess == item)&#123;</div><div class="line">            <span class="keyword">return</span> mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(guess &gt; item)&#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">'没有该数字'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">choicesort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> len = arr.length, min, temp;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">    min = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[min]) min = j;</div><div class="line">      temp = arr[i];</div><div class="line">      arr[i] = arr[min];</div><div class="line">      arr[min] = temp;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * @param &#123;array&#125; 传入一个需要排序的数组 </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</div><div class="line">  <span class="keyword">let</span> pivotIndex = arr.length / <span class="number">2</span> &gt;&gt; <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">let</span> left = [];</div><div class="line">  <span class="keyword">let</span> right = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</div><div class="line">      left.push(arr[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      right.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> quicksort(left).concat([pivot], quicksort(right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul>
<li>模拟映射关系；</li>
<li>防止重复；</li>
<li>缓存/ 记住数据，以免服务器再通过处理来生成它们。</li>
<li>一旦填装因子超过0.7 ，就该调整散列表的长度。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binary_search&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; low = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; high = array.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(low &amp;lt;= high)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; mid = (low + high) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; guess = array[mid];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(guess == item)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(guess &amp;gt; item)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            high = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            low = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;没有该数字&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://xuzihao.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://xuzihao.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS3选择器</title>
    <link href="http://xuzihao.fun/Css3%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>http://xuzihao.fun/Css3选择器.html</id>
    <published>2018-03-05T07:23:00.000Z</published>
    <updated>2018-03-05T07:26:02.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Css3选择器"><a href="#Css3选择器" class="headerlink" title="Css3选择器"></a>Css3选择器</h1><p>在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！</p>
<p><img src="http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="CSS选择器"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Css3选择器&quot;&gt;&lt;a href=&quot;#Css3选择器&quot; class=&quot;headerlink&quot; title=&quot;Css3选择器&quot;&gt;&lt;/a&gt;Css3选择器&lt;/h1&gt;&lt;p&gt;在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Prettier Option</title>
    <link href="http://xuzihao.fun/Prettier-Options.html"/>
    <id>http://xuzihao.fun/Prettier-Options.html</id>
    <published>2018-02-09T09:50:00.000Z</published>
    <updated>2018-03-05T07:27:16.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prettier-Option"><a href="#Prettier-Option" class="headerlink" title="Prettier Option"></a>Prettier Option</h1><p>.Prettierrc</p>
<p>Cli是在终端使用，</p>
<p>Api是在<code>.Prettierrc</code>中设置使用<br><a id="more"></a></p>
<h2 id="printWidth"><a href="#printWidth" class="headerlink" title="printWidth"></a>printWidth</h2><p>打印宽度指定打印将换行的行长。</p>
<table>
<thead>
<tr>
<th>Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td style="text-align:center">–print-width <int></int></td>
<td style="text-align:center">printWidth: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Tab-Width"><a href="#Tab-Width" class="headerlink" title="Tab Width"></a>Tab Width</h2><p>指定每个缩进的空格数。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">–tab-width <int></int></td>
<td style="text-align:center">tabWidth: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p>用<code>Tab</code>缩进而不是空格</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–use-tabs <int></int></td>
<td style="text-align:center">useTabs: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h2><p>在语句的末尾打印分号。</p>
<p>有效的选项：</p>
<ul>
<li>true  - 在每个语句的末尾添加一个分号。</li>
<li>false - 只在可能引入ASI故障的行的开头添加分号。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">–no-semi <int></int></td>
<td style="text-align:center">semi: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h2><p>使用单引号而不是双引号。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–single-quote</td>
<td style="text-align:center">singleQuote: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Trailing-Commas"><a href="#Trailing-Commas" class="headerlink" title="Trailing Commas"></a>Trailing Commas</h2><p>多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）</p>
<p>有效选项：</p>
<ul>
<li>none - 没有尾随逗号。</li>
<li>es5 - 在ES5中有效的尾随逗号（object，arrays等）</li>
<li>all - 尽可能尾随逗号（包括函数参数）。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">None</td>
<td style="text-align:center">–trailing-comma &lt;none\</td>
<td style="text-align:center">es5\</td>
<td>all&gt;</td>
<td>trailingComma: “&lt;none\</td>
<td>es5\</td>
<td>all&gt;”</td>
</tr>
</tbody>
</table>
<h2 id="Bracket-Spacing"><a href="#Bracket-Spacing" class="headerlink" title="Bracket Spacing"></a>Bracket Spacing</h2><p>在对象文字中的括号之间打印空格。</p>
<p>选项：</p>
<ul>
<li>true - Example { foo: bar }</li>
<li>flase - Example {foo: bar}</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th>Cli Override</th>
<th>Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td>–no-bracket-spacing</td>
<td>bracketSpacing: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="JSX-Brackets"><a href="#JSX-Brackets" class="headerlink" title="JSX Brackets"></a>JSX Brackets</h2><p>将多行JSX元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–jsx-bracket-same-line</td>
<td style="text-align:center">jsxBracketSameLine: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Arrow-Function-Parentheses"><a href="#Arrow-Function-Parentheses" class="headerlink" title="Arrow Function Parentheses"></a>Arrow Function Parentheses</h2><p>围绕一个唯一的箭头函数参数包括括号。</p>
<p>选项：</p>
<ul>
<li>avoid - 尽可能省略括号 Example： x =&gt; x</li>
<li>always - 总是包括括号 Example： (x) =&gt; x</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">avoid</td>
<td style="text-align:center">–arrow-parens &lt;avoid\</td>
<td style="text-align:center">always&gt;</td>
<td>arrowParens: “&lt;avoid\</td>
<td>always&gt;”</td>
</tr>
</tbody>
</table>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>只格式化文件的一部分。</p>
<p>这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:</p>
<ul>
<li>返回到包含选定语句的第一行的开头。 </li>
<li>转到选定语句的末尾。</li>
</ul>
<p>这些选项不能与cursorOffset一起使用。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">–range-start <int></int></td>
<td style="text-align:center">rangeStart: <int></int></td>
</tr>
<tr>
<td style="text-align:center">Infinity</td>
<td style="text-align:center">–range-end <int></int></td>
<td style="text-align:center">rangeEnd: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h2><p>指定使用哪个分析器。</p>
<p>Babylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。</p>
<p>Built-in parsers:</p>
<ul>
<li><a href="https://github.com/babel/babel/tree/master/packages/babylon" target="_blank" rel="external"><code>babylon</code></a></li>
<li><a href="https://github.com/facebook/flow/tree/master/src/parser" target="_blank" rel="external"><code>flow</code></a></li>
<li><a href="https://github.com/eslint/typescript-eslint-parser" target="_blank" rel="external"><code>typescript</code></a> <em>Since v1.4.0</em></li>
<li><a href="https://github.com/postcss/postcss" target="_blank" rel="external"><code>postcss</code></a> <em>Since v1.4.0</em></li>
<li><a href="https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options" target="_blank" rel="external"><code>json</code></a> <em>Since v1.5.0</em></li>
<li><a href="https://github.com/graphql/graphql-js/tree/master/src/language" target="_blank" rel="external"><code>graphql</code></a> <em>Since v1.5.0</em></li>
<li><a href="https://github.com/wooorm/remark/tree/master/packages/remark-parse" target="_blank" rel="external"><code>markdown</code></a> <em>Since v1.8.0</em></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:left">Cli Override</th>
<th style="text-align:left">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">babylon</td>
<td style="text-align:left">–parser <string><br>–parser ./my-parser</string></td>
<td style="text-align:left">parser: “<string>“<br>parser: require(“./my-parser”)</string></td>
</tr>
</tbody>
</table>
<h2 id="FilePath"><a href="#FilePath" class="headerlink" title="FilePath"></a>FilePath</h2><p>指定输入文件路径。这将被用来做解析器推理。</p>
<p>例如，以下将使用postcss解析器：</p>
<blockquote>
<p>cat foo | prettier –stdin-filepath foo.css</p>
</blockquote>
<table>
<thead>
<tr>
<th>Default</th>
<th>Cli Override</th>
<th>Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td>None</td>
<td>–stdin-filepath <string></string></td>
<td>filepath: “<string>“</string></td>
</tr>
</tbody>
</table>
<h2 id="Require-pragma"><a href="#Require-pragma" class="headerlink" title="Require pragma"></a>Require pragma</h2><p>Prettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。</p>
<p>例如，当提供–require-pragma时，将会格式化具有以下第一个注释的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @prettier</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @format</div><div class="line"> */</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–require-pragma</td>
<td style="text-align:center">requirePragma: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Insert-Pragma"><a href="#Insert-Pragma" class="headerlink" title="Insert Pragma"></a>Insert Pragma</h2><p>Prettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–insert-pragma</td>
<td style="text-align:center">insertPragma: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Prose-Wrap"><a href="#Prose-Wrap" class="headerlink" title="Prose Wrap"></a>Prose Wrap</h2><p>默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。</p>
<p>选项：</p>
<ul>
<li><code>&quot;always&quot;</code> - 如果超出了打印宽度，请将散的包好。</li>
<li><code>&quot;never&quot;</code> - 不包散的。</li>
<li><code>&quot;preserve&quot;</code> - 按原样包散的。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“preserve”</td>
<td style="text-align:center">–prose-wrap &lt;always\</td>
<td style="text-align:center">never\</td>
<td>preserve&gt;</td>
<td>proseWrap: “&lt;always\</td>
<td>never\</td>
<td>preserve&gt;”</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prettier-Option&quot;&gt;&lt;a href=&quot;#Prettier-Option&quot; class=&quot;headerlink&quot; title=&quot;Prettier Option&quot;&gt;&lt;/a&gt;Prettier Option&lt;/h1&gt;&lt;p&gt;.Prettierrc&lt;/p&gt;
&lt;p&gt;Cli是在终端使用，&lt;/p&gt;
&lt;p&gt;Api是在&lt;code&gt;.Prettierrc&lt;/code&gt;中设置使用&lt;br&gt;
    
    </summary>
    
      <category term="前端工具" scheme="http://xuzihao.fun/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端工具" scheme="http://xuzihao.fun/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Kaldi语音识别初用</title>
    <link href="http://xuzihao.fun/kaldi%E6%96%87%E6%A1%A3.html"/>
    <id>http://xuzihao.fun/kaldi文档.html</id>
    <published>2018-02-04T06:50:32.416Z</published>
    <updated>2018-02-04T06:52:51.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kaldi启用"><a href="#Kaldi启用" class="headerlink" title="Kaldi启用"></a>Kaldi启用</h1><h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><ol>
<li>在 tools/ 下跑 extras/check_dependencies.sh<ol>
<li>然后跑make</li>
</ol>
</li>
<li>之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条<ol>
<li>make depend</li>
<li>make<a id="more"></a>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3></li>
</ol>
</li>
</ol>
<h4 id="修改路径"><a href="#修改路径" class="headerlink" title="修改路径"></a>修改路径</h4><p>设置n = 4</p>
<p>在kaldi/egs 下跑 <code>vi thchs30/s5/run.sh</code> </p>
<p><code>thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr</code></p>
<p>然后修改/thchs30/s5/cmd.sh为本地跑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export train_cms = run.pl</div><div class="line">export decode_cmd = run.pl</div><div class="line">export mkgraph_cmd = run.pl</div><div class="line">export cuda_cmd = run.pl</div><div class="line">​`</div></pre></td></tr></table></figure>
<p>运行：</p>
<p>cd到s5目录下去跑</p>
<p><code>sudo ./run.sh</code></p>
<p>静候佳音</p>
<h2 id="识别自己的wav"><a href="#识别自己的wav" class="headerlink" title="识别自己的wav"></a>识别自己的wav</h2><p>之后我们来到<code>tools/</code>下，去安装<code>./install_portaudio.sh</code>。</p>
<p>等安装完毕后我们到<code>src/</code>下，去 <code>make ext</code>去编译扩展程序。</p>
<h2 id="找例子"><a href="#找例子" class="headerlink" title="找例子"></a>找例子</h2><p>万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。</p>
<p>之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把<code>s5/exp/tri1</code>下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到<code>online-data/models/tri1</code>下。</p>
<p>然后把<code>s5/exp/tri/graph_word</code>里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到<code>online-data/models/tri1</code>下。</p>
<h2 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h2><p>我们在online_demo下<code>vi run.sh</code>。</p>
<p>之后我们把以下注释掉:</p>
<p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</div><div class="line">    echo &quot;Downloading test models and data ...&quot;</div><div class="line">    wget -T 10 -t 3 $data_url;</div><div class="line">    if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</div><div class="line">        echo &quot;Download of $data_file has failed!&quot;</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>然后在找到下面这句将其路径改成tri1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ac_model_type=tri1</div></pre></td></tr></table></figure>
<p>然后把下面的也改了注意看<code>online-wav-gmm-decode-faster</code>就行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">online-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\</div><div class="line">--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \</div><div class="line">scp:$decode_dir/input.scp $ac_model/final.mdl</div></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>然后我们直接在online_demo下<code>./run.sh</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kaldi启用&quot;&gt;&lt;a href=&quot;#Kaldi启用&quot; class=&quot;headerlink&quot; title=&quot;Kaldi启用&quot;&gt;&lt;/a&gt;Kaldi启用&lt;/h1&gt;&lt;h2 id=&quot;INSTALL&quot;&gt;&lt;a href=&quot;#INSTALL&quot; class=&quot;headerlink&quot; title=&quot;INSTALL&quot;&gt;&lt;/a&gt;INSTALL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在 tools/ 下跑 extras/check_dependencies.sh&lt;ol&gt;
&lt;li&gt;然后跑make&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条&lt;ol&gt;
&lt;li&gt;make depend&lt;/li&gt;
&lt;li&gt;make
    
    </summary>
    
      <category term="机器学习" scheme="http://xuzihao.fun/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://xuzihao.fun/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React-Native踩得坑持续更新</title>
    <link href="http://xuzihao.fun/React-Native%E8%B8%A9%E5%9D%91.html"/>
    <id>http://xuzihao.fun/React-Native踩坑.html</id>
    <published>2018-01-30T13:46:59.212Z</published>
    <updated>2018-02-04T06:53:42.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用nativebase遇到的fontFamily的问题"><a href="#用nativebase遇到的fontFamily的问题" class="headerlink" title="用nativebase遇到的fontFamily的问题"></a>用nativebase遇到的fontFamily的问题</h2><p><img src="http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png" alt="选区_022"></p>
<a id="more"></a>
<p><a href="https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13" target="_blank" rel="external">https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13</a></p>
<h3 id="在RN中CSS、display不能为none"><a href="#在RN中CSS、display不能为none" class="headerlink" title="在RN中CSS、display不能为none"></a>在RN中CSS、display不能为none</h3><p><img src="http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png" alt="选区_027"></p>
<p>​    </p>
<p>​    {display: ‘none’} cause this bug</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用nativebase遇到的fontFamily的问题&quot;&gt;&lt;a href=&quot;#用nativebase遇到的fontFamily的问题&quot; class=&quot;headerlink&quot; title=&quot;用nativebase遇到的fontFamily的问题&quot;&gt;&lt;/a&gt;用nativebase遇到的fontFamily的问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png&quot; alt=&quot;选区_022&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://xuzihao.fun/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://xuzihao.fun/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>初入Node</title>
    <link href="http://xuzihao.fun/%E5%88%9D%E5%85%A5Node.html"/>
    <id>http://xuzihao.fun/初入Node.html</id>
    <published>2018-01-25T12:05:00.000Z</published>
    <updated>2018-01-25T12:52:12.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初入Node"><a href="#初入Node" class="headerlink" title="初入Node"></a>初入Node</h1><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>Node的异步回调惯例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'/index.html'</span>, (err, data) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">  getSomething(data.toString(), res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初入Node&quot;&gt;&lt;a href=&quot;#初入Node&quot; class=&quot;headerlink&quot; title=&quot;初入Node&quot;&gt;&lt;/a&gt;初入Node&lt;/h1&gt;&lt;h2 id=&quot;回调地狱&quot;&gt;&lt;a href=&quot;#回调地狱&quot; class=&quot;headerlink&quot; title=&quot;回调地狱&quot;&gt;&lt;/a&gt;回调地狱&lt;/h2&gt;&lt;p&gt;Node的异步回调惯例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;/index.html&#39;&lt;/span&gt;, (err, data) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getSomething(data.toString(), res);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://xuzihao.fun/categories/Node-js/"/>
    
    
      <category term="node.js" scheme="http://xuzihao.fun/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>JSON看这篇就行了</title>
    <link href="http://xuzihao.fun/JSON.html"/>
    <id>http://xuzihao.fun/JSON.html</id>
    <published>2018-01-05T13:27:00.000Z</published>
    <updated>2018-01-05T13:29:13.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>最近大量接触<code>JSON</code> 所以我特意去<a href="https://www.rfc-editor.org/rfc/rfc4627.txt" target="_blank" rel="external"><code>JSON</code>标准</a>(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下<code>JSON</code></p>
<p>我们先来看一个<code>JSON</code>的组成：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"propertyName"</span>: <span class="string">"propertyValue"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>property(属性/键值对)</li>
<li>propertyName(属性名/键)</li>
<li>propertyValue(属性值)</li>
</ol>
<p>JSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</p>
<a id="more"></a>
<h2 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h2><h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h3><p>最后一个属性后不能有逗号</p>
<h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><p>在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。</p>
<h3 id="结构层次"><a href="#结构层次" class="headerlink" title="结构层次"></a>结构层次</h3><p>在设计<code>JSON</code> 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。</p>
<p>先讲讲我在知乎上看见的问题：</p>
<p>正常情况有一个JSON应为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123; </div><div class="line">    "name": "Javascript权威指南"，</div><div class="line">    "chapters:": 500,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    "name": "Javascript高级程序设计",</div><div class="line">    "chapters": 500,</div><div class="line">  &#125;,</div><div class="line">  &#123;...&#125;,</div><div class="line">  &#123;...&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>这样看是很完美，但是有些人会这样设计？</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    "Javascript权威指南"： 500</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    "Javascript高级程序设计": 500</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他们为啥要把<strong>数据内容带入属性名！！</strong></p>
<p>ok！我们知道了一点，不要把<strong>数据内容带入属性名</strong>。</p>
<p>接下来扁平化数据：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Image"</span>: &#123;</div><div class="line">    <span class="attr">"width"</span>: <span class="number">800</span>,</div><div class="line">    <span class="attr">"Height"</span>: <span class="number">600</span>,</div><div class="line">    <span class="attr">"Title"</span>:  <span class="string">"View from 15th Floor"</span>,</div><div class="line">    <span class="attr">"ThumbnailUrl"</span>: <span class="string">"http://www.example.com/image/481989943"</span>,</div><div class="line">    <span class="attr">"ThumbnailHeight"</span>: <span class="number">125</span>,</div><div class="line">    <span class="attr">"ThumbnailWidth"</span>: <span class="number">100</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构层次：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Image"</span>: &#123;</div><div class="line">    <span class="attr">"Width"</span>:  <span class="number">800</span>,</div><div class="line">    <span class="attr">"Height"</span>: <span class="number">600</span>,</div><div class="line">    <span class="attr">"Title"</span>:  <span class="string">"View from 15th Floor"</span>,</div><div class="line">    <span class="attr">"Thumbnail"</span>: &#123;</div><div class="line">      <span class="attr">"Url"</span>:    <span class="string">"http://www.example.com/image/481989943"</span>,</div><div class="line">      <span class="attr">"Height"</span>: <span class="number">125</span>,</div><div class="line">      <span class="attr">"Width"</span>:  <span class="string">"100"</span></div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JSON中本应该以数据元素扁平化方式呈现。</p>
<p>但是结构层次对我们开发人员更加的友好有意义。</p>
<p>具体情况看自己的选择。</p>
<h2 id="下面讲点细的"><a href="#下面讲点细的" class="headerlink" title="下面讲点细的"></a>下面讲点细的</h2><h3 id="属性名规范"><a href="#属性名规范" class="headerlink" title="属性名规范"></a>属性名规范</h3><ul>
<li>属性名应该一看就知道啥用</li>
<li>属性名必须是驼峰，ASCII码字符串</li>
<li>首字符必须是字母，_ （下划线），$(美元符号)</li>
<li>避免使用js中的保留字</li>
<li>数组类型应该是复数，其他属性名都为单数</li>
</ul>
<h3 id="属性值规范"><a href="#属性值规范" class="headerlink" title="属性值规范"></a>属性值规范</h3><ul>
<li>属性值应该为四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</li>
<li>其他的具体可以看我下面给出的参考资料链接</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>JSON.parse()<ul>
<li>解析一个JSON将他转换成JavaScript值或对象</li>
</ul>
</li>
<li>JSON.stringify()<ul>
<li>把一个对象或者值转换成JSON字符串</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON" target="_blank" rel="external">JSON-MDN</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;p&gt;最近大量接触&lt;code&gt;JSON&lt;/code&gt; 所以我特意去&lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4627.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;标准&lt;/a&gt;(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下&lt;code&gt;JSON&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们先来看一个&lt;code&gt;JSON&lt;/code&gt;的组成：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;propertyName&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;propertyValue&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;property(属性/键值对)&lt;/li&gt;
&lt;li&gt;propertyName(属性名/键)&lt;/li&gt;
&lt;li&gt;propertyValue(属性值)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2017年自己的前端总结</title>
    <link href="http://xuzihao.fun/2017%E5%B9%B4%E6%80%BB%E7%BB%93.html"/>
    <id>http://xuzihao.fun/2017年总结.html</id>
    <published>2017-12-28T16:18:00.000Z</published>
    <updated>2017-12-28T16:23:57.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017年自己的前端总结"><a href="#2017年自己的前端总结" class="headerlink" title="2017年自己的前端总结"></a>2017年自己的前端总结</h1><p>​    转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。</p>
<p>​    现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？</p>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png" alt="技术树"><br><a id="more"></a><br>​    整理了一下，看着很多，其实很多只是会用，还没到深入研究其原理！不过我很好奇为什么会这么做，然后会去看看源码。但是功力不够。。还需要继续修炼！</p>
<h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><p>读万卷书，行万里路？ 在2017年，当我读书的时候，我觉得这句话可能要改一下：</p>
<blockquote>
<p>读万卷书，思万/千万遍，写数次，行万里路。</p>
<p>ps:辣鸡文笔，请勿模仿，欢迎吐槽！</p>
</blockquote>
<p>​    因为我大多数读的是技术书，文学类也有。不思考？光去看这些书没有任何用处，看了不懂继续看，看了就忘？为何不去把书上的东西都敲下来呢。</p>
<p>​    我突然发现这种学习方法虽然麻烦但是很有效果。而且一个个知识点虽然看着零散，但是我每次都在纸上把思维导图画出来，发现他们都是连通的。而且边思考边去把逻辑理清，真的事半功倍。</p>
<blockquote>
<p> ps: 虽然。。有用但。。时间花的真的很多！！有些时候看十几页1个小时就过去了 T T！</p>
</blockquote>
<p>第一次写总结，就把我的书单全放上来吧：</p>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A61.png" alt="书单"></p>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A62.png" alt="书单"></p>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A63.png" alt="书单"></p>
<p>这个书单可以到我的<a href="https://github.com/Adherentman" target="_blank" rel="external">Github</a>上面看。只要读完了我都会去更新状态还有最近看的书我都写了读书笔记。</p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>​    在2017年7月，我第一次去实习。在公司里发现了自己在学校或者自学永远看不到的技术。还有身边那么多厉害的人，他们懂的真的特别多。特别是冰哥（公司老大），几乎啥都知道，不懂得只要一伙儿就能信手拈来。</p>
<p>​    还记得他说的一句话：没有什么是现在不该学的，学任何东西不要有那么多条条框框的限制住自己，只要你想要知道，那么就该去做去“玩”。</p>
<p>所以我一点都不畏惧前端那么快的变化，而且我深知基础牢固的重要性。</p>
<p>​    第一个接触的项目就是公司后台，技术栈为React技术栈 + Mongodb + Graphql + Gulp + docker这些东西整合一起，我整整看了10天。。不过在那2个月内进步神速。学会了如何去谈需求/业务，如何去设计mongodb，如何去处理逻辑，如何去写日志（log），如何去看源码，如何去看文档，如何去用框架等等。。让我从一个无知的少年变成了小小的“全栈“程序员。</p>
<p>​    之后就是现在正在采坑的是React-Native + Expo。老大放手让我去采坑。。每天被坑的不要不要的，挣扎在一大堆一大堆的英文文档、还有源码、还有在Github上给Expo团队提<code>Issue</code>！还把语言改成了了TypeScript这个Js超集语言。有了类型真的很棒，和VSCode搭配写代码，食用更佳！😋</p>
<p>​    公司的微信小程序项目我没有参加（9月份回学校了！）。。不过。。我希望自己可以去学习小程序。毕竟今天出的小游戏可把我玩坏了！</p>
<p>​    哦对了还有自己的毕设。。也是React技术栈 + Mock.js（Easy Mock大搜车开源）做的自己的博客！</p>
<h2 id="2018展望"><a href="#2018展望" class="headerlink" title="2018展望"></a>2018展望</h2><p>​    在2018，我觉得自己该学习的技术：</p>
<h3 id="Progressive-Web-Apps"><a href="#Progressive-Web-Apps" class="headerlink" title="Progressive Web Apps"></a>Progressive Web Apps</h3><p>PWA就是Google希望用现代浏览器的技术来提供更像移动应用程序Web的体验！PWA 的基础是一个 <code>manifest.json</code> 文件和对 <a href="http://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/primers/service-workers/" target="_blank" rel="external">service workers</a> 的利用。</p>
<p>为啥该学呢！因为。。最近Safari终于支持了Service Worker！</p>
<h3 id="Serverless-架构"><a href="#Serverless-架构" class="headerlink" title="Serverless 架构"></a>Serverless 架构</h3><p>Serverless是一种架构理念，指的是以服务的形式来提供计算能力而不是以服务器形式，让开发者在构建应用的过程中不用过多考虑基础设施的问题。</p>
<blockquote>
<p>也就是说我们前端er可以安安心心的写app、做网页、做游戏？？</p>
</blockquote>
<h3 id="Node-js-and-Python"><a href="#Node-js-and-Python" class="headerlink" title="Node.js and Python"></a>Node.js and Python</h3><p>会系统的（各种计算机基础以及数据库之类的）去学习Node.js，我相信这是门很强大的后端语言。</p>
<p>Python会去涉及。</p>
<h3 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h3><p>这几天才试了试CSS in JS体验很棒，<code>styled-component</code>像写组件一样写css。很多特性功能还需要去学习。</p>
<h3 id="Graphql"><a href="#Graphql" class="headerlink" title="Graphql"></a>Graphql</h3><p>在Github宣布v4版本，API都换成Graphql 我感觉会在REST之上占一席之地。因为我用过Graphql。真的是一次请求能获取我们所需要的所有数据！重要的是，数据简洁、明了。</p>
<h3 id="Angular-and-vue"><a href="#Angular-and-vue" class="headerlink" title="Angular and vue"></a>Angular and vue</h3><p>angular发布了v4而后马上发布了v5，让我很想去学习一下这个框架。还有还有Vue！这个感觉国人都会的框架。。而我。。就看过文档，连TODO都没写过。。</p>
<h3 id="3D-and-2D"><a href="#3D-and-2D" class="headerlink" title="3D and 2D"></a>3D and 2D</h3><p>Canvas、pixi.js、svg等等这些都是我想去学习的，特别是canvas很神奇，最近就会去着手尝试！</p>
<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>React-native在采坑，最近在看Swift的语法，会去学习原生app开发吧。但是重心都会在前端。Kotlin也会看吧。还有Weex看见过阿里的有个框架可以用React写转换成Weex。。名字忘了。下次找出来！</p>
<p>最后最重要的。。。计算机基础，巴拉巴拉巴拉巴拉🤓！！！！</p>
<p>OK，大家共勉。加油！</p>
<p>有写错的地方欢迎指出！！</p>
<p>附上自己的地址：</p>
<ul>
<li>Github: <a href="https://github.com/Adherentman" target="_blank" rel="external">github</a></li>
<li>博客： <a href="xuzihao.fun">blog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2017年自己的前端总结&quot;&gt;&lt;a href=&quot;#2017年自己的前端总结&quot; class=&quot;headerlink&quot; title=&quot;2017年自己的前端总结&quot;&gt;&lt;/a&gt;2017年自己的前端总结&lt;/h1&gt;&lt;p&gt;​    转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。&lt;/p&gt;
&lt;p&gt;​    现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png&quot; alt=&quot;技术树&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="日常" scheme="http://xuzihao.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="生活" scheme="http://xuzihao.fun/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JavaScript（上）》读书笔记</title>
    <link href="http://xuzihao.fun/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://xuzihao.fun/《你不知道的JavaScript（上）》读书笔记.html</id>
    <published>2017-12-23T13:40:30.000Z</published>
    <updated>2017-12-23T13:40:10.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="This"><a href="#This" class="headerlink" title="This"></a>This</h2><p>在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。</p>
<p>总结一下：</p>
<p>This实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>
<a id="more"></a>
<p>那么我们要去判断一个运行中函数的<code>this</code>绑定，我们需要先知道：</p>
<ol>
<li>函数在哪里被直接调用？</li>
<li>找到之后，我们需要去通过四条顺序规则去判断<code>this</code>的绑定对象</li>
</ol>
<h3 id="四条顺序"><a href="#四条顺序" class="headerlink" title="四条顺序"></a>四条顺序</h3><ol>
<li><p>是否是被<code>new</code>调用的？是的话那就绑定到新的创建对象。</p>
<ol>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo()</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>是否被<code>call</code>或者<code>apply</code>或者<code>bind</code>调用？是的话那就绑定到指定的对象。</p>
<ol>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = call(obj, <span class="number">2</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>是否由上下文调用？是的话那就绑定到那个上下文对象。</p>
</li>
<li><p>默认：在默认情况下，如果我们在严格模式下则为<code>undefined</code>，否则我们会绑定到全局对象</p>
</li>
</ol>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明形式</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">a</span>:<span class="number">1</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//构造形式</span></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">b.key = <span class="number">1</span>;	<span class="comment">//给b添加个属性</span></div></pre></td></tr></table></figure>
<p>通过这两种形式我发现一个大问题！</p>
<p>用构造函数去创建对象我们只能通过<code>.</code>去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。</p>
<p>那么我想要得到<code>b</code>中<code>key</code>的值呢？？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(b.key,<span class="string">'.'</span>);</div><div class="line"><span class="built_in">console</span>.log(b[<span class="string">"key"</span>],<span class="string">'[]'</span>);</div></pre></td></tr></table></figure>
<p>我们有两种方法可以做到哦！</p>
<ol>
<li>用<code>.</code>操作符通常被我们叫做“属性访问”；</li>
<li>用<code>[]</code>操作符通常被我们叫做“键访问”；</li>
</ol>
<p>但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！</p>
<p>哦对啦！在ES6中还有个好玩的方法！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> prev = <span class="string">"foo"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">  [prev + <span class="string">"Hello"</span>] : <span class="string">"Hello"</span>,</div><div class="line">  [prev + <span class="string">"World"</span>] : <span class="string">"World"</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(myObject[<span class="string">"prevHello"</span>]); -&gt; Hello</div><div class="line"><span class="built_in">console</span>.log(myObject[<span class="string">"prevWorld"</span>]); -&gt; World</div></pre></td></tr></table></figure>
<p>这是不是很神奇！我们可以通过<code>+</code>号实现了可计算的属性名。</p>
<p>多亏了ES6的<code>Symbol</code>,它是一种新的类型，在这我就不多说啦，贴上<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="external">mdn</a>。</p>
<h2 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h2><p><img src="http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png" alt="getOwnPropertyDescriptor"></p>
<blockquote>
<p>writable：可写的</p>
<p>enumerable: 可枚举的</p>
<p>configurable: 可配置的</p>
</blockquote>
<p>那么如果我做以下操作呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">"a"</span>,&#123;</div><div class="line">  <span class="attr">value</span>:<span class="number">2</span>,</div><div class="line">  <span class="attr">writable</span>:<span class="literal">false</span>,</div><div class="line">  <span class="attr">configurable</span>:<span class="literal">false</span>,</div><div class="line">  <span class="attr">enumerable</span>:<span class="literal">false</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/defineProperty.png" alt="defineProperty"></p>
<p>也就是这个<code>myObject</code>对象变成了不可写、不可枚举、不可配置啦。</p>
<p>那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zoo = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(myObject, <span class="string">"cat"</span>,&#123;</div><div class="line">  <span class="attr">cat</span>: <span class="string">"cat"</span>,</div><div class="line">  <span class="attr">writable</span>:<span class="literal">false</span>,</div><div class="line">  <span class="attr">configurable</span>:<span class="literal">false</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但是我只想要我的动物园(<code>zoo</code>)里只有猫不想要别的小动物了！我只能用<code>Object.preventExtensions()</code>来禁止别的小动物进入我的动物园，而且还保留了猫。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> zoo = &#123;</div><div class="line">  <span class="attr">cat</span>: <span class="string">"cat"</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.Object.preventExtensions(zoo);</div><div class="line"></div><div class="line">zoo.dog = <span class="string">"dog"</span>;</div><div class="line">zoo.dog; -&gt;<span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<p>还有2种方法可以做到不可变(不详细讲解，附上mdn)8：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal" target="_blank" rel="external">Object.seal()</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="external">Object.freeze()</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;This&quot;&gt;&lt;a href=&quot;#This&quot; class=&quot;headerlink&quot; title=&quot;This&quot;&gt;&lt;/a&gt;This&lt;/h2&gt;&lt;p&gt;在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。&lt;/p&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;p&gt;This实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Parcel-typescript-react初尝试</title>
    <link href="http://xuzihao.fun/Parcel.html"/>
    <id>http://xuzihao.fun/Parcel.html</id>
    <published>2017-12-16T12:12:19.187Z</published>
    <updated>2017-12-16T12:17:07.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Parcel是啥？"><a href="#Parcel是啥？" class="headerlink" title="Parcel是啥？"></a>Parcel是啥？</h2><p>平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。</p>
<p>那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？<br><img src="http://ozar6ogjb.bkt.clouddn.com/parcel.png" alt="parcel"><br>这是官网的介绍，网址如下：<a href="http://www.css88.com/doc/parcel/" target="_blank" rel="external">Parcel</a></p>
<a id="more"></a>
<h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>现在很多人用<strong>React</strong>，并且还用上了<strong>Typescript</strong>！配置Webpack用<code>tsc</code>可太麻烦了。我们来看看Parcel是怎么做到的。</p>
<ol>
<li>mkdir parcel-typescript-react-example</li>
<li>yarn init</li>
<li>mkdir src</li>
<li>tsc –init</li>
</ol>
<p>接着我们需要<code>yarn add</code> 一些玩意儿:</p>
<ul>
<li>yarn add parcel-bundler react react-dom typescript babel-preset-react @types/react @types/react-dom</li>
</ul>
<p>接下来我们在根目录下创建<code>index.html</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>parcel-typescript-react-example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./src/styles.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./src/index.tsx"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在<code>src</code>文件中我们创建 <code>index.tsc</code> 和 <code>styes.css</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</div></pre></td></tr></table></figure></p>
<p>CSS文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">18</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们的<code>package.json</code>如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"parcel-react"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"src/index.tsx"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"parcel index.html"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"@types/react"</span>: <span class="string">"^16.0.30"</span>,</div><div class="line">    <span class="attr">"@types/react-dom"</span>: <span class="string">"^16.0.3"</span>,</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"^16.2.0"</span>,</div><div class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.2.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-preset-react"</span>: <span class="string">"^6.24.1"</span>,</div><div class="line">    <span class="attr">"parcel-bundler"</span>: <span class="string">"^1.0.3"</span>,</div><div class="line">    <span class="attr">"typescript"</span>: <span class="string">"^2.6.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样我们就可以打开终端-&gt; cd parcel-typescript-react-example -&gt; yarn start</p>
<p>静候佳音，然后<code>locahost://1234</code>就能看见火红的Hello World！啦</p>
<p>大家也可以到我的<a href="https://github.com/Adherentman/parcel-typescript-react-example" target="_blank" rel="external">github-parcel-typescript-react-example
</a>去 clone 代码。</p>
<p>欢迎start、issues~</p>
<p>也可以看看我github中的其他玩意儿！</p>
<p>以下是我的博客：</p>
<ul>
<li><a href="https://github.com/Adherentman" target="_blank" rel="external">github</a></li>
<li><a href="http://xuzihao.fun/">blog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Parcel是啥？&quot;&gt;&lt;a href=&quot;#Parcel是啥？&quot; class=&quot;headerlink&quot; title=&quot;Parcel是啥？&quot;&gt;&lt;/a&gt;Parcel是啥？&lt;/h2&gt;&lt;p&gt;平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。&lt;/p&gt;
&lt;p&gt;那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？&lt;br&gt;&lt;img src=&quot;http://ozar6ogjb.bkt.clouddn.com/parcel.png&quot; alt=&quot;parcel&quot;&gt;&lt;br&gt;这是官网的介绍，网址如下：&lt;a href=&quot;http://www.css88.com/doc/parcel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parcel&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>DOM</title>
    <link href="http://xuzihao.fun/DOM.html"/>
    <id>http://xuzihao.fun/DOM.html</id>
    <published>2017-12-10T07:17:00.000Z</published>
    <updated>2017-12-13T13:47:24.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h1><p>一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。</p>
<h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><p>每个节点的属性</p>
<ul>
<li>childNodes<ul>
<li>它里面有一个对象叫NodeList</li>
</ul>
</li>
<li>patentNode</li>
<li>previousSibling</li>
<li>nextSibling</li>
<li>ownerDoucment</li>
</ul>
<a id="more"></a>
<h2 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h2><ul>
<li>appendChild（）<ul>
<li>向childNodes列表的末尾添加一个节点</li>
</ul>
</li>
<li>insertBefour()<ul>
<li>​把节点放在childNodes列表的特定位置，它接受两参数要插入的节点，和作为参照的节点。</li>
</ul>
</li>
<li>replaceChild()<ul>
<li>把节点替换，这个方法接受两个参数：要插入的节点和要替换的节点</li>
</ul>
</li>
<li>removeChild()<ul>
<li>看英文就知道remove,移除。就只接受一个参数：就是你要移除的节点。</li>
</ul>
</li>
<li>cloneNode()<ul>
<li>这个方法接受一个布尔值参数，在参数为true进行深复制，反之则执行浅复制。</li>
</ul>
</li>
<li>normalize()<ul>
<li>处理文档树中的文本节点。</li>
</ul>
</li>
</ul>
<h2 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h2><p>nodeType的值是9.</p>
<p>document的对象是window对象的一个属性，因此可以将其作为全局对象来访问。</p>
<p>查找元素的方法：</p>
<ul>
<li>getElementById()</li>
<li>getElementByTagName()</li>
<li>getElementByName()</li>
<li>document.anchors<ul>
<li>包含文档中所有带name特性的<a>元素</a></li>
</ul>
</li>
<li>document.applets<ul>
<li>包含文档中所有的<applet>元素​</applet></li>
</ul>
</li>
<li>document.forms</li>
<li>document.images</li>
<li>document.links<ul>
<li>包含文档中所有带href特性的<a>元素</a></li>
</ul>
</li>
</ul>
<h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><p>nodeType的值是1。</p>
<p>它提供了对元素标签名、子节点及特性的访问。</p>
<p>操作特性的DOM方法：</p>
<ul>
<li>getAttribute()</li>
<li>setAttribute()</li>
<li>removeAttribute()</li>
</ul>
<p>attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个“动态”的集合。<br>NamedNodeMap对象有下列方法</p>
<ul>
<li>getNamedItem(name)<ul>
<li>返回nodeName属性等于name的节点</li>
</ul>
</li>
<li>removeNamedItem(name)<ul>
<li>从列表移除nodeName属性等于name的节点</li>
</ul>
</li>
<li>setNamedItem(node)<ul>
<li>向列表中添加节点，以节点的nodeName属性为索引</li>
</ul>
</li>
<li>item(pos)<ul>
<li>返回位于数字pos属性位置处的节点。</li>
</ul>
</li>
</ul>
<h2 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h2><p>nodeType的值是3</p>
<p>下列方法可以操作节点中的文本：</p>
<ul>
<li>appendData(text)<ul>
<li>将text添加到节点的末尾</li>
</ul>
</li>
<li>deleteData(offset, count)<ul>
<li>从<strong>offset</strong>指定的位置开始删除<strong>count</strong>个字符</li>
</ul>
</li>
<li>insertData(offset, text)<ul>
<li>在<strong>offset</strong>指定的位置插入<strong>text</strong></li>
</ul>
</li>
<li>replaceData(offset, count, text)<ul>
<li>用<strong>text</strong>替换从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的文本</li>
</ul>
</li>
<li>splitText(offset)<ul>
<li>从<strong>offset</strong>指定的位置将当前文本节点分成两个文本节点</li>
</ul>
</li>
<li><p>substringData(offset, count)</p>
<ul>
<li>提取从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的字符串</li>
</ul>
</li>
<li><p>document.createTextNode()</p>
<ul>
<li>接受一个参数就是，要插入的文本内容</li>
<li>document.createTextNode(“<strong>Hello</strong> world!”);</li>
</ul>
</li>
</ul>
<h3 id="文本节点合并"><a href="#文本节点合并" class="headerlink" title="文本节点合并"></a>文本节点合并</h3><p>normalize()</p>
<h3 id="文本节点分割"><a href="#文本节点分割" class="headerlink" title="文本节点分割"></a>文本节点分割</h3><p>splitText()</p>
<h2 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h2><p>nodeType的值是8</p>
<p>Comment类型与Text类型继承自相同的基类，所以它拥有除了splitText()之外的所有字符串操作方法。<br>document.createComment()<br>创建注释节点</p>
<h2 id="CDATASection类型"><a href="#CDATASection类型" class="headerlink" title="CDATASection类型"></a>CDATASection类型</h2><p>nodeType的值是4</p>
<p>CDATA区域只会出现在XML文档中</p>
<h2 id="DocumentType类型"><a href="#DocumentType类型" class="headerlink" title="DocumentType类型"></a>DocumentType类型</h2><p>nodeType的值是10</p>
<p>DocumentType包含着与文档的doctype有关的所有信息。</p>
<h2 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h2><p>nodeType的值是11</p>
<p>DocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。</p>
<p>该接口继承 Node 的全部方法，并实现了 ParentNode 接口中的方法。</p>
<h2 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h2><p>nodeType的值是2.</p>
<p>Attr对象有三个属性：name、 value、 specified</p>
<p>#总结：<br>DOM由各种节点构成：</p>
<ol>
<li>最基本的节点类型是Node;所有其他类型都继承自Node。</li>
<li>Document类型表示整个文档，是一组分层节点的根节点。在JS中document对象是Document的一个实例。</li>
<li>Element节点表示文档中所有HTML或XML元素，可以用来操作这些元素的内容和特性。</li>
<li>还有一些节点就是文本内容啊、注释、文档类型、CDATA区域和文档片段。</li>
<li>理解DOM的关键，就是理解DOM对性能的影响。DOM操作是Js程序中开销最大的部分，因此访问NodeList导致的问题为最多。所以每次访问NodeList对象，都会运行一次查询。</li>
<li><strong>尽量减少DOM操作！！！</strong></li>
</ol>
<h2 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a>DOM扩展</h2><p>Leval 1两个方法：</p>
<ol>
<li>querySelector()</li>
<li>querySelectorAll()</li>
</ol>
<p>Level 2 的一个方法：</p>
<ol>
<li>matchesSelector()</li>
</ol>
<h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><p>Element Traversal API 为DOM元素添加了以下5个属性：</p>
<ol>
<li>childElementCount: 返回子元素的个数</li>
<li>firstElementChild：指向第一个子元素</li>
<li>lastElementChild：指向最后一个子元素</li>
<li>previousElementSibling ：指向前一个同辈元素</li>
<li>nextElementSibling：指向后一个同辈元素</li>
</ol>
<h3 id="与类相关的扩充"><a href="#与类相关的扩充" class="headerlink" title="与类相关的扩充"></a>与类相关的扩充</h3><p>1.getElementsByClassName()<br>2.classList</p>
<p>classList属性有以下方法：</p>
<ul>
<li>add(value)</li>
<li>contains(value)</li>
<li>remove(value)</li>
<li>toggle(value)</li>
</ul>
<h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><p>document.actoveElement()<br>document.hasFocus()</p>
<h3 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h3><ul>
<li>innerHTML</li>
<li>outerHTML</li>
<li>insertAdjacentHTML()方法<ul>
<li>beforebegin: 在<strong>当前元素之前</strong>插入一个紧邻的同辈元素</li>
<li>afterbegin：在<strong>当前元素之下</strong>插入一个新的子元素或<strong>第一个子元素之前</strong>再插入新的子元素</li>
<li>beforeend：在<strong>当前元素之下</strong>插入一个新的子元素或在<strong>最后一个子元素之</strong>后再插入新的子元素</li>
<li>afterend：在<strong>当前元素之后</strong>插入一个紧邻的同辈元素。</li>
</ul>
</li>
</ul>
<h3 id="scrollIntoView"><a href="#scrollIntoView" class="headerlink" title="scrollIntoView()"></a>scrollIntoView()</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文档对象模型&quot;&gt;&lt;a href=&quot;#文档对象模型&quot; class=&quot;headerlink&quot; title=&quot;文档对象模型&quot;&gt;&lt;/a&gt;文档对象模型&lt;/h1&gt;&lt;p&gt;一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。&lt;/p&gt;
&lt;h2 id=&quot;节点属性&quot;&gt;&lt;a href=&quot;#节点属性&quot; class=&quot;headerlink&quot; title=&quot;节点属性&quot;&gt;&lt;/a&gt;节点属性&lt;/h2&gt;&lt;p&gt;每个节点的属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;childNodes&lt;ul&gt;
&lt;li&gt;它里面有一个对象叫NodeList&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;patentNode&lt;/li&gt;
&lt;li&gt;previousSibling&lt;/li&gt;
&lt;li&gt;nextSibling&lt;/li&gt;
&lt;li&gt;ownerDoucment&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>C++ 初体验</title>
    <link href="http://xuzihao.fun/C++%E5%88%9D%E4%BD%93%E9%AA%8C.html"/>
    <id>http://xuzihao.fun/C++初体验.html</id>
    <published>2017-12-08T14:05:00.000Z</published>
    <updated>2017-12-09T06:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p>Clion给我建的第一个C++文件如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>那么我在想这和平常写得js不同啊，那个<code>std::</code>是啥…</p>
<p>经过强大的搜索引擎我知道了！这玩意儿就是一个类（std）啊（输入输出标准），它包括了cin成员和cout成员。</p>
<p>当我加了<code>using namespace std;</code>以后，我才能使用它的成员。我的c++程序可以写成:</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="comment">// main() 是程序开始执行的地方</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>; <span class="comment">// 输出 Hello World</span></div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那我又发现 <code>namespace</code>这个东西。原来它是指标识符的各种可见范围。</p>
<h2 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C++数据类型"></a>C++数据类型</h2><p>讲到数据类型。。我这个写惯了动态语言的人。。。诶西。强制让我写静态有点不行惯，没办法只能去写啊！</p>
<p>C++有七种数据类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>布尔型</td>
<td>bool</td>
</tr>
<tr>
<td>字符型</td>
<td>Char</td>
</tr>
<tr>
<td>整型</td>
<td>int</td>
</tr>
<tr>
<td>浮点型</td>
<td>float</td>
</tr>
<tr>
<td>双浮点型</td>
<td>double</td>
</tr>
<tr>
<td>无类型</td>
<td>void</td>
</tr>
<tr>
<td>宽字符型</td>
<td>wchar_t</td>
</tr>
</tbody>
</table>
<p>有一些基本类型可以使用一个或多个类型装饰符进行修饰：</p>
<ul>
<li>signed</li>
<li>unsigned</li>
<li>short</li>
<li>long</li>
</ul>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>枚举大家可能都听过吧，它其实就是将变量的值一一列举出来，在这提醒下！变量的值只能在列举出来的值的范围内。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> animal &#123; dog, cat, pig &#125; c;</div><div class="line">c = cat;</div><div class="line"><span class="comment">//这段代码意思为 变量c的类型为animal，最后c被赋值给cat。</span></div></pre></td></tr></table></figure>
<p>在默认情况下第一个名称的值为0，第二个名称值为1，第三个名称的值为2.</p>
<p>如果我这有写：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> animal &#123; dog, cat=<span class="number">5</span>, pig &#125;;</div></pre></td></tr></table></figure>
<p>在这里，cat的值为5，那么pig值为6.</p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>
<ul>
<li>布尔</li>
<li>char<ul>
<li>通常为8位字节，这是一个整数类型</li>
</ul>
</li>
<li>int</li>
<li>float<ul>
<li>单精度浮点类型，32位</li>
</ul>
</li>
<li>double<ul>
<li>双精度浮点类型，64位</li>
</ul>
</li>
<li>void</li>
<li>wchar_t</li>
</ul>
<p>而且C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>。</p>
<p>我们可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">  </div><div class="line">  	a = <span class="number">10</span>;</div><div class="line">  </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; a ;  <span class="comment">//=&gt; 10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>在JS中我们的作用域可是太坑了！现在我们来看看C++的作用域吧。</p>
<ul>
<li>（1）在函数或一个代码块内部声明的变量，称为局部变量。</li>
<li>（2）在函数参数的定义中声明的变量，称为形式参数。</li>
<li>（3）在所有函数外部声明的变量，称为全局变量。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>局部变量)</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">// 局部变量声明</span></div><div class="line">  <span class="keyword">int</span> a, b;</div><div class="line">  <span class="keyword">int</span> c;</div><div class="line"> </div><div class="line">  <span class="comment">// 实际初始化</span></div><div class="line">  a = <span class="number">10</span>;</div><div class="line">  b = <span class="number">20</span>;</div><div class="line">  c = a + b;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; c;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">(<span class="number">3</span>全局变量)</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="comment">// 全局变量声明</span></div><div class="line"><span class="keyword">int</span> g;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">// 局部变量声明</span></div><div class="line">  <span class="keyword">int</span> a, b;</div><div class="line"> </div><div class="line">  <span class="comment">// 实际初始化</span></div><div class="line">  a = <span class="number">10</span>;</div><div class="line">  b = <span class="number">20</span>;</div><div class="line">  g = a + b;</div><div class="line"> </div><div class="line">  <span class="built_in">cout</span> &lt;&lt; g;</div><div class="line"> </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们遇到全局变量和局部变量的名称相同时，和js一样，<strong>在函数体内局部变量的值会覆盖全局变量</strong>。</p>
<h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C++ 中，有两种简单的定义常量的方式：</p>
<ul>
<li>使用 <strong>#define</strong> 预处理器。</li>
<li>使用 <strong>const</strong> 关键字。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DOGFOOT 4   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CHICKENFOOT  2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> NEWLINE <span class="meta-string">'\n'</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"> </div><div class="line">   <span class="keyword">int</span> area;  </div><div class="line">   </div><div class="line">   allFoot = DOGFOOT * CHICKENFOOT;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt; allFoot;</div><div class="line">   <span class="built_in">cout</span> &lt;&lt; NEWLINE;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//会输出8.</span></div></pre></td></tr></table></figure>
<p>那么const很简单就和es6中一样只<strong>可读不可写</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First&quot;&gt;&lt;a href=&quot;#First&quot; class=&quot;headerlink&quot; title=&quot;First&quot;&gt;&lt;/a&gt;First&lt;/h2&gt;&lt;p&gt;Clion给我建的第一个C++文件如下&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://xuzihao.fun/categories/C/"/>
    
    
      <category term="C++" scheme="http://xuzihao.fun/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>BOM</title>
    <link href="http://xuzihao.fun/BOM.html"/>
    <id>http://xuzihao.fun/BOM.html</id>
    <published>2017-12-06T13:42:00.000Z</published>
    <updated>2017-12-07T13:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>它既是window对象的属性，也是document对象的属性。</p>
<a id="more"></a>
<ul>
<li>location.hash        “#contents”<ul>
<li>返回URL中的hash，如果URL中不包含散列，则返回空字符串</li>
</ul>
</li>
<li>location.host                 “www.wrox.com:80”<ul>
<li>返回服务器名称和端口号</li>
</ul>
</li>
<li>location.hostname       “www.wrox.com”<ul>
<li>返回不带端口号的服务器名称</li>
</ul>
</li>
<li>location.href                  “http:/www.wrox.com”<ul>
<li>返回当前加载页面的完整URL</li>
</ul>
</li>
<li>location.pathname       “/WileyCDA/“<ul>
<li>返回URL中的目录和（或者）文件名</li>
</ul>
</li>
<li>location.port                  “8080”<ul>
<li>返回URL中指定的端口号</li>
</ul>
</li>
<li>location.protocol           “http:”<ul>
<li>返回页面使用的协议</li>
</ul>
</li>
<li>location.search              “?q=javascript”<ul>
<li>返回URL的查询字符串，字符串以问号开头</li>
</ul>
</li>
</ul>
<h2 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h2><ul>
<li>location.assign <ul>
<li>可以立即打开新URL，而且还在浏览器的历史记录中生成一条记录</li>
</ul>
</li>
<li>location.replace             <ul>
<li>导航到的URL，不会在历史记录中生成新纪录，用户不能回到前一个页面。</li>
</ul>
</li>
<li>location.reload <ul>
<li>不传递任何参数，页面就会以最有效的方式重新加载</li>
<li>要强制从服务器重新加载，那么就需要给个参数为<strong>true</strong></li>
</ul>
</li>
</ul>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator" target="_blank" rel="external">查看MDN</a></p>
<h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Screen" target="_blank" rel="external">查看MDN</a></p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ul>
<li>history.go(-1)        后退一页</li>
<li>history.go(1)                 前进一页，以此类推</li>
<li>history.go(“wrox.com”)       跳转到最近的wrox.com</li>
</ul>
<p>如果历史记录中不包含该字符串的话，那么这个方法什么也不做</p>
<p>还有两个简写方法,方法可以模仿浏览器的“后退” 和 “前进” 按钮。</p>
<ul>
<li>history.back</li>
<li>history.forward</li>
</ul>
<ul>
<li>history.length<ul>
<li>这个length属性保存着历史记录的数量。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;location对象&quot;&gt;&lt;a href=&quot;#location对象&quot; class=&quot;headerlink&quot; title=&quot;location对象&quot;&gt;&lt;/a&gt;location对象&lt;/h2&gt;&lt;p&gt;它既是window对象的属性，也是document对象的属性。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络读书笔记（一）</title>
    <link href="http://xuzihao.fun/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://xuzihao.fun/计算机网络读书笔记（一）.html</id>
    <published>2017-12-04T07:29:00.000Z</published>
    <updated>2017-12-04T08:20:32.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务原语"><a href="#服务原语" class="headerlink" title="服务原语"></a>服务原语</h2><table>
<thead>
<tr>
<th style="text-align:left">原语</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">LISTEN</td>
<td style="text-align:left">阻塞操作，等待入境连接请求</td>
</tr>
<tr>
<td style="text-align:left">CONNECT</td>
<td style="text-align:left">与等待中的对等实体建立连接</td>
</tr>
<tr>
<td style="text-align:left">ACCEPT</td>
<td style="text-align:left">接受来自对等实体的入境连接请求</td>
</tr>
<tr>
<td style="text-align:left">RECEIVE</td>
<td style="text-align:left">阻塞操作，等待入境报文</td>
</tr>
<tr>
<td style="text-align:left">SEND</td>
<td style="text-align:left">给对等实体发送一个报文</td>
</tr>
<tr>
<td style="text-align:left">DISCONNECT</td>
<td style="text-align:left">终止一个连接</td>
</tr>
</tbody>
</table>
<h2 id="服务和协议"><a href="#服务和协议" class="headerlink" title="服务和协议"></a>服务和协议</h2><p>服务和协议是两个截然不同的概念。</p>
<p><strong>服务：</strong></p>
<p>是指某一层向它上一层提供的一组原语（操作）。服务定义了该层准备代表其用户执行哪些操作，但是它不会去考虑如何实现这些操作。低层是服务提供者，上层是服务用户。</p>
<p><strong>协议：</strong></p>
<p>协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。</p>
<p><strong>服务涉及层与层之间的接口！！！！那么，协议设计不同机器上两个对等实体之间发送的数据包</strong></p>
<p><img src="http://ozar6ogjb.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png" alt="服务和协议"></p>
<p>用编程语言来说的话，服务就好像是面向对象语言中的抽象数据类型或者对象。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务原语&quot;&gt;&lt;a href=&quot;#服务原语&quot; class=&quot;headerlink&quot; title=&quot;服务原语&quot;&gt;&lt;/a&gt;服务原语&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;原语&lt;/th&gt;
&lt;th styl
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
