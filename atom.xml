<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>壮壮-Technology</title>
  <subtitle>宠辱不惊，闲看庭前花落花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzihao.fun/"/>
  <updated>2018-04-12T13:43:06.528Z</updated>
  <id>http://xuzihao.fun/</id>
  
  <author>
    <name>XuZiHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之工厂模式js和ts实现</title>
    <link href="http://xuzihao.fun/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
    <id>http://xuzihao.fun/设计模式之工厂模式.html</id>
    <published>2018-04-12T13:21:15.484Z</published>
    <updated>2018-04-12T13:43:06.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><p>Js:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Book</span>(<span class="params">name, price, type</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    a.name = name;</div><div class="line">    a.price = price;</div><div class="line">    a.type = type;</div><div class="line">    </div><div class="line">    a.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">    a.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.price);</div><div class="line">    &#125;</div><div class="line">    a.getType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.type)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = Book(<span class="string">"Js"</span>, <span class="number">14</span>, <span class="string">"语言书籍"</span>);</div><div class="line">b.getName();</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Ts:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> BookType&#123;</div><div class="line">    Js,</div><div class="line">    Ts,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">interface</span> BookAction&#123;</div><div class="line">    read();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Book <span class="keyword">implements</span> BookAction&#123; <span class="comment">// 抽象产品 - 书</span></div><div class="line">    <span class="keyword">abstract</span> read();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> JSbook <span class="keyword">extends</span> Book&#123; <span class="comment">//具体产品 - Jsbook</span></div><div class="line">    read()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'js book.'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Tsbook <span class="keyword">extends</span> Book&#123; <span class="comment">//具体产品 - Tsbook</span></div><div class="line">    read()&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ts book.'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> BookFactory&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> createBook(<span class="keyword">type</span>: BookType): Book&#123;</div><div class="line">        <span class="keyword">switch</span>(<span class="keyword">type</span>)&#123;</div><div class="line">            <span class="keyword">case</span> BookType.Js:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> JSbook();</div><div class="line">            <span class="keyword">case</span> BookType.Ts:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Tsbook();</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'not support book'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">BookFactory.createBook(BookType.Js).read();</div><div class="line">BookFactory.createBook(BookType.Ts).read();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot; title=&quot;简单工厂&quot;&gt;&lt;/a&gt;简单工厂&lt;/h1&gt;&lt;p&gt;Js:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Book&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, price, type&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.price = price;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.type = type;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.getPrice = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.price);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a.getType = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.type)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = Book(&lt;span class=&quot;string&quot;&gt;&quot;Js&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;语言书籍&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b.getName();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://xuzihao.fun/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://xuzihao.fun/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>React新生命周期</title>
    <link href="http://xuzihao.fun/React%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"/>
    <id>http://xuzihao.fun/React新生命周期.html</id>
    <published>2018-04-10T12:39:26.000Z</published>
    <updated>2018-04-11T13:41:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React16-3-1"><a href="#React16-3-1" class="headerlink" title="React16.3.1"></a>React16.3.1</h1><p>React发生了重大的变化。并且更新了新的生命周期我们来了解一下。</p>
<p>献上一个图！</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p>
<blockquote>
<p>地址：<a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="external">React新生命周期图</a></p>
</blockquote>
<a id="more"></a>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="Mounting-挂载"><a href="#Mounting-挂载" class="headerlink" title="Mounting/挂载"></a>Mounting/挂载</h2><ul>
<li>constructor()</li>
<li>static getDerivedStateFromProps()</li>
<li>UNSAFE_componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
<h2 id="Updating-更新"><a href="#Updating-更新" class="headerlink" title="Updating/更新"></a>Updating/更新</h2><ul>
<li>UNSAFE_componentWillReceiveProps()</li>
<li>static getDerivedStateFromProps()</li>
<li>shouldComponentUpdate(prevProps, prevState)</li>
<li>UNSAFE_componentWillUpdate()</li>
<li>render()</li>
<li>getSnapshotBeforeUpdate()</li>
<li>componentDidUpdate(prevProps, prevState, snapshot)</li>
</ul>
<h2 id="Unmounting-卸载"><a href="#Unmounting-卸载" class="headerlink" title="Unmounting/卸载"></a>Unmounting/卸载</h2><ul>
<li>componentWillUnmount()</li>
</ul>
<h1 id="Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate"><a href="#Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate" class="headerlink" title="Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:"></a>Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:</h1><p>链接： <a href="https://codesandbox.io/s/2xv69l269j" target="_blank" rel="external">小demo，了解一下</a></p>
<p>componentDidUpdate是个做网络请求的好地方。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">"react-dom"</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">  &lt;div style=&#123;styles&#125;&gt;</div><div class="line">    &lt;Hello name="CodeSandbox" /&gt;</div><div class="line">    &lt;h2&gt;Start editing to see some magic happen &#123;"\u2728"&#125;&lt;/h2&gt;</div><div class="line">    &lt;B /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">);</div><div class="line">class B extends React.Component &#123;</div><div class="line">  state = &#123;</div><div class="line">    myParentValue: ""</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      this.setState(&#123; myParentValue: "XuZiHao" &#125;);</div><div class="line">    &#125;, 1000);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return &lt;C foo=&#123;this.state.myParentValue&#125; /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class C extends React.Component &#123;</div><div class="line">  state = &#123;</div><div class="line">    foo: ""</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  static getDerivedStateFromProps(nextProps, prevState) &#123;</div><div class="line">    if (nextProps.foo === "XuZiHao") &#123;</div><div class="line">      return &#123;</div><div class="line">        foo: "bar"</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return null;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate() &#123;</div><div class="line">    if (this.state.foo === "bar") &#123;</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        this.setState(&#123; foo: "Hello!!!!" &#125;);</div><div class="line">      &#125;, 4000);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return &lt;h1&gt;Value of `foo` is &#123;this.state.foo&#125;&lt;/h1&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">render(&lt;App /&gt;, document.getElementById("root"));</div></pre></td></tr></table></figure>
<h1 id="Demo-shouldComponentUpdate-prevProps-prevState"><a href="#Demo-shouldComponentUpdate-prevProps-prevState" class="headerlink" title="Demo-shouldComponentUpdate(prevProps, prevState)"></a>Demo-shouldComponentUpdate(prevProps, prevState)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">Number</span>:<span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//这里调用了setState但是并没有改变setState中的值</span></div><div class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">     <span class="keyword">const</span> preNumber = <span class="keyword">this</span>.state.Number</div><div class="line">     <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">Number</span>:<span class="keyword">this</span>.state.Number</div><div class="line">     &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用</span></div><div class="line">  shouldComponentUpdate(nextProps,nextState)&#123;</div><div class="line">      <span class="keyword">if</span>(nextState.Number == <span class="keyword">this</span>.state.Number)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="comment">//当render函数被调用时，打印当前的Number</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.Number)</div><div class="line">    <span class="keyword">return</span>(&lt;h1 onClick = &#123;this.handleClick&#125; style =&#123;&#123;margin:30&#125;&#125;&gt;</div><div class="line">             &#123;this.state.Number&#125;</div><div class="line">           &lt;/h1&gt;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Demo-getSnapshotBeforeUpdate"><a href="#Demo-getSnapshotBeforeUpdate" class="headerlink" title="Demo-getSnapshotBeforeUpdate()"></a>Demo-getSnapshotBeforeUpdate()</h1><p>官方例子：</p>
<blockquote>
<p><a href="https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate" target="_blank" rel="external">官网地址</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  listRef = React.createRef();</div><div class="line"></div><div class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</div><div class="line">    <span class="comment">// 是否将新项目添加到列表中？</span></div><div class="line">    <span class="comment">// 捕获列表的当前高度，以便稍后调整滚动。</span></div><div class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.listRef.current.scrollHeight;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</div><div class="line">    <span class="comment">// 如果我们有快照值，我们刚刚添加了新items</span></div><div class="line">    <span class="comment">// 调整滚动条，以便这些新items不会将旧的推出视图。</span></div><div class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.listRef.current.scrollTop +=</div><div class="line">        <span class="keyword">this</span>.listRef.current.scrollHeight - snapshot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div ref=&#123;this.listRef&#125;&gt;&#123;/* ...contents... */&#125;&lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React16-3-1&quot;&gt;&lt;a href=&quot;#React16-3-1&quot; class=&quot;headerlink&quot; title=&quot;React16.3.1&quot;&gt;&lt;/a&gt;React16.3.1&lt;/h1&gt;&lt;p&gt;React发生了重大的变化。并且更新了新的生命周期我们来了解一下。&lt;/p&gt;
&lt;p&gt;献上一个图！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;地址：&lt;a href=&quot;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React新生命周期图&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="React" scheme="http://xuzihao.fun/categories/React/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>RegExp正则表达式</title>
    <link href="http://xuzihao.fun/RegExp.html"/>
    <id>http://xuzihao.fun/RegExp.html</id>
    <published>2018-04-06T13:44:57.528Z</published>
    <updated>2018-04-01T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="仨标志"><a href="#仨标志" class="headerlink" title="仨标志"></a>仨标志</h2><ul>
<li>g<ul>
<li>全局查</li>
</ul>
</li>
<li>i<ul>
<li>忽略大小写</li>
</ul>
</li>
<li>m<ul>
<li>多行查</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="regexp">/a/g</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="regexp">/at/i</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="regexp">/.at/gi</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;仨标志&quot;&gt;&lt;a href=&quot;#仨标志&quot; class=&quot;headerlink&quot; title=&quot;仨标志&quot;&gt;&lt;/a&gt;仨标志&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;g&lt;ul&gt;
&lt;li&gt;全局查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i&lt;ul&gt;
&lt;li&gt;忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;m&lt;ul&gt;
&lt;li&gt;多行查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;regexp&quot;&gt;/a/g&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;regexp&quot;&gt;/at/i&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;regexp&quot;&gt;/.at/gi&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《高性能JavaScript》读书笔记</title>
    <link href="http://xuzihao.fun/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDJavaScript%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://xuzihao.fun/《高性能JavaScript》读书笔记.html</id>
    <published>2018-04-02T06:39:00.000Z</published>
    <updated>2018-04-02T06:55:27.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p><code>&lt;script&gt;</code>方面的我写了一篇博文链接地址：<a href="http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html">浅谈script标签</a></p>
<h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2><p>数据存储：</p>
<ol>
<li>把数据存在访问字面量和局部变量是然后去访问速度最快的。</li>
<li>全局变量总是在作用域的最末端所以访问速度也是最慢的。</li>
<li>对象的深度嵌套拿值会影响性能。</li>
</ol>
<a id="more"></a>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> getId = <span class="built_in">document</span>.getElementById(<span class="string">"id"</span>);</div><div class="line">    <span class="keyword">var</span> getClass = documnent.getElementsByClassName(<span class="string">"class"</span>);</div><div class="line">    getId.style.width......</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//after</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> doc = <span class="built_in">document</span>;</div><div class="line">        <span class="keyword">var</span> getId = doc.getElementById(<span class="string">"id"</span>);</div><div class="line">        <span class="keyword">var</span> getClass = doc.getElementsByClassName(<span class="string">"class"</span>);</div><div class="line">        ....</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;First&quot;&gt;&lt;a href=&quot;#First&quot; class=&quot;headerlink&quot; title=&quot;First&quot;&gt;&lt;/a&gt;First&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;方面的我写了一篇博文链接地址：&lt;a href=&quot;http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html&quot;&gt;浅谈script标签&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Second&quot;&gt;&lt;a href=&quot;#Second&quot; class=&quot;headerlink&quot; title=&quot;Second&quot;&gt;&lt;/a&gt;Second&lt;/h2&gt;&lt;p&gt;数据存储：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把数据存在访问字面量和局部变量是然后去访问速度最快的。&lt;/li&gt;
&lt;li&gt;全局变量总是在作用域的最末端所以访问速度也是最慢的。&lt;/li&gt;
&lt;li&gt;对象的深度嵌套拿值会影响性能。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局</title>
    <link href="http://xuzihao.fun/CSS%E5%B8%83%E5%B1%80.html"/>
    <id>http://xuzihao.fun/CSS布局.html</id>
    <published>2018-04-01T06:50:00.000Z</published>
    <updated>2018-04-01T07:28:26.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两栏——左固定右自适应布局"><a href="#两栏——左固定右自适应布局" class="headerlink" title="两栏——左固定右自适应布局"></a>两栏——左固定右自适应布局</h2><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">// css </div><div class="line">.left &#123;</div><div class="line">  width: 40px;</div><div class="line">  height: 200px;</div><div class="line">  background: red;</div><div class="line">  float: left</div><div class="line">&#125;</div><div class="line"></div><div class="line">.right &#123;</div><div class="line">  height: 200px;</div><div class="line">  margin-left: 40px;</div><div class="line">  background: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561" target="_blank" rel="external">Demo</a></p>
<a id="more"></a>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">//css</div><div class="line">.left &#123;</div><div class="line">  position: absolute;</div><div class="line">  height: 200px;</div><div class="line">  width: 40px;</div><div class="line">  background: red;</div><div class="line">&#125;</div><div class="line">.right &#123;</div><div class="line">  height: 200px;</div><div class="line">  margin-left: 40px;</div><div class="line">  background: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两栏——左固定右自适应布局&quot;&gt;&lt;a href=&quot;#两栏——左固定右自适应布局&quot; class=&quot;headerlink&quot; title=&quot;两栏——左固定右自适应布局&quot;&gt;&lt;/a&gt;两栏——左固定右自适应布局&lt;/h2&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// css &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.left &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  width: 40px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  height: 200px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  float: left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.right &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  height: 200px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  margin-left: 40px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  background: blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>React-Saga笔记</title>
    <link href="http://xuzihao.fun/ReduxSaga.html"/>
    <id>http://xuzihao.fun/ReduxSaga.html</id>
    <published>2018-03-31T14:55:00.000Z</published>
    <updated>2018-04-01T06:20:41.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><h3 id="takeEvery"><a href="#takeEvery" class="headerlink" title="takeEvery:"></a>takeEvery:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">watchFetchData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span>* takeEvery(<span class="string">'FETCH_REQUESTED'</span>, fetchData)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>允许多个<code>fetchData</code>同时进行，即使上一个还没执行完成。<br><a id="more"></a></p>
<h3 id="takeLatest："><a href="#takeLatest：" class="headerlink" title="takeLatest："></a>takeLatest：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">watchFetchData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span>* takeLatest(<span class="string">'FETCH_REQUESTED'</span>, fetchData)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>始终执行最新的那个请求的响应。</p>
<p>总结一下就是：</p>
<p>我们疯狂点击一个按钮，它触发也疯狂触发了多次<code>fetchData</code>。</p>
<p>如果我们是<code>takeEvery</code>那将你点击几次他执行几次<code>fetchData</code>。</p>
<p>如果我们是<code>takeLatest</code>那将只执行你最后点击的那一次<code>fetchData</code>。</p>
<p>##Effect</p>
<p>从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 <em>Effect</em>。</p>
<p>可以使用 <code>redux-saga/effects</code> 包里<strong>提供的函数</strong>来创建 Effect。</p>
<h3 id="call："><a href="#call：" class="headerlink" title="call："></a>call：</h3><p><code>call(fn, ...args)</code> 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息</p>
<p>简单来说，call就是redux里的Action Creator。 </p>
<p>###put：</p>
<p>这个函数用于创建 dispatch Effect。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//before</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchProducts</span>(<span class="params">dispatch</span>)</span></div><div class="line">  <span class="title">const</span> <span class="title">products</span> = <span class="title">yield</span> <span class="title">call</span>(<span class="params">Api.fetch, <span class="string">'/products'</span></span>)</div><div class="line">  <span class="title">dispatch</span>(<span class="params">&#123; type: <span class="string">'PRODUCTS_RECEIVED'</span>, products &#125;</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//<span class="title">after</span></div><div class="line"><span class="title">import</span> &#123; call, put &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchProducts</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> products = <span class="keyword">yield</span> call(Api.fetch, <span class="string">'/products'</span>)</div><div class="line">  <span class="comment">// 创建并 yield 一个 dispatch Effect</span></div><div class="line">  <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'PRODUCTS_RECEIVED'</span>, products &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="take："><a href="#take：" class="headerlink" title="take："></a>take：</h3><p>它将会暂停 Generator 直到一个匹配的 action 被发起。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">loginFlow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</div><div class="line">    <span class="keyword">yield</span> take(<span class="string">'LOGIN'</span>)</div><div class="line">    <span class="comment">// ... perform the login logic</span></div><div class="line">    <span class="keyword">yield</span> take(<span class="string">'LOGOUT'</span>)</div><div class="line">    <span class="comment">// ... perform the logout logic</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说我们可以用<code>take</code>去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监听&quot;&gt;&lt;a href=&quot;#监听&quot; class=&quot;headerlink&quot; title=&quot;监听&quot;&gt;&lt;/a&gt;监听&lt;/h2&gt;&lt;h3 id=&quot;takeEvery&quot;&gt;&lt;a href=&quot;#takeEvery&quot; class=&quot;headerlink&quot; title=&quot;takeEvery:&quot;&gt;&lt;/a&gt;takeEvery:&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;watchFetchData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;* takeEvery(&lt;span class=&quot;string&quot;&gt;&#39;FETCH_REQUESTED&#39;&lt;/span&gt;, fetchData)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;允许多个&lt;code&gt;fetchData&lt;/code&gt;同时进行，即使上一个还没执行完成。&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="http://xuzihao.fun/categories/React/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative热更新之微软CodePush</title>
    <link href="http://xuzihao.fun/ReactNativeCodePush.html"/>
    <id>http://xuzihao.fun/ReactNativeCodePush.html</id>
    <published>2018-03-28T14:10:23.014Z</published>
    <updated>2018-03-28T14:16:55.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微软-CodePush-使用"><a href="#微软-CodePush-使用" class="headerlink" title="微软 CodePush 使用"></a>微软 CodePush 使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>yarn global add code-push-cli</code></p>
<h2 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h2><p><code>code-push register</code></p>
<p>会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。</p>
<a id="more"></a>
<h2 id="CodePush-登录相关命令"><a href="#CodePush-登录相关命令" class="headerlink" title="CodePush 登录相关命令"></a>CodePush 登录相关命令</h2><ul>
<li>code-push login 登陆</li>
<li>code-push logout 注销</li>
<li>code-push access-key ls 列出登陆的 token</li>
<li>code-push access-key rm 删除某个 access-key</li>
</ul>
<h2 id="CodePush-创建-App-相关命令"><a href="#CodePush-创建-App-相关命令" class="headerlink" title="CodePush 创建 App 相关命令"></a>CodePush 创建 App 相关命令</h2><ul>
<li>code-push app add<ul>
<li>如: code-push app add yimutest-ios ios/android react-native</li>
</ul>
</li>
<li>code-push app add<ul>
<li>在账号里面添加一个新的 app</li>
</ul>
</li>
<li>code-push app remove<ul>
<li>rm 在账号里移除一个 app</li>
</ul>
</li>
<li>code-push app rename<ul>
<li>重命名一个存在 app</li>
</ul>
</li>
<li>code-push app list<ul>
<li>ls 列出账号下面的所有 app</li>
</ul>
</li>
<li>code-push app transfer<ul>
<li>把 app 的所有权转移到另外一个账号</li>
</ul>
</li>
</ul>
<h2 id="在项目中-加包"><a href="#在项目中-加包" class="headerlink" title="在项目中  加包"></a>在项目中  加包</h2><ol>
<li><code>yarn add react-native-code-push</code></li>
<li><code>react-native link</code></li>
</ol>
<p>之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里</p>
<p>Staging 为测试的 key，Production 为生产打包时用的 key。</p>
<p>如果忘了  则在终端下做查看:</p>
<p><code>code-push deployment ls 您的应用名 -k</code></p>
<h2 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> codePush <span class="keyword">from</span> <span class="string">"react-native-code-push"</span>;</div><div class="line"><span class="keyword">const</span> codePushOptions = &#123; <span class="attr">checkFrequency</span>: codePush.CheckFrequency.MANUAL &#125;;</div><div class="line"></div><div class="line">componentDidMount()&#123;</div><div class="line">  codePush.sync(&#123;</div><div class="line">    <span class="attr">updateDialog</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">installMode</span>: codePush.InstallMode.IMMEDIATE,</div><div class="line">    <span class="attr">mandatoryInstallMode</span>:codePush.InstallMode.IMMEDIATE,</div><div class="line">    <span class="comment">//deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试</span></div><div class="line">    deploymentKey: <span class="string">'xxxxxxx'</span>,</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>附上其他的详细 API: <a href="https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md" target="_blank" rel="external">详细配置</a></p>
<h2 id="发布新版本"><a href="#发布新版本" class="headerlink" title="发布新版本"></a>发布新版本</h2><blockquote>
<p><code>code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</code></p>
<p><code>code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description &quot;我也不知道要写啥&quot; --mandatory false</code></p>
</blockquote>
<ol>
<li><code>code-push app add aaa-ios ios react-native</code></li>
<li><code>yarn start-ios</code></li>
</ol>
<h3 id="Android-新版本发布"><a href="#Android-新版本发布" class="headerlink" title="Android 新版本发布"></a>Android 新版本发布</h3><p>修改 App.js 的 deploymentKey 为安卓的</p>
<ol>
<li><code>deploymentKey:&#39;android key&#39;</code></li>
<li><code>code-push release-react aaa-android android</code></li>
<li><code>yarn start-android</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微软-CodePush-使用&quot;&gt;&lt;a href=&quot;#微软-CodePush-使用&quot; class=&quot;headerlink&quot; title=&quot;微软 CodePush 使用&quot;&gt;&lt;/a&gt;微软 CodePush 使用&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;yarn global add code-push-cli&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;注册账户&quot;&gt;&lt;a href=&quot;#注册账户&quot; class=&quot;headerlink&quot; title=&quot;注册账户&quot;&gt;&lt;/a&gt;注册账户&lt;/h2&gt;&lt;p&gt;&lt;code&gt;code-push register&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://xuzihao.fun/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://xuzihao.fun/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Mac通过ssh连接ecs</title>
    <link href="http://xuzihao.fun/mac%E8%BF%9E%E6%8E%A5ssh.html"/>
    <id>http://xuzihao.fun/mac连接ssh.html</id>
    <published>2018-03-26T13:55:10.689Z</published>
    <updated>2018-03-26T14:09:56.264Z</updated>
    
    <content type="html"><![CDATA[<p>通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。</p>
<a id="more"></a>
<p>那不说多的直接进入正题。</p>
<p>起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png" alt=""></p>
<p>它居然说！！！</p>
<p>Timed out!!</p>
<p>这是Why！！</p>
<p>之后帮助中心走了一遭，发现原来我是安全组没配置。。</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png" alt=""></p>
<p>然后我们点击安全组配置。</p>
<p>之后进入重点！</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png" alt=""></p>
<p>我们在出和入都配置一样的设置。</p>
<p>然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云服务的使用" scheme="http://xuzihao.fun/categories/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Linux" scheme="http://xuzihao.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>同源与跨域资源共享</title>
    <link href="http://xuzihao.fun/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html"/>
    <id>http://xuzihao.fun/跨域资源共享.html</id>
    <published>2018-03-23T12:53:35.483Z</published>
    <updated>2018-03-26T13:53:48.550Z</updated>
    
    <content type="html"><![CDATA[<p>说到跨域，我们需要先说说什么是同源策略。</p>
<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>浏览器安全的基石是”同源政策”（<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">same-origin policy</a>）。</p>
<p>也就是说要满足以下条件：</p>
<blockquote>
<ol>
<li>协议相同</li>
<li>域名相同</li>
<li>端口相同</li>
</ol>
</blockquote>
<p>也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。</p>
<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>
<a id="more"></a>
<p>如果非同源，共有三种行为受到限制：</p>
<blockquote>
<ol>
<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>
<li>DOM 无法获得。</li>
<li>AJAX 请求不能发送。</li>
</ol>
</blockquote>
<p>同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。</p>
<p>但是有些的跨域请求是被允许的比如：</p>
<ul>
<li><code>&lt;script&gt;</code>标签</li>
<li><code>&lt;link&gt;</code>标签</li>
<li><code>&lt;img&gt;</code>标签</li>
<li><code>&lt;a&gt;</code>标签</li>
<li><code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>嵌入多媒体资源。</li>
<li><code>&lt;iframe&gt;</code>与<code>&lt;frame&gt;</code></li>
</ul>
<h2 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h2><p>那么为了解决这个问题，CORS横空出世！</p>
<p>IE8可以通过XDomainRequest对象支持CORS。</p>
<p>其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。</p>
<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p>
<p>其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>
<p>CORS分简单请求和非简单请求，满足以下条件就为简单请求：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">简单请求</a></p>
<h2 id="HTTP-响应首部字段"><a href="#HTTP-响应首部字段" class="headerlink" title="HTTP 响应首部字段"></a>HTTP 响应首部字段</h2><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>根据Reuqest请求头中的<em>Origin</em>来判断该请求的资源是否可以被共享。</p>
<h3 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p>
<h3 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h3><p>让服务器把允许浏览器访问的头放入白名单</p>
<p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p>
<h3 id="Access-Control-Allow-Credentials-1"><a href="#Access-Control-Allow-Credentials-1" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h3><p>指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。</p>
<p>所以我们需要<strong>附带身份凭证的请求</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>
<h2 id="HTTP请求首部字段"><a href="#HTTP请求首部字段" class="headerlink" title="HTTP请求首部字段"></a>HTTP请求首部字段</h2><p>用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p>
<ul>
<li>Origin</li>
<li>Access-Control-Request-Method</li>
<li>Access-Control-Request-Headers</li>
</ul>
<blockquote>
<p>参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">MDN-HTTP请求首部字段</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到跨域，我们需要先说说什么是同源策略。&lt;/p&gt;
&lt;h2 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略&quot;&gt;&lt;/a&gt;同源策略&lt;/h2&gt;&lt;p&gt;浏览器安全的基石是”同源政策”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;same-origin policy&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;也就是说要满足以下条件：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的&lt;strong&gt;源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax与Fetch？</title>
    <link href="http://xuzihao.fun/Ajax%E4%B8%8EFetch.html"/>
    <id>http://xuzihao.fun/Ajax与Fetch.html</id>
    <published>2018-03-20T14:47:33.812Z</published>
    <updated>2018-03-21T14:14:33.291Z</updated>
    
    <content type="html"><![CDATA[<p>虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。<br><a id="more"></a><br>当我们发起一个请求时：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqListener</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onload = reqListener;</div><div class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"yourfile.txt"</span>, <span class="literal">false</span>)</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<p>那么逐条解释，</p>
<p>XMLHttpRequest简称XHR。</p>
<p>在XHR的属性有<code>responseText</code>，也就是代码第2行中，它是作为<em>响应主体被返回的文本</em>，而且无论内容类型是什么，它们都会保存在该属性中。</p>
<hr>

<p>第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。</p>
<hr>

<p>第5行代码，看以下图：</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png" alt=""></p>
<p>我们会发现<code>onload</code>是XMLHttpRequestEventTarget的事件处理程序的接口。</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort" target="_blank" rel="external">XMLHttpRequestEventTarget.onabort</a><ul>
<li>当请求失败时调用该方法</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror" target="_blank" rel="external">XMLHttpRequestEventTarget.onerror</a><ul>
<li>当请求发生错误时调用该方法</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload" target="_blank" rel="external">XMLHttpRequestEventTarget.onload</a><ul>
<li>当一个HTTP请求正确加载出内容后返回时调用。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart" target="_blank" rel="external">XMLHttpRequestEventTarget.onloadstart</a><ul>
<li>当一个HTTP请求开始加载数据时调用。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress" target="_blank" rel="external">XMLHttpRequestEventTarget.onprogress</a><ul>
<li>间歇调用该方法用来获取请求过程中的信息。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout" target="_blank" rel="external">XMLHttpRequestEventTarget.ontimeout</a><ul>
<li>当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend" target="_blank" rel="external">XMLHttpRequestEventTarget.onloadend</a><ul>
<li>当内容加载完成，不管失败与否，都会调用该方法</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget" target="_blank" rel="external">MDN</a></p>
</blockquote>
<hr>

<p>第6行就都是XMLHttpRequest对象的<strong>方法</strong>。</p>
<ul>
<li>open(method, url, async, user, password)<ul>
<li>请求使用Http的方法，如method = ‘GET’ | ‘POST’ | ‘PUT’ | ‘DELET’</li>
<li>url就是url</li>
<li>async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。</li>
<li>user，password: 可选参数,为授权使用</li>
</ul>
</li>
<li>另外在我们<strong>接收到响应之前</strong>还可以调用abort()方法来取消异步请求。</li>
</ul>
<hr>

<p>当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。</p>
<p>最重要的是当<strong>readyState</strong>属性的值由一个值变为另一个值得时候，都会触发一次<strong>readystatechange</strong>事件。</p>
<p>那么<strong>readyState</strong>有哪些值呢？</p>
<ul>
<li>0，未初始化。还没调用open()方法</li>
<li>1，启动。已经调用了open()方法</li>
<li>2，发送。已经调用了send()方法</li>
<li>3，接受。已经接收到部分响应数据</li>
<li>4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。</li>
</ul>
<p>我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">        balbalbal......</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有<strong>response</strong>，<strong>responseText</strong>，<strong>responseType</strong>，<strong>responseXML</strong>，<strong>status</strong>，<strong>statusText</strong>，<strong>statusText</strong>，<strong>withCredentials</strong>属性。</p>
<h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><h3 id="Fetch是什么？"><a href="#Fetch是什么？" class="headerlink" title="Fetch是什么？"></a>Fetch是什么？</h3><p>Fetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。</p>
<p>Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 <strong>CORS</strong>和HTTP的扩展。</p>
<p>请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：</p>
<ul>
<li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li>
<li>默认情况下, <code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0" target="_blank" rel="external">credentials</a> 选项）.</li>
</ul>
<blockquote>
<p>参考资料<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="external">MDN</a></p>
</blockquote>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'/'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">    response.text().then(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(text)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这是个很简单的Fetch的小例子。</p>
<p>.then…这不是和Promise好像吗？</p>
<p>没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用<code>.abort()</code>去中断请求。。</p>
<h3 id="自定义请求的参数"><a href="#自定义请求的参数" class="headerlink" title="自定义请求的参数"></a>自定义请求的参数</h3><p>那么，Fetch第二个参数我们可以传一个可以控制不同配置的 <code>init</code> 对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myInit = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>|<span class="string">'POST'</span>|<span class="string">'PUT'</span>|<span class="string">'DELETE'</span>,</div><div class="line">               <span class="attr">headers</span>: myHeaders,</div><div class="line">               <span class="attr">mode</span>: <span class="string">'cors'</span>,</div><div class="line">               <span class="attr">cache</span>: <span class="string">'default'</span> &#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li>
<li><code>cache</code>:  请求的 cache 模式: <code>default</code>、 <code>no-store 、</code> <code>reload 、</code> <code>no-cache 、</code> <code>force-cache</code>或者 <code>only-if-cached 。</code></li>
</ul>
<p>其他可以去参考MDN。</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>在Fetch下可以很方便的操作header：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params">responen</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(responen.headers.get(<span class="string">'Content-Type'</span>));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myHeaders = <span class="keyword">new</span> Header();</div><div class="line">myHeaders.append(<span class="string">"Content-Type"</span>, <span class="string">"text/html"</span>);</div><div class="line">fetch(url).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    headers: myHeaders</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> header = <span class="keyword">new</span> Headers(&#123;</div><div class="line">  <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Type"</span>)); <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(header.has(<span class="string">"Content-Length"</span>)); <span class="comment">//false</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！&lt;/p&gt;
&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。&lt;br&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈script标签</title>
    <link href="http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html"/>
    <id>http://xuzihao.fun/浅谈script标签.html</id>
    <published>2018-03-19T12:57:11.911Z</published>
    <updated>2018-04-01T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;script&gt;</code> ? 这不就是直接执行script脚本吗？</p>
<p>以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。</p>
<a id="more"></a>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><code>&lt;script&gt;</code>拥有7个属性，没想到吧！</p>
<ul>
<li><strong>async</strong><ul>
<li>boolean</li>
<li>异步执行该脚本，但不保证按照指定它们的先后顺序执行</li>
</ul>
</li>
<li><strong>defer</strong><ul>
<li>boolean</li>
<li>通知浏览器该脚本将在文档完成解析后遇到<code>&lt;/html&gt;</code>，并会按照它们出现的先后顺序执行。但会在触发 <code>DOMContentLoaded</code> 事件前执行。</li>
</ul>
</li>
<li><strong>integrity</strong><ul>
<li>包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据</li>
</ul>
</li>
<li><strong>src</strong></li>
<li><strong>type</strong></li>
<li><strong>text</strong></li>
<li><strong>crossorigin</strong><ul>
<li>使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错</li>
</ul>
</li>
</ul>
<blockquote>
<p>在XHTML文档中，要把async属性设置为 async = “async”, defer = “defer”</p>
</blockquote>
<p>知道了那几个属性接下来，来看看下面这个图：</p>
<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png" alt=""></p>
<ol>
<li>第一个光秃秃的<code>&lt;script&gt;</code>说明了，在<code>html</code>解析中，如果有<code>&lt;script&gt;</code>的话，<code>html</code>会在<code>Script</code>下载并且执行的时候，暂停解析。</li>
<li>第二个带<code>async</code>属性的<code>&lt;script&gt;</code>，如图所示，也就是他下载<code>Script</code>的时候是异步的，但是只要<code>Script</code>文件下好了，那么就马上执行。</li>
<li>第三个带<code>defer</code>属性的<code>&lt;script&gt;</code>，其实和上面带<code>async</code>属性一样都是异步执行去下载<code>Script</code>文件的。但是在这个带有<code>defer</code>的则是在<code>html</code>全部解析完毕之后才去执行<code>Script</code>文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 <code>defer</code> 是最接近我们对于应用脚本加载和执行的要求的</li>
</ol>
<h2 id="使用动态创建的-lt-script-gt-标签元素来下载并执行代码"><a href="#使用动态创建的-lt-script-gt-标签元素来下载并执行代码" class="headerlink" title="使用动态创建的&lt;script&gt;标签元素来下载并执行代码"></a>使用动态创建的<code>&lt;script&gt;</code>标签元素来下载并执行代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">script.type = <span class="string">"text/javascript"</span>;</div><div class="line">script.src = <span class="string">"file1.js"</span>;</div><div class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</div></pre></td></tr></table></figure>
<p>这个技术的重点在于：</p>
<p>无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。</p>
<p>参考：</p>
<blockquote>
<p>《高性能JavaScript》</p>
</blockquote>
<h2 id="使用XHR对象下载JS代码注入页面"><a href="#使用XHR对象下载JS代码注入页面" class="headerlink" title="使用XHR对象下载JS代码注入页面"></a>使用XHR对象下载JS代码注入页面</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(</div><div class="line"><span class="string">"e"</span>);</div><div class="line">    script.type = <span class="string">"text/javascript"</span>;</div><div class="line">    <span class="keyword">if</span>(script.readyState)&#123;	<span class="comment">//ie</span></div><div class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>)&#123;</div><div class="line">                script.onreadystatechage = <span class="literal">null</span>;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadScript(<span class="string">"the-rest.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Application.init()</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script" target="_blank" rel="external">MDN</a></li>
<li><a href="https://segmentfault.com/a/1190000006778717" target="_blank" rel="external">SegmentFault</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; ? 这不就是直接执行script脚本吗？&lt;/p&gt;
&lt;p&gt;以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript修仙之旅" scheme="http://xuzihao.fun/categories/Javascript%E4%BF%AE%E4%BB%99%E4%B9%8B%E6%97%85/"/>
    
    
      <category term="JavaScript" scheme="http://xuzihao.fun/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3外轮廓</title>
    <link href="http://xuzihao.fun/CSS%E5%A4%96%E8%BD%AE%E5%BB%93.html"/>
    <id>http://xuzihao.fun/CSS外轮廓.html</id>
    <published>2018-03-18T14:38:00.000Z</published>
    <updated>2018-03-19T13:21:36.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h1><p>看一个Outline的例子：<a href="https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61" target="_blank" rel="external">outline</a></p>
<p>在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用<code>outline</code>实现的外边框中border为<code>-</code>。</p>
<h2 id="outline和border对比"><a href="#outline和border对比" class="headerlink" title="outline和border对比"></a>outline和border对比</h2><ul>
<li>border属于盒模型的一部分，会直接影响盒子大小。</li>
<li>outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。</li>
<li>border创建是可以显示单边的，而outline是不行的。看demo：<a href="https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c" target="_blank" rel="external">单边</a></li>
<li>border只可以外轮廓，而outline可以借助<code>outline-offset</code>设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：<a href="https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4" target="_blank" rel="external">内轮廓</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Outline&quot;&gt;&lt;a href=&quot;#Outline&quot; class=&quot;headerlink&quot; title=&quot;Outline&quot;&gt;&lt;/a&gt;Outline&lt;/h1&gt;&lt;p&gt;看一个Outline的例子：&lt;a href=&quot;https://codepan.net/gist/7a
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session</title>
    <link href="http://xuzihao.fun/Cookie-Session.html"/>
    <id>http://xuzihao.fun/Cookie-Session.html</id>
    <published>2018-03-17T06:54:00.000Z</published>
    <updated>2018-03-17T07:43:26.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。</p>
<blockquote>
<p>摘自维基百科</p>
</blockquote>
<a id="more"></a>
<p>按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。</p>
<h3 id="为什么要有Cookie？"><a href="#为什么要有Cookie？" class="headerlink" title="为什么要有Cookie？"></a>为什么要有Cookie？</h3><p>因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。<strong>也就是说服务器会给客户端发送一段cookie</strong>.</p>
<p>LocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。</p>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。</p>
<h2 id="Cookie和Session的关系"><a href="#Cookie和Session的关系" class="headerlink" title="Cookie和Session的关系"></a>Cookie和Session的关系</h2><p>这里我做了一个图<img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://xuzihao.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机网络" scheme="http://xuzihao.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CSS3transform/transition</title>
    <link href="http://xuzihao.fun/CSS3transform.html"/>
    <id>http://xuzihao.fun/CSS3transform.html</id>
    <published>2018-03-15T13:52:00.000Z</published>
    <updated>2018-03-15T13:52:07.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS3-transform-transition"><a href="#CSS3-transform-transition" class="headerlink" title="CSS3 transform/transition"></a>CSS3 transform/transition</h1><p>先来看一个demo：<a href="https://codepan.net/gist/02e3a0857615ee407878f1b46663f950" target="_blank" rel="external">字体歪斜变正</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS3-transform-transition&quot;&gt;&lt;a href=&quot;#CSS3-transform-transition&quot; class=&quot;headerlink&quot; title=&quot;CSS3 transform/transition&quot;&gt;&lt;/a&gt;CSS3 transf
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法学习</title>
    <link href="http://xuzihao.fun/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95.html"/>
    <id>http://xuzihao.fun/数据结构与算法.html</id>
    <published>2018-03-10T13:25:00.000Z</published>
    <updated>2018-04-03T04:54:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary_search</span>(<span class="params">array, item</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> low = <span class="number">0</span>;</div><div class="line">    <span class="keyword">let</span> high = array.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(low &lt;= high)&#123;</div><div class="line">        <span class="keyword">let</span> mid = (low + high) / <span class="number">2</span> &gt;&gt; <span class="number">0</span>;</div><div class="line">        <span class="keyword">let</span> guess = array[mid];</div><div class="line">        <span class="keyword">if</span>(guess == item)&#123;</div><div class="line">            <span class="keyword">return</span> mid;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(guess &gt; item)&#123;</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">'没有该数字'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">choicesort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> len = arr.length, min, temp;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">    min = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</div><div class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[min]) min = j;</div><div class="line">      temp = arr[i];</div><div class="line">      arr[i] = arr[min];</div><div class="line">      arr[min] = temp;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> arr</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * @param &#123;array&#125; 传入一个需要排序的数组 </div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</div><div class="line">  <span class="keyword">let</span> pivotIndex = arr.length / <span class="number">2</span> &gt;&gt; <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">let</span> left = [];</div><div class="line">  <span class="keyword">let</span> right = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</div><div class="line">      left.push(arr[i]);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      right.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> quicksort(left).concat([pivot], quicksort(right));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><ul>
<li>模拟映射关系；</li>
<li>防止重复；</li>
<li>缓存/ 记住数据，以免服务器再通过处理来生成它们。</li>
<li>一旦填装因子超过0.7 ，就该调整散列表的长度。</li>
</ul>
<h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><p>狄克斯特拉算法包含4个步骤。</p>
<ol>
<li>找出最便宜的节点，即可在最短时间内前往的节点。</li>
<li>对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。</li>
<li>重复这个过程，直到对图中的每个节点都这样做了。</li>
<li>计算最终路径。</li>
</ol>
<p>​<br>​    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/a&gt;二分查找&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;binary_search&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; low = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; high = array.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(low &amp;lt;= high)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; mid = (low + high) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; guess = array[mid];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(guess == item)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(guess &amp;gt; item)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            high = mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            low = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;没有该数字&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://xuzihao.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="http://xuzihao.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS3选择器</title>
    <link href="http://xuzihao.fun/Css3%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>http://xuzihao.fun/Css3选择器.html</id>
    <published>2018-03-05T07:23:00.000Z</published>
    <updated>2018-03-05T07:26:02.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Css3选择器"><a href="#Css3选择器" class="headerlink" title="Css3选择器"></a>Css3选择器</h1><p>在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！</p>
<p><img src="http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="CSS选择器"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Css3选择器&quot;&gt;&lt;a href=&quot;#Css3选择器&quot; class=&quot;headerlink&quot; title=&quot;Css3选择器&quot;&gt;&lt;/a&gt;Css3选择器&lt;/h1&gt;&lt;p&gt;在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Prettier Option</title>
    <link href="http://xuzihao.fun/Prettier-Options.html"/>
    <id>http://xuzihao.fun/Prettier-Options.html</id>
    <published>2018-02-09T09:50:00.000Z</published>
    <updated>2018-03-05T07:27:16.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prettier-Option"><a href="#Prettier-Option" class="headerlink" title="Prettier Option"></a>Prettier Option</h1><p>.Prettierrc</p>
<p>Cli是在终端使用，</p>
<p>Api是在<code>.Prettierrc</code>中设置使用<br><a id="more"></a></p>
<h2 id="printWidth"><a href="#printWidth" class="headerlink" title="printWidth"></a>printWidth</h2><p>打印宽度指定打印将换行的行长。</p>
<table>
<thead>
<tr>
<th>Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td style="text-align:center">–print-width <int></int></td>
<td style="text-align:center">printWidth: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Tab-Width"><a href="#Tab-Width" class="headerlink" title="Tab Width"></a>Tab Width</h2><p>指定每个缩进的空格数。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">–tab-width <int></int></td>
<td style="text-align:center">tabWidth: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p>用<code>Tab</code>缩进而不是空格</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–use-tabs <int></int></td>
<td style="text-align:center">useTabs: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Semicolons"><a href="#Semicolons" class="headerlink" title="Semicolons"></a>Semicolons</h2><p>在语句的末尾打印分号。</p>
<p>有效的选项：</p>
<ul>
<li>true  - 在每个语句的末尾添加一个分号。</li>
<li>false - 只在可能引入ASI故障的行的开头添加分号。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td style="text-align:center">–no-semi <int></int></td>
<td style="text-align:center">semi: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Quotes"><a href="#Quotes" class="headerlink" title="Quotes"></a>Quotes</h2><p>使用单引号而不是双引号。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–single-quote</td>
<td style="text-align:center">singleQuote: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Trailing-Commas"><a href="#Trailing-Commas" class="headerlink" title="Trailing Commas"></a>Trailing Commas</h2><p>多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）</p>
<p>有效选项：</p>
<ul>
<li>none - 没有尾随逗号。</li>
<li>es5 - 在ES5中有效的尾随逗号（object，arrays等）</li>
<li>all - 尽可能尾随逗号（包括函数参数）。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">None</td>
<td style="text-align:center">–trailing-comma &lt;none\</td>
<td style="text-align:center">es5\</td>
<td>all&gt;</td>
<td>trailingComma: “&lt;none\</td>
<td>es5\</td>
<td>all&gt;”</td>
</tr>
</tbody>
</table>
<h2 id="Bracket-Spacing"><a href="#Bracket-Spacing" class="headerlink" title="Bracket Spacing"></a>Bracket Spacing</h2><p>在对象文字中的括号之间打印空格。</p>
<p>选项：</p>
<ul>
<li>true - Example { foo: bar }</li>
<li>flase - Example {foo: bar}</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th>Cli Override</th>
<th>Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">true</td>
<td>–no-bracket-spacing</td>
<td>bracketSpacing: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="JSX-Brackets"><a href="#JSX-Brackets" class="headerlink" title="JSX Brackets"></a>JSX Brackets</h2><p>将多行JSX元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–jsx-bracket-same-line</td>
<td style="text-align:center">jsxBracketSameLine: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Arrow-Function-Parentheses"><a href="#Arrow-Function-Parentheses" class="headerlink" title="Arrow Function Parentheses"></a>Arrow Function Parentheses</h2><p>围绕一个唯一的箭头函数参数包括括号。</p>
<p>选项：</p>
<ul>
<li>avoid - 尽可能省略括号 Example： x =&gt; x</li>
<li>always - 总是包括括号 Example： (x) =&gt; x</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">avoid</td>
<td style="text-align:center">–arrow-parens &lt;avoid\</td>
<td style="text-align:center">always&gt;</td>
<td>arrowParens: “&lt;avoid\</td>
<td>always&gt;”</td>
</tr>
</tbody>
</table>
<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>只格式化文件的一部分。</p>
<p>这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:</p>
<ul>
<li>返回到包含选定语句的第一行的开头。 </li>
<li>转到选定语句的末尾。</li>
</ul>
<p>这些选项不能与cursorOffset一起使用。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">–range-start <int></int></td>
<td style="text-align:center">rangeStart: <int></int></td>
</tr>
<tr>
<td style="text-align:center">Infinity</td>
<td style="text-align:center">–range-end <int></int></td>
<td style="text-align:center">rangeEnd: <int></int></td>
</tr>
</tbody>
</table>
<h2 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a>Parser</h2><p>指定使用哪个分析器。</p>
<p>Babylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。</p>
<p>Built-in parsers:</p>
<ul>
<li><a href="https://github.com/babel/babel/tree/master/packages/babylon" target="_blank" rel="external"><code>babylon</code></a></li>
<li><a href="https://github.com/facebook/flow/tree/master/src/parser" target="_blank" rel="external"><code>flow</code></a></li>
<li><a href="https://github.com/eslint/typescript-eslint-parser" target="_blank" rel="external"><code>typescript</code></a> <em>Since v1.4.0</em></li>
<li><a href="https://github.com/postcss/postcss" target="_blank" rel="external"><code>postcss</code></a> <em>Since v1.4.0</em></li>
<li><a href="https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options" target="_blank" rel="external"><code>json</code></a> <em>Since v1.5.0</em></li>
<li><a href="https://github.com/graphql/graphql-js/tree/master/src/language" target="_blank" rel="external"><code>graphql</code></a> <em>Since v1.5.0</em></li>
<li><a href="https://github.com/wooorm/remark/tree/master/packages/remark-parse" target="_blank" rel="external"><code>markdown</code></a> <em>Since v1.8.0</em></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:left">Cli Override</th>
<th style="text-align:left">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">babylon</td>
<td style="text-align:left">–parser <string><br>–parser ./my-parser</string></td>
<td style="text-align:left">parser: “<string>“<br>parser: require(“./my-parser”)</string></td>
</tr>
</tbody>
</table>
<h2 id="FilePath"><a href="#FilePath" class="headerlink" title="FilePath"></a>FilePath</h2><p>指定输入文件路径。这将被用来做解析器推理。</p>
<p>例如，以下将使用postcss解析器：</p>
<blockquote>
<p>cat foo | prettier –stdin-filepath foo.css</p>
</blockquote>
<table>
<thead>
<tr>
<th>Default</th>
<th>Cli Override</th>
<th>Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td>None</td>
<td>–stdin-filepath <string></string></td>
<td>filepath: “<string>“</string></td>
</tr>
</tbody>
</table>
<h2 id="Require-pragma"><a href="#Require-pragma" class="headerlink" title="Require pragma"></a>Require pragma</h2><p>Prettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。</p>
<p>例如，当提供–require-pragma时，将会格式化具有以下第一个注释的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @prettier</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @format</div><div class="line"> */</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–require-pragma</td>
<td style="text-align:center">requirePragma: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Insert-Pragma"><a href="#Insert-Pragma" class="headerlink" title="Insert Pragma"></a>Insert Pragma</h2><p>Prettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">false</td>
<td style="text-align:center">–insert-pragma</td>
<td style="text-align:center">insertPragma: <bool></bool></td>
</tr>
</tbody>
</table>
<h2 id="Prose-Wrap"><a href="#Prose-Wrap" class="headerlink" title="Prose Wrap"></a>Prose Wrap</h2><p>默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。</p>
<p>选项：</p>
<ul>
<li><code>&quot;always&quot;</code> - 如果超出了打印宽度，请将散的包好。</li>
<li><code>&quot;never&quot;</code> - 不包散的。</li>
<li><code>&quot;preserve&quot;</code> - 按原样包散的。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">Default</th>
<th style="text-align:center">Cli Override</th>
<th style="text-align:center">Api Override</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“preserve”</td>
<td style="text-align:center">–prose-wrap &lt;always\</td>
<td style="text-align:center">never\</td>
<td>preserve&gt;</td>
<td>proseWrap: “&lt;always\</td>
<td>never\</td>
<td>preserve&gt;”</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prettier-Option&quot;&gt;&lt;a href=&quot;#Prettier-Option&quot; class=&quot;headerlink&quot; title=&quot;Prettier Option&quot;&gt;&lt;/a&gt;Prettier Option&lt;/h1&gt;&lt;p&gt;.Prettierrc&lt;/p&gt;
&lt;p&gt;Cli是在终端使用，&lt;/p&gt;
&lt;p&gt;Api是在&lt;code&gt;.Prettierrc&lt;/code&gt;中设置使用&lt;br&gt;
    
    </summary>
    
      <category term="前端工具" scheme="http://xuzihao.fun/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端工具" scheme="http://xuzihao.fun/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Kaldi语音识别初用</title>
    <link href="http://xuzihao.fun/kaldi%E6%96%87%E6%A1%A3.html"/>
    <id>http://xuzihao.fun/kaldi文档.html</id>
    <published>2018-02-04T06:50:32.416Z</published>
    <updated>2018-02-04T06:52:51.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kaldi启用"><a href="#Kaldi启用" class="headerlink" title="Kaldi启用"></a>Kaldi启用</h1><h2 id="INSTALL"><a href="#INSTALL" class="headerlink" title="INSTALL"></a>INSTALL</h2><ol>
<li>在 tools/ 下跑 extras/check_dependencies.sh<ol>
<li>然后跑make</li>
</ol>
</li>
<li>之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条<ol>
<li>make depend</li>
<li>make<a id="more"></a>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3></li>
</ol>
</li>
</ol>
<h4 id="修改路径"><a href="#修改路径" class="headerlink" title="修改路径"></a>修改路径</h4><p>设置n = 4</p>
<p>在kaldi/egs 下跑 <code>vi thchs30/s5/run.sh</code> </p>
<p><code>thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr</code></p>
<p>然后修改/thchs30/s5/cmd.sh为本地跑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export train_cms = run.pl</div><div class="line">export decode_cmd = run.pl</div><div class="line">export mkgraph_cmd = run.pl</div><div class="line">export cuda_cmd = run.pl</div><div class="line">​`</div></pre></td></tr></table></figure>
<p>运行：</p>
<p>cd到s5目录下去跑</p>
<p><code>sudo ./run.sh</code></p>
<p>静候佳音</p>
<h2 id="识别自己的wav"><a href="#识别自己的wav" class="headerlink" title="识别自己的wav"></a>识别自己的wav</h2><p>之后我们来到<code>tools/</code>下，去安装<code>./install_portaudio.sh</code>。</p>
<p>等安装完毕后我们到<code>src/</code>下，去 <code>make ext</code>去编译扩展程序。</p>
<h2 id="找例子"><a href="#找例子" class="headerlink" title="找例子"></a>找例子</h2><p>万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。</p>
<p>之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把<code>s5/exp/tri1</code>下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到<code>online-data/models/tri1</code>下。</p>
<p>然后把<code>s5/exp/tri/graph_word</code>里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到<code>online-data/models/tri1</code>下。</p>
<h2 id="运行例子"><a href="#运行例子" class="headerlink" title="运行例子"></a>运行例子</h2><p>我们在online_demo下<code>vi run.sh</code>。</p>
<p>之后我们把以下注释掉:</p>
<p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</div><div class="line">    echo &quot;Downloading test models and data ...&quot;</div><div class="line">    wget -T 10 -t 3 $data_url;</div><div class="line">    if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</div><div class="line">        echo &quot;Download of $data_file has failed!&quot;</div><div class="line">        exit 1</div><div class="line">    fi</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>然后在找到下面这句将其路径改成tri1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ac_model_type=tri1</div></pre></td></tr></table></figure>
<p>然后把下面的也改了注意看<code>online-wav-gmm-decode-faster</code>就行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">online-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\</div><div class="line">--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \</div><div class="line">scp:$decode_dir/input.scp $ac_model/final.mdl</div></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>然后我们直接在online_demo下<code>./run.sh</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Kaldi启用&quot;&gt;&lt;a href=&quot;#Kaldi启用&quot; class=&quot;headerlink&quot; title=&quot;Kaldi启用&quot;&gt;&lt;/a&gt;Kaldi启用&lt;/h1&gt;&lt;h2 id=&quot;INSTALL&quot;&gt;&lt;a href=&quot;#INSTALL&quot; class=&quot;headerlink&quot; title=&quot;INSTALL&quot;&gt;&lt;/a&gt;INSTALL&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在 tools/ 下跑 extras/check_dependencies.sh&lt;ol&gt;
&lt;li&gt;然后跑make&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条&lt;ol&gt;
&lt;li&gt;make depend&lt;/li&gt;
&lt;li&gt;make
    
    </summary>
    
      <category term="机器学习" scheme="http://xuzihao.fun/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://xuzihao.fun/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>React-Native踩得坑持续更新</title>
    <link href="http://xuzihao.fun/React-Native%E8%B8%A9%E5%9D%91.html"/>
    <id>http://xuzihao.fun/React-Native踩坑.html</id>
    <published>2018-01-30T13:46:59.212Z</published>
    <updated>2018-04-02T15:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用nativebase遇到的fontFamily的问题"><a href="#用nativebase遇到的fontFamily的问题" class="headerlink" title="用nativebase遇到的fontFamily的问题"></a>用nativebase遇到的fontFamily的问题</h2><p><img src="http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png" alt="选区_022"></p>
<a id="more"></a>
<p><a href="https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13" target="_blank" rel="external">https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13</a></p>
<h3 id="在RN中CSS、display不能为none"><a href="#在RN中CSS、display不能为none" class="headerlink" title="在RN中CSS、display不能为none"></a>在RN中CSS、display不能为none</h3><p><img src="http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png" alt="选区_027"></p>
<p>​    </p>
<p>​    {display: ‘none’} cause this bug</p>
<h2 id="Unrecognized-Font-Family-on-React-Native"><a href="#Unrecognized-Font-Family-on-React-Native" class="headerlink" title="Unrecognized Font Family on React Native"></a>Unrecognized Font Family on React Native</h2><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/Unrecognized%20Font%20FamilyonReactNative.png" alt="Unrecognized Font Family on React Native"></p>
<ul>
<li>react-native link</li>
<li><code>react-native run-ios</code> or <code>react-native run-android</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用nativebase遇到的fontFamily的问题&quot;&gt;&lt;a href=&quot;#用nativebase遇到的fontFamily的问题&quot; class=&quot;headerlink&quot; title=&quot;用nativebase遇到的fontFamily的问题&quot;&gt;&lt;/a&gt;用nativebase遇到的fontFamily的问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png&quot; alt=&quot;选区_022&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://xuzihao.fun/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://xuzihao.fun/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>初入Node</title>
    <link href="http://xuzihao.fun/%E5%88%9D%E5%85%A5Node.html"/>
    <id>http://xuzihao.fun/初入Node.html</id>
    <published>2018-01-25T12:05:00.000Z</published>
    <updated>2018-01-25T12:52:12.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初入Node"><a href="#初入Node" class="headerlink" title="初入Node"></a>初入Node</h1><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>Node的异步回调惯例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'/index.html'</span>, (err, data) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</div><div class="line">  getSomething(data.toString(), res);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初入Node&quot;&gt;&lt;a href=&quot;#初入Node&quot; class=&quot;headerlink&quot; title=&quot;初入Node&quot;&gt;&lt;/a&gt;初入Node&lt;/h1&gt;&lt;h2 id=&quot;回调地狱&quot;&gt;&lt;a href=&quot;#回调地狱&quot; class=&quot;headerlink&quot; title=&quot;回调地狱&quot;&gt;&lt;/a&gt;回调地狱&lt;/h2&gt;&lt;p&gt;Node的异步回调惯例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;/index.html&#39;&lt;/span&gt;, (err, data) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(err) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  getSomething(data.toString(), res);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://xuzihao.fun/categories/Node-js/"/>
    
    
      <category term="node.js" scheme="http://xuzihao.fun/tags/node-js/"/>
    
  </entry>
  
</feed>
