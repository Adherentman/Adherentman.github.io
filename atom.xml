<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>壮壮-Technology</title>
  
  <subtitle>宠辱不惊，闲看庭前花落花开</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuzihao.fun/"/>
  <updated>2018-08-26T12:57:59.264Z</updated>
  <id>http://xuzihao.fun/</id>
  
  <author>
    <name>XuZiHao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://xuzihao.fun/PostgreSQL%E5%9F%BA%E7%A1%80.html"/>
    <id>http://xuzihao.fun/PostgreSQL基础.html</id>
    <published>2018-08-26T05:49:36.501Z</published>
    <updated>2018-08-26T12:57:59.264Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: PostgreSQL基础<br>date: 2018-08-26 20：05<br>comments: true<br>layout: post<br>tags: [数据库, PostgreSQL]<br>categories: [数据库, PostgreSQL]</p><hr><h1 id="PostgreSQL基础"><a href="#PostgreSQL基础" class="headerlink" title="PostgreSQL基础"></a>PostgreSQL基础</h1><p>创建新表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> xxx (</span><br><span class="line">xxx<span class="built_in">int</span>,# 普通的整数类型</span><br><span class="line">xxx<span class="built_in">varchar</span>(<span class="number">80</span>), # 一个可以存储最长 <span class="number">80</span> 个字符的任意字符串的数据类型</span><br><span class="line">xxx<span class="built_in">real</span>,# 一种用于存储单精度浮点数的类型</span><br><span class="line">xxx<span class="built_in">date</span># 时间</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>删表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tablename;</span><br></pre></td></tr></table></figure></p><p>在表中增加行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename (xx, xx, xx)</span><br><span class="line"><span class="keyword">VALUES</span>(xx, xx, xx)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>查询一个表:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># * 代表所有列的缩写</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tablename</span><br><span class="line"># 或者单个查</span><br><span class="line"><span class="keyword">SELECT</span> xxx, xxx, xxx <span class="keyword">FROM</span> tablename</span><br><span class="line"># 带函数的</span><br><span class="line"><span class="keyword">SELECT</span> xx, (mobile+<span class="built_in">number</span>)/<span class="number">2</span> <span class="keyword">AS</span> temp_avg, <span class="built_in">date</span> <span class="keyword">FROM</span> xx;</span><br><span class="line"># 指定需要哪些行</span><br><span class="line"># WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">WHERE</span> city = <span class="string">'San Francisco'</span> <span class="keyword">AND</span> prcp &gt; <span class="number">0.0</span>;</span><br><span class="line"># 查询结果排好序</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br><span class="line"># 消除重复行</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city</span><br><span class="line">    <span class="keyword">FROM</span> weather;</span><br><span class="line"># 组合使用DISTINCT和ORDER BY来保证获取一致的结果</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city</span><br><span class="line">    <span class="keyword">FROM</span> weather</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: PostgreSQL基础&lt;br&gt;date: 2018-08-26 20：05&lt;br&gt;comments: true&lt;br&gt;layout: post&lt;br&gt;tags: [数据库, PostgreSQL]&lt;br&gt;categories: [数据库, PostgreSQL]&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;PostgreSQL基础&quot;&gt;&lt;a href=&quot;#PostgreSQL基础&quot; class=&quot;headerlink&quot; title=&quot;PostgreSQL基础&quot;&gt;&lt;/a&gt;PostgreSQL基础&lt;/h1&gt;&lt;p&gt;创建新表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; xxx (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;,	# 普通的整数类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;), # 一个可以存储最长 &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; 个字符的任意字符串的数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;real&lt;/span&gt;,		# 一种用于存储单精度浮点数的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xxx		&lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;		# 时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;删表：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; tablename;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在表中增加行：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;INTO&lt;/span&gt; tablename (xx, xx, xx)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;VALUES&lt;/span&gt;(xx, xx, xx)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS之em/rem</title>
    <link href="http://xuzihao.fun/CSS%E4%B9%8Bem-rem.html"/>
    <id>http://xuzihao.fun/CSS之em-rem.html</id>
    <published>2018-08-13T10:51:00.000Z</published>
    <updated>2018-08-13T10:53:40.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS之em-rem"><a href="#CSS之em-rem" class="headerlink" title="CSS之em/rem"></a>CSS之em/rem</h1><p>#blog<br>先来个一句话概括：</p><ul><li><code>em</code>相对于父元素</li><li><code>rem</code>相对于根元素<br>所以这些都是相对单位。</li></ul><p>默认<code>font-size</code>为16px所以我们可以知道<code>1px和1em</code>之间的关系</p><blockquote><p>1em = 16px<br>1px = 1 ÷ 16 = 0.0625em  </p></blockquote><p>那么我们知道具体的px值后我们就能直接换算，比如：</p><blockquote><p>我想要800px转换成<code>em</code><br>800 * 0.0625em = 50em  </p></blockquote><p>那么如果父元素不为16px，根据上面我们可以得出一个公式：</p><blockquote><p>1 ÷ 父元素的font-size × 你想要的像素值 = em值  </p></blockquote><h2 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h2><p>那么REM其实和EM没啥区别。<br>本质在REM以<code>&lt;html&gt;</code>标签中的<code>font-size</code>为依据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS之em-rem&quot;&gt;&lt;a href=&quot;#CSS之em-rem&quot; class=&quot;headerlink&quot; title=&quot;CSS之em/rem&quot;&gt;&lt;/a&gt;CSS之em/rem&lt;/h1&gt;&lt;p&gt;#blog&lt;br&gt;先来个一句话概括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;
      
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>K8s基本概念</title>
    <link href="http://xuzihao.fun/K8s%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html"/>
    <id>http://xuzihao.fun/K8s基本概念.html</id>
    <published>2018-07-15T14:24:00.000Z</published>
    <updated>2018-07-15T14:44:54.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8s基本概念"><a href="#K8s基本概念" class="headerlink" title="K8s基本概念"></a>K8s基本概念</h1><p>基本概念<br>以下都可以看作一种资源对象</p><ul><li>Node</li><li>Pod</li><li>Replication Controller</li><li>Service<br>以上通过k8s提高的 <code>kubectl</code> 或者 <code>Api</code> 调用进行操作，并保存在 <code>etcd</code> 中。</li></ul><p>k8s集群由两类节点组成：<strong>Master</strong> 和 <strong>Node</strong>。<br>在<code>Master</code>上运行<code>etcd</code>、<code>API Server</code>、<code>Controller Manager</code>和<code>Scheduler</code>四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。</p><p>在每个<code>Node</code> 上运行<code>kubelet</code>、<code>Proxy</code>和<code>Docker Daemon</code>三个组件。<br>它们负责对本节点上的<code>Pod</code>的生命周期进行管理，以及实现服务代理的功能。<br>另外在所有节点上都可以运行<code>Kubectl</code>命令行工具，它提供了k8s的集群管理工具集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;K8s基本概念&quot;&gt;&lt;a href=&quot;#K8s基本概念&quot; class=&quot;headerlink&quot; title=&quot;K8s基本概念&quot;&gt;&lt;/a&gt;K8s基本概念&lt;/h1&gt;&lt;p&gt;基本概念&lt;br&gt;以下都可以看作一种资源对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
      <category term="docker" scheme="http://xuzihao.fun/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xuzihao.fun/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Draft——Entities</title>
    <link href="http://xuzihao.fun/Draft%E2%80%94%E2%80%94Entities.html"/>
    <id>http://xuzihao.fun/Draft——Entities.html</id>
    <published>2018-07-07T11:36:00.000Z</published>
    <updated>2018-07-07T11:36:38.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Draft——Entities"><a href="#Draft——Entities" class="headerlink" title="Draft——Entities"></a>Draft——Entities</h1><p>本文讨论实体系统，<code>Draft</code> 用于使用元数据注释文本范围。<code>Entities</code>引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来<code>Entities</code>。</p><p>在<code>Draft</code>存储库中，<a href="https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link" target="_blank" rel="noopener">链接编辑器</a>和<code>Entities</code>演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。</p><p><a href="https://draftjs.org/docs/api-reference-entity.html" target="_blank" rel="noopener">Entity API Reference</a>提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。</p><p>有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的<a href="https://draftjs.org/docs/v0-10-api-migration.html#content" target="_blank" rel="noopener">v0.10 API迁移指南</a>。<br><a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Entity</code>是表示<code>Draft</code>编辑器中一系列文本的元数据的对象。它有三个属性：</p><ul><li>type: 一个字符串，表示它是什么类型的实体，例如’LINK’，’MENTION’，’PHOTO’。</li><li>mutability: 不要与不变性的<code>immutable-js</code>混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。</li><li>data: 包含实体元数据的可选对象。例如，<code>LINK</code>实体可能包含一个包含该链接的<code>href</code>值的数据对象。</li></ul><p>所有<code>Entities</code>都存储在<code>ContentState</code>记录中。<code>ContentState</code>中的键引用<code>Entities</code>，用于装饰带注释的范围的React组件。</p><p>使用装饰器或自定义块组件，您可以根据<code>Entities</code>元数据向编辑器添加丰富的渲染。</p><h2 id="创建和回收-Entities"><a href="#创建和回收-Entities" class="headerlink" title="创建和回收 Entities"></a>创建和回收 Entities</h2><p>应使用<code>contentState.createEntity</code>创建<code>Entities</code>，它接受上面的三个属性作为参数。此方法返回更新的<code>ContentState</code>记录以包含新创建的实体，然后您可以调用<code>contentState.getLastCreatedEntityKey</code>来获取新创建的<code>Entities</code>记录的密钥。</p><p>此键是将<code>Entities</code>应用于内容时应使用的值。例如，<code>Modifier</code>模块包含<code>applyEntity</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contentState = editorState.getCurrentContent();</span><br><span class="line"><span class="keyword">const</span> contentStateWithEntity = contentState.createEntity(</span><br><span class="line">  <span class="string">'LINK'</span>,</span><br><span class="line">  <span class="string">'MUTABLE'</span>,</span><br><span class="line">  &#123;<span class="attr">url</span>: <span class="string">'http://www.zombo.com'</span>&#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> entityKey = contentStateWithEntity.getLastCreatedEntityKey();</span><br><span class="line"><span class="keyword">const</span> contentStateWithLink = Modifier.applyEntity(</span><br><span class="line">  contentStateWithEntity,</span><br><span class="line">  selectionState,</span><br><span class="line">  entityKey</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>对于给定的文本范围，您可以通过在<code>ContentBlock</code>对象上使用<code>getEntityAt()</code>方法提取其关联的实体键，并传入目标偏移值。</p><h2 id="Mutability"><a href="#Mutability" class="headerlink" title="Mutability"></a>Mutability</h2><p><code>Entities</code>可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。</p><p><code>SelectionState</code>对象的最常见用途是通过<code>EditorState.getSelection()</code>，它提供当前在编辑器中呈现的<code>SelectionState</code>。</p><p>由于<code>Draft</code>使用<code>ContentBlock</code>对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的<code>ContentBlock</code>的键，并且偏移值是块内的字符偏移。</p><h2 id="Start-End-vs-Anchor-Focus"><a href="#Start-End-vs-Anchor-Focus" class="headerlink" title="Start/End vs. Anchor/Focus"></a>Start/End vs. Anchor/Focus</h2><p>当实际在浏览器中呈现选择状态时，<code>anchor</code>和<code>focus</code>的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑<code>start</code>和<code>end</code>更合适。</p><p>因此，<code>SelectionState</code>会公开<code>anchor</code>/<code>focus</code>值和<code>start</code>/<code>end</code>值。管理选择行为时，我们建议您使用<code>anchor</code>和<code>focus</code>值来维护选择方向。但是，在管理内容操作时，我们建议您使用<code>start</code>和<code>end</code>值。</p><p>例如，当基于<code>SelectionState</code>从块中提取文本切片时，选择是否向后是无关紧要的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ar selectionState = editorState.getSelection();</span><br><span class="line"><span class="keyword">var</span> anchorKey = selectionState.getAnchorKey();</span><br><span class="line"><span class="keyword">var</span> currentContent = editorState.getCurrentContent();</span><br><span class="line"><span class="keyword">var</span> currentContentBlock = currentContent.getBlockForKey(anchorKey);</span><br><span class="line"><span class="keyword">var</span> start = selectionState.getStartOffset();</span><br><span class="line"><span class="keyword">var</span> end = selectionState.getEndOffset();</span><br><span class="line"><span class="keyword">var</span> selectedText = currentContentBlock.getText().slice(start, end);</span><br></pre></td></tr></table></figure><p>请注意，<code>SelectionState</code>本身仅跟踪锚点和焦点值。导出起始值和结束值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Draft——Entities&quot;&gt;&lt;a href=&quot;#Draft——Entities&quot; class=&quot;headerlink&quot; title=&quot;Draft——Entities&quot;&gt;&lt;/a&gt;Draft——Entities&lt;/h1&gt;&lt;p&gt;本文讨论实体系统，&lt;code&gt;Draft&lt;/code&gt; 用于使用元数据注释文本范围。&lt;code&gt;Entities&lt;/code&gt;引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来&lt;code&gt;Entities&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Draft&lt;/code&gt;存储库中，&lt;a href=&quot;https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接编辑器&lt;/a&gt;和&lt;code&gt;Entities&lt;/code&gt;演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://draftjs.org/docs/api-reference-entity.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Entity API Reference&lt;/a&gt;提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。&lt;/p&gt;
&lt;p&gt;有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的&lt;a href=&quot;https://draftjs.org/docs/v0-10-api-migration.html#content&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v0.10 API迁移指南&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xuzihao.fun/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xuzihao.fun/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Draft —— Rich Styling</title>
    <link href="http://xuzihao.fun/Draft-RichUtils.html"/>
    <id>http://xuzihao.fun/Draft-RichUtils.html</id>
    <published>2018-07-06T13:02:00.000Z</published>
    <updated>2018-07-06T13:02:52.464Z</updated>
    
    <content type="html"><![CDATA[<p>现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到<code>Dragt</code>编辑器中。</p><p>A <a href="https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich" target="_blank" rel="noopener">richTextExample</a> is also available to follow along.</p><h2 id="EditorState-Yours-to-Command"><a href="#EditorState-Yours-to-Command" class="headerlink" title="EditorState: Yours to Command"></a>EditorState: Yours to Command</h2><p>上一篇文章介绍了<code>EditorState</code>对象作为编辑器完整状态的快照,由<code>Editor</code>核心通过<code>onChange props</code>给的.</p><p>但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该<code>EditorState</code>对象。</p><p>例如，对于内联和块样式行为，<code>RichUtils</code> 模块提供了许多有用的函数来帮助操作状态。</p><p>同样，<a href="https://draftjs.org/docs/api-reference-modifier.html" target="_blank" rel="noopener">Modifier</a> 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的<code>EditorState</code>对象。</p><p>对于此示例，我们将坚持使用<code>RichUtils</code>来演示如何在最顶层组件中应用基本的丰富样式。</p><a id="more"></a><h2 id="RichUtils-and-Key-Commands"><a href="#RichUtils-and-Key-Commands" class="headerlink" title="RichUtils and Key Commands"></a>RichUtils and Key Commands</h2><p><code>RichUtils</code> 包含有关Web编辑器可用的核心键命令的信息，例如<code>Cmd + B（粗体）</code>，<code>Cmd + I（斜体）</code>等。</p><p>我们可以通过<code>handleKeyCommand</code> <code>prop</code>观察和处理关键命令，并将它们挂钩到<code>RichUtils</code>中以应用或删除所需的样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Editor, EditorState, RichUtils&#125; <span class="keyword">from</span> <span class="string">'draft-js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;editorState&#125;);</span><br><span class="line">    <span class="keyword">this</span>.handleKeyCommand = <span class="keyword">this</span>.handleKeyCommand.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleKeyCommand(command, editorState) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class="line">    <span class="keyword">if</span> (newState) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onChange(newState);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'handled'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'not-handled'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Editor</span><br><span class="line">        editorState=&#123;<span class="keyword">this</span>.state.editorState&#125;</span><br><span class="line">        handleKeyCommand=&#123;<span class="keyword">this</span>.handleKeyCommand&#125;</span><br><span class="line">        onChange=&#123;<span class="keyword">this</span>.onChange&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>handleKeyCommand  </p><p>提供给<code>handleKeyCommand</code>的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。<code>editorState</code>参数表示最新的编辑器状态，因为在处理密钥时它可能会被<code>Draft</code>内部更改。在<code>handleKeyCommand</code>中使用编辑器状态的这个实例。有关详细信息，请参阅<a href="https://draftjs.org/docs/advanced-topics-key-bindings.html" target="_blank" rel="noopener"> Advanced Topics - Key Binding</a>，以及有关函数返回处理或未处理的详细信息。  </p></blockquote><h2 id="Styling-Controls-in-UI"><a href="#Styling-Controls-in-UI" class="headerlink" title="Styling Controls in UI"></a>Styling Controls in UI</h2><p>在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。</p><p>这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// …</span></span><br><span class="line"></span><br><span class="line">  _onBoldClick() &#123;</span><br><span class="line">    <span class="keyword">this</span>.onChange(RichUtils.toggleInlineStyle(<span class="keyword">this</span>.state.editorState, <span class="string">'BOLD'</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>._onBoldClick.bind(<span class="keyword">this</span>)&#125;&gt;Bold&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Editor</span></span><br><span class="line"><span class="regexp">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class="line"><span class="regexp">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class="line"><span class="regexp">          onChange=&#123;this.onChange&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到&lt;code&gt;Dragt&lt;/code&gt;编辑器中。&lt;/p&gt;
&lt;p&gt;A &lt;a href=&quot;https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;richTextExample&lt;/a&gt; is also available to follow along.&lt;/p&gt;
&lt;h2 id=&quot;EditorState-Yours-to-Command&quot;&gt;&lt;a href=&quot;#EditorState-Yours-to-Command&quot; class=&quot;headerlink&quot; title=&quot;EditorState: Yours to Command&quot;&gt;&lt;/a&gt;EditorState: Yours to Command&lt;/h2&gt;&lt;p&gt;上一篇文章介绍了&lt;code&gt;EditorState&lt;/code&gt;对象作为编辑器完整状态的快照,由&lt;code&gt;Editor&lt;/code&gt;核心通过&lt;code&gt;onChange props&lt;/code&gt;给的.&lt;/p&gt;
&lt;p&gt;但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该&lt;code&gt;EditorState&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;例如，对于内联和块样式行为，&lt;code&gt;RichUtils&lt;/code&gt; 模块提供了许多有用的函数来帮助操作状态。&lt;/p&gt;
&lt;p&gt;同样，&lt;a href=&quot;https://draftjs.org/docs/api-reference-modifier.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Modifier&lt;/a&gt; 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的&lt;code&gt;EditorState&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;对于此示例，我们将坚持使用&lt;code&gt;RichUtils&lt;/code&gt;来演示如何在最顶层组件中应用基本的丰富样式。&lt;/p&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xuzihao.fun/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xuzihao.fun/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Draft.js —— API Basics</title>
    <link href="http://xuzihao.fun/Draft.js%20%E2%80%94%E2%80%94API%20Basics.html"/>
    <id>http://xuzihao.fun/Draft.js ——API Basics.html</id>
    <published>2018-07-05T12:49:00.000Z</published>
    <updated>2018-07-05T12:50:47.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Draft-js-——API-Basics"><a href="#Draft-js-——API-Basics" class="headerlink" title="Draft.js ——API Basics"></a>Draft.js ——API Basics</h1><h2 id="API-Basics"><a href="#API-Basics" class="headerlink" title="API Basics"></a>API Basics</h2><p>React组件<code>Editor</code>是作为HTML5的<code>ContentEditable</code>元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。</p><p>简要回顾，受控输入涉及两个关键部分：</p><ol><li>一个<code>state</code> 代表输入<code>value</code>的值。</li><li><code>onChange</code>函数用于接受输入的值并更新。</li></ol><p>这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新<code>DOM</code>以提供有关用户编写的文本的信息。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">value</span>: <span class="string">''</span>&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">evt</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: evt.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;input value=&#123;this.state.value&#125; onChange=&#123;this.onChange&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>顶级组件可以通过此值state属性保持对输入状态的控制。<br><a id="more"></a></p><h2 id="受控富文本"><a href="#受控富文本" class="headerlink" title="受控富文本"></a>受控富文本</h2><p>在React富文本方案中，有两个明显的问题：</p><ol><li>一串字符串纯文本不足以表示富编辑器的复杂状态</li><li>HTML5的 <code>ContentEditable</code>元素没有可用的<code>onChange</code>事件。</li></ol><p><code>State</code> 因此就被作为一个单个不可变的<code>EditorState</code>对象，并且和<code>onChange</code>一起在<code>Editor</code>核心中实现，以将此状态值提供给顶部。</p><p><code>EditorState</code>对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的<code>EditorState</code>对象。<br>注意：由于横过不可变对象的数据持久性，这仍然有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Editor, EditorState&#125; <span class="keyword">from</span> <span class="string">'draft-js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class="line">    <span class="keyword">this</span>.onChange = <span class="function">(<span class="params">editorState</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123;editorState&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;Editor editorState=&#123;this.state.editorState&#125; onChange=&#123;this.onChange&#125; /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于编辑器DOM中发生的任何编辑或选择更改，<code>onChange</code>处理程序将根据这些更改使用最新的<code>EditorState</code>对象执行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Draft-js-——API-Basics&quot;&gt;&lt;a href=&quot;#Draft-js-——API-Basics&quot; class=&quot;headerlink&quot; title=&quot;Draft.js ——API Basics&quot;&gt;&lt;/a&gt;Draft.js ——API Basics&lt;/h1&gt;&lt;h2 id=&quot;API-Basics&quot;&gt;&lt;a href=&quot;#API-Basics&quot; class=&quot;headerlink&quot; title=&quot;API Basics&quot;&gt;&lt;/a&gt;API Basics&lt;/h2&gt;&lt;p&gt;React组件&lt;code&gt;Editor&lt;/code&gt;是作为HTML5的&lt;code&gt;ContentEditable&lt;/code&gt;元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。&lt;/p&gt;
&lt;p&gt;简要回顾，受控输入涉及两个关键部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个&lt;code&gt;state&lt;/code&gt; 代表输入&lt;code&gt;value&lt;/code&gt;的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onChange&lt;/code&gt;函数用于接受输入的值并更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新&lt;code&gt;DOM&lt;/code&gt;以提供有关用户编写的文本的信息。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyInput&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(props) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.onChange = &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;evt&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;: evt.target.value&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;input value=&amp;#123;this.state.value&amp;#125; onChange=&amp;#123;this.onChange&amp;#125; /&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;顶级组件可以通过此值state属性保持对输入状态的控制。&lt;br&gt;
    
    </summary>
    
      <category term="Draft" scheme="http://xuzihao.fun/categories/Draft/"/>
    
    
      <category term="React" scheme="http://xuzihao.fun/tags/React/"/>
    
      <category term="Draft.js" scheme="http://xuzihao.fun/tags/Draft-js/"/>
    
  </entry>
  
  <entry>
    <title>Webpack-dev-server配合react-router4</title>
    <link href="http://xuzihao.fun/Webpack-dev-server%E9%85%8D%E5%90%88react-router4.html"/>
    <id>http://xuzihao.fun/Webpack-dev-server配合react-router4.html</id>
    <published>2018-06-30T13:28:00.000Z</published>
    <updated>2018-06-30T13:28:43.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webpack-dev-server配合react-router4"><a href="#Webpack-dev-server配合react-router4" class="headerlink" title="Webpack-dev-server配合react-router4"></a>Webpack-dev-server配合react-router4</h1><p>在React-router4下，用 <code>BrowserRouter</code> 路由到一个组件。比如说</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg" alt=""><br>我刷新之后就会显示 <code>Cannot GET /dashboard</code>！？<br>原来devServe需要以下设置：<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg" alt=""><br><a id="more"></a><br>对于单页面程序，浏览器的<code>brower histroy</code>可以设置成<code>html5 history api</code>或者<code>hash</code>，而设置为<code>html5 api</code>的.<br>如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.<br>所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。<br>并且React-router的<code>BrowserRouter</code>就是基于<code>browerhistroy</code>。</p><h2 id="还没完"><a href="#还没完" class="headerlink" title="还没完?"></a>还没完?</h2><p>如果你发现你这样设置了还是报<code>Cannot GET /dashboard</code> 那么我们应该这样设置<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg" alt=""><br>没设置是这样<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg" alt=""></p><p>如此操作之后我们就会发现</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg" alt=""><br>妥了，随意刷新吧</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Webpack-dev-server配合react-router4&quot;&gt;&lt;a href=&quot;#Webpack-dev-server配合react-router4&quot; class=&quot;headerlink&quot; title=&quot;Webpack-dev-server配合react-router4&quot;&gt;&lt;/a&gt;Webpack-dev-server配合react-router4&lt;/h1&gt;&lt;p&gt;在React-router4下，用 &lt;code&gt;BrowserRouter&lt;/code&gt; 路由到一个组件。比如说&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我刷新之后就会显示 &lt;code&gt;Cannot GET /dashboard&lt;/code&gt;！？&lt;br&gt;原来devServe需要以下设置：&lt;br&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Webpack" scheme="http://xuzihao.fun/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://xuzihao.fun/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序客服自动回复消息功能采坑（完）</title>
    <link href="http://xuzihao.fun/%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%9C%8D%E6%B6%88%E6%81%AF%E5%8A%9F%E8%83%BD%E5%85%A8%E8%A7%A3.html"/>
    <id>http://xuzihao.fun/微信客服消息功能全解.html</id>
    <published>2018-06-29T15:19:00.000Z</published>
    <updated>2018-07-04T05:06:17.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序客服自动回复消息功能采坑（完）"><a href="#微信小程序客服自动回复消息功能采坑（完）" class="headerlink" title="微信小程序客服自动回复消息功能采坑（完）"></a>微信小程序客服自动回复消息功能采坑（完）</h1><p>小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 <code>&lt;button open-type=&quot;contact&quot; /&gt;</code> 可以显示进入客服会话按钮。<br>然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。<br>但是有个问题，我们如何做到自动回复呢？<br>那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html" target="_blank" rel="noopener">接入指引 · 小程序</a>附上官网接入指南，这可是相当的简洁。</p><h2 id="First"><a href="#First" class="headerlink" title="First"></a>First</h2><p>填写服务器配置的图：<br><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626" alt=""><br><a id="more"></a><br>在这里填写的同时我们需要在后台写<code>get</code>请求验证。<br>官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。<br>这里我是用<code>express</code>写得提供一个例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = [params.token, params.timestamp, params.nonce].sort().join(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>);</span><br><span class="line">    sha1.update(key);</span><br><span class="line">    <span class="keyword">return</span> sha1.digest(<span class="string">'hex'</span>) === params.signature;</span><br><span class="line">  &#125;</span><br><span class="line">app.get(<span class="string">'/wxlalalala'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="string">'xxxxx'</span>; <span class="comment">// 填写服务器配置上所填的token</span></span><br><span class="line">    <span class="keyword">let</span> isCheck = checkSignature(&#123;</span><br><span class="line">      signature: req.query.signature,</span><br><span class="line">      timestamp: req.query.timestamp,</span><br><span class="line">      nonce: req.query.nonce,</span><br><span class="line">      token: token,</span><br><span class="line">    &#125;);</span><br><span class="line">    req.body = req.query.echostr;</span><br><span class="line">    res.send(req.body);</span><br><span class="line">    <span class="keyword">return</span> req.body;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。</p><h2 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h2><p>当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。<br>当然第一我们需要先去拿<code>access_token</code>。没有这个我们啥事情都做不了。<br>给上一个官方网站：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token" target="_blank" rel="noopener">接口调用凭证 · 小程序</a>，但是毫无代码示例，算了还在自己撸吧。<br>以下自己的code:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> access_token = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getAccessToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (access_token !== <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> access_token;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> URL =</span><br><span class="line">      <span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&amp;appid=xxxx&amp;secret=sssss'</span>; <span class="comment">// grant_type一定要填client_credential.</span></span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      url: URL,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      request(options, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res) &#123;</span><br><span class="line">          access_token = <span class="built_in">JSON</span>.parse(body).access_token;</span><br><span class="line">          <span class="keyword">let</span> expires_in = <span class="built_in">parseInt</span>(<span class="built_in">JSON</span>.parse(body).expires_in) - <span class="number">10</span>;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            access_token = <span class="string">''</span>;</span><br><span class="line">            <span class="comment">//getAccessToken();</span></span><br><span class="line">          &#125;, expires_in * <span class="number">1000</span>);</span><br><span class="line">          resolve(access_token);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>因为token有7200s的过期时间，所以就存在内存里了。<br>Ok这个我们就有<code>access_token</code>能去做客服自动回复啦！</p><h2 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h2><p>再来一个官方客服发送消息的文档：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html" target="_blank" rel="noopener">发送客服消息 · 小程序</a>，发现又是啥都没用。。。<br>还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postJson = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    url: param.url,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: param.body,</span><br><span class="line">    json: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  request(options, <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">error, response, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">      param.success(response.errcode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      param.error(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">sendTextMessage</span>(<span class="params">content, data, access_token</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> postJson(&#123;</span><br><span class="line">    url:</span><br><span class="line">      <span class="string">'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token='</span> +</span><br><span class="line">      access_token,</span><br><span class="line">    body: &#123;</span><br><span class="line">      touser: data.FromUserName,</span><br><span class="line">      msgtype: <span class="string">'text'</span>,</span><br><span class="line">      text: &#123;</span><br><span class="line">        content: content,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res, <span class="string">'send successed!1'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h2><p>回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎<br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">客服消息 · 小程序</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/wxlallalal'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> token = <span class="string">'xxxxx'</span>;<span class="comment">// 填写服务器配置那的token</span></span><br><span class="line">    <span class="keyword">let</span> reqBody = req.body;</span><br><span class="line">    <span class="keyword">let</span> isCheck = checkSignature(&#123;</span><br><span class="line">      signature: req.query.signature,</span><br><span class="line">      timestamp: req.query.timestamp,</span><br><span class="line">      nonce: req.query.nonce,</span><br><span class="line">      token: token,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (isCheck) &#123;</span><br><span class="line">      <span class="keyword">let</span> welcome= <span class="string">'欢迎'</span>;</span><br><span class="line">         <span class="keyword">switch</span> (reqBody.MsgType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'text'</span>: &#123;</span><br><span class="line">          <span class="comment">//文本消息</span></span><br><span class="line">          sendTextMessage(<span class="string">'您好，【'</span>+reqBody.Content+<span class="string">'】是未知命令，已转发给人工处理。\n'</span>+welcomeTips, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'image'</span>: &#123;</span><br><span class="line">          <span class="comment">//用户在客服会话中发送图片消息</span></span><br><span class="line">          sendImageMessage(<span class="string">'xxxxxxx'</span>, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'event'</span>: &#123;</span><br><span class="line">            sendTextMessage(welcome, reqBody, getAccessToken());</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">'success'</span>);</span><br><span class="line">    next();</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>完成啦愉快的使用自动客服回复！！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微信小程序客服自动回复消息功能采坑（完）&quot;&gt;&lt;a href=&quot;#微信小程序客服自动回复消息功能采坑（完）&quot; class=&quot;headerlink&quot; title=&quot;微信小程序客服自动回复消息功能采坑（完）&quot;&gt;&lt;/a&gt;微信小程序客服自动回复消息功能采坑（完）&lt;/h1&gt;&lt;p&gt;小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 &lt;code&gt;&amp;lt;button open-type=&amp;quot;contact&amp;quot; /&amp;gt;&lt;/code&gt; 可以显示进入客服会话按钮。&lt;br&gt;然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。&lt;br&gt;但是有个问题，我们如何做到自动回复呢？&lt;br&gt;那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。&lt;br&gt;&lt;a href=&quot;https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;接入指引 · 小程序&lt;/a&gt;附上官网接入指南，这可是相当的简洁。&lt;/p&gt;
&lt;h2 id=&quot;First&quot;&gt;&lt;a href=&quot;#First&quot; class=&quot;headerlink&quot; title=&quot;First&quot;&gt;&lt;/a&gt;First&lt;/h2&gt;&lt;p&gt;填写服务器配置的图：&lt;br&gt;&lt;img src=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="小程序" scheme="http://xuzihao.fun/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://xuzihao.fun/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Sass小笔记</title>
    <link href="http://xuzihao.fun/Sass%E5%B0%8F%E7%AC%94%E8%AE%B0.html"/>
    <id>http://xuzihao.fun/Sass小笔记.html</id>
    <published>2018-06-21T13:26:00.000Z</published>
    <updated>2018-07-12T12:55:07.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父选择器的标识符-amp"><a href="#父选择器的标识符-amp" class="headerlink" title="父选择器的标识符&amp;"></a>父选择器的标识符&amp;</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">color</span>: red &#125;</span><br><span class="line">&#125;</span><br><span class="line">-&gt; </span><br><span class="line">article a &#123; color: blue &#125;</span><br><span class="line">article a:hover &#123; color: red &#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">  style: solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="mixin"><a href="#mixin" class="headerlink" title="@mixin"></a>@mixin</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded-corners &#123;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">notice &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  @<span class="keyword">include</span> rounded-corners;</span><br><span class="line">&#125;</span><br><span class="line">-&gt;</span><br><span class="line"><span class="selector-class">.notice</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00aa00</span>;</span><br><span class="line">  -moz-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  -webkit-<span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin传参"><a href="#mixin传参" class="headerlink" title="@mixin传参"></a>@mixin传参</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> link-colors(<span class="variable">$normal</span>, <span class="variable">$hover</span>, <span class="variable">$visited</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$normal</span>;</span><br><span class="line">  &amp;:hover &#123; <span class="attribute">color</span>: <span class="variable">$hover</span>; &#125;</span><br><span class="line">  &amp;:visited &#123; <span class="attribute">color</span>: <span class="variable">$visited</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> link-colors(blue, red, green);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sass最终生成的是：</span></span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">a</span>:hover &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">a</span>:visited &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过选择器继承继承样式</span></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;父选择器的标识符-amp&quot;&gt;&lt;a href=&quot;#父选择器的标识符-amp&quot; class=&quot;headerlink&quot; title=&quot;父选择器的标识符&amp;amp;&quot;&gt;&lt;/a&gt;父选择器的标识符&amp;amp;&lt;/h2&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: blue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;amp;:hover &amp;#123; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;article a &amp;#123; color: blue &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;article a:hover &amp;#123; color: red &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;嵌套属性&quot;&gt;&lt;a href=&quot;#嵌套属性&quot; class=&quot;headerlink&quot; title=&quot;嵌套属性&quot;&gt;&lt;/a&gt;嵌套属性&lt;/h2&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  style: solid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;nav&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-style&lt;/span&gt;: solid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#ccc&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://xuzihao.fun/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://xuzihao.fun/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>玩Deno遇到问题的解决方案</title>
    <link href="http://xuzihao.fun/%E7%8E%A9Deno%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://xuzihao.fun/玩Deno遇到问题的解决方案.html</id>
    <published>2018-06-02T07:30:00.000Z</published>
    <updated>2018-06-02T07:30:10.762Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。<br>但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！<br>再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。</p><p>附上项目地址:<br><a href="https://github.com/ry/deno" target="_blank" rel="noopener">GitHub - ry/deno: A secure TypeScript runtime on V8</a></p><a id="more"></a><h2 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h2><p>在开始之前请准备好v<em>p</em>n*。<br>大家需要去安装 <code>Go</code> 环境.并且去 <code>export</code> 各种Go相关的环境变量.</p><p>以下是方正大佬给我提供解决方案，很感谢。<br><a href="https://github.com/ry/deno/issues/92" target="_blank" rel="noopener">https://github.com/ry/deno/issues/92</a><br>Mac OS可以参考以下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )</span><br><span class="line">export GOPATH=$HOME/go # means `~/go` </span><br><span class="line">export PATH=$PATH:$HOME/go/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure></p><p>如果是Mac的话，我们还需要去安装<code>xcode-select</code><br> <a href="http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/" target="_blank" rel="noopener">http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/</a> </p><p>我们还需要安装Protobuf 。Ubuntu下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip</span><br><span class="line">unzip protoc-3.1.0-linux-x86_64.zip</span><br><span class="line">export PATH=$HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>Mac下简单粗暴：<br><code>brew install protobuf</code><br>再来装一个<code>README</code>中没提及的<br><code>brew install pkg-config</code></p><h2 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h2><p>Ok以上一切正常，没出啥幺蛾子。<br>我们继续，现在需要 <code>protoc-gen-go</code>  和  <code>go-bindata</code>:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class="line">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure></p><p>这步需要等一小伙，记得一定要v<em>p</em>n啊!</p><h2 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h2><p>现在我们来困难重重的 <code>v8worker2</code> 啦。我们需要get 然后 build 它。大概会花30min<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/ry/v8worker2</span><br><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">./build.py --use_ccache</span><br></pre></td></tr></table></figure></p><p>接下来大家可能遇到的情况：<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png" alt=""><br>这种情况说明我们 <code>clone</code> 下的v8是有损坏的，然后我们需要做以下操作</p><ol><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">rm -rf v8</span><br><span class="line">git clone https://github.com/v8/v8.git</span><br><span class="line">cd v8</span><br><span class="line">git checkout fe12316ec4b4a101923e395791ca55442e62f4cc</span><br></pre></td></tr></table></figure></li></ol><p>或者</p><ol start="2"><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools</span><br><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">rm -rf v8</span><br><span class="line">fetch v8</span><br><span class="line">cd v8</span><br><span class="line">git checkout fe12316</span><br></pre></td></tr></table></figure></li></ol><p>因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入<code>fetch</code>发现命令行出现<code>command not found: fetch</code>。<br>你可以尝试<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">depot_tools/./fetch v8</span><br></pre></td></tr></table></figure></p><p>感谢 <a href="https://github.com/ry/deno/issues/92" target="_blank" rel="noopener">go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub</a> 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz </p><p>如果你发现自己的<code>depot_tools</code>文件夹下啥都没有。你需要执行以下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure></p><p>之后再去<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class="line">./build.py</span><br></pre></td></tr></table></figure></p><p>你看见了以下，那么就恭喜啦！他在编译了<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png" alt=""></p><h2 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h2><p>最后一步<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/ry/deno/...</span><br><span class="line">cd $GOPATH/src/github.com/ry/deno</span><br><span class="line">make # 稍等片刻</span><br><span class="line">./deno testdata/001_hello.js # Output: Hello World</span><br></pre></td></tr></table></figure></p><p>又是熟悉的Hello World！<br>在<code>go get -u github.com/ry/deno/...</code>遇到以下问题不要急，直接<code>make deno</code>走你！<br><a href="https://github.com/ry/deno/issues/71" target="_blank" rel="noopener">deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> go get  -u github.com/ry/deno/...</span><br><span class="line"><span class="meta">#</span> github.com/ry/deno</span><br><span class="line">../deno/dispatch.go:10:26: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:30:10: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:62:14: undefined: BaseMsg</span><br><span class="line">../deno/dispatch.go:68:34: undefined: Msg</span><br><span class="line">../deno/dispatch.go:119:13: select case must be receive, send or assign recv</span><br><span class="line">../deno/fetch.go:13:11: undefined: Msg</span><br><span class="line">../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ</span><br><span class="line">../deno/fetch.go:29:14: undefined: Msg</span><br><span class="line">../deno/main.go:38:15: undefined: Asset</span><br><span class="line">../deno/main.go:110:19: undefined: Msg</span><br><span class="line">../deno/main.go:110:19: too many errors</span><br></pre></td></tr></table></figure></p><p>如果你在这<code>make deno</code>遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png" alt=""></p><p>之后再次运行<code>make deno</code>完成！<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。&lt;br&gt;但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！&lt;br&gt;再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。&lt;/p&gt;
&lt;p&gt;附上项目地址:&lt;br&gt;&lt;a href=&quot;https://github.com/ry/deno&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub - ry/deno: A secure TypeScript runtime on V8&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://xuzihao.fun/categories/Node-js/"/>
    
    
      <category term="go" scheme="http://xuzihao.fun/tags/go/"/>
    
      <category term="TypeScript" scheme="http://xuzihao.fun/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>《Css权威指南》</title>
    <link href="http://xuzihao.fun/CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.html"/>
    <id>http://xuzihao.fun/CSS权威指南.html</id>
    <published>2018-05-28T12:18:00.000Z</published>
    <updated>2018-05-28T12:18:47.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS权威指南"><a href="#CSS权威指南" class="headerlink" title="CSS权威指南"></a>CSS权威指南</h1><h2 id="候选样式表"><a href="#候选样式表" class="headerlink" title="候选样式表"></a>候选样式表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span> <span class="attr">title</span>=<span class="string">"Big Text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>候选样式表在大多数<code>Gecko</code>的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.<br>或者设置同样的<code>title</code>属性，之后设置不同的<code>media</code>属性，在各种场景会使用对应的<code>css</code>文件</p><h2 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h2><p>@import也可以应用媒体。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@import url(styles.css) all;</span><br><span class="line">@import url(styles1.css) print;</span><br><span class="line">@import url(styles2.css) print, screen;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CSS权威指南&quot;&gt;&lt;a href=&quot;#CSS权威指南&quot; class=&quot;headerlink&quot; title=&quot;CSS权威指南&quot;&gt;&lt;/a&gt;CSS权威指南&lt;/h1&gt;&lt;h2 id=&quot;候选样式表&quot;&gt;&lt;a href=&quot;#候选样式表&quot; class=&quot;headerlink&quot; title=&quot;候选样式表&quot;&gt;&lt;/a&gt;候选样式表&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;alternate stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Big Text&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>天总知乎live小结</title>
    <link href="http://xuzihao.fun/%E5%A4%A9%E6%80%BB%E7%9F%A5%E4%B9%8Elive%E5%B0%8F%E7%BB%93.html"/>
    <id>http://xuzihao.fun/天总知乎live小结.html</id>
    <published>2018-05-24T05:27:00.000Z</published>
    <updated>2018-05-25T12:16:57.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="误入歧途怎么对编程感兴趣？"><a href="#误入歧途怎么对编程感兴趣？" class="headerlink" title="误入歧途怎么对编程感兴趣？"></a>误入歧途怎么对编程感兴趣？</h2><p>如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。</p><a id="more"></a><h2 id="介绍某端语言"><a href="#介绍某端语言" class="headerlink" title="介绍某端语言"></a>介绍某端语言</h2><p>前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js</p><p>后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。</p><p>大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python</p><p>游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。</p><p>硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。</p><p>机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。</p><p>运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的</p><h2 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h2><p>一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。</p><h2 id="学习效率如何提高。"><a href="#学习效率如何提高。" class="headerlink" title="学习效率如何提高。"></a>学习效率如何提高。</h2><p>你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。</p><p>很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。</p><h2 id="补"><a href="#补" class="headerlink" title="补"></a>补</h2><h3 id="C-C"><a href="#C-C" class="headerlink" title="C / C++"></a>C / C++</h3><p>主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。</p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）</p><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>FIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。</p><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><p>从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;误入歧途怎么对编程感兴趣？&quot;&gt;&lt;a href=&quot;#误入歧途怎么对编程感兴趣？&quot; class=&quot;headerlink&quot; title=&quot;误入歧途怎么对编程感兴趣？&quot;&gt;&lt;/a&gt;误入歧途怎么对编程感兴趣？&lt;/h2&gt;&lt;p&gt;如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="http://xuzihao.fun/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="生活" scheme="http://xuzihao.fun/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>畅读深入理解计算机系统</title>
    <link href="http://xuzihao.fun/%E7%95%85%E8%AF%BB%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://xuzihao.fun/畅读深入理解计算机系统.html</id>
    <published>2018-05-16T13:53:01.000Z</published>
    <updated>2018-05-23T12:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="畅读深入理解计算机系统"><a href="#畅读深入理解计算机系统" class="headerlink" title="畅读深入理解计算机系统"></a>畅读深入理解计算机系统</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>程序为0和1组成的位。<br>8个位组成一起为字节。<br>每个字节表示程序中的某些字符。</p><p>只由 <code>ASCII</code> 字符构成的文件为——文本文件<br>其他文件为———二进制文件</p><p>编译一个可执行的 <code>hello world</code>  需要4个步骤:<br>hello.c -&gt; 预处理器(cpp) -&gt; hello.i -&gt; 编译器(ccl) -&gt; hello.s -&gt; 汇编器(as) -&gt; hello.o -&gt; 链接器(ld) -&gt; hello可执行文件<br><a id="more"></a></p><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.jpg" alt=""></p><ol><li>总线</li><li>I/O设备</li><li>主存</li><li>处理器<h3 id="存储器访问速度"><a href="#存储器访问速度" class="headerlink" title="存储器访问速度"></a>存储器访问速度</h3></li></ol><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E5%99%A8%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6.jpg" alt=""></p><h3 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h3><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6.jpg" alt=""></p><p><strong>文件</strong> 是对  <code>I/O</code> 设备的抽象表示,<br><strong>虚拟内存</strong> 是 对主存和磁盘的<code>I/O</code>设备的抽象表示<br><strong>进程</strong> 则是对 处理器、主存和<code>I/O</code>设备的抽象表示</p><h3 id="虚拟地址空间"><a href="#虚拟地址空间" class="headerlink" title="虚拟地址空间"></a>虚拟地址空间</h3><p>程序代码和数据 -&gt; 堆 -&gt; 共享库 -&gt; 栈 -&gt; 内核虚拟内存 </p><p>网络就是一种I/O设备</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;畅读深入理解计算机系统&quot;&gt;&lt;a href=&quot;#畅读深入理解计算机系统&quot; class=&quot;headerlink&quot; title=&quot;畅读深入理解计算机系统&quot;&gt;&lt;/a&gt;畅读深入理解计算机系统&lt;/h1&gt;&lt;h2 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h2&gt;&lt;p&gt;程序为0和1组成的位。&lt;br&gt;8个位组成一起为字节。&lt;br&gt;每个字节表示程序中的某些字符。&lt;/p&gt;
&lt;p&gt;只由 &lt;code&gt;ASCII&lt;/code&gt; 字符构成的文件为——文本文件&lt;br&gt;其他文件为———二进制文件&lt;/p&gt;
&lt;p&gt;编译一个可执行的 &lt;code&gt;hello world&lt;/code&gt;  需要4个步骤:&lt;br&gt;hello.c -&amp;gt; 预处理器(cpp) -&amp;gt; hello.i -&amp;gt; 编译器(ccl) -&amp;gt; hello.s -&amp;gt; 汇编器(as) -&amp;gt; hello.o -&amp;gt; 链接器(ld) -&amp;gt; hello可执行文件&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://xuzihao.fun/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://xuzihao.fun/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apollo-server-graphql</title>
    <link href="http://xuzihao.fun/Apollo-server-graphql.html"/>
    <id>http://xuzihao.fun/Apollo-server-graphql.html</id>
    <published>2018-05-08T13:37:10.225Z</published>
    <updated>2018-05-08T13:47:34.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apollo-server-graphql"><a href="#Apollo-server-graphql" class="headerlink" title="Apollo-server-graphql"></a>Apollo-server-graphql</h1><p>玩 <code>graphql</code> 的肯定听过吧 <code>apollo</code> 等等？没有？<br>上月球的那个 <code>apollo</code>也没听过吗？？</p><h2 id="apollo-server主要是做什么呢？？"><a href="#apollo-server主要是做什么呢？？" class="headerlink" title="apollo-server主要是做什么呢？？"></a>apollo-server主要是做什么呢？？</h2><p>它能轻松将您的后端转换为 <code>GraphQL</code> 架构。<br>你说你们以前都是 <code>rest</code> ？<br>没事，最新版的 <code>apollo</code> 能够让你，<br>在现有的 <code>REST API</code> 之上构建通用的 <code>GraphQL API</code>，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。</p><a id="more"></a><h2 id="Go！"><a href="#Go！" class="headerlink" title="Go！"></a>Go！</h2><p>我用 <code>TypeScript</code> 和 <code>Koa</code> 去玩 <code>graphql</code> 。听起来就很棒！</p><blockquote><p>yarn add koa koa-router apollo-server-koa graphql-tools koa-bodyparser<br>&amp;&amp; yarn add  @types/graphql @types/koa @types/koa-bodyparser @types/koa-router  typescript -D<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Koa <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> koaRouter <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> koaBody <span class="keyword">from</span> <span class="string">'koa-bodyparser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphiqlKoa,graphqlKoa &#125; <span class="keyword">from</span> <span class="string">'apollo-server-koa'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; makeExecutableSchema &#125; <span class="keyword">from</span> <span class="string">'graphql-tools'</span>;</span><br><span class="line"><span class="keyword">import</span> env <span class="keyword">from</span> <span class="string">'./env'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> koaRouter();</span><br><span class="line"><span class="keyword">const</span> port: <span class="built_in">number</span> = <span class="number">4040</span>;</span><br><span class="line"></span><br><span class="line">app.use(koaBody());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册路由中间件</span></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books = [</span><br><span class="line">  &#123;title: <span class="string">"hdiahida"</span>, author: <span class="string">'dhiahdia'</span>&#125;,</span><br><span class="line">  &#123;title: <span class="string">"dbfb"</span>, author: <span class="string">'dahdiahi'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typeDefs = <span class="string">`</span></span><br><span class="line"><span class="string">  type Query &#123; books: [Book]&#125;</span></span><br><span class="line"><span class="string">  type Book &#123; title: String, author: String&#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">  Query: &#123; books: <span class="function"><span class="params">()</span> =&gt;</span> books&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = makeExecutableSchema(&#123;</span><br><span class="line">  typeDefs,</span><br><span class="line">  resolvers</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(</span><br><span class="line">  <span class="string">'/graphql'</span>,</span><br><span class="line">  graphqlKoa(&#123;</span><br><span class="line">    schema,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// graphiql</span></span><br><span class="line">router.get(</span><br><span class="line">  <span class="string">'/graphiql'</span>,</span><br><span class="line">  graphiqlKoa(&#123;</span><br><span class="line">    endpointURL: <span class="string">'/graphql'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/404'</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="string">'404!!!'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'🌏 =&gt; server is open loaclhost:'</span> + port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Apollo-server-graphql&quot;&gt;&lt;a href=&quot;#Apollo-server-graphql&quot; class=&quot;headerlink&quot; title=&quot;Apollo-server-graphql&quot;&gt;&lt;/a&gt;Apollo-server-graphql&lt;/h1&gt;&lt;p&gt;玩 &lt;code&gt;graphql&lt;/code&gt; 的肯定听过吧 &lt;code&gt;apollo&lt;/code&gt; 等等？没有？&lt;br&gt;上月球的那个 &lt;code&gt;apollo&lt;/code&gt;也没听过吗？？&lt;/p&gt;
&lt;h2 id=&quot;apollo-server主要是做什么呢？？&quot;&gt;&lt;a href=&quot;#apollo-server主要是做什么呢？？&quot; class=&quot;headerlink&quot; title=&quot;apollo-server主要是做什么呢？？&quot;&gt;&lt;/a&gt;apollo-server主要是做什么呢？？&lt;/h2&gt;&lt;p&gt;它能轻松将您的后端转换为 &lt;code&gt;GraphQL&lt;/code&gt; 架构。&lt;br&gt;你说你们以前都是 &lt;code&gt;rest&lt;/code&gt; ？&lt;br&gt;没事，最新版的 &lt;code&gt;apollo&lt;/code&gt; 能够让你，&lt;br&gt;在现有的 &lt;code&gt;REST API&lt;/code&gt; 之上构建通用的 &lt;code&gt;GraphQL API&lt;/code&gt;，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。&lt;/p&gt;
    
    </summary>
    
      <category term="GraphQL" scheme="http://xuzihao.fun/categories/GraphQL/"/>
    
    
      <category term="GraphQL" scheme="http://xuzihao.fun/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose小试牛刀</title>
    <link href="http://xuzihao.fun/Mongoose%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80.html"/>
    <id>http://xuzihao.fun/Mongoose小试牛刀.html</id>
    <published>2018-05-07T11:32:51.537Z</published>
    <updated>2018-05-08T13:49:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mongoose小试牛刀"><a href="#Mongoose小试牛刀" class="headerlink" title="Mongoose小试牛刀"></a>Mongoose小试牛刀</h1><h2 id="认识下Mongodb："><a href="#认识下Mongodb：" class="headerlink" title="认识下Mongodb："></a>认识下Mongodb：</h2><ul><li>文档(document)<br><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png" alt=""></li><li>集合（Collection）<ul><li>document存于collection</li></ul></li><li>数据库（database）<ul><li>里面有很多collection</li></ul></li></ul><a id="more"></a><h2 id="在mongoose中："><a href="#在mongoose中：" class="headerlink" title="在mongoose中："></a>在mongoose中：</h2><ul><li>Schema -&gt; collection，不具备数据库的操作能力</li><li>Model -&gt; 由Schema生成的模型，能操作数据库</li><li>Entity -&gt; 由Model创建的实例，也能操作数据库</li></ul><h2 id="创建schema"><a href="#创建schema" class="headerlink" title="创建schema"></a>创建schema</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mongoose <span class="keyword">from</span> <span class="string">'mongoose'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> UserType <span class="keyword">extends</span> mongoose.Document &#123;</span><br><span class="line">  name: <span class="built_in">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">&#125;, &#123;collection: <span class="string">'user'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> User = mongoose.model&lt;UserType&gt;(<span class="string">'User'</span>, userSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> User;</span><br></pre></td></tr></table></figure><p>在这里我们会遇到一个问题，如果我们不添加<code>collections: &#39;user&#39;</code>之后会发现会创建一个名为 <code>users</code> 的 <code>collection</code> 的表名。<br>还有个方法自定义 <code>collection</code> 名：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> User = mongoose.model&lt;UserType&gt;(<span class="string">'User'</span>, userSchema, <span class="string">'user'</span>)</span><br></pre></td></tr></table></figure></p><p>二选一！</p><h2 id="创建model"><a href="#创建model" class="headerlink" title="创建model"></a>创建model</h2><ol><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> User, &#123; UserType &#125; <span class="keyword">from</span> <span class="string">'../schemas/User'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> UserModel = <span class="keyword">new</span> User(&#123;name: <span class="string">"xzh"</span>&#125;);</span><br><span class="line">UserModel.save(<span class="function">(<span class="params">(<span class="params">err: <span class="built_in">any</span>, product: UserType </span>)=&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">if</span>(<span class="params">err</span>) <span class="keyword">return</span> <span class="built_in">console</span>.error(<span class="params">err</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="built_in">console</span>.log(<span class="params">product, '结果'</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>))</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">export</span> <span class="params">default</span> <span class="params">UserModel</span>;</span></span><br></pre></td></tr></table></figure></li></ol><p>这有个小插曲，我们也可以不定义一个 <code>UserModel</code> 去向数据库写入数据：</p><ol start="2"><li><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> User, &#123; UserType &#125; <span class="keyword">from</span> <span class="string">'../schemas/User'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> User.create(&#123;name: <span class="string">"xzh"</span>&#125;, <span class="function">(<span class="params">err: <span class="built_in">any</span>, res: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.log(res, <span class="string">'结果'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>因为前面也提到了在 <code>mongoose</code> 中还有个 <code>Entity</code> 的存在。<br>第1种是 <code>entity</code> 保存方法。<br>第2种是 <code>model</code> 保存方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mongoose小试牛刀&quot;&gt;&lt;a href=&quot;#Mongoose小试牛刀&quot; class=&quot;headerlink&quot; title=&quot;Mongoose小试牛刀&quot;&gt;&lt;/a&gt;Mongoose小试牛刀&lt;/h1&gt;&lt;h2 id=&quot;认识下Mongodb：&quot;&gt;&lt;a href=&quot;#认识下Mongodb：&quot; class=&quot;headerlink&quot; title=&quot;认识下Mongodb：&quot;&gt;&lt;/a&gt;认识下Mongodb：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文档(document)&lt;br&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;集合（Collection）&lt;ul&gt;
&lt;li&gt;document存于collection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据库（database）&lt;ul&gt;
&lt;li&gt;里面有很多collection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://xuzihao.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://xuzihao.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Mongodb" scheme="http://xuzihao.fun/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>vscode快捷键提升效率</title>
    <link href="http://xuzihao.fun/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87.html"/>
    <id>http://xuzihao.fun/vscode快捷键提升效率.html</id>
    <published>2018-05-03T08:47:14.000Z</published>
    <updated>2018-05-05T02:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode快捷键提升效率"><a href="#vscode快捷键提升效率" class="headerlink" title="vscode快捷键提升效率"></a>vscode快捷键提升效率</h1><p>windows： cmd = ctrl, option = alt</p><ul><li>重开一行<ul><li>不在行尾向下： cmd + enter</li><li>不在行尾向上： shift + cmd + enter</li></ul></li><li>删除一行<ul><li>cmd + x</li><li>shift + cmd + k</li></ul></li><li>移动换位<ul><li>option + ↑</li><li>option + ↓</li></ul></li><li>复制一行<ul><li>shift + option + ↑</li><li>shift + option + ↓</li></ul></li><li>选一个词<ul><li>cmd + d</li></ul></li><li>搜索<ul><li>cmd + f</li><li>cmd + option + f 替换</li><li>cmd + shift + f 项目中替换</li></ul></li><li>使用鼠标键选择列 v1.23<ul><li>按住shift + option 之后通过鼠标去选择</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vscode快捷键提升效率&quot;&gt;&lt;a href=&quot;#vscode快捷键提升效率&quot; class=&quot;headerlink&quot; title=&quot;vscode快捷键提升效率&quot;&gt;&lt;/a&gt;vscode快捷键提升效率&lt;/h1&gt;&lt;p&gt;windows： cmd = ctrl, optio
      
    
    </summary>
    
      <category term="前端工具" scheme="http://xuzihao.fun/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端工具" scheme="http://xuzihao.fun/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>微微学习Docker</title>
    <link href="http://xuzihao.fun/%E5%BE%AE%E5%BE%AE%E5%AD%A6%E4%B9%A0%20Docker.html"/>
    <id>http://xuzihao.fun/微微学习 Docker.html</id>
    <published>2018-05-01T12:24:00.000Z</published>
    <updated>2018-05-12T13:03:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微微学习-Docker"><a href="#微微学习-Docker" class="headerlink" title="微微学习 Docker"></a>微微学习 Docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">跑镜像</span><br><span class="line">docker run -it imageName bash</span><br><span class="line"></span><br><span class="line">创建一个容器，但不启动</span><br><span class="line">docker create</span><br><span class="line"></span><br><span class="line">改镜像名</span><br><span class="line">docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0</span><br><span class="line"></span><br><span class="line">commit容器</span><br><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">none就随便删呗</span><br><span class="line">docker image prune</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Docker-file"><a href="#Docker-file" class="headerlink" title="Docker file"></a>Docker file</h2><ul><li>FROM  拉镜像</li><li>MAINTAINER  指定创建镜像的用户</li><li>RUN  在当前镜像基础上执行指定命令，并提交为新的镜像</li><li>CMD  启动容器时提供一个默认的命令执行选项</li><li>EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。</li><li>ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留</li><li>ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中</li><li>COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS</li><li>ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。</li><li>VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点</li><li>USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户</li><li>WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。</li><li>ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时</li></ul><hr><h2 id="docker-machine"><a href="#docker-machine" class="headerlink" title="docker-machine"></a>docker-machine</h2><p>创建一台docker主机<br>docker-machine create -d virtualbox test</p><p><code>docker-machine node ls</code></p><p>scale mytest服务的task数量从2到4：<br>docker service scale Name=4</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微微学习-Docker&quot;&gt;&lt;a href=&quot;#微微学习-Docker&quot; class=&quot;headerlink&quot; title=&quot;微微学习 Docker&quot;&gt;&lt;/a&gt;微微学习 Docker&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;跑镜像&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run -it imageName bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建一个容器，但不启动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker create&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;改镜像名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit容器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;none就随便删呗&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker image prune&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="http://xuzihao.fun/categories/docker/"/>
    
    
      <category term="docker" scheme="http://xuzihao.fun/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>配置阿里云服务器之Docker服务</title>
    <link href="http://xuzihao.fun/%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8BDocker%E6%9C%8D%E5%8A%A1.html"/>
    <id>http://xuzihao.fun/配置阿里云服务器之Docker服务.html</id>
    <published>2018-04-30T04:00:00.000Z</published>
    <updated>2018-05-06T15:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置阿里云服务器之Docker服务"><a href="#配置阿里云服务器之Docker服务" class="headerlink" title="配置阿里云服务器之Docker服务"></a>配置阿里云服务器之Docker服务</h1><p>阿里云搜索容器镜像服务。<a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">网址地址</a></p><p>具体操作看别人的博文:<a href="https://yq.aliyun.com/articles/70756" target="_blank" rel="noopener">博文地址</a><br>下面讲一点使用docker注意事项和上传至阿里云<br><a id="more"></a></p><h2 id="保存容器"><a href="#保存容器" class="headerlink" title="保存容器"></a>保存容器</h2><p>我们进到容器里一顿<code>apt update &amp;&amp; apt install 巴拉巴拉</code><br>但是只要<code>exit</code>一<code>pull</code>就发现所有做的都没了。<br>原来我是没<code>commit</code><br>命令如下：<br><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p><p>OPTIONS:</p><ul><li>–author , -a 作者</li><li>–change , -c 将Docker file指令应用于创建的映像</li><li>–message , -m 提交信息</li><li>–pause , -p 在提交期间暂停容器<h2 id="因为我得是私有镜像仓库可能会有以下情况："><a href="#因为我得是私有镜像仓库可能会有以下情况：" class="headerlink" title="因为我得是私有镜像仓库可能会有以下情况："></a>因为我得是私有镜像仓库可能会有以下情况：</h2><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png" alt="docker-push"><br>如果出现这种情况那么我们可以直接pull该镜像即可</li></ul><p>为什么要有Docker file？<br>他可以快速创建自定义的Docker镜像。<br>具体就是能让我们自定义一个镜像不会给别人感觉是黑箱操作。我们任何RUN操作都是大家看的见的。他们知道我们这个镜像里装了什么东西，这不就是我们所想要的透明吗！<br>Dockerfile官网的最佳实践：<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/" target="_blank" rel="noopener">最佳实践</a></p><h2 id="配置mongo镜像"><a href="#配置mongo镜像" class="headerlink" title="配置mongo镜像"></a>配置mongo镜像</h2><p>步骤很简单</p><ol><li>docker pull mongo</li><li>docker tag mongo registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li><li>docker run -t –name database –net networkName -p 49155:27017 -v /data/db:/data/db –log-opt max-size=64m –log-opt max-file=10 registry.cn-hangzhou.aliyuncs.com/xxxxx<br>当然你可能会问那个<code>--net</code> 是个什么玩意儿。<br>这可是个宝贝哇。<br>当我们有多个容器互相需要连接时，在以前的<code>docker</code> 我们是用 <code>link</code> 现在我们只需要<code>docker create network networkName</code><br>之后我们只要run相互之间有关联的容器加上<code>--net networkName</code> 就ok啦！<br><strong>当然你有多个容器之间需要互相连接，推荐使用 Docker Compose。</strong><h2 id="自定义自己的服务端镜像"><a href="#自定义自己的服务端镜像" class="headerlink" title="自定义自己的服务端镜像"></a>自定义自己的服务端镜像</h2>我们就自定义一个跑后端的吧</li><li>docker pull node:8.9.4-alpine   //该镜像体积很小</li><li>docker tag node registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li><li><p>写个Dockerfile吧！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM registry.cn-hangzhou.aliyuncs.com/xxxxx</span><br><span class="line"></span><br><span class="line">RUN mkdir -p /usr/src/app</span><br><span class="line"></span><br><span class="line">COPY . /usr/src/app</span><br><span class="line"></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"></span><br><span class="line">CMD npm run start:server</span><br><span class="line"></span><br><span class="line">EXPOSE 4040</span><br></pre></td></tr></table></figure></li><li><p>然后写点<code>docker run balbalbal</code>啊之类的脚本这样我们就能很方便的使用啦。</p><h2 id="遇到的一些小问题"><a href="#遇到的一些小问题" class="headerlink" title="遇到的一些小问题"></a>遇到的一些小问题</h2><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/docker-mongo-url.png" alt="image:12467E92-6292-4307-AFAA-5085E0CF5E43-737-000068B410D30946/docker-mongo-url.png"><br>这种情况我去Stack Overflow上瞅了瞅。就是一天！！！！<br>发现一个0赞的答案。。。我把。。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'mongodb://127.0.0.1:27017'</span></span><br><span class="line">to</span><br><span class="line"><span class="string">'mongodb://database:27017'</span></span><br><span class="line"><span class="comment">// 容器名</span></span><br></pre></td></tr></table></figure></li></ol><p>他居然就work了。。。。<br>我真的是。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;配置阿里云服务器之Docker服务&quot;&gt;&lt;a href=&quot;#配置阿里云服务器之Docker服务&quot; class=&quot;headerlink&quot; title=&quot;配置阿里云服务器之Docker服务&quot;&gt;&lt;/a&gt;配置阿里云服务器之Docker服务&lt;/h1&gt;&lt;p&gt;阿里云搜索容器镜像服务。&lt;a href=&quot;https://cr.console.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网址地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;具体操作看别人的博文:&lt;a href=&quot;https://yq.aliyun.com/articles/70756&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博文地址&lt;/a&gt;&lt;br&gt;下面讲一点使用docker注意事项和上传至阿里云&lt;br&gt;
    
    </summary>
    
      <category term="阿里云服务的使用、docker" scheme="http://xuzihao.fun/categories/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%81docker/"/>
    
    
      <category term="docker" scheme="http://xuzihao.fun/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Typescript配置采坑之路</title>
    <link href="http://xuzihao.fun/Typescript%E9%85%8D%E7%BD%AE%E9%87%87%E5%9D%91%E4%B9%8B%E8%B7%AF.html"/>
    <id>http://xuzihao.fun/Typescript配置采坑之路.html</id>
    <published>2018-04-27T16:03:52.000Z</published>
    <updated>2018-05-07T12:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png" alt=""></p><blockquote><p>这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8</p></blockquote><a id="more"></a><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png" alt=""></p><blockquote><p>tsconfig文件加这条：    “module”: “commonjs”, </p></blockquote><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png" alt=""></p><blockquote><p>tsconfig文件加这条：    “lib”: [“es2015”]</p></blockquote><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsgraphql.png" alt=""></p><blockquote><p>tsconfig文件加这条：    “lib”: [“esnext”]</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Typescript" scheme="http://xuzihao.fun/categories/Typescript/"/>
    
    
      <category term="Typescript" scheme="http://xuzihao.fun/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack4配置指南！Up！</title>
    <link href="http://xuzihao.fun/Webpack4%E9%85%8D%E7%BD%AE.html"/>
    <id>http://xuzihao.fun/Webpack4配置.html</id>
    <published>2018-04-23T08:02:00.000Z</published>
    <updated>2018-04-21T11:42:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir simpleFE &amp;&amp; <span class="built_in">cd</span> simpleFE</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br><span class="line">or</span><br><span class="line">mkdir simpleFE &amp;&amp; <span class="built_in">cd</span> simpleFE</span><br><span class="line">yarn init -y</span><br><span class="line">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>不要问为什么装了<code>webpack</code> 还要装<code>webpack-cli</code>。。因为你不装就报错。。官方提示还让你去装。。</p><hr><a id="more"></a><h2 id="配置Sass"><a href="#配置Sass" class="headerlink" title="配置Sass"></a>配置Sass</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader node-sass sass-loader style-loader --save-dev</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">yarn add css-loader node-sass sass-loader style-loader -D</span><br></pre></td></tr></table></figure><p> 配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取css文件成单独的文件</span></span><br><span class="line"><span class="keyword">const</span> extractSass = <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">  filename: <span class="string">"styles/[name].[hash].css"</span>,</span><br><span class="line">  disable: process.env.NODE_ENV === <span class="string">"development"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: extractSass.extract(&#123;</span><br><span class="line">          use: [</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">"css-loader"</span>, <span class="comment">// 将CSS翻译成CommonJS</span></span><br><span class="line">              options: &#123;</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// 会导致速度变慢</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              loader: <span class="string">"sass-loader"</span>, <span class="comment">// 将Sass编译成CSS</span></span><br><span class="line">              options: &#123;</span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// 会导致速度变慢</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          <span class="comment">// 在dev环境下配置这条</span></span><br><span class="line">          fallback: <span class="string">"style-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [extractSass]</span><br></pre></td></tr></table></figure><p>安装<code>extract-text-webpack-plugin</code>这是为了把css呀这些文件单独打包成一个</p><p>但是会遇到报错：</p><p><img src="https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png" alt="extract-text-webpack-plugin"></p><p>然后我们去<code>package.json</code>会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。</p><p><code>yarn add extract-text-webpack-plugin@next -D</code></p><h1 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h1><p><a href="https://webpack.js.org/plugins/commons-chunk-plugin" target="_blank" rel="noopener"><code>CommonsChunkPlugin</code></a>已被移除。。被 <strong>SplitChunksPlugin</strong> 和 <strong>runtimeChunk</strong> 替代了。</p><p>CommonsChunkPlugin存在很多问题：</p><ul><li>它可能导致更多的代码被下载</li><li>它在异步块上效率低下。</li><li>很难用</li><li>实施难以理解</li></ul><p>SplitChunksPlugin很棒的地方：</p><ul><li>它对异步块也有效</li><li>它在默认情况下用于异步块</li><li>它处理vendor并拆分多个verdor块</li><li>它更容易使用</li><li>它不依赖chunk块</li><li>大部分是自动的</li></ul><p>我们只要把原有的<code>new webpack.optimize.CommonsChunkPlugin(options)</code>删了。加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">"async"</span>,</span><br><span class="line">    minSize: <span class="number">30000</span>,</span><br><span class="line">    minChunks: <span class="number">1</span>,</span><br><span class="line">    maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">    maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">    automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">    name: <span class="literal">true</span>,</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">            test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">            priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">            minChunks: <span class="number">2</span>,</span><br><span class="line">            priority: <span class="number">-20</span>,</span><br><span class="line">            reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h1&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir simpleFE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; simpleFE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install webpack webpack-cli --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir simpleFE &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; simpleFE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn init -y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn add webpack webpack-cli -D&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不要问为什么装了&lt;code&gt;webpack&lt;/code&gt; 还要装&lt;code&gt;webpack-cli&lt;/code&gt;。。因为你不装就报错。。官方提示还让你去装。。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Webpack" scheme="http://xuzihao.fun/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://xuzihao.fun/tags/Webpack/"/>
    
  </entry>
  
</feed>
