{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a0fdb576b5b55d30972a9bd51389905068aac6d5","modified":1542466800421},{"_id":"source/.DS_Store","hash":"7eaef56c1a99816ce1cfaee69dbed6073661dcf1","modified":1542467938521},{"_id":"source/baidu_verify_AriLx1cNFe.html","hash":"4fcea3a10885d40a5b1f83faa4fafda82a389019","modified":1542467917059},{"_id":"themes/next/.DS_Store","hash":"ce632f50b6379974f7618f1e5cac2ef25dd9923c","modified":1542466487839},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1513173231201},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1513173231202},{"_id":"source/googlec48318aba92c2f4e.html","hash":"0ce6f245d022abfe850f23ab097c3c5df9a82589","modified":1506309133000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1513173231202},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1513173231203},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1513173231203},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1513173231203},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1513173231203},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1513173231204},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1513173231203},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1513173231204},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1513173231204},{"_id":"themes/next/_config.yml","hash":"20587acdc76a06be99746c13d1a19d27b5005d07","modified":1542467432298},{"_id":"themes/next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1513173231204},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1513173231205},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1513173231205},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1513173231230},{"_id":"source/about/index.md","hash":"ebe45a3f8e6eeabc2ee7ed660d8fab834697a6fe","modified":1512611557159},{"_id":"source/_posts/2017Web程序员技术发展路线图.md","hash":"042096655e2b648b203a83e5f02c65819e3d5901","modified":1506073746000},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1493218203000},{"_id":"source/_posts/.DS_Store","hash":"f59a7785a4c22a7f04e57b8a201732254f26cb0b","modified":1542271428426},{"_id":"source/_posts/2017年总结.md","hash":"0e6c8663b863efaf8f03b3f4a5fb76d63b8d0fb9","modified":1514478237403},{"_id":"source/_posts/Ajax与Fetch.md","hash":"b476da21ab8ec0114638a6d8fa5e10c7e0a260fc","modified":1521641673291},{"_id":"source/_posts/Apollo-server-graphql.md","hash":"b0affc17c8f873fa64d004cb1eb5724c7a19c504","modified":1525787254977},{"_id":"source/_posts/CO函数，异步.md","hash":"0c5015d20e1db9c1200c7c5f842badf770d9a5c3","modified":1513172583967},{"_id":"source/_posts/BOM.md","hash":"f9dd3e747e465ddd85e60a85e718208942826fe1","modified":1513172578224},{"_id":"source/_posts/C++初体验.md","hash":"05d623c3331da3217fedd4326fa90d9ed99ad72b","modified":1513172837105},{"_id":"source/_posts/CSS外轮廓.md","hash":"4115d3846325d9f445ebe424d251536840e06edb","modified":1521465696585},{"_id":"source/_posts/CSS3transform.md","hash":"f620eddb175e1d18fd58fb465a6e0ebaa643688b","modified":1523859556909},{"_id":"source/_posts/CSS之em-rem.md","hash":"324e69b061800475595ea103ca496981e06d0e8d","modified":1534157620296},{"_id":"source/_posts/CSS布局.md","hash":"4dc20dc17c2a3686658260f3827c58070514819d","modified":1522567706254},{"_id":"source/_posts/CSS权威指南.md","hash":"c710047a56a3674d14ea536f77009c58e0419f2c","modified":1527509927381},{"_id":"source/_posts/Cookie-Session.md","hash":"a076b962ccc014ae278d2f0ac7ad57d9e3554bb9","modified":1521272606135},{"_id":"source/_posts/Css3选择器.md","hash":"017be579ac814dd722cc7bf6eb8c6290aaa92bca","modified":1520234762427},{"_id":"source/_posts/DOM.md","hash":"b0a83dd57a1af46dd5336719ff1ddb1fe05cac24","modified":1513172844096},{"_id":"source/_posts/Draft-RichUtils.md","hash":"e73cb0a6b29367e617b48762e2b58ad9e43cddb3","modified":1530882172463},{"_id":"source/_posts/Draft.js ——API Basics.md","hash":"14a44249838748ea833336533f62569a1ede25f7","modified":1530795047002},{"_id":"source/_posts/Draft——Entities.md","hash":"5ffbcb552a2a4f261475c06f36fd440fb3d167c6","modified":1530963398559},{"_id":"source/_posts/Es6箭头函数.md","hash":"8e0e66ca15420a8ff03c8e4e0b574f9fbc8fbbcd","modified":1513172595410},{"_id":"source/_posts/E-R图.md","hash":"3a389906868e3de3b48f422bb29134665d0fac3a","modified":1500278814000},{"_id":"source/_posts/Express.md","hash":"ef28b105652a7ce6b65f987fd908502a2e45ec0d","modified":1504690912000},{"_id":"source/_posts/Generator.md","hash":"dbb62a6cca5e727754ad74df5de1ae591c374724","modified":1513172610557},{"_id":"source/_posts/GraphQL.md","hash":"7e27325457ba433cb2a364947768577ccf5cf866","modified":1505702549000},{"_id":"source/_posts/Hello World.md","hash":"77a13fbd7b8c42f44c2ee6b8d7dba37e32922ede","modified":1501245750000},{"_id":"source/_posts/JSON.md","hash":"dd0ed7dd1da36df820141cff7d4500b4c2498b03","modified":1515158953991},{"_id":"source/_posts/JavaScript——16道算法题.md","hash":"a67f84b8c6d59f78240ba4e2c71598bbdc198e22","modified":1513172624884},{"_id":"source/_posts/JavaScript作用域.md","hash":"69eed3237336b36a0e2185993c53b5cc8df39314","modified":1506073826000},{"_id":"source/_posts/JavaScript函数.md","hash":"49827cfa10b83984d4d465049bdf14dac6a48f33","modified":1524813581420},{"_id":"source/_posts/JavaScript变量.md","hash":"8a59cf5718b308161d0537de327e1ae02c88f2e3","modified":1506073805000},{"_id":"source/_posts/JavaScript基本概念copy.md","hash":"a68f39bbe651854a6cc31658739ef6e73fa6e999","modified":1506073818000},{"_id":"source/_posts/JavaScript闭包.md","hash":"93240a0f1d1a75a31ef55787a116f7348af3e5fb","modified":1523287175692},{"_id":"source/_posts/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.md","hash":"17c29afa723abff317a7e70e8e5bb39df8d4ddee","modified":1513172618760},{"_id":"source/_posts/Javascript对象.md","hash":"9b8604b378beee670a7787051389160338c408a0","modified":1521447887244},{"_id":"source/_posts/Mongoose小试牛刀.md","hash":"e84876c879e0062ae572cbba30c19eaff59f4844","modified":1525787370474},{"_id":"source/_posts/Node.js+hexo部署博客.md","hash":"9a1a701c161218d95d9d1d2af5d7f8a3ff7f1374","modified":1506073849000},{"_id":"source/_posts/Kubectl常用命令.md","hash":"18304d4d0b06441bd7667fbf5173940644b5d7f2","modified":1542465622112},{"_id":"source/_posts/Koa2—Https.md","hash":"5da6bda268471675dfd774fdc07de912024f5901","modified":1535373874897},{"_id":"source/_posts/K8s基本概念.md","hash":"2e0a966e2ed9303cc316aa8cd67231ddaab7e62e","modified":1531665894375},{"_id":"source/_posts/Node.md","hash":"982ad9b9870c6a406ff7bee341ef77512ca87448","modified":1501245640000},{"_id":"source/_posts/Promise.md","hash":"248ace00022548fc2be9b68ca0e372c02d976833","modified":1513172650501},{"_id":"source/_posts/React Native环境配置.md","hash":"25c0552d6a17e30797d2b3bd8f43b98e66fb5f52","modified":1517319974008},{"_id":"source/_posts/Prettier-Options.md","hash":"b8257a7ee32bbe575f10c214b91a1483408b2bfb","modified":1520234836739},{"_id":"source/_posts/React-Router.md","hash":"137db5d82b6c55c23cbe8f290b7271fbcab6c1e3","modified":1504162266000},{"_id":"source/_posts/Parcel.md","hash":"102738e04e43288eef37da3c675c672b3aa2f117","modified":1513426627171},{"_id":"source/_posts/PostgreSQL基础.md","hash":"226576122c0a48018fe302b8dce6653b25d86d94","modified":1537082305522},{"_id":"source/_posts/React-State与Props的小心思.md","hash":"857b21dcd058b90a8a55635a17600b90a795a6fb","modified":1500907064000},{"_id":"source/_posts/React-Native踩坑.md","hash":"815e67b74b4311e7a8d4534f45a4c432a1ed6e23","modified":1522681952737},{"_id":"source/_posts/ReactNativeCodePush.md","hash":"81eb2411468ed48dd89c112192a98bcaf0be4690","modified":1522246615431},{"_id":"source/_posts/React新生命周期.md","hash":"4fba868613a600265663853bd8abd351b7d136a1","modified":1523454105693},{"_id":"source/_posts/ReduxSaga.md","hash":"8fc453dd52b1ce833ae8c4e06d21df6a9fbd2565","modified":1522563641512},{"_id":"source/_posts/RegExp.md","hash":"1da72adc12cb94a4f0b9d6c6259f3a1ce00d06aa","modified":1523022297528},{"_id":"source/_posts/React生命周期.md","hash":"b145c07fb534c61fee632c64c01f7b1ecd81313d","modified":1506417637000},{"_id":"source/_posts/Sass小笔记.md","hash":"54c01360842f78eec9174e0a6e7d6c71f9f68b9a","modified":1531400107653},{"_id":"source/_posts/Typescript配置采坑之路.md","hash":"6aaca5e2805e3a33003a6742f62a583f3f1d1fc6","modified":1525695458318},{"_id":"source/_posts/Webpack-dev-server配合react-router4.md","hash":"a05b074b3916cbbe1c9b49cfa794cb21d0f3a352","modified":1530365323244},{"_id":"source/_posts/Vue.js小记.md","hash":"48eedf1bef68f547158719ac11e982a450aec7e1","modified":1495787852000},{"_id":"source/_posts/Webpack4配置.md","hash":"8e2dec0a9a243334b9f6f983f6ff0673f049e718","modified":1524483749996},{"_id":"source/_posts/contenteditable.md","hash":"d9b206328766e67a326887cdab57802757f0de23","modified":1523979896767},{"_id":"source/_posts/es6解构赋值妙用.md","hash":"19b3ce9516f3a8bfe859557a206f8bb62f8a19f8","modified":1538379735749},{"_id":"source/_posts/git.md","hash":"07f6b502ffdea602cf1f6fae156c2e0071c7724a","modified":1504690839000},{"_id":"source/_posts/git-empty-object-file.md","hash":"003e80f9d773b0f734179922bedf205b1d976fea","modified":1542465676753},{"_id":"source/_posts/kaldi文档.md","hash":"231c863d4929cdfe23461f0992e05752f0305ad6","modified":1517727171820},{"_id":"source/_posts/mac连接ssh.md","hash":"563d3c862dec778f62cba90ffbebc46429ab2b2a","modified":1522073396264},{"_id":"source/_posts/mongodb.md","hash":"529a093705ce6fd80798cb389ac96e79f6084c1c","modified":1512372694342},{"_id":"source/_posts/redux.md","hash":"c7840123532276ca9457d1b61d0bba2e63df26ed","modified":1510238590000},{"_id":"source/_posts/《你不知道的JavaScript（上）》读书笔记.md","hash":"0c42d9d7240e1f7e8374a0624a954b9fb9f8392d","modified":1514036410302},{"_id":"source/_posts/《图解HTTP》读书笔记.md","hash":"9b1e968316c2fce351ce4fa75b09d2ecb6e8f43c","modified":1511535171604},{"_id":"source/_posts/vscode快捷键提升效率.md","hash":"ede9792df8fb16a9af562c48919f939f7da7c554","modified":1525487256286},{"_id":"source/_posts/《编码》读书笔记.md","hash":"2945f0aad18235298631b991052fb0da96e7494d","modified":1510473390000},{"_id":"source/_posts/事件处理.md","hash":"ee45ec11a3855fa0c87cc695e99381f15fbc3d9c","modified":1524144699164},{"_id":"source/_posts/yewu.md","hash":"ecb125f7cfd6577483b26d616b0f33054bcba620","modified":1501161686000},{"_id":"source/_posts/《高性能JavaScript》读书笔记.md","hash":"f971b776427f3da792f2db5135cf8939539ffd10","modified":1522652127423},{"_id":"source/_posts/使用阿里云oss踩得坑.md","hash":"9f764cba31bc65de9b4210734c0a156eec18027a","modified":1503384385000},{"_id":"source/_posts/前端面试题.md","hash":"1ee5949e973544a68d330201401ba18126c95263","modified":1513172560120},{"_id":"source/_posts/初入Node.md","hash":"d26670362e74225e2637312227a2609e4bbcb93e","modified":1516884732843},{"_id":"source/_posts/例句.md","hash":"946d18a2e16aa0b0804e66ffe69c90ddba43e858","modified":1510473437000},{"_id":"source/_posts/单词.md","hash":"0f9ad164de3b4d549ad2e13c8bcde2efabbb925f","modified":1510473425000},{"_id":"source/_posts/天总知乎live小结.md","hash":"9c7b7e733547c44af40e67cf51dc7adaa59701cf","modified":1527250617489},{"_id":"source/_posts/异步.md","hash":"b47156ed2ea394716124d2b607091eb374757772","modified":1513172570654},{"_id":"source/_posts/初入React.md","hash":"c407ec6fee57d36b3e189993364935720601ab68","modified":1500907072000},{"_id":"source/_posts/学CSS（一）.md","hash":"6dada1c9e58922ac26192c8046887e4239dd4f5f","modified":1504691304000},{"_id":"source/_posts/微信客服消息功能全解.md","hash":"a7d157b39c92572fe4d88ec73365b96d136b3664","modified":1530680777041},{"_id":"source/_posts/微微学习 Docker.md","hash":"1a1cc96ee3da511b8630fe6ae07022bf8a1207cc","modified":1526130190578},{"_id":"source/_posts/学习CSS(二).md","hash":"96aaeaee9b27408daaa801cb498c2a7cd3501721","modified":1504766022000},{"_id":"source/_posts/支付宝小程序.md","hash":"5442f83ffb1f0cd0f41906a90656fa4afef23f9e","modified":1510473053000},{"_id":"source/_posts/打造个人or团队适用的开源项目规范.md","hash":"de6919bd84d8300794bd2c06c8cb6d57a9806c51","modified":1541249475430},{"_id":"source/_posts/数据结构与算法.md","hash":"3a7d5c98362a1a763f601a0cd08eccda52023467","modified":1522731255708},{"_id":"source/_posts/时态.md","hash":"e92b34e5723585939a9ea301d5b30d837d272a86","modified":1510473453000},{"_id":"source/_posts/浅谈script标签.md","hash":"f2f54f5784dec018d05c662708c659011731fe29","modified":1522682043292},{"_id":"source/_posts/玩Deno遇到问题的解决方案.md","hash":"9aaf79028f5e29350f40554c5a4af4e916d02927","modified":1535285233131},{"_id":"source/_posts/畅读深入理解计算机系统.md","hash":"fca49fd87d5a11d60c4d95158d318028b15ad1c0","modified":1527418186402},{"_id":"source/_posts/计算机网络读书笔记（一）.md","hash":"bab9fbfcde0e66a7374556829888a14dbf9c069a","modified":1526310102517},{"_id":"source/_posts/评论功能迁移.md","hash":"ebf72e589e2c4f3874933a0fcda243b03f0c45e7","modified":1501310081000},{"_id":"source/_posts/设计模式之工厂模式.md","hash":"ff3130257667f2fbb77609b22e53f7cb8db00d3b","modified":1523543805226},{"_id":"source/_posts/部署 Kubernetes 集群.md","hash":"eb9fcbee31f636f59f679b1dbfeb5807faf1ff5e","modified":1542205538994},{"_id":"source/_posts/配置SSH Key+Next主题以及个性化改动.md","hash":"adde67bcbc19b333ccf1fcaf5fbad7cc59df484d","modified":1525060657288},{"_id":"source/_posts/配置阿里云服务器之Docker服务.md","hash":"bcdce6941d55e122dad6ebdc69f1685ad8dd7557","modified":1525621906925},{"_id":"source/guestbook/index.md","hash":"c7dc6965e5e4dea7b81b9da0a9d31ff7cc4c5cb3","modified":1490084936000},{"_id":"source/_posts/跨域资源共享.md","hash":"c26d59adb85f3ca36c770fe1fc899714aeda372e","modified":1522072428550},{"_id":"source/categories/index.md","hash":"214970ddd36a877662fc17aa14e90d2f016e624d","modified":1490101124000},{"_id":"source/tags/index.md","hash":"2dd1a12c9b11d7a7a870fd1f1991554759f682b3","modified":1513172404812},{"_id":"source/tags/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1512611025635},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1513173231194},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1513173231196},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1513173107653},{"_id":"themes/next/.git/FETCH_HEAD","hash":"427d26ee4ab362825f3c4016a457b87a14473b95","modified":1513251212858},{"_id":"themes/next/.git/index","hash":"c0cfa111f42006be90c88c4af7c3f235652a6ee4","modified":1542467567996},{"_id":"themes/next/.git/packed-refs","hash":"f4d7e4a6f59a2abdcdcdd1733b89d4d72e9136d6","modified":1513173231192},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1513173231202},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1513173231202},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1513173231202},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1513173231202},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1513173231209},{"_id":"themes/next/layout/.DS_Store","hash":"cd2d061e3d626f33e55689da6ddcaa0f78ff4143","modified":1542466592773},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1513173231228},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1513173231228},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1513173231229},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1513173231229},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1513173231229},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1513173231230},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1513173231229},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1513173231205},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1513173231206},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1513173231206},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1513173231206},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1513173231206},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1513173231206},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1513173231206},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1513173231207},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1513173231207},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1513173231207},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1513173231208},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1513173231207},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1513173231207},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1513173231209},{"_id":"themes/next/languages/zh-Hans.yml","hash":"64ff89ae28e968f4c717a48f949759b691b96ae1","modified":1522681853505},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1513173231230},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1513173231231},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1513173231209},{"_id":"themes/next/source/.DS_Store","hash":"dd05ed4cc4bc318e3f69bfbb2becc2c0e8e49636","modified":1513585744471},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1513173231322},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1513173231322},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1513173231322},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231270},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1513173107653},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1513173107654},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1513173107655},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1513173107655},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1513173107653},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1513173107654},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1513173107657},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1513173107654},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1513173107652},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1513173107654},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1513173107657},{"_id":"themes/next/.git/logs/HEAD","hash":"879736d8dfa9fc37927255aebe689496af260f0c","modified":1513173231195},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1513173231210},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513173231209},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1513173231209},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1513173231210},{"_id":"themes/next/layout/_macro/post.swig","hash":"d054331e8ee8d4fd0a5e6a1882c408569d604e99","modified":1522681780067},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1513173231211},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1513173231211},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1513173231211},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1513173231211},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1513173231212},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"b423a4a87d1f8ce8d289d6fa9b0405569db3cb2e","modified":1542466587757},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1513173231212},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1513173231213},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1513173231214},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1513173231214},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1513173231214},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"d1ef1ecc13f2395f8a79d83a8678e400928490d6","modified":1542466592779},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1513173231224},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1513173231224},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1513173231225},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1513173231225},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1513173231225},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1513173231225},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1513173231226},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1513173231216},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1513173231216},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1513173231218},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1513173231231},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1513173231232},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1513173231232},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1513173231232},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1513173231233},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1513173231233},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1513173231233},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1513173231233},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1513173231234},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1513173231270},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1513173231270},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513173231271},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513173231271},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1513173231271},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513173231272},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513173231273},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513173231272},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513173231273},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513173231272},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1513173231274},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513173231273},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1513173231274},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1513173231274},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513173231275},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513173231274},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513173231275},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513173231275},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513173231275},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231217},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231217},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231268},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231269},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231259},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231259},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1513173231260},{"_id":"themes/next/.git/refs/heads/master","hash":"d022a9d44457f7717004a8c765a92e0305245725","modified":1513173231195},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1513173231213},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1513173231213},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1513173231214},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1513173231215},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1513173231215},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1513173231215},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1513173231215},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1513173231216},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1513173231216},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1513173231218},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1513173231218},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1513173231218},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1513173231219},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1513173231219},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1513173231219},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1513173231219},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1513173231221},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1542466641972},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1513173231221},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1513173231221},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1513173231222},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1513173231220},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1513173231220},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1513173231222},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1513173231222},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1513173231223},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1513173231223},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1513173231223},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1513173231223},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1513173231224},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1513173231224},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1513173231226},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1513173231227},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1513173231227},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1513173231227},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1513173231217},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513173231217},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1513173231217},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1513173231259},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1513173231268},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1513173231268},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1513173231269},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1513173231259},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1513173231269},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1513173231260},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1513173231260},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1513173231276},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513173231276},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1513173231276},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1513173231276},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513173231277},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1513173231277},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1513173231277},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1513173231278},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1513173231277},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513173231278},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1513173231279},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1513173231286},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1513173231286},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1513173231283},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1513173231287},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1513173231287},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1513173231292},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513173231292},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1513173231294},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1513173231293},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1513173231293},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1513173231294},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1513173231294},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1513173231295},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1513173231294},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1513173231308},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1513173231308},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1513173231308},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513173231309},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1513173231308},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513173231309},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1513173231314},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1513173231313},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1513173231314},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1513173231310},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1513173231310},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1513173231311},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1513173231311},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1513173231311},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1513173231311},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1513173231311},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1513173231312},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1513173231313},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1513173231310},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1513173231309},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1513173231310},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1513173231318},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513173231321},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1513173231318},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1513173231307},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513173231321},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513173231321},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513173231307},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1513173231194},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"879736d8dfa9fc37927255aebe689496af260f0c","modified":1513173231195},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1513173231226},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1513173231226},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1513173231234},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1513173231235},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1513173231235},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1513173231234},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1513173231235},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1513173231246},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1513173231239},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1513173231257},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1513173231257},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1513173231258},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1513173231258},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1513173231258},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1513173231258},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1513173231260},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1513173231261},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1513173231261},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1513173231261},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1513173231262},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1513173231262},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513173231262},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1513173231263},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1513173231264},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1513173231264},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1513173231264},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1513173231265},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1513173231265},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1513173231265},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1513173231266},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1513173231266},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1513173231266},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1513173231267},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1513173231267},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1513173231257},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1513173231278},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1513173231281},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513173231287},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513173231288},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1513173231282},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1513173231283},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513173231288},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513173231288},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513173231289},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513173231288},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513173231291},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513173231292},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513173231291},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513173231293},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513173231294},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1513173231296},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513173231296},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1513173231295},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513173231318},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513173231318},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1513173231282},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1513173231306},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1513173231306},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513173231320},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"879736d8dfa9fc37927255aebe689496af260f0c","modified":1513173231193},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1513173231236},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1513173231236},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1513173231236},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1513173231237},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1513173231237},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1513173231238},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1513173231238},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1513173231238},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1513173231239},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1513173231239},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1513173231237},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1513173231237},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1513173231237},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1513173231239},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1513173231235},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1513173231240},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1513173231240},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1513173231240},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1513173231241},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1513173231240},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1513173231240},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1513173231241},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1513173231241},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1513173231241},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1513173231242},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1513173231242},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1513173231242},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1513173231242},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1513173231243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1513173231243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1513173231244},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1513173231244},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1513173231244},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1513173231245},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1513173231245},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1513173231245},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1513173231245},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1513173231246},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1513173231246},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1513173231247},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1513173231248},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1513173231248},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1513173231248},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1513173231248},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1513173231249},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1513173231249},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1513173231253},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1513173231253},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1513173231254},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1513173231254},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1513173231254},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1513173231255},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1513173231255},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1513173231255},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1513173231255},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1513173231255},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1513173231256},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1513173231256},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1513173231263},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513173231263},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1513173231265},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1513173231280},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1513173231280},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1513173231280},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1513173231280},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1513173231281},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513173231289},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513173231289},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513173231290},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513173231289},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513173231290},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513173231291},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1513173231300},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1513173231305},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1513173231298},{"_id":"themes/next/.git/objects/pack/pack-1bec5d766b589ecef473c4d6db8abf4c62b5f99c.idx","hash":"7cb83deb1a17423db39a07074489a256e8fe8ea2","modified":1513173231179},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1513173231286},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1513173231317},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1513173231303},{"_id":"themes/next/.git/objects/pack/pack-1bec5d766b589ecef473c4d6db8abf4c62b5f99c.pack","hash":"0388e2a47d13f520e1c0e271c6cad2fbfa3f3c95","modified":1513173231173},{"_id":"public/baidusitemap.xml","hash":"c3d08d6c0a6edf7f9ba1ffe371ccf6c4d51909fd","modified":1542468074471},{"_id":"public/atom.xml","hash":"ac866968f42daba215389ebe0d5d347b51918c02","modified":1542468074612},{"_id":"public/search.xml","hash":"55916843811cd7c8e60748efc956d789ba367bbe","modified":1542468074612},{"_id":"public/sitemap.xml","hash":"dedf2dc01c1e4b887b2ade6c8f639555e286e580","modified":1542468074612},{"_id":"public/baidu_verify_AriLx1cNFe.html","hash":"758394fb9a1e2eca9da0b5f36b1a8affa9195fb4","modified":1542468074660},{"_id":"public/googlec48318aba92c2f4e.html","hash":"b296d6bd0c3573b77a024b0b233b8fa3406b266e","modified":1542468074660},{"_id":"public/guestbook/index.html","hash":"c14f13f7f15c167c963ec65ccc82103a047759d1","modified":1542468074660},{"_id":"public/tags/index.html","hash":"787463833d06d4d63bce40880f374d7c64a8e746","modified":1542468074660},{"_id":"public/archives/2017/03/index.html","hash":"bbc7a639dd8aa618a3524b03633fbc2dca5f2546","modified":1542468074660},{"_id":"public/archives/2017/04/index.html","hash":"ed59b0326bfe709aaa8fb78f69ea631b95454d43","modified":1542468074660},{"_id":"public/archives/2017/05/index.html","hash":"0a3181955fde75fec2bc4a01b910256789148355","modified":1542468074660},{"_id":"public/archives/2017/06/index.html","hash":"23df7b9f0ae8739313c217871c382932eb16546b","modified":1542468074660},{"_id":"public/archives/2017/07/page/2/index.html","hash":"90bfaa87682f74514d27dfb33e177ea540a8467d","modified":1542468074660},{"_id":"public/archives/2017/09/index.html","hash":"5a994844cc594f32226ff85f96807ec1d290a381","modified":1542468074660},{"_id":"public/archives/2017/10/index.html","hash":"536f2e97662e8de17e8dd93596342b2ad4cdc86b","modified":1542468074660},{"_id":"public/archives/2017/11/index.html","hash":"f8920a1b3e3989f27f9939c8a67e5e691928cb35","modified":1542468074660},{"_id":"public/archives/2018/01/index.html","hash":"0e505a14fbf0250017d93eeb8eb799833c756304","modified":1542468074661},{"_id":"public/archives/2018/02/index.html","hash":"a7b44cd3ac2ae7be1231d21edf08f01f3808b384","modified":1542468074661},{"_id":"public/archives/2018/03/page/2/index.html","hash":"f7a9b61df385d38ff99f2bf9b55783c23527f13c","modified":1542468074661},{"_id":"public/archives/2018/06/index.html","hash":"ca426acb63521cfc542e8e2441c983c3a7b2b6a2","modified":1542468074661},{"_id":"public/archives/2018/07/index.html","hash":"a32fb62be090463be512796f0b7663a71e21accf","modified":1542468074661},{"_id":"public/archives/2018/08/index.html","hash":"c5a7be50809eebe237144ede98227e1909fd91f3","modified":1542468074661},{"_id":"public/archives/2018/09/index.html","hash":"6189cbca71879c3945f045de97910e81375eb4c5","modified":1542468074661},{"_id":"public/archives/2018/10/index.html","hash":"906fabb47e90f7b154088372299792a365ecc841","modified":1542468074661},{"_id":"public/archives/2018/11/index.html","hash":"79a40ba6cd36f80ce4f68c02ce8bc66f937dec9d","modified":1542468074661},{"_id":"public/categories/前端/index.html","hash":"03b5dae0118da9b9d5ebe69d55d8229872c550b7","modified":1542468074661},{"_id":"public/categories/日常/index.html","hash":"64ec45caf8e8deaa9b36137a4325b7c6948b9c32","modified":1542468074661},{"_id":"public/categories/Javascript修仙之旅/page/3/index.html","hash":"30dcf114beb481ba06e49da215f5a08ea788eced","modified":1542468074661},{"_id":"public/categories/GraphQL/index.html","hash":"0cc50dd91450a88ede199a0c331c36ad58e596e8","modified":1542468074661},{"_id":"public/categories/C/index.html","hash":"a23e8ae57017c08a98c92aecc6f9099570a83cc4","modified":1542468074661},{"_id":"public/categories/计算机网络/index.html","hash":"4f7bfa6c65ee940387c0dc7015c9eadbba045206","modified":1542468074661},{"_id":"public/categories/Draft/index.html","hash":"1e78d8dd9b34e213d525c8db9ffd4ea476be5f07","modified":1542468074661},{"_id":"public/categories/数据库/index.html","hash":"eb4aa6accbcbe958400cb906cfa3ad21d47d57a1","modified":1542468074662},{"_id":"public/categories/Node-js/index.html","hash":"0e0829ae7ebc4b787441283585417136f6642c93","modified":1542468074662},{"_id":"public/categories/Technology/index.html","hash":"8c9cd87c70c659fed0aa0bc74d04423868c039a7","modified":1542468074662},{"_id":"public/categories/docker/index.html","hash":"8b05c99c57b4b7e97d9a71ee8cb2a6c8b86660c3","modified":1542468074662},{"_id":"public/categories/Koa2/index.html","hash":"97fc3c20b154a3fc1fb2cd7f5b3d541d65509db3","modified":1542468074662},{"_id":"public/categories/React-Native/index.html","hash":"d55c1f6b827e91bdce0080ddc7fd46abca6f49af","modified":1542468074662},{"_id":"public/categories/前端工具/index.html","hash":"4f786142f2d74b3f5d08f1fa0222f3caf00942de","modified":1542468074662},{"_id":"public/categories/React/index.html","hash":"233007511b9d806149185272f6398aeb7e31720e","modified":1542468074662},{"_id":"public/categories/数据库/PostgreSQL/index.html","hash":"fee91bdff50998f4fb461ebe74713a6ce268aaae","modified":1542468074662},{"_id":"public/categories/Typescript/index.html","hash":"7fc0b8b8fead24e1a83dc9a69a04404e54f0bca8","modified":1542468074662},{"_id":"public/categories/Webpack/index.html","hash":"1afe6b1d2908144a1fa0f878b7df8fdf49076ccb","modified":1542468074662},{"_id":"public/categories/Vue/index.html","hash":"975787fa7c9d87337a572140c6a8c3693d3b299e","modified":1542468074662},{"_id":"public/categories/Html/index.html","hash":"0448931998e42fd306eb014ad1e4732495d781e5","modified":1542468074662},{"_id":"public/categories/git/index.html","hash":"34c9b493c2f0eb36dfd9ef817b8cb13b90ab623d","modified":1542468074662},{"_id":"public/categories/机器学习/index.html","hash":"1141c0ff3e8b9259f6fdbc3427bf87db8997e321","modified":1542468074662},{"_id":"public/categories/阿里云服务的使用/index.html","hash":"7352b29220f77e59e2f929319c6a8677351bb055","modified":1542468074662},{"_id":"public/categories/数据库/Mongodb/index.html","hash":"73da9d784792bc8772187920b858ccca0c96821d","modified":1542468074663},{"_id":"public/categories/JavaScript/index.html","hash":"751df80aa97d8b1eff72e32285345991b3d9bf49","modified":1542468074663},{"_id":"public/categories/小程序/index.html","hash":"2aa07feb0bdf27ad21e5fc3ea504885a691d2a59","modified":1542468074663},{"_id":"public/categories/数据结构与算法/index.html","hash":"b1ac2e9046c70e041f27c39a24ab6f501ed04d00","modified":1542468074663},{"_id":"public/categories/读书笔记/网络/index.html","hash":"380c96e83043223b4bc22a2bc69988225af75861","modified":1542468074663},{"_id":"public/categories/设计模式/index.html","hash":"9ad0f9ec663d8f98f01286f75bdad7fd96318d99","modified":1542468074663},{"_id":"public/categories/阿里云服务的使用、docker/index.html","hash":"01f07808a851ebeb04b32535e386d5bcbc118027","modified":1542468074663},{"_id":"public/tags/git/index.html","hash":"e8aab475463d9702504f5a568809cb4368d34783","modified":1542468074663},{"_id":"public/tags/php/index.html","hash":"8187c14c7a2f9f7cb7d984807e1508922ab78aee","modified":1542468074663},{"_id":"public/tags/生活/index.html","hash":"82bb79023d27c3870c503242a482b0cb51d40c70","modified":1542468074663},{"_id":"public/tags/GraphQL/index.html","hash":"a5eb15f0b9ee9af2502fbed3f9f7fd1ebe569df8","modified":1542468074663},{"_id":"public/tags/C/index.html","hash":"d7cbae40b548cd0b6076a1bceb9fcbeb921dbb4c","modified":1542468074663},{"_id":"public/tags/计算机网络/index.html","hash":"377003362c2dbd8427f6d7faaf6335ebd3f94344","modified":1542468074663},{"_id":"public/tags/Draft-js/index.html","hash":"37076cc015c81ddb44fa2b74be595fe680e12c24","modified":1542468074663},{"_id":"public/tags/数据库/index.html","hash":"220d0b8be6db51dbf8d879611a5d67b72b7b8dbe","modified":1542468074663},{"_id":"public/tags/Java/index.html","hash":"4e5f4176e4a6c024192bffe45aff180c1a825d5a","modified":1542468074664},{"_id":"public/tags/Python/index.html","hash":"d3fd6c24e6ed8291322df9867938efb5b239fc0c","modified":1542468074664},{"_id":"public/tags/PHP/index.html","hash":"1a3dbab44dcb3465598c6defcf90cda0a5ee1815","modified":1542468074664},{"_id":"public/tags/go/index.html","hash":"2e05bacb228bbf9c15bf72a3fb573754b98d3b26","modified":1542468074664},{"_id":"public/tags/Mongodb/index.html","hash":"a5df4defe64aba2f74aefb730f67fdf0287164fb","modified":1542468074664},{"_id":"public/tags/hexo/index.html","hash":"e81eadb5575bc37ebbb511cf6fd17cdf57515f5c","modified":1542468074664},{"_id":"public/tags/docker/index.html","hash":"dcf93a641a217b45cdb13f54f0ca1314fe5f1f6a","modified":1542468074664},{"_id":"public/tags/Kubernetes/index.html","hash":"62a337ea538c8ff572dfcf0dff463093a2ba1212","modified":1542468074664},{"_id":"public/tags/Koa2/index.html","hash":"d7db70ff7f6fb1a200504b93cbfef5f176d33dbd","modified":1542468074664},{"_id":"public/tags/React-Native/index.html","hash":"fbc2c68fef2736dfca88ebbffcfd6e6d26e0b769","modified":1542468074664},{"_id":"public/tags/前端工具/index.html","hash":"b0cf345b12a99166c523e01eafad358729a21b86","modified":1542468074664},{"_id":"public/tags/PostgreSQL/index.html","hash":"d95a2ce74ea329e05eb260b1e04578620d382e7a","modified":1542468074664},{"_id":"public/tags/Webpack/index.html","hash":"1dd8d38c24eff463d04456e2692565f3adf3ba2d","modified":1542468074664},{"_id":"public/tags/Typescript/index.html","hash":"81217a1a8e8f09d91011095e0ccdf12ccd19e65e","modified":1542468074664},{"_id":"public/tags/Vue-js/index.html","hash":"7f80462f63d6865ad8accb91235b7edf2ad4ca8d","modified":1542468074664},{"_id":"public/tags/机器学习/index.html","hash":"a832b70e0f6e7cb9eadc80c138609cbba2386627","modified":1542468074664},{"_id":"public/tags/Html/index.html","hash":"bbe4ef6a3e9d59a7f2c311b45f60093439a67631","modified":1542468074664},{"_id":"public/tags/Linux/index.html","hash":"bd854ffde5fdb8cbd578323162d432d61fc6c211","modified":1542468074664},{"_id":"public/tags/English/index.html","hash":"aced0706f5cdfa35fd0c8bc9880eaf4687bfe437","modified":1542468074664},{"_id":"public/tags/小程序/index.html","hash":"11bbf17c096d35d3a3fb3ae406d187e98dab3034","modified":1542468074665},{"_id":"public/tags/数据结构与算法/index.html","hash":"02f3f9732de2952def714a11159481d520a76ce1","modified":1542468074665},{"_id":"public/tags/TypeScript/index.html","hash":"ce444132a85e367a991a6fbd35c4ad3e53106269","modified":1542468074665},{"_id":"public/tags/设计模式/index.html","hash":"62ec9ce4015a3dffa9145bf3118d2d3d386579cd","modified":1542468074665},{"_id":"public/about.html","hash":"b035b8fe9dd62ab0ac3ba8d5b4e4e6d83e4b96f5","modified":1542468074665},{"_id":"public/categories/index.html","hash":"a20f78205390b7282cbb0744bf73b204cd7d3782","modified":1542468074665},{"_id":"public/Kubectl常用命令.html","hash":"7565185938e1d97c42cbff8d9307ffecdaccb112","modified":1542468074665},{"_id":"public/部署 Kubernetes 集群.html","hash":"fdd0bbe5e0174f00dee5a5c161535c401889183c","modified":1542468074665},{"_id":"public/打造个人or团队适用的开源项目规范.html","hash":"2e5301908654574c292c979efd265c72d27317dd","modified":1542468074665},{"_id":"public/git-empty-object-file.html","hash":"dbaec7fe53b123f2f110dae3f55178dc63538993","modified":1542468074665},{"_id":"public/es6解构赋值妙用.html","hash":"13539267f50a371ff83b68dffa48dbcd43d8cbb1","modified":1542468074665},{"_id":"public/Koa2—Https.html","hash":"fc9b44cc824d18c37642a73c3fe9d4d06c5b9275","modified":1542468074665},{"_id":"public/PostgreSQL基础.html","hash":"bdfcc2f6bce54bd29368af761588e0af31a7894a","modified":1542468074665},{"_id":"public/CSS之em-rem.html","hash":"5aeb56535d1be5d96a1025d1a64caf155f034f0f","modified":1542468074665},{"_id":"public/K8s基本概念.html","hash":"eff38857265d2007ab3f77a3fdbe0e6216732aae","modified":1542468074666},{"_id":"public/Draft——Entities.html","hash":"9232ac63654d3a3cad8cae1997be637753b744af","modified":1542468074666},{"_id":"public/Draft-RichUtils.html","hash":"56528e2311ecaa793cdd7903886753b5ae26be43","modified":1542468074666},{"_id":"public/Draft.js ——API Basics.html","hash":"c8a20fd6177656cbda2ca0edd14fabf50adce986","modified":1542468074666},{"_id":"public/Webpack-dev-server配合react-router4.html","hash":"552002b300c746c86ab6cdd329ca04a9401a0120","modified":1542468074666},{"_id":"public/Sass小笔记.html","hash":"f52ff17cdc688d12e3ed33e029acccf879befcbe","modified":1542468074666},{"_id":"public/微信客服消息功能全解.html","hash":"af7aca8d7cebd3dae6a3d5ff6d982060cceec9db","modified":1542468074666},{"_id":"public/玩Deno遇到问题的解决方案.html","hash":"cb7ccac370691a1dc279076e9952967ba5a55aa6","modified":1542468074666},{"_id":"public/CSS权威指南.html","hash":"6da995e042786c525198e818c1d61ef91ccc457f","modified":1542468074666},{"_id":"public/天总知乎live小结.html","hash":"0ad184b65c70eb3ea8cc15f9317ae10f6a315000","modified":1542468074666},{"_id":"public/畅读深入理解计算机系统.html","hash":"286d3f6048d9898998aca0fa4b63f707f66ed651","modified":1542468074666},{"_id":"public/Apollo-server-graphql.html","hash":"9a8ab36dfe49380dd88f70d87b098c02313600dc","modified":1542468074666},{"_id":"public/Mongoose小试牛刀.html","hash":"36bbb2c671247e08fa456bb69a5c0077f858ae11","modified":1542468074666},{"_id":"public/vscode快捷键提升效率.html","hash":"6a7f17d5c6fed15ffbb5efea36b2c90f3b83e57b","modified":1542468074666},{"_id":"public/微微学习 Docker.html","hash":"e197e8b3fb1fe60665d7209ef5f166d2cb684393","modified":1542468074666},{"_id":"public/配置阿里云服务器之Docker服务.html","hash":"5713cd4e037849b2a8117a395db251b0d2111773","modified":1542468074666},{"_id":"public/Typescript配置采坑之路.html","hash":"aaaed11a21e151e5a7ce9626b1c3d563960587d5","modified":1542468074666},{"_id":"public/Webpack4配置.html","hash":"7d52f479f0aa91c139dcec7a43c3f27f628039a3","modified":1542468074666},{"_id":"public/事件处理.html","hash":"38ffb352439329fed7c9253b0027c51eff85e0ce","modified":1542468074667},{"_id":"public/contenteditable.html","hash":"e72a40460079bdd01245540878a586372a67dbce","modified":1542468074667},{"_id":"public/设计模式之工厂模式.html","hash":"b838573593fdf6baeee31fe47f883193b79a202e","modified":1542468074667},{"_id":"public/React新生命周期.html","hash":"d88d71614736e2ece6ae09008bf884ad22b6044d","modified":1542468074667},{"_id":"public/RegExp.html","hash":"1564bd6dc438b1c672b4224af0d54d858b711c63","modified":1542468074668},{"_id":"public/《高性能JavaScript》读书笔记.html","hash":"317db79f27f723c3b47c74e49086d1971c8c78b0","modified":1542468074668},{"_id":"public/CSS布局.html","hash":"98af2d7b76c3be742664c7e6a2482624471269aa","modified":1542468074668},{"_id":"public/ReduxSaga.html","hash":"2d9fe7e3e1565e32c67eb53c5a39b9d3801ae8ab","modified":1542468074669},{"_id":"public/ReactNativeCodePush.html","hash":"97119ee12cf238d2ff9de046f195804c0677f115","modified":1542468074669},{"_id":"public/mac连接ssh.html","hash":"edabc5ad1260ba3dc8ba3d3a5ed77a8be3ee19a0","modified":1542468074669},{"_id":"public/跨域资源共享.html","hash":"31d520ba2f4fc210738340134201e896d586d4a6","modified":1542468074669},{"_id":"public/Ajax与Fetch.html","hash":"0669faa51a92be17ca1a2f469f8b63be8282463e","modified":1542468074669},{"_id":"public/浅谈script标签.html","hash":"c6a4f301c7e0274ebf60eb5b362ac7a8007a3576","modified":1542468074669},{"_id":"public/CSS外轮廓.html","hash":"b87094dc5b16d1576891f11b55103ae5c77c26e0","modified":1542468074669},{"_id":"public/Cookie-Session.html","hash":"906c1e82aa6c96cb82756f503a2638fd54db3930","modified":1542468074670},{"_id":"public/CSS3transform.html","hash":"44239291405933471a06b344c54b932eaa68a913","modified":1542468074670},{"_id":"public/数据结构与算法.html","hash":"1215273ba8b12cc4e3a1f35b60adf7ceb69141ee","modified":1542468074670},{"_id":"public/Css3选择器.html","hash":"06063744de54c3028dc887e30a47de3a65f87835","modified":1542468074670},{"_id":"public/Prettier-Options.html","hash":"3e1d17a483665d348d835dc11bca2ecfad810640","modified":1542468074670},{"_id":"public/kaldi文档.html","hash":"13e932bcaecb0b1165a83b213aa79e0acc09b576","modified":1542468074672},{"_id":"public/React-Native踩坑.html","hash":"ede1b253db441876b131ec1a66a89d0b2f0b6354","modified":1542468074672},{"_id":"public/初入Node.html","hash":"1b29cea79453b182af1d369728b0cc3417d99adc","modified":1542468074672},{"_id":"public/JSON.html","hash":"dd7286ebaa2bbc4c0a50fbc1624ac530ba95c458","modified":1542468074672},{"_id":"public/2017年总结.html","hash":"2bb82cf8c6d93c9fe702d745c6aabd3c1ee0ecea","modified":1542468074672},{"_id":"public/《你不知道的JavaScript（上）》读书笔记.html","hash":"917ed3f315819d405deebb46de60a17dd4356edb","modified":1542468074672},{"_id":"public/Parcel.html","hash":"7b26c9cbf2baa00784b2d4de886eff606e55cb02","modified":1542468074673},{"_id":"public/DOM.html","hash":"8e4638b73b982ea452b12c0d592725a29b6d5e49","modified":1542468074673},{"_id":"public/C++初体验.html","hash":"fec147e61e631a004b0b9fc272fb69c1cbdb781f","modified":1542468074673},{"_id":"public/BOM.html","hash":"6450ec78bc38bc25a3045ee2ef6be825cdc3fb85","modified":1542468074673},{"_id":"public/计算机网络读书笔记（一）.html","hash":"09c50326acbe7e107a0cdb5549b66dcf3ccefb42","modified":1542468074673},{"_id":"public/《图解HTTP》读书笔记.html","hash":"9aa57dd9114df5220a944ef65870b409c6f94ab9","modified":1542468074673},{"_id":"public/《编码》读书笔记.html","hash":"80cf4d8d6bf90fcb72f34e5cadbd0b56b996082b","modified":1542468074673},{"_id":"public/单词.html","hash":"d004effd6133687175a9b145ac42e4f022166847","modified":1542468074673},{"_id":"public/例句.html","hash":"0d8b5d89705e77ed5fba90488ff969afdb89df8c","modified":1542468074673},{"_id":"public/时态.html","hash":"148ad1bec1128c70efe8847b17827da0781efca8","modified":1542468074673},{"_id":"public/React生命周期.html","hash":"0a85931acca170c7fdd819bcbdf0723278fdaf01","modified":1542468074673},{"_id":"public/学CSS（一）.html","hash":"e2e36d5f1cd9aa5b965c8695f201e4983fd41047","modified":1542468074673},{"_id":"public/学习CSS(二).html","hash":"94f2203e4d309187a16a4f3d1a3eee3efd00f6e4","modified":1542468074673},{"_id":"public/使用阿里云oss踩得坑.html","hash":"e3ae842337d434d0c90ae3a236e980aba85f8f92","modified":1542468074673},{"_id":"public/支付宝小程序.html","hash":"317f6340466eca58783f95cb9afe26e4f57d57c3","modified":1542468074673},{"_id":"public/CO函数，异步.html","hash":"4102443ea9a0136937ba29e8e9bcfbfbf12b2006","modified":1542468074673},{"_id":"public/JavaScript函数.html","hash":"14865461a96c8c8844872b35e8e13cc9a9d72e0c","modified":1542468074673},{"_id":"public/React Native环境配置.html","hash":"3e70cc35f7c3db7fa5b83574cea3202db8143fca","modified":1542468074673},{"_id":"public/异步.html","hash":"453b7bb9592087b01443dcaa65df387b8dfb8e50","modified":1542468074674},{"_id":"public/Javascript对象.html","hash":"b4b31c9c12132f8557ba7a324cca4319ba3ec4ee","modified":1542468074674},{"_id":"public/redux.html","hash":"c85bb0daec3e65bac070c5a716016eb077c690a0","modified":1542468074674},{"_id":"public/Express.html","hash":"7e9e4af8e5a4283135be362734173d0eacab6d17","modified":1542468074674},{"_id":"public/Generator.html","hash":"85e1d23983ef0698aedb420da7b78c7aebf58600","modified":1542468074674},{"_id":"public/Promise.html","hash":"b31dda5d75bd5c294d6d7f3af0b60a42db59c1a2","modified":1542468074674},{"_id":"public/mongodb.html","hash":"4c31a62c56468f466b2c818bd0710650ced33213","modified":1542468074674},{"_id":"public/Node.html","hash":"cb7cbbfab26e4307ec5e1b8b96bc72aa9f9a5690","modified":1542468074674},{"_id":"public/git.html","hash":"40a657f4deaf6058b16b2278ff95c15541ca8c32","modified":1542468074674},{"_id":"public/yewu.html","hash":"a83ce0bb7798678e66fb9d215f811a87934c7efb","modified":1542468074674},{"_id":"public/评论功能迁移.html","hash":"d799f08c26539c36675527218cb4703a90168d5c","modified":1542468074674},{"_id":"public/E-R图.html","hash":"346c38147d5cd4d4b96432b1b08a561cf0dc4ab9","modified":1542468074674},{"_id":"public/React-Router.html","hash":"d61bfbf783e40c2e4ce83e3d272e9c7747fea44a","modified":1542468074674},{"_id":"public/GraphQL.html","hash":"87f6537395eb1de639cb03f33b61eb5e1fc6a2e0","modified":1542468074674},{"_id":"public/React-State与Props的小心思.html","hash":"0848f212f89774724bd73327ccfa69c9171fae4e","modified":1542468074674},{"_id":"public/JavaScript闭包.html","hash":"e2eb6066c1e0b7279a2e829585f4d27293cf304d","modified":1542468074674},{"_id":"public/JavaScript作用域.html","hash":"69fece8182ecefc234936300b1482bafd0183f98","modified":1542468074674},{"_id":"public/JavaScript——16道算法题.html","hash":"bde7db541ae34098b1544087b03aac6c951801af","modified":1542468074674},{"_id":"public/前端面试题.html","hash":"d4422a3f8d522ccf9286454978b6d6d10e905fde","modified":1542468074675},{"_id":"public/Vue.js小记.html","hash":"b3a054e4b9687d05615b685fbe63b2fc3256c34c","modified":1542468074675},{"_id":"public/Es6箭头函数.html","hash":"dee2cf248aae38341cdf6b15e28d9c19b592339d","modified":1542468074675},{"_id":"public/初入React.html","hash":"382c56a000a5d04d4d8033c85f5b2409caa1b64c","modified":1542468074675},{"_id":"public/JavaScript变量.html","hash":"be4c288709dd53d6dea4468d491bfa83ce03572e","modified":1542468074675},{"_id":"public/JavaScript基本概念copy.html","hash":"0bd906ef913ce9043e7768f778932b66d42142d5","modified":1542468074675},{"_id":"public/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.html","hash":"229af8953fee20629829bf579526f346aafbccc7","modified":1542468074675},{"_id":"public/2017Web程序员技术发展路线图.html","hash":"946156b0635e617ceb753d4c1be324b8d8b48b15","modified":1542468074675},{"_id":"public/配置SSH Key+Next主题以及个性化改动.html","hash":"b6d521e5c043b386b3572a6f7dbb0401993e3b02","modified":1542468074675},{"_id":"public/Node.js+hexo部署博客.html","hash":"feac54bb935a59e3228d58f3907c1cb3a063eb23","modified":1542468074675},{"_id":"public/Hello World.html","hash":"3a9bb683a462904956928a2b0f5182afb568814e","modified":1542468074675},{"_id":"public/archives/index.html","hash":"c30739047a1bdc295d512efd93268c973d3d179c","modified":1542468074675},{"_id":"public/archives/page/2/index.html","hash":"50fa6e4ac9db3f64837d7e2fddc114da97096908","modified":1542468074675},{"_id":"public/archives/page/3/index.html","hash":"7dc7bf875847cd8ece7ad8bd86fcb2df5afad3e7","modified":1542468074676},{"_id":"public/archives/page/4/index.html","hash":"a2a79afe04478e3948a4a3106ec4d8fd2eb02a9a","modified":1542468074676},{"_id":"public/archives/page/5/index.html","hash":"b5028ea99d3a736070029e5c6600675745ce0e83","modified":1542468074676},{"_id":"public/archives/page/6/index.html","hash":"b3736cc6337deb33447a0a2bdf4b95bc975dcb35","modified":1542468074676},{"_id":"public/archives/page/7/index.html","hash":"59e223a142a113f829df4c827639b4ce7c31a227","modified":1542468074676},{"_id":"public/archives/page/8/index.html","hash":"23ece2e680c106c25bb487789c65d3a513cc7d0a","modified":1542468074676},{"_id":"public/archives/page/9/index.html","hash":"4ded597cb0c6d8cde603a511bbe0e4aea2b2232a","modified":1542468074676},{"_id":"public/archives/page/10/index.html","hash":"e3b0fbd862d6da62d650c267b4ff102a375d67e2","modified":1542468074676},{"_id":"public/archives/2017/index.html","hash":"e9029af703df2049b148a08e2b87c7725041ac46","modified":1542468074676},{"_id":"public/archives/2017/page/2/index.html","hash":"9260f19151b51fcc3dcb433f28a9bdd0b8bbb1c1","modified":1542468074677},{"_id":"public/archives/2017/page/3/index.html","hash":"307e5bacb45c8c79c6ed5c85d2d5263879d672cd","modified":1542468074677},{"_id":"public/archives/2017/page/4/index.html","hash":"484c1389236ef70599de66b4879bfd257c98dfba","modified":1542468074677},{"_id":"public/archives/2017/page/5/index.html","hash":"2423b578e8852af141b8a4cfae8d9ddebadd0f69","modified":1542468074677},{"_id":"public/archives/2017/07/index.html","hash":"53757233eae4f0a5af4459792e8daca0d2e6d337","modified":1542468074677},{"_id":"public/archives/2017/08/index.html","hash":"75becea787862ccf464da02c9c39729b14aec252","modified":1542468074677},{"_id":"public/archives/2017/12/index.html","hash":"99027419f104fcd6c972a4fc21d49e7f3f42bbd7","modified":1542468074677},{"_id":"public/archives/2018/index.html","hash":"030763be5ecb871db781b201d14e05b5cdde718f","modified":1542468074677},{"_id":"public/archives/2018/page/2/index.html","hash":"1d4fa3beb5ffcb99c999d0cbeb4767da13c8ac7d","modified":1542468074677},{"_id":"public/archives/2018/page/3/index.html","hash":"255bc0bc027ae23b67e55a7fcdaf0f25d9dd5814","modified":1542468074677},{"_id":"public/archives/2018/page/4/index.html","hash":"bf0fc6d463730cc5f73096345e4ddaceaadfa6af","modified":1542468074678},{"_id":"public/archives/2018/page/5/index.html","hash":"ac0a3efe165c866d47ca02a158420b336b479f2a","modified":1542468074678},{"_id":"public/archives/2018/03/index.html","hash":"57913ef458c00a83e8e3134bd469324d91535c44","modified":1542468074678},{"_id":"public/archives/2018/04/index.html","hash":"7dbe5ea82bc42e7c62474219824eb7326ba1aab1","modified":1542468074678},{"_id":"public/archives/2018/05/index.html","hash":"cc9374ae6b44c0dc537cf0bb9d95478c04ad2ced","modified":1542468074678},{"_id":"public/categories/Javascript修仙之旅/index.html","hash":"510f11edeaaf26d284d64c2258ca97ff9b32a7bd","modified":1542468074678},{"_id":"public/categories/Javascript修仙之旅/page/2/index.html","hash":"ba5b010f1e78c5a6f076dc88fe98f3487fe2630a","modified":1542468074678},{"_id":"public/categories/CSS/index.html","hash":"8eb1e8709dbdfd13bb61254ed2b0b256fa694fad","modified":1542468074678},{"_id":"public/categories/读书笔记/index.html","hash":"089f395083c8ca0f117bf1da9ebd927ae5d8dc26","modified":1542468074678},{"_id":"public/index.html","hash":"d68a3eb6b78cf5183387fcfa1efe5817fa0d8e91","modified":1542468074678},{"_id":"public/page/2/index.html","hash":"4bb0aad72238ebf7250af5bab5d5d1848107fbdb","modified":1542468074678},{"_id":"public/page/3/index.html","hash":"012c1669528be98213b3f9a49bfb54bedc5539a5","modified":1542468074679},{"_id":"public/page/4/index.html","hash":"558fdd41980d699d1606cb810447fbac6d4c9de0","modified":1542468074679},{"_id":"public/page/5/index.html","hash":"eebdb4ebbaaeb141cc0336b869494c6c6f526ba1","modified":1542468074679},{"_id":"public/page/6/index.html","hash":"b05a95dbce8159bb2f19d2c5ec285505386e9395","modified":1542468074679},{"_id":"public/page/7/index.html","hash":"37950a31f27f135503a2e87b70059021c2aa1ad4","modified":1542468074679},{"_id":"public/page/8/index.html","hash":"b794656c3aa85909147930afc126b3e525343df8","modified":1542468074679},{"_id":"public/page/9/index.html","hash":"677a561d033a6a3c7def9ede7f913bb03e8f6dc4","modified":1542468074679},{"_id":"public/page/10/index.html","hash":"69ab23df200943510ad793a0a0da52d33610cf40","modified":1542468074679},{"_id":"public/tags/JavaScript/index.html","hash":"cf44e323b870a887a9f610973da940af9c25ccf0","modified":1542468074679},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"124e85aaa2bc1b90a7c8055afa4fb8663609a649","modified":1542468074679},{"_id":"public/tags/JavaScript/page/3/index.html","hash":"583ffbcc98cb082a5663478b984e8e643280398c","modified":1542468074679},{"_id":"public/tags/JavaScript/page/4/index.html","hash":"5fd3e8a2e700fb578beb8d4e2fa7af1399e42613","modified":1542468074679},{"_id":"public/tags/node-js/index.html","hash":"424bbc2d7002ad08fa293e5f0ef05cfe878fb41e","modified":1542468074679},{"_id":"public/tags/CSS/index.html","hash":"5f3a4b9d3808b7d6cad662cfbc21629baf12078c","modified":1542468074679},{"_id":"public/tags/读书笔记/index.html","hash":"a1c5fcfb4da58a3744303951a212ecceb67cb69d","modified":1542468074679},{"_id":"public/tags/React/index.html","hash":"d437971429d8fce999a0acf4a7ffec1cce2ffbf3","modified":1542468074680},{"_id":"public/CNAME","hash":"a0fdb576b5b55d30972a9bd51389905068aac6d5","modified":1542468074703},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1542468074703},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1542468074704},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1542468074704},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1542468074704},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1542468074704},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1542468074704},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1542468074704},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1542468074704},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1542468074704},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1542468074704},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1542468074704},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1542468074704},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542468074704},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1542468074704},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1542468074704},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1542468074705},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1542468074705},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1542468074705},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1542468074705},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1542468074706},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1542468074706},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1542468074706},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1542468074706},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1542468074706},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1542468074706},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1542468074706},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1542468074706},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1542468074706},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1542468074706},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1542468074706},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1542468074706},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1542468074706},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1542468074706},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1542468077388},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1542468077401},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1542468077443},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1542468077443},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1542468077443},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1542468077443},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1542468077443},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1542468077443},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1542468077443},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1542468077443},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1542468077443},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1542468077443},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1542468077444},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1542468077444},{"_id":"public/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1542468077444},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1542468077444},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1542468077444},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1542468077444},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1542468077446},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1542468077447},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1542468077447},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1542468077447},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1542468077448},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1542468077448},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1542468077449},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1542468077449},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1542468077449},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1542468077449},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1542468077449},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1542468077450},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1542468077451},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1542468077451},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1542468077451},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1542468077451},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1542468077451},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1542468077451},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1542468077451},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1542468077451},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1542468077451},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1542468077451},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1542468077451},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1542468077451},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1542468077451},{"_id":"public/css/main.css","hash":"0e0b2b44219e02c3a6bb218bd03f1276a911502c","modified":1542468077451},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1542468077452},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1542468077453},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1542468077453},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1542468077453},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1542468077453},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1542468077453},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1542468077453},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1542468077453},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1542468077454},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1542468077454},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1542468077454},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1542468077454},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1542468077454},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1542468077454},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1542468077455},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1542468077455},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1542468077455},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1542468077455},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1542468077455},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1542468077455},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1542468077455},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1542468077457},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1542468077457},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1542468077732}],"Category":[{"name":"前端","_id":"cjollnbla0006unfy7a859659"},{"name":"日常","_id":"cjollnblv000dunfyb33zp55y"},{"name":"Javascript修仙之旅","_id":"cjollnbm4000iunfyhn3ml0vi"},{"name":"GraphQL","_id":"cjollnbmb000ounfyuigzopjn"},{"name":"C++","_id":"cjollnbmz0016unfy7bi97c4y"},{"name":"CSS","_id":"cjollnbnt001funfywd72xfuf"},{"name":"读书笔记","_id":"cjollnbp60029unfyl4fet972"},{"name":"计算机网络","_id":"cjollnbpl002iunfy4htxizcf"},{"name":"Draft","_id":"cjollnbpy002zunfylsv9g6no"},{"name":"数据库","_id":"cjollnbqs003ounfy01wysf3z"},{"name":"Node.js","_id":"cjollnbr6003wunfyzdzyk03r"},{"name":"Technology","_id":"cjollnbrh0045unfysrbibn7p"},{"name":"docker","_id":"cjollnbsk004tunfybx2cbted"},{"name":"Koa2","_id":"cjollnbsr0052unfyjawdjwl7"},{"name":"React Native","_id":"cjollnbtd005ounfyabeg7vqg"},{"name":"前端工具","_id":"cjollnbtk005wunfyo6dobtbg"},{"name":"React","_id":"cjollnbtq0064unfyk8ybkybc"},{"name":"PostgreSQL","parent":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbtv006dunfyke7navub"},{"name":"Typescript","_id":"cjollnbvg007wunfycpkh41ff"},{"name":"Webpack","_id":"cjollnbvk0084unfyoyioo15q"},{"name":"Vue","_id":"cjollnbw8008dunfyrnvoq0h5"},{"name":"Html","_id":"cjollnbwh008uunfy3ls6l1td"},{"name":"git","_id":"cjollnbwo0093unfyly871o1h"},{"name":"机器学习","_id":"cjollnbwz009junfymfw7rmzr"},{"name":"阿里云服务的使用","_id":"cjollnbxa009sunfyz162toc5"},{"name":"Mongodb","parent":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbxf00a0unfy5al3axoo"},{"name":"JavaScript","_id":"cjollnbxi00a7unfy798395cl"},{"name":"小程序","_id":"cjollnbxr00ajunfye01k4uho"},{"name":"数据结构与算法","_id":"cjollnbxt00awunfy8rmzeutg"},{"name":"网络","parent":"cjollnbp60029unfyl4fet972","_id":"cjollnbxv00b2unfyb0e94zl1"},{"name":"设计模式","_id":"cjollnbxw00b9unfy9fyhkx7q"},{"name":"阿里云服务的使用、docker","_id":"cjollnbxy00bfunfyb29v2zi7"}],"Data":[],"Page":[{"_content":"AriLx1cNFe","source":"baidu_verify_AriLx1cNFe.html","raw":"AriLx1cNFe","date":"2018-11-17T15:19:10.241Z","updated":"2018-11-17T15:18:37.059Z","path":"baidu_verify_AriLx1cNFe.html","title":"","comments":1,"layout":"page","_id":"cjollnbg30000unfyz78d9o6j","content":"AriLx1cNFe","site":{"data":{}},"excerpt":"","more":"AriLx1cNFe"},{"_content":"google-site-verification: googlec48318aba92c2f4e.html","source":"googlec48318aba92c2f4e.html","raw":"google-site-verification: googlec48318aba92c2f4e.html","date":"2018-10-26T15:17:56.364Z","updated":"2017-09-25T03:12:13.000Z","path":"googlec48318aba92c2f4e.html","title":"","comments":1,"layout":"page","_id":"cjollnbh80001unfyn9rdvd8k","content":"google-site-verification: googlec48318aba92c2f4e.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlec48318aba92c2f4e.html"},{"title":"关于","date":"2017-03-19T05:24:31.000Z","comments":0,"layout":"page","_content":"东扯扯西扯扯！\n<!--more-->\n\n----------\n\n关于我\n---\n\n|               |                        |\n| :-----------: | ---------------------- |\n|  昵称-Nickname  | XuZiHao/壮壮/Adherent    |\n| 属性-Attribute  | 汉子 摩羯                  |\n| 坐标-Coordinate | Beijing     Zhejiang   |\n|  目前-Present   | 大三                     |\n|   技能-Skills   | html/css/js/java/linux |\n|  语言-Language  | 普通话/温州话/English        |\n\n\n关于本站\n----\n\n|              |                            |\n| :----------: | -------------------------- |\n|   博名-Blog    | Aherent                    |\n| 诞生日-Birthday | 2017-3-18                  |\n| 家庭地址-Address | [xuzihao.fun](xuzihao.fun) |\n|  宗旨-Purpose  | 做记录、分享                     |\n\n\n想法\n--\n\n我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。\n到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。\n大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！\n\n成长路上所得荣誉\n--------\n\n- 幼儿园多次得到小红花\n- 2017／4 北京市蓝桥杯C/C++软件设计大赛 **三等奖**\n- 2016/12 北京吉利学院软件设计大赛（C语言） **一等奖**\n- 2016/11 北京吉利学院网络设计大赛 **二等奖**\n\n\n\n项目\n--\n\n- 基于React技术栈（React-router4、Redux、Mock.js）自己的博客\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-03-19 13:24:31\ncomments: false\nlayout: page\npermalink: about\n---\n东扯扯西扯扯！\n<!--more-->\n\n----------\n\n关于我\n---\n\n|               |                        |\n| :-----------: | ---------------------- |\n|  昵称-Nickname  | XuZiHao/壮壮/Adherent    |\n| 属性-Attribute  | 汉子 摩羯                  |\n| 坐标-Coordinate | Beijing     Zhejiang   |\n|  目前-Present   | 大三                     |\n|   技能-Skills   | html/css/js/java/linux |\n|  语言-Language  | 普通话/温州话/English        |\n\n\n关于本站\n----\n\n|              |                            |\n| :----------: | -------------------------- |\n|   博名-Blog    | Aherent                    |\n| 诞生日-Birthday | 2017-3-18                  |\n| 家庭地址-Address | [xuzihao.fun](xuzihao.fun) |\n|  宗旨-Purpose  | 做记录、分享                     |\n\n\n想法\n--\n\n我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。\n到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。\n大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！\n\n成长路上所得荣誉\n--------\n\n- 幼儿园多次得到小红花\n- 2017／4 北京市蓝桥杯C/C++软件设计大赛 **三等奖**\n- 2016/12 北京吉利学院软件设计大赛（C语言） **一等奖**\n- 2016/11 北京吉利学院网络设计大赛 **二等奖**\n\n\n\n项目\n--\n\n- 基于React技术栈（React-router4、Redux、Mock.js）自己的博客\n\n","updated":"2017-12-07T01:52:37.159Z","path":"about.html","_id":"cjollnbkn0002unfy75fdsyl8","content":"<p>东扯扯西扯扯！<br><a id=\"more\"></a></p>\n<hr>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">昵称-Nickname</td>\n<td>XuZiHao/壮壮/Adherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">属性-Attribute</td>\n<td>汉子 摩羯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">坐标-Coordinate</td>\n<td>Beijing     Zhejiang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目前-Present</td>\n<td>大三</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技能-Skills</td>\n<td>html/css/js/java/linux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语言-Language</td>\n<td>普通话/温州话/English</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">博名-Blog</td>\n<td>Aherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">诞生日-Birthday</td>\n<td>2017-3-18</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">家庭地址-Address</td>\n<td><a href=\"xuzihao.fun\">xuzihao.fun</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">宗旨-Purpose</td>\n<td>做记录、分享</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。<br>到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。<br>大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！</p>\n<h2 id=\"成长路上所得荣誉\"><a href=\"#成长路上所得荣誉\" class=\"headerlink\" title=\"成长路上所得荣誉\"></a>成长路上所得荣誉</h2><ul>\n<li>幼儿园多次得到小红花</li>\n<li>2017／4 北京市蓝桥杯C/C++软件设计大赛 <strong>三等奖</strong></li>\n<li>2016/12 北京吉利学院软件设计大赛（C语言） <strong>一等奖</strong></li>\n<li>2016/11 北京吉利学院网络设计大赛 <strong>二等奖</strong></li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li>基于React技术栈（React-router4、Redux、Mock.js）自己的博客</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>东扯扯西扯扯！<br>","more":"</p>\n<hr>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">昵称-Nickname</td>\n<td>XuZiHao/壮壮/Adherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">属性-Attribute</td>\n<td>汉子 摩羯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">坐标-Coordinate</td>\n<td>Beijing     Zhejiang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目前-Present</td>\n<td>大三</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技能-Skills</td>\n<td>html/css/js/java/linux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语言-Language</td>\n<td>普通话/温州话/English</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">博名-Blog</td>\n<td>Aherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">诞生日-Birthday</td>\n<td>2017-3-18</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">家庭地址-Address</td>\n<td><a href=\"xuzihao.fun\">xuzihao.fun</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">宗旨-Purpose</td>\n<td>做记录、分享</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。<br>到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。<br>大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！</p>\n<h2 id=\"成长路上所得荣誉\"><a href=\"#成长路上所得荣誉\" class=\"headerlink\" title=\"成长路上所得荣誉\"></a>成长路上所得荣誉</h2><ul>\n<li>幼儿园多次得到小红花</li>\n<li>2017／4 北京市蓝桥杯C/C++软件设计大赛 <strong>三等奖</strong></li>\n<li>2016/12 北京吉利学院软件设计大赛（C语言） <strong>一等奖</strong></li>\n<li>2016/11 北京吉利学院网络设计大赛 <strong>二等奖</strong></li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li>基于React技术栈（React-router4、Redux、Mock.js）自己的博客</li>\n</ul>"},{"title":"留言","date":"2017-03-21T08:28:36.000Z","_content":"","source":"guestbook/index.md","raw":"---\ntitle: 留言\ndate: 2017-03-21 16:28:36\n---\n","updated":"2017-03-21T08:28:56.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cjollnbky0004unfyo0q71pbw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-03-21T06:54:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-21 14:54:10\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-21T12:58:44.000Z","path":"categories/index.html","layout":"page","_id":"cjollnblg0008unfyww55yohi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: 标签\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\ncomments: false\n---","updated":"2017-12-13T13:40:04.812Z","path":"tags/index.html","layout":"page","_id":"cjollnblq000aunfyw5fyqa28","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017Web程序员技术发展路线图","date":"2017-03-22T04:31:52.000Z","comments":1,"layout":"post","_content":"这个是国外一个工程师的总结，在知乎上的[前端技术文章精选专栏](https://zhuanlan.zhihu.com/p/25897612)看见的，看着实用转来到这。\n\n> 2017 年 Web 开发工程师技术发展路线图\n\n下面的脑图展现了**前端**、**后端**以及 **devops 技术栈**的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。\n<!--more-->\n\n简介\n==\n![2017发展](/images/2017fazhang.png)\n\n前端开发工程师路线图\n--\n![前端](/images/qianduan.png)\n\n后端开发工程师路线图\n--\n对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！\n![后端](/images/houduan.png)\n\nDevOps\n--\n\n![DevOps](/images/DevOps.png)\n\n[GitHub链接:][1]\n  [1] : kamranahmedse/developer-roadmap","source":"_posts/2017Web程序员技术发展路线图.md","raw":"---\ntitle: 2017Web程序员技术发展路线图\ndate: 2017-03-22 12:31:52\ncomments: true\nlayout: post\ntags: [JavaScript,node.js,git,php]\ncategories: 前端\n---\n这个是国外一个工程师的总结，在知乎上的[前端技术文章精选专栏](https://zhuanlan.zhihu.com/p/25897612)看见的，看着实用转来到这。\n\n> 2017 年 Web 开发工程师技术发展路线图\n\n下面的脑图展现了**前端**、**后端**以及 **devops 技术栈**的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。\n<!--more-->\n\n简介\n==\n![2017发展](/images/2017fazhang.png)\n\n前端开发工程师路线图\n--\n![前端](/images/qianduan.png)\n\n后端开发工程师路线图\n--\n对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！\n![后端](/images/houduan.png)\n\nDevOps\n--\n\n![DevOps](/images/DevOps.png)\n\n[GitHub链接:][1]\n  [1] : kamranahmedse/developer-roadmap","slug":"2017Web程序员技术发展路线图","published":1,"updated":"2017-09-22T09:49:06.000Z","photos":[],"link":"","_id":"cjollnbkq0003unfybmd0qqo7","content":"<p>这个是国外一个工程师的总结，在知乎上的<a href=\"https://zhuanlan.zhihu.com/p/25897612\" target=\"_blank\" rel=\"noopener\">前端技术文章精选专栏</a>看见的，看着实用转来到这。</p>\n<blockquote>\n<p>2017 年 Web 开发工程师技术发展路线图</p>\n</blockquote>\n<p>下面的脑图展现了<strong>前端</strong>、<strong>后端</strong>以及 <strong>devops 技术栈</strong>的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。<br><a id=\"more\"></a></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"/images/2017fazhang.png\" alt=\"2017发展\"></p>\n<h2 id=\"前端开发工程师路线图\"><a href=\"#前端开发工程师路线图\" class=\"headerlink\" title=\"前端开发工程师路线图\"></a>前端开发工程师路线图</h2><p><img src=\"/images/qianduan.png\" alt=\"前端\"></p>\n<h2 id=\"后端开发工程师路线图\"><a href=\"#后端开发工程师路线图\" class=\"headerlink\" title=\"后端开发工程师路线图\"></a>后端开发工程师路线图</h2><p>对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！<br><img src=\"/images/houduan.png\" alt=\"后端\"></p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p><img src=\"/images/DevOps.png\" alt=\"DevOps\"></p>\n<p>[GitHub链接:][1]<br>  [1] : kamranahmedse/developer-roadmap</p>\n","site":{"data":{}},"excerpt":"<p>这个是国外一个工程师的总结，在知乎上的<a href=\"https://zhuanlan.zhihu.com/p/25897612\" target=\"_blank\" rel=\"noopener\">前端技术文章精选专栏</a>看见的，看着实用转来到这。</p>\n<blockquote>\n<p>2017 年 Web 开发工程师技术发展路线图</p>\n</blockquote>\n<p>下面的脑图展现了<strong>前端</strong>、<strong>后端</strong>以及 <strong>devops 技术栈</strong>的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。<br>","more":"</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"/images/2017fazhang.png\" alt=\"2017发展\"></p>\n<h2 id=\"前端开发工程师路线图\"><a href=\"#前端开发工程师路线图\" class=\"headerlink\" title=\"前端开发工程师路线图\"></a>前端开发工程师路线图</h2><p><img src=\"/images/qianduan.png\" alt=\"前端\"></p>\n<h2 id=\"后端开发工程师路线图\"><a href=\"#后端开发工程师路线图\" class=\"headerlink\" title=\"后端开发工程师路线图\"></a>后端开发工程师路线图</h2><p>对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！<br><img src=\"/images/houduan.png\" alt=\"后端\"></p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p><img src=\"/images/DevOps.png\" alt=\"DevOps\"></p>\n<p>[GitHub链接:][1]<br>  [1] : kamranahmedse/developer-roadmap</p>"},{"title":"2017年自己的前端总结","date":"2017-12-28T16:18:00.000Z","comments":1,"layout":"post","_content":"# 2017年自己的前端总结\n\n​\t转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。\n\n​\t现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？\n\n![技术树](http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png)\n<!--more-->\n​\t整理了一下，看着很多，其实很多只是会用，还没到深入研究其原理！不过我很好奇为什么会这么做，然后会去看看源码。但是功力不够。。还需要继续修炼！\n\n## 书\n\n读万卷书，行万里路？ 在2017年，当我读书的时候，我觉得这句话可能要改一下：\n\n> 读万卷书，思万/千万遍，写数次，行万里路。\n>\n> \n>\n> ps:辣鸡文笔，请勿模仿，欢迎吐槽！\n\n​\t因为我大多数读的是技术书，文学类也有。不思考？光去看这些书没有任何用处，看了不懂继续看，看了就忘？为何不去把书上的东西都敲下来呢。\n\n​\t我突然发现这种学习方法虽然麻烦但是很有效果。而且一个个知识点虽然看着零散，但是我每次都在纸上把思维导图画出来，发现他们都是连通的。而且边思考边去把逻辑理清，真的事半功倍。\n\n>  ps: 虽然。。有用但。。时间花的真的很多！！有些时候看十几页1个小时就过去了 T T！\n\n第一次写总结，就把我的书单全放上来吧：\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A61.png)\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A62.png)\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A63.png)\n\n这个书单可以到我的[Github](https://github.com/Adherentman)上面看。只要读完了我都会去更新状态还有最近看的书我都写了读书笔记。\n\n\n\n## 项目\n\n​\t在2017年7月，我第一次去实习。在公司里发现了自己在学校或者自学永远看不到的技术。还有身边那么多厉害的人，他们懂的真的特别多。特别是冰哥（公司老大），几乎啥都知道，不懂得只要一伙儿就能信手拈来。\n\n​\t还记得他说的一句话：没有什么是现在不该学的，学任何东西不要有那么多条条框框的限制住自己，只要你想要知道，那么就该去做去“玩”。\n\n所以我一点都不畏惧前端那么快的变化，而且我深知基础牢固的重要性。\n\n​\t第一个接触的项目就是公司后台，技术栈为React技术栈 + Mongodb + Graphql + Gulp + docker这些东西整合一起，我整整看了10天。。不过在那2个月内进步神速。学会了如何去谈需求/业务，如何去设计mongodb，如何去处理逻辑，如何去写日志（log），如何去看源码，如何去看文档，如何去用框架等等。。让我从一个无知的少年变成了小小的“全栈“程序员。\n\n​\t之后就是现在正在采坑的是React-Native + Expo。老大放手让我去采坑。。每天被坑的不要不要的，挣扎在一大堆一大堆的英文文档、还有源码、还有在Github上给Expo团队提`Issue`！还把语言改成了了TypeScript这个Js超集语言。有了类型真的很棒，和VSCode搭配写代码，食用更佳！😋\n\n​\t公司的微信小程序项目我没有参加（9月份回学校了！）。。不过。。我希望自己可以去学习小程序。毕竟今天出的小游戏可把我玩坏了！\n\n​\t哦对了还有自己的毕设。。也是React技术栈 + Mock.js（Easy Mock大搜车开源）做的自己的博客！\n\n## 2018展望\n\n​\t在2018，我觉得自己该学习的技术：\n\n### Progressive Web Apps\n\nPWA就是Google希望用现代浏览器的技术来提供更像移动应用程序Web的体验！PWA 的基础是一个 `manifest.json` 文件和对 [service workers](http://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/primers/service-workers/) 的利用。\n\n为啥该学呢！因为。。最近Safari终于支持了Service Worker！\n\n### Serverless 架构\n\nServerless是一种架构理念，指的是以服务的形式来提供计算能力而不是以服务器形式，让开发者在构建应用的过程中不用过多考虑基础设施的问题。\n\n> 也就是说我们前端er可以安安心心的写app、做网页、做游戏？？\n\n\n\n### Node.js and Python\n\n会系统的（各种计算机基础以及数据库之类的）去学习Node.js，我相信这是门很强大的后端语言。\n\nPython会去涉及。\n\n### CSS in JS\n\n这几天才试了试CSS in JS体验很棒，`styled-component`像写组件一样写css。很多特性功能还需要去学习。\n\n\n\n### Graphql\n\n在Github宣布v4版本，API都换成Graphql 我感觉会在REST之上占一席之地。因为我用过Graphql。真的是一次请求能获取我们所需要的所有数据！重要的是，数据简洁、明了。\n\n\n\n### Angular and vue\n\nangular发布了v4而后马上发布了v5，让我很想去学习一下这个框架。还有还有Vue！这个感觉国人都会的框架。。而我。。就看过文档，连TODO都没写过。。\n\n\n\n### 3D and 2D\n\nCanvas、pixi.js、svg等等这些都是我想去学习的，特别是canvas很神奇，最近就会去着手尝试！\n\n\n\n### 移动端\n\nReact-native在采坑，最近在看Swift的语法，会去学习原生app开发吧。但是重心都会在前端。Kotlin也会看吧。还有Weex看见过阿里的有个框架可以用React写转换成Weex。。名字忘了。下次找出来！\n\n\n\n最后最重要的。。。计算机基础，巴拉巴拉巴拉巴拉🤓！！！！\n\n\n\nOK，大家共勉。加油！\n\n\n\n有写错的地方欢迎指出！！\n\n\n\n附上自己的地址：\n\n* Github: [github](https://github.com/Adherentman)\n* 博客： [blog](xuzihao.fun)","source":"_posts/2017年总结.md","raw":"---\ntitle: 2017年自己的前端总结\ndate: 2017-12-29 00:18\ncomments: true\nlayout: post\ntags: 生活\ncategories: 日常\n---\n# 2017年自己的前端总结\n\n​\t转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。\n\n​\t现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？\n\n![技术树](http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png)\n<!--more-->\n​\t整理了一下，看着很多，其实很多只是会用，还没到深入研究其原理！不过我很好奇为什么会这么做，然后会去看看源码。但是功力不够。。还需要继续修炼！\n\n## 书\n\n读万卷书，行万里路？ 在2017年，当我读书的时候，我觉得这句话可能要改一下：\n\n> 读万卷书，思万/千万遍，写数次，行万里路。\n>\n> \n>\n> ps:辣鸡文笔，请勿模仿，欢迎吐槽！\n\n​\t因为我大多数读的是技术书，文学类也有。不思考？光去看这些书没有任何用处，看了不懂继续看，看了就忘？为何不去把书上的东西都敲下来呢。\n\n​\t我突然发现这种学习方法虽然麻烦但是很有效果。而且一个个知识点虽然看着零散，但是我每次都在纸上把思维导图画出来，发现他们都是连通的。而且边思考边去把逻辑理清，真的事半功倍。\n\n>  ps: 虽然。。有用但。。时间花的真的很多！！有些时候看十几页1个小时就过去了 T T！\n\n第一次写总结，就把我的书单全放上来吧：\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A61.png)\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A62.png)\n\n![书单](http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A63.png)\n\n这个书单可以到我的[Github](https://github.com/Adherentman)上面看。只要读完了我都会去更新状态还有最近看的书我都写了读书笔记。\n\n\n\n## 项目\n\n​\t在2017年7月，我第一次去实习。在公司里发现了自己在学校或者自学永远看不到的技术。还有身边那么多厉害的人，他们懂的真的特别多。特别是冰哥（公司老大），几乎啥都知道，不懂得只要一伙儿就能信手拈来。\n\n​\t还记得他说的一句话：没有什么是现在不该学的，学任何东西不要有那么多条条框框的限制住自己，只要你想要知道，那么就该去做去“玩”。\n\n所以我一点都不畏惧前端那么快的变化，而且我深知基础牢固的重要性。\n\n​\t第一个接触的项目就是公司后台，技术栈为React技术栈 + Mongodb + Graphql + Gulp + docker这些东西整合一起，我整整看了10天。。不过在那2个月内进步神速。学会了如何去谈需求/业务，如何去设计mongodb，如何去处理逻辑，如何去写日志（log），如何去看源码，如何去看文档，如何去用框架等等。。让我从一个无知的少年变成了小小的“全栈“程序员。\n\n​\t之后就是现在正在采坑的是React-Native + Expo。老大放手让我去采坑。。每天被坑的不要不要的，挣扎在一大堆一大堆的英文文档、还有源码、还有在Github上给Expo团队提`Issue`！还把语言改成了了TypeScript这个Js超集语言。有了类型真的很棒，和VSCode搭配写代码，食用更佳！😋\n\n​\t公司的微信小程序项目我没有参加（9月份回学校了！）。。不过。。我希望自己可以去学习小程序。毕竟今天出的小游戏可把我玩坏了！\n\n​\t哦对了还有自己的毕设。。也是React技术栈 + Mock.js（Easy Mock大搜车开源）做的自己的博客！\n\n## 2018展望\n\n​\t在2018，我觉得自己该学习的技术：\n\n### Progressive Web Apps\n\nPWA就是Google希望用现代浏览器的技术来提供更像移动应用程序Web的体验！PWA 的基础是一个 `manifest.json` 文件和对 [service workers](http://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/primers/service-workers/) 的利用。\n\n为啥该学呢！因为。。最近Safari终于支持了Service Worker！\n\n### Serverless 架构\n\nServerless是一种架构理念，指的是以服务的形式来提供计算能力而不是以服务器形式，让开发者在构建应用的过程中不用过多考虑基础设施的问题。\n\n> 也就是说我们前端er可以安安心心的写app、做网页、做游戏？？\n\n\n\n### Node.js and Python\n\n会系统的（各种计算机基础以及数据库之类的）去学习Node.js，我相信这是门很强大的后端语言。\n\nPython会去涉及。\n\n### CSS in JS\n\n这几天才试了试CSS in JS体验很棒，`styled-component`像写组件一样写css。很多特性功能还需要去学习。\n\n\n\n### Graphql\n\n在Github宣布v4版本，API都换成Graphql 我感觉会在REST之上占一席之地。因为我用过Graphql。真的是一次请求能获取我们所需要的所有数据！重要的是，数据简洁、明了。\n\n\n\n### Angular and vue\n\nangular发布了v4而后马上发布了v5，让我很想去学习一下这个框架。还有还有Vue！这个感觉国人都会的框架。。而我。。就看过文档，连TODO都没写过。。\n\n\n\n### 3D and 2D\n\nCanvas、pixi.js、svg等等这些都是我想去学习的，特别是canvas很神奇，最近就会去着手尝试！\n\n\n\n### 移动端\n\nReact-native在采坑，最近在看Swift的语法，会去学习原生app开发吧。但是重心都会在前端。Kotlin也会看吧。还有Weex看见过阿里的有个框架可以用React写转换成Weex。。名字忘了。下次找出来！\n\n\n\n最后最重要的。。。计算机基础，巴拉巴拉巴拉巴拉🤓！！！！\n\n\n\nOK，大家共勉。加油！\n\n\n\n有写错的地方欢迎指出！！\n\n\n\n附上自己的地址：\n\n* Github: [github](https://github.com/Adherentman)\n* 博客： [blog](xuzihao.fun)","slug":"2017年总结","published":1,"updated":"2017-12-28T16:23:57.403Z","photos":[],"link":"","_id":"cjollnbl40005unfyqj1rb3kn","content":"<h1 id=\"2017年自己的前端总结\"><a href=\"#2017年自己的前端总结\" class=\"headerlink\" title=\"2017年自己的前端总结\"></a>2017年自己的前端总结</h1><p>​    转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。</p>\n<p>​    现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？</p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png\" alt=\"技术树\"><br><a id=\"more\"></a><br>​    整理了一下，看着很多，其实很多只是会用，还没到深入研究其原理！不过我很好奇为什么会这么做，然后会去看看源码。但是功力不够。。还需要继续修炼！</p>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><p>读万卷书，行万里路？ 在2017年，当我读书的时候，我觉得这句话可能要改一下：</p>\n<blockquote>\n<p>读万卷书，思万/千万遍，写数次，行万里路。</p>\n<p>ps:辣鸡文笔，请勿模仿，欢迎吐槽！</p>\n</blockquote>\n<p>​    因为我大多数读的是技术书，文学类也有。不思考？光去看这些书没有任何用处，看了不懂继续看，看了就忘？为何不去把书上的东西都敲下来呢。</p>\n<p>​    我突然发现这种学习方法虽然麻烦但是很有效果。而且一个个知识点虽然看着零散，但是我每次都在纸上把思维导图画出来，发现他们都是连通的。而且边思考边去把逻辑理清，真的事半功倍。</p>\n<blockquote>\n<p> ps: 虽然。。有用但。。时间花的真的很多！！有些时候看十几页1个小时就过去了 T T！</p>\n</blockquote>\n<p>第一次写总结，就把我的书单全放上来吧：</p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A61.png\" alt=\"书单\"></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A62.png\" alt=\"书单\"></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A63.png\" alt=\"书单\"></p>\n<p>这个书单可以到我的<a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">Github</a>上面看。只要读完了我都会去更新状态还有最近看的书我都写了读书笔记。</p>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><p>​    在2017年7月，我第一次去实习。在公司里发现了自己在学校或者自学永远看不到的技术。还有身边那么多厉害的人，他们懂的真的特别多。特别是冰哥（公司老大），几乎啥都知道，不懂得只要一伙儿就能信手拈来。</p>\n<p>​    还记得他说的一句话：没有什么是现在不该学的，学任何东西不要有那么多条条框框的限制住自己，只要你想要知道，那么就该去做去“玩”。</p>\n<p>所以我一点都不畏惧前端那么快的变化，而且我深知基础牢固的重要性。</p>\n<p>​    第一个接触的项目就是公司后台，技术栈为React技术栈 + Mongodb + Graphql + Gulp + docker这些东西整合一起，我整整看了10天。。不过在那2个月内进步神速。学会了如何去谈需求/业务，如何去设计mongodb，如何去处理逻辑，如何去写日志（log），如何去看源码，如何去看文档，如何去用框架等等。。让我从一个无知的少年变成了小小的“全栈“程序员。</p>\n<p>​    之后就是现在正在采坑的是React-Native + Expo。老大放手让我去采坑。。每天被坑的不要不要的，挣扎在一大堆一大堆的英文文档、还有源码、还有在Github上给Expo团队提<code>Issue</code>！还把语言改成了了TypeScript这个Js超集语言。有了类型真的很棒，和VSCode搭配写代码，食用更佳！😋</p>\n<p>​    公司的微信小程序项目我没有参加（9月份回学校了！）。。不过。。我希望自己可以去学习小程序。毕竟今天出的小游戏可把我玩坏了！</p>\n<p>​    哦对了还有自己的毕设。。也是React技术栈 + Mock.js（Easy Mock大搜车开源）做的自己的博客！</p>\n<h2 id=\"2018展望\"><a href=\"#2018展望\" class=\"headerlink\" title=\"2018展望\"></a>2018展望</h2><p>​    在2018，我觉得自己该学习的技术：</p>\n<h3 id=\"Progressive-Web-Apps\"><a href=\"#Progressive-Web-Apps\" class=\"headerlink\" title=\"Progressive Web Apps\"></a>Progressive Web Apps</h3><p>PWA就是Google希望用现代浏览器的技术来提供更像移动应用程序Web的体验！PWA 的基础是一个 <code>manifest.json</code> 文件和对 <a href=\"http://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/primers/service-workers/\" target=\"_blank\" rel=\"noopener\">service workers</a> 的利用。</p>\n<p>为啥该学呢！因为。。最近Safari终于支持了Service Worker！</p>\n<h3 id=\"Serverless-架构\"><a href=\"#Serverless-架构\" class=\"headerlink\" title=\"Serverless 架构\"></a>Serverless 架构</h3><p>Serverless是一种架构理念，指的是以服务的形式来提供计算能力而不是以服务器形式，让开发者在构建应用的过程中不用过多考虑基础设施的问题。</p>\n<blockquote>\n<p>也就是说我们前端er可以安安心心的写app、做网页、做游戏？？</p>\n</blockquote>\n<h3 id=\"Node-js-and-Python\"><a href=\"#Node-js-and-Python\" class=\"headerlink\" title=\"Node.js and Python\"></a>Node.js and Python</h3><p>会系统的（各种计算机基础以及数据库之类的）去学习Node.js，我相信这是门很强大的后端语言。</p>\n<p>Python会去涉及。</p>\n<h3 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h3><p>这几天才试了试CSS in JS体验很棒，<code>styled-component</code>像写组件一样写css。很多特性功能还需要去学习。</p>\n<h3 id=\"Graphql\"><a href=\"#Graphql\" class=\"headerlink\" title=\"Graphql\"></a>Graphql</h3><p>在Github宣布v4版本，API都换成Graphql 我感觉会在REST之上占一席之地。因为我用过Graphql。真的是一次请求能获取我们所需要的所有数据！重要的是，数据简洁、明了。</p>\n<h3 id=\"Angular-and-vue\"><a href=\"#Angular-and-vue\" class=\"headerlink\" title=\"Angular and vue\"></a>Angular and vue</h3><p>angular发布了v4而后马上发布了v5，让我很想去学习一下这个框架。还有还有Vue！这个感觉国人都会的框架。。而我。。就看过文档，连TODO都没写过。。</p>\n<h3 id=\"3D-and-2D\"><a href=\"#3D-and-2D\" class=\"headerlink\" title=\"3D and 2D\"></a>3D and 2D</h3><p>Canvas、pixi.js、svg等等这些都是我想去学习的，特别是canvas很神奇，最近就会去着手尝试！</p>\n<h3 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h3><p>React-native在采坑，最近在看Swift的语法，会去学习原生app开发吧。但是重心都会在前端。Kotlin也会看吧。还有Weex看见过阿里的有个框架可以用React写转换成Weex。。名字忘了。下次找出来！</p>\n<p>最后最重要的。。。计算机基础，巴拉巴拉巴拉巴拉🤓！！！！</p>\n<p>OK，大家共勉。加油！</p>\n<p>有写错的地方欢迎指出！！</p>\n<p>附上自己的地址：</p>\n<ul>\n<li>Github: <a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">github</a></li>\n<li>博客： <a href=\"xuzihao.fun\">blog</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"2017年自己的前端总结\"><a href=\"#2017年自己的前端总结\" class=\"headerlink\" title=\"2017年自己的前端总结\"></a>2017年自己的前端总结</h1><p>​    转眼从2017的1月1日那是即将进入大二下册的我，一直到现在实习的我，靠在沙发上静静的想想自己在暑假的实习以及这一年的进步速度堪称火箭🚀。</p>\n<p>​    现在是2017年12月28日23：00，在这时刻我翻开了自己脑海中的技术树，对自己这一年中所成长的一点一滴做一个总结还有对即将到来的2018年，我需要去往哪方面发展或者完成一件什么事情？</p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/2017%E7%94%A8%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF.png\" alt=\"技术树\"><br>","more":"<br>​    整理了一下，看着很多，其实很多只是会用，还没到深入研究其原理！不过我很好奇为什么会这么做，然后会去看看源码。但是功力不够。。还需要继续修炼！</p>\n<h2 id=\"书\"><a href=\"#书\" class=\"headerlink\" title=\"书\"></a>书</h2><p>读万卷书，行万里路？ 在2017年，当我读书的时候，我觉得这句话可能要改一下：</p>\n<blockquote>\n<p>读万卷书，思万/千万遍，写数次，行万里路。</p>\n<p>ps:辣鸡文笔，请勿模仿，欢迎吐槽！</p>\n</blockquote>\n<p>​    因为我大多数读的是技术书，文学类也有。不思考？光去看这些书没有任何用处，看了不懂继续看，看了就忘？为何不去把书上的东西都敲下来呢。</p>\n<p>​    我突然发现这种学习方法虽然麻烦但是很有效果。而且一个个知识点虽然看着零散，但是我每次都在纸上把思维导图画出来，发现他们都是连通的。而且边思考边去把逻辑理清，真的事半功倍。</p>\n<blockquote>\n<p> ps: 虽然。。有用但。。时间花的真的很多！！有些时候看十几页1个小时就过去了 T T！</p>\n</blockquote>\n<p>第一次写总结，就把我的书单全放上来吧：</p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A61.png\" alt=\"书单\"></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A62.png\" alt=\"书单\"></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A63.png\" alt=\"书单\"></p>\n<p>这个书单可以到我的<a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">Github</a>上面看。只要读完了我都会去更新状态还有最近看的书我都写了读书笔记。</p>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><p>​    在2017年7月，我第一次去实习。在公司里发现了自己在学校或者自学永远看不到的技术。还有身边那么多厉害的人，他们懂的真的特别多。特别是冰哥（公司老大），几乎啥都知道，不懂得只要一伙儿就能信手拈来。</p>\n<p>​    还记得他说的一句话：没有什么是现在不该学的，学任何东西不要有那么多条条框框的限制住自己，只要你想要知道，那么就该去做去“玩”。</p>\n<p>所以我一点都不畏惧前端那么快的变化，而且我深知基础牢固的重要性。</p>\n<p>​    第一个接触的项目就是公司后台，技术栈为React技术栈 + Mongodb + Graphql + Gulp + docker这些东西整合一起，我整整看了10天。。不过在那2个月内进步神速。学会了如何去谈需求/业务，如何去设计mongodb，如何去处理逻辑，如何去写日志（log），如何去看源码，如何去看文档，如何去用框架等等。。让我从一个无知的少年变成了小小的“全栈“程序员。</p>\n<p>​    之后就是现在正在采坑的是React-Native + Expo。老大放手让我去采坑。。每天被坑的不要不要的，挣扎在一大堆一大堆的英文文档、还有源码、还有在Github上给Expo团队提<code>Issue</code>！还把语言改成了了TypeScript这个Js超集语言。有了类型真的很棒，和VSCode搭配写代码，食用更佳！😋</p>\n<p>​    公司的微信小程序项目我没有参加（9月份回学校了！）。。不过。。我希望自己可以去学习小程序。毕竟今天出的小游戏可把我玩坏了！</p>\n<p>​    哦对了还有自己的毕设。。也是React技术栈 + Mock.js（Easy Mock大搜车开源）做的自己的博客！</p>\n<h2 id=\"2018展望\"><a href=\"#2018展望\" class=\"headerlink\" title=\"2018展望\"></a>2018展望</h2><p>​    在2018，我觉得自己该学习的技术：</p>\n<h3 id=\"Progressive-Web-Apps\"><a href=\"#Progressive-Web-Apps\" class=\"headerlink\" title=\"Progressive Web Apps\"></a>Progressive Web Apps</h3><p>PWA就是Google希望用现代浏览器的技术来提供更像移动应用程序Web的体验！PWA 的基础是一个 <code>manifest.json</code> 文件和对 <a href=\"http://link.zhihu.com/?target=https%3A//developers.google.com/web/fundamentals/primers/service-workers/\" target=\"_blank\" rel=\"noopener\">service workers</a> 的利用。</p>\n<p>为啥该学呢！因为。。最近Safari终于支持了Service Worker！</p>\n<h3 id=\"Serverless-架构\"><a href=\"#Serverless-架构\" class=\"headerlink\" title=\"Serverless 架构\"></a>Serverless 架构</h3><p>Serverless是一种架构理念，指的是以服务的形式来提供计算能力而不是以服务器形式，让开发者在构建应用的过程中不用过多考虑基础设施的问题。</p>\n<blockquote>\n<p>也就是说我们前端er可以安安心心的写app、做网页、做游戏？？</p>\n</blockquote>\n<h3 id=\"Node-js-and-Python\"><a href=\"#Node-js-and-Python\" class=\"headerlink\" title=\"Node.js and Python\"></a>Node.js and Python</h3><p>会系统的（各种计算机基础以及数据库之类的）去学习Node.js，我相信这是门很强大的后端语言。</p>\n<p>Python会去涉及。</p>\n<h3 id=\"CSS-in-JS\"><a href=\"#CSS-in-JS\" class=\"headerlink\" title=\"CSS in JS\"></a>CSS in JS</h3><p>这几天才试了试CSS in JS体验很棒，<code>styled-component</code>像写组件一样写css。很多特性功能还需要去学习。</p>\n<h3 id=\"Graphql\"><a href=\"#Graphql\" class=\"headerlink\" title=\"Graphql\"></a>Graphql</h3><p>在Github宣布v4版本，API都换成Graphql 我感觉会在REST之上占一席之地。因为我用过Graphql。真的是一次请求能获取我们所需要的所有数据！重要的是，数据简洁、明了。</p>\n<h3 id=\"Angular-and-vue\"><a href=\"#Angular-and-vue\" class=\"headerlink\" title=\"Angular and vue\"></a>Angular and vue</h3><p>angular发布了v4而后马上发布了v5，让我很想去学习一下这个框架。还有还有Vue！这个感觉国人都会的框架。。而我。。就看过文档，连TODO都没写过。。</p>\n<h3 id=\"3D-and-2D\"><a href=\"#3D-and-2D\" class=\"headerlink\" title=\"3D and 2D\"></a>3D and 2D</h3><p>Canvas、pixi.js、svg等等这些都是我想去学习的，特别是canvas很神奇，最近就会去着手尝试！</p>\n<h3 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h3><p>React-native在采坑，最近在看Swift的语法，会去学习原生app开发吧。但是重心都会在前端。Kotlin也会看吧。还有Weex看见过阿里的有个框架可以用React写转换成Weex。。名字忘了。下次找出来！</p>\n<p>最后最重要的。。。计算机基础，巴拉巴拉巴拉巴拉🤓！！！！</p>\n<p>OK，大家共勉。加油！</p>\n<p>有写错的地方欢迎指出！！</p>\n<p>附上自己的地址：</p>\n<ul>\n<li>Github: <a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">github</a></li>\n<li>博客： <a href=\"xuzihao.fun\">blog</a></li>\n</ul>"},{"title":"Ajax与Fetch？","date":"2018-03-20T14:47:33.812Z","comments":1,"layout":"post","_content":"\n虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！\n\n## Ajax\n\nAjax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。\n<!--more-->\n当我们发起一个请求时：\n\n```javascript\nfunction reqListener () {\n  console.log(this.responseText);\n}\nlet xhr = new XMLHttpRequest();\nxhr.onload = reqListener;\nxhr.open(\"get\", \"yourfile.txt\", false)\nxhr.send();\n```\n\n那么逐条解释，\n\nXMLHttpRequest简称XHR。\n\n在XHR的属性有`responseText`，也就是代码第2行中，它是作为*响应主体被返回的文本*，而且无论内容类型是什么，它们都会保存在该属性中。\n\n<hr/>\n\n第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。\n\n<hr/>\n\n第5行代码，看以下图：\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png)\n\n我们会发现`onload`是XMLHttpRequestEventTarget的事件处理程序的接口。\n\n* [XMLHttpRequestEventTarget.onabort](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort)\n  * 当请求失败时调用该方法\n* [XMLHttpRequestEventTarget.onerror](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror)\n  * 当请求发生错误时调用该方法\n* [XMLHttpRequestEventTarget.onload](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload)\n  * 当一个HTTP请求正确加载出内容后返回时调用。\n* [XMLHttpRequestEventTarget.onloadstart](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart)\n  * 当一个HTTP请求开始加载数据时调用。\n* [XMLHttpRequestEventTarget.onprogress](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress)\n  * 间歇调用该方法用来获取请求过程中的信息。\n* [XMLHttpRequestEventTarget.ontimeout](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout)\n  * 当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。\n* [XMLHttpRequestEventTarget.onloadend](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend)\n  * 当内容加载完成，不管失败与否，都会调用该方法\n\n> 参考资料[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget)\n\n<hr/>\n\n第6行就都是XMLHttpRequest对象的**方法**。\n\n* open(method, url, async, user, password)\n  * 请求使用Http的方法，如method = 'GET' | 'POST' | 'PUT' | 'DELET'\n  * url就是url\n  * async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。\n  * user，password: 可选参数,为授权使用\n* 另外在我们**接收到响应之前**还可以调用abort()方法来取消异步请求。\n\n<hr/>\n\n当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。\n\n最重要的是当**readyState**属性的值由一个值变为另一个值得时候，都会触发一次**readystatechange**事件。\n\n那么**readyState**有哪些值呢？\n\n* 0，未初始化。还没调用open()方法\n* 1，启动。已经调用了open()方法\n* 2，发送。已经调用了send()方法\n* 3，接受。已经接收到部分响应数据\n* 4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。\n\n我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：\n\n```Javascript\nlet xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(){\n    if(xhr.readyState == 4){\n        balbalbal......\n    }\n}\n```\n\n还有**response**，**responseText**，**responseType**，**responseXML**，**status**，**statusText**，**statusText**，**withCredentials**属性。\n\n## Fetch\n\n### Fetch是什么？\n\nFetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。\n\nFetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 **CORS**和HTTP的扩展。\n\n请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：\n\n* 当接收到一个代表错误的 HTTP 状态码时，从 `fetch()`返回的 Promise **不会被标记为 reject，** 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。\n* 默认情况下, `fetch` **不会从服务端发送或接收任何 cookies**, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 [credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0) 选项）.\n\n> 参考资料[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n### 例子\n\n```javascript\nfetch('/').then(function(response){\n    response.text().then(function(text){\n        console.log(text)\n    })\n})\n```\n\n这是个很简单的Fetch的小例子。\n\n.then…这不是和Promise好像吗？\n\n没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用`.abort()`去中断请求。。\n\n### 自定义请求的参数\n\n那么，Fetch第二个参数我们可以传一个可以控制不同配置的 `init` 对象：\n\n```javascript\nvar myInit = { method: 'GET'|'POST'|'PUT'|'DELETE',\n               headers: myHeaders,\n               mode: 'cors',\n               cache: 'default' };\n```\n\n* `mode`: 请求的模式，如 `cors、` `no-cors 或者` `same-origin。`\n* `cache`:  请求的 cache 模式: `default `、 `no-store 、` `reload 、` `no-cache 、` `force-cache `或者 `only-if-cached 。`\n\n其他可以去参考MDN。\n\n### header\n\n在Fetch下可以很方便的操作header：\n\n```javascript\nfetch(url).then(function(responen){\n    console.log(responen.headers.get('Content-Type'));\n})\n```\n\n```javascript\nvar myHeaders = new Header();\nmyHeaders.append(\"Content-Type\", \"text/html\");\nfetch(url).then(function(){\n    headers: myHeaders\n})\n```\n\n```javascript\nvar header = new Headers({\n  \"Content-Type\": \"text/plain\"\n});\nconsole.log(header.has(\"Content-Type\")); //true\nconsole.log(header.has(\"Content-Length\")); //false\n```\n\n","source":"_posts/Ajax与Fetch.md","raw":"---\ntitle: Ajax与Fetch？\ndate: 2017-03-20 22：47\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！\n\n## Ajax\n\nAjax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。\n<!--more-->\n当我们发起一个请求时：\n\n```javascript\nfunction reqListener () {\n  console.log(this.responseText);\n}\nlet xhr = new XMLHttpRequest();\nxhr.onload = reqListener;\nxhr.open(\"get\", \"yourfile.txt\", false)\nxhr.send();\n```\n\n那么逐条解释，\n\nXMLHttpRequest简称XHR。\n\n在XHR的属性有`responseText`，也就是代码第2行中，它是作为*响应主体被返回的文本*，而且无论内容类型是什么，它们都会保存在该属性中。\n\n<hr/>\n\n第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。\n\n<hr/>\n\n第5行代码，看以下图：\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png)\n\n我们会发现`onload`是XMLHttpRequestEventTarget的事件处理程序的接口。\n\n* [XMLHttpRequestEventTarget.onabort](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort)\n  * 当请求失败时调用该方法\n* [XMLHttpRequestEventTarget.onerror](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror)\n  * 当请求发生错误时调用该方法\n* [XMLHttpRequestEventTarget.onload](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload)\n  * 当一个HTTP请求正确加载出内容后返回时调用。\n* [XMLHttpRequestEventTarget.onloadstart](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart)\n  * 当一个HTTP请求开始加载数据时调用。\n* [XMLHttpRequestEventTarget.onprogress](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress)\n  * 间歇调用该方法用来获取请求过程中的信息。\n* [XMLHttpRequestEventTarget.ontimeout](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout)\n  * 当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。\n* [XMLHttpRequestEventTarget.onloadend](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend)\n  * 当内容加载完成，不管失败与否，都会调用该方法\n\n> 参考资料[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget)\n\n<hr/>\n\n第6行就都是XMLHttpRequest对象的**方法**。\n\n* open(method, url, async, user, password)\n  * 请求使用Http的方法，如method = 'GET' | 'POST' | 'PUT' | 'DELET'\n  * url就是url\n  * async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。\n  * user，password: 可选参数,为授权使用\n* 另外在我们**接收到响应之前**还可以调用abort()方法来取消异步请求。\n\n<hr/>\n\n当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。\n\n最重要的是当**readyState**属性的值由一个值变为另一个值得时候，都会触发一次**readystatechange**事件。\n\n那么**readyState**有哪些值呢？\n\n* 0，未初始化。还没调用open()方法\n* 1，启动。已经调用了open()方法\n* 2，发送。已经调用了send()方法\n* 3，接受。已经接收到部分响应数据\n* 4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。\n\n我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：\n\n```Javascript\nlet xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(){\n    if(xhr.readyState == 4){\n        balbalbal......\n    }\n}\n```\n\n还有**response**，**responseText**，**responseType**，**responseXML**，**status**，**statusText**，**statusText**，**withCredentials**属性。\n\n## Fetch\n\n### Fetch是什么？\n\nFetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。\n\nFetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 **CORS**和HTTP的扩展。\n\n请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：\n\n* 当接收到一个代表错误的 HTTP 状态码时，从 `fetch()`返回的 Promise **不会被标记为 reject，** 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。\n* 默认情况下, `fetch` **不会从服务端发送或接收任何 cookies**, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 [credentials](https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0) 选项）.\n\n> 参考资料[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)\n\n### 例子\n\n```javascript\nfetch('/').then(function(response){\n    response.text().then(function(text){\n        console.log(text)\n    })\n})\n```\n\n这是个很简单的Fetch的小例子。\n\n.then…这不是和Promise好像吗？\n\n没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用`.abort()`去中断请求。。\n\n### 自定义请求的参数\n\n那么，Fetch第二个参数我们可以传一个可以控制不同配置的 `init` 对象：\n\n```javascript\nvar myInit = { method: 'GET'|'POST'|'PUT'|'DELETE',\n               headers: myHeaders,\n               mode: 'cors',\n               cache: 'default' };\n```\n\n* `mode`: 请求的模式，如 `cors、` `no-cors 或者` `same-origin。`\n* `cache`:  请求的 cache 模式: `default `、 `no-store 、` `reload 、` `no-cache 、` `force-cache `或者 `only-if-cached 。`\n\n其他可以去参考MDN。\n\n### header\n\n在Fetch下可以很方便的操作header：\n\n```javascript\nfetch(url).then(function(responen){\n    console.log(responen.headers.get('Content-Type'));\n})\n```\n\n```javascript\nvar myHeaders = new Header();\nmyHeaders.append(\"Content-Type\", \"text/html\");\nfetch(url).then(function(){\n    headers: myHeaders\n})\n```\n\n```javascript\nvar header = new Headers({\n  \"Content-Type\": \"text/plain\"\n});\nconsole.log(header.has(\"Content-Type\")); //true\nconsole.log(header.has(\"Content-Length\")); //false\n```\n\n","slug":"Ajax与Fetch","published":1,"updated":"2018-03-21T14:14:33.291Z","photos":[],"link":"","_id":"cjollnblk0009unfytd20jzv9","content":"<p>虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！</p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。<br><a id=\"more\"></a><br>当我们发起一个请求时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reqListener</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onload = reqListener;</span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>, <span class=\"string\">\"yourfile.txt\"</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>那么逐条解释，</p>\n<p>XMLHttpRequest简称XHR。</p>\n<p>在XHR的属性有<code>responseText</code>，也就是代码第2行中，它是作为<em>响应主体被返回的文本</em>，而且无论内容类型是什么，它们都会保存在该属性中。</p>\n<hr>\n\n<p>第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。</p>\n<hr>\n\n<p>第5行代码，看以下图：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png\" alt=\"\"></p>\n<p>我们会发现<code>onload</code>是XMLHttpRequestEventTarget的事件处理程序的接口。</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onabort</a><ul>\n<li>当请求失败时调用该方法</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onerror</a><ul>\n<li>当请求发生错误时调用该方法</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onload</a><ul>\n<li>当一个HTTP请求正确加载出内容后返回时调用。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onloadstart</a><ul>\n<li>当一个HTTP请求开始加载数据时调用。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onprogress</a><ul>\n<li>间歇调用该方法用来获取请求过程中的信息。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.ontimeout</a><ul>\n<li>当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onloadend</a><ul>\n<li>当内容加载完成，不管失败与否，都会调用该方法</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考资料<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<hr>\n\n<p>第6行就都是XMLHttpRequest对象的<strong>方法</strong>。</p>\n<ul>\n<li>open(method, url, async, user, password)<ul>\n<li>请求使用Http的方法，如method = ‘GET’ | ‘POST’ | ‘PUT’ | ‘DELET’</li>\n<li>url就是url</li>\n<li>async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。</li>\n<li>user，password: 可选参数,为授权使用</li>\n</ul>\n</li>\n<li>另外在我们<strong>接收到响应之前</strong>还可以调用abort()方法来取消异步请求。</li>\n</ul>\n<hr>\n\n<p>当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。</p>\n<p>最重要的是当<strong>readyState</strong>属性的值由一个值变为另一个值得时候，都会触发一次<strong>readystatechange</strong>事件。</p>\n<p>那么<strong>readyState</strong>有哪些值呢？</p>\n<ul>\n<li>0，未初始化。还没调用open()方法</li>\n<li>1，启动。已经调用了open()方法</li>\n<li>2，发送。已经调用了send()方法</li>\n<li>3，接受。已经接收到部分响应数据</li>\n<li>4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。</li>\n</ul>\n<p>我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        balbalbal......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有<strong>response</strong>，<strong>responseText</strong>，<strong>responseType</strong>，<strong>responseXML</strong>，<strong>status</strong>，<strong>statusText</strong>，<strong>statusText</strong>，<strong>withCredentials</strong>属性。</p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><h3 id=\"Fetch是什么？\"><a href=\"#Fetch是什么？\" class=\"headerlink\" title=\"Fetch是什么？\"></a>Fetch是什么？</h3><p>Fetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。</p>\n<p>Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 <strong>CORS</strong>和HTTP的扩展。</p>\n<p>请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：</p>\n<ul>\n<li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li>\n<li>默认情况下, <code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">credentials</a> 选项）.</li>\n</ul>\n<blockquote>\n<p>参考资料<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    response.text().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这是个很简单的Fetch的小例子。</p>\n<p>.then…这不是和Promise好像吗？</p>\n<p>没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用<code>.abort()</code>去中断请求。。</p>\n<h3 id=\"自定义请求的参数\"><a href=\"#自定义请求的参数\" class=\"headerlink\" title=\"自定义请求的参数\"></a>自定义请求的参数</h3><p>那么，Fetch第二个参数我们可以传一个可以控制不同配置的 <code>init</code> 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myInit = &#123; <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>|<span class=\"string\">'POST'</span>|<span class=\"string\">'PUT'</span>|<span class=\"string\">'DELETE'</span>,</span><br><span class=\"line\">               headers: myHeaders,</span><br><span class=\"line\">               mode: <span class=\"string\">'cors'</span>,</span><br><span class=\"line\">               cache: <span class=\"string\">'default'</span> &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li>\n<li><code>cache</code>:  请求的 cache 模式: <code>default</code>、 <code>no-store 、</code> <code>reload 、</code> <code>no-cache 、</code> <code>force-cache</code>或者 <code>only-if-cached 。</code></li>\n</ul>\n<p>其他可以去参考MDN。</p>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>在Fetch下可以很方便的操作header：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responen</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(responen.headers.get(<span class=\"string\">'Content-Type'</span>));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> Header();</span><br><span class=\"line\">myHeaders.append(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    headers: myHeaders</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"keyword\">new</span> Headers(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header.has(<span class=\"string\">\"Content-Type\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header.has(<span class=\"string\">\"Content-Length\"</span>)); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>虽说现有Fetch和Axios，但我们还是需要了解下当初那传奇的Ajax！</p>\n<h2 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h2><p>Ajax是基于XMLHttpRequest对象来请求数据的。所以我们需要先了解下XMLHttpRequest对象。<br>","more":"<br>当我们发起一个请求时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reqListener</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseText);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onload = reqListener;</span><br><span class=\"line\">xhr.open(<span class=\"string\">\"get\"</span>, <span class=\"string\">\"yourfile.txt\"</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">xhr.send();</span><br></pre></td></tr></table></figure>\n<p>那么逐条解释，</p>\n<p>XMLHttpRequest简称XHR。</p>\n<p>在XHR的属性有<code>responseText</code>，也就是代码第2行中，它是作为<em>响应主体被返回的文本</em>，而且无论内容类型是什么，它们都会保存在该属性中。</p>\n<hr>\n\n<p>第4行代码，构造函数XMLHttpRequest初始化了一个XMLHttpRequest对象。</p>\n<hr>\n\n<p>第5行代码，看以下图：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/XMLHttpRequest.png\" alt=\"\"></p>\n<p>我们会发现<code>onload</code>是XMLHttpRequestEventTarget的事件处理程序的接口。</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onabort\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onabort</a><ul>\n<li>当请求失败时调用该方法</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onerror\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onerror</a><ul>\n<li>当请求发生错误时调用该方法</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onload\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onload</a><ul>\n<li>当一个HTTP请求正确加载出内容后返回时调用。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadstart\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onloadstart</a><ul>\n<li>当一个HTTP请求开始加载数据时调用。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onprogress\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onprogress</a><ul>\n<li>间歇调用该方法用来获取请求过程中的信息。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/ontimeout\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.ontimeout</a><ul>\n<li>当时间超时时调用；只有通过设置XMLHttpRequest对象的timeout属性来发生超时时，这种情况才会发生。</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget/onloadend\" target=\"_blank\" rel=\"noopener\">XMLHttpRequestEventTarget.onloadend</a><ul>\n<li>当内容加载完成，不管失败与否，都会调用该方法</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>参考资料<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestEventTarget\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<hr>\n\n<p>第6行就都是XMLHttpRequest对象的<strong>方法</strong>。</p>\n<ul>\n<li>open(method, url, async, user, password)<ul>\n<li>请求使用Http的方法，如method = ‘GET’ | ‘POST’ | ‘PUT’ | ‘DELET’</li>\n<li>url就是url</li>\n<li>async： boolean。是否异步操作。如果为false只有你得到服务器返回的数据send()方法才会返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。</li>\n<li>user，password: 可选参数,为授权使用</li>\n</ul>\n</li>\n<li>另外在我们<strong>接收到响应之前</strong>还可以调用abort()方法来取消异步请求。</li>\n</ul>\n<hr>\n\n<p>当然XMLHttpRequest对象也有一些重要的属性而且这个对象也继承了EvenTarget和XMLHttpRequestEvenTarget的属性（如上图所示）。</p>\n<p>最重要的是当<strong>readyState</strong>属性的值由一个值变为另一个值得时候，都会触发一次<strong>readystatechange</strong>事件。</p>\n<p>那么<strong>readyState</strong>有哪些值呢？</p>\n<ul>\n<li>0，未初始化。还没调用open()方法</li>\n<li>1，启动。已经调用了open()方法</li>\n<li>2，发送。已经调用了send()方法</li>\n<li>3，接受。已经接收到部分响应数据</li>\n<li>4，完成。已经接收到全部的响应数据，而且已经可以再客户端使用了。</li>\n</ul>\n<p>我们一般对值为4这个阶段感兴趣。因为这时候所有的数据已经到位了，我们就可以做许多事情了。比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.readyState == <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">        balbalbal......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有<strong>response</strong>，<strong>responseText</strong>，<strong>responseType</strong>，<strong>responseXML</strong>，<strong>status</strong>，<strong>statusText</strong>，<strong>statusText</strong>，<strong>withCredentials</strong>属性。</p>\n<h2 id=\"Fetch\"><a href=\"#Fetch\" class=\"headerlink\" title=\"Fetch\"></a>Fetch</h2><h3 id=\"Fetch是什么？\"><a href=\"#Fetch是什么？\" class=\"headerlink\" title=\"Fetch是什么？\"></a>Fetch是什么？</h3><p>Fetch 是浏览器提供的原生 AJAX 接口。使用 window.fetch 函数可以代替以前的 $.ajax、$.get 和 $.post。</p>\n<p>Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 <strong>CORS</strong>和HTTP的扩展。</p>\n<p>请注意，fetch 规范与 jQuery.ajax() 主要有两种方式的不同，牢记：</p>\n<ul>\n<li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），  仅当网络故障时或请求被阻止时，才会标记为 reject。</li>\n<li>默认情况下, <code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch#%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">credentials</a> 选项）.</li>\n</ul>\n<blockquote>\n<p>参考资料<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\" target=\"_blank\" rel=\"noopener\">MDN</a></p>\n</blockquote>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">'/'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    response.text().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(text)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这是个很简单的Fetch的小例子。</p>\n<p>.then…这不是和Promise好像吗？</p>\n<p>没错。Fetch API就是基于Promise的。但是因为基于Promise所以我们无法像XHR一样调用<code>.abort()</code>去中断请求。。</p>\n<h3 id=\"自定义请求的参数\"><a href=\"#自定义请求的参数\" class=\"headerlink\" title=\"自定义请求的参数\"></a>自定义请求的参数</h3><p>那么，Fetch第二个参数我们可以传一个可以控制不同配置的 <code>init</code> 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myInit = &#123; <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>|<span class=\"string\">'POST'</span>|<span class=\"string\">'PUT'</span>|<span class=\"string\">'DELETE'</span>,</span><br><span class=\"line\">               headers: myHeaders,</span><br><span class=\"line\">               mode: <span class=\"string\">'cors'</span>,</span><br><span class=\"line\">               cache: <span class=\"string\">'default'</span> &#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>mode</code>: 请求的模式，如 <code>cors、</code> <code>no-cors 或者</code> <code>same-origin。</code></li>\n<li><code>cache</code>:  请求的 cache 模式: <code>default</code>、 <code>no-store 、</code> <code>reload 、</code> <code>no-cache 、</code> <code>force-cache</code>或者 <code>only-if-cached 。</code></li>\n</ul>\n<p>其他可以去参考MDN。</p>\n<h3 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h3><p>在Fetch下可以很方便的操作header：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responen</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(responen.headers.get(<span class=\"string\">'Content-Type'</span>));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> Header();</span><br><span class=\"line\">myHeaders.append(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"text/html\"</span>);</span><br><span class=\"line\">fetch(url).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    headers: myHeaders</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = <span class=\"keyword\">new</span> Headers(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header.has(<span class=\"string\">\"Content-Type\"</span>)); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(header.has(<span class=\"string\">\"Content-Length\"</span>)); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>"},{"title":"Apollo-server-graphql","date":"2018-05-08T13:37:10.224Z","comments":1,"layout":"post","_content":"\n# Apollo-server-graphql\n\n玩 `graphql` 的肯定听过吧 `apollo` 等等？没有？\n上月球的那个 `apollo`也没听过吗？？\n\n## apollo-server主要是做什么呢？？\n它能轻松将您的后端转换为 `GraphQL` 架构。\n你说你们以前都是 `rest` ？\n没事，最新版的 `apollo` 能够让你，\n在现有的 `REST API` 之上构建通用的 `GraphQL API`，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。\n\n<!--more-->\n\n## Go！\n我用 `TypeScript` 和 `Koa` 去玩 `graphql` 。听起来就很棒！\n> yarn add koa koa-router apollo-server-koa graphql-tools koa-bodyparser\n> && yarn add  @types/graphql @types/koa @types/koa-bodyparser @types/koa-router  typescript -D\n```typescript\nimport * as Koa from 'koa';\nimport * as Mongoose from 'mongoose';\nimport * as koaRouter from 'koa-router';\nimport * as koaBody from 'koa-bodyparser';\nimport { graphiqlKoa,graphqlKoa } from 'apollo-server-koa';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport env from './env';\n\nconst app = new Koa();\nconst router = new koaRouter();\nconst port: number = 4040;\n\napp.use(koaBody());\n\n// 注册路由中间件\napp.use(router.routes()).use(router.allowedMethods());\n\nconst books = [\n  {title: \"hdiahida\", author: 'dhiahdia'},\n  {title: \"dbfb\", author: 'dahdiahi'}\n];\n\nconst typeDefs = `\n  type Query { books: [Book]}\n  type Book { title: String, author: String}\n`;\n\nconst resolvers = {\n  Query: { books: () => books}\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\n\nrouter.post(\n  '/graphql',\n  graphqlKoa({\n    schema,\n  })\n);\n\n// graphiql\nrouter.get(\n  '/graphiql',\n  graphiqlKoa({\n    endpointURL: '/graphql',\n  })\n);\n\nrouter.get('/404', async ctx => {\n  ctx.body = '404!!!';\n});\n\napp.listen(port, ()=>{\n  console.log('🌏 => server is open loaclhost:' + port)\n});\n```","source":"_posts/Apollo-server-graphql.md","raw":"---\ntitle: Apollo-server-graphql\ndate: 2018-05-08 21：37\ncomments: true\nlayout: post\ntags: [GraphQL]\ncategories: [GraphQL]\n---\n\n# Apollo-server-graphql\n\n玩 `graphql` 的肯定听过吧 `apollo` 等等？没有？\n上月球的那个 `apollo`也没听过吗？？\n\n## apollo-server主要是做什么呢？？\n它能轻松将您的后端转换为 `GraphQL` 架构。\n你说你们以前都是 `rest` ？\n没事，最新版的 `apollo` 能够让你，\n在现有的 `REST API` 之上构建通用的 `GraphQL API`，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。\n\n<!--more-->\n\n## Go！\n我用 `TypeScript` 和 `Koa` 去玩 `graphql` 。听起来就很棒！\n> yarn add koa koa-router apollo-server-koa graphql-tools koa-bodyparser\n> && yarn add  @types/graphql @types/koa @types/koa-bodyparser @types/koa-router  typescript -D\n```typescript\nimport * as Koa from 'koa';\nimport * as Mongoose from 'mongoose';\nimport * as koaRouter from 'koa-router';\nimport * as koaBody from 'koa-bodyparser';\nimport { graphiqlKoa,graphqlKoa } from 'apollo-server-koa';\nimport { makeExecutableSchema } from 'graphql-tools';\nimport env from './env';\n\nconst app = new Koa();\nconst router = new koaRouter();\nconst port: number = 4040;\n\napp.use(koaBody());\n\n// 注册路由中间件\napp.use(router.routes()).use(router.allowedMethods());\n\nconst books = [\n  {title: \"hdiahida\", author: 'dhiahdia'},\n  {title: \"dbfb\", author: 'dahdiahi'}\n];\n\nconst typeDefs = `\n  type Query { books: [Book]}\n  type Book { title: String, author: String}\n`;\n\nconst resolvers = {\n  Query: { books: () => books}\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\n\nrouter.post(\n  '/graphql',\n  graphqlKoa({\n    schema,\n  })\n);\n\n// graphiql\nrouter.get(\n  '/graphiql',\n  graphiqlKoa({\n    endpointURL: '/graphql',\n  })\n);\n\nrouter.get('/404', async ctx => {\n  ctx.body = '404!!!';\n});\n\napp.listen(port, ()=>{\n  console.log('🌏 => server is open loaclhost:' + port)\n});\n```","slug":"Apollo-server-graphql","published":1,"updated":"2018-05-08T13:47:34.977Z","photos":[],"link":"","_id":"cjollnblr000bunfyf714xcph","content":"<h1 id=\"Apollo-server-graphql\"><a href=\"#Apollo-server-graphql\" class=\"headerlink\" title=\"Apollo-server-graphql\"></a>Apollo-server-graphql</h1><p>玩 <code>graphql</code> 的肯定听过吧 <code>apollo</code> 等等？没有？<br>上月球的那个 <code>apollo</code>也没听过吗？？</p>\n<h2 id=\"apollo-server主要是做什么呢？？\"><a href=\"#apollo-server主要是做什么呢？？\" class=\"headerlink\" title=\"apollo-server主要是做什么呢？？\"></a>apollo-server主要是做什么呢？？</h2><p>它能轻松将您的后端转换为 <code>GraphQL</code> 架构。<br>你说你们以前都是 <code>rest</code> ？<br>没事，最新版的 <code>apollo</code> 能够让你，<br>在现有的 <code>REST API</code> 之上构建通用的 <code>GraphQL API</code>，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。</p>\n<a id=\"more\"></a>\n<h2 id=\"Go！\"><a href=\"#Go！\" class=\"headerlink\" title=\"Go！\"></a>Go！</h2><p>我用 <code>TypeScript</code> 和 <code>Koa</code> 去玩 <code>graphql</code> 。听起来就很棒！</p>\n<blockquote>\n<p>yarn add koa koa-router apollo-server-koa graphql-tools koa-bodyparser<br>&amp;&amp; yarn add  @types/graphql @types/koa @types/koa-bodyparser @types/koa-router  typescript -D<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> koaRouter <span class=\"keyword\">from</span> <span class=\"string\">'koa-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> koaBody <span class=\"keyword\">from</span> <span class=\"string\">'koa-bodyparser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphiqlKoa,graphqlKoa &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-server-koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; makeExecutableSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tools'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> env <span class=\"keyword\">from</span> <span class=\"string\">'./env'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> koaRouter();</span><br><span class=\"line\"><span class=\"keyword\">const</span> port: <span class=\"built_in\">number</span> = <span class=\"number\">4040</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册路由中间件</span></span><br><span class=\"line\">app.use(router.routes()).use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;title: <span class=\"string\">\"hdiahida\"</span>, author: <span class=\"string\">'dhiahdia'</span>&#125;,</span><br><span class=\"line\">  &#123;title: <span class=\"string\">\"dbfb\"</span>, author: <span class=\"string\">'dahdiahi'</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123; books: [Book]&#125;</span></span><br><span class=\"line\"><span class=\"string\">  type Book &#123; title: String, author: String&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  Query: &#123; books: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> books&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> schema = makeExecutableSchema(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(</span><br><span class=\"line\">  <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  graphqlKoa(&#123;</span><br><span class=\"line\">    schema,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// graphiql</span></span><br><span class=\"line\">router.get(</span><br><span class=\"line\">  <span class=\"string\">'/graphiql'</span>,</span><br><span class=\"line\">  graphiqlKoa(&#123;</span><br><span class=\"line\">    endpointURL: <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/404'</span>, <span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'404!!!'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'🌏 =&gt; server is open loaclhost:'</span> + port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Apollo-server-graphql\"><a href=\"#Apollo-server-graphql\" class=\"headerlink\" title=\"Apollo-server-graphql\"></a>Apollo-server-graphql</h1><p>玩 <code>graphql</code> 的肯定听过吧 <code>apollo</code> 等等？没有？<br>上月球的那个 <code>apollo</code>也没听过吗？？</p>\n<h2 id=\"apollo-server主要是做什么呢？？\"><a href=\"#apollo-server主要是做什么呢？？\" class=\"headerlink\" title=\"apollo-server主要是做什么呢？？\"></a>apollo-server主要是做什么呢？？</h2><p>它能轻松将您的后端转换为 <code>GraphQL</code> 架构。<br>你说你们以前都是 <code>rest</code> ？<br>没事，最新版的 <code>apollo</code> 能够让你，<br>在现有的 <code>REST API</code> 之上构建通用的 <code>GraphQL API</code>，这样您就可以快速发布新的应用程序功能，而无需等待后端更改。</p>","more":"<h2 id=\"Go！\"><a href=\"#Go！\" class=\"headerlink\" title=\"Go！\"></a>Go！</h2><p>我用 <code>TypeScript</code> 和 <code>Koa</code> 去玩 <code>graphql</code> 。听起来就很棒！</p>\n<blockquote>\n<p>yarn add koa koa-router apollo-server-koa graphql-tools koa-bodyparser<br>&amp;&amp; yarn add  @types/graphql @types/koa @types/koa-bodyparser @types/koa-router  typescript -D<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> koaRouter <span class=\"keyword\">from</span> <span class=\"string\">'koa-router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> koaBody <span class=\"keyword\">from</span> <span class=\"string\">'koa-bodyparser'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; graphiqlKoa,graphqlKoa &#125; <span class=\"keyword\">from</span> <span class=\"string\">'apollo-server-koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; makeExecutableSchema &#125; <span class=\"keyword\">from</span> <span class=\"string\">'graphql-tools'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> env <span class=\"keyword\">from</span> <span class=\"string\">'./env'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> koaRouter();</span><br><span class=\"line\"><span class=\"keyword\">const</span> port: <span class=\"built_in\">number</span> = <span class=\"number\">4040</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(koaBody());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册路由中间件</span></span><br><span class=\"line\">app.use(router.routes()).use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;title: <span class=\"string\">\"hdiahida\"</span>, author: <span class=\"string\">'dhiahdia'</span>&#125;,</span><br><span class=\"line\">  &#123;title: <span class=\"string\">\"dbfb\"</span>, author: <span class=\"string\">'dahdiahi'</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> typeDefs = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  type Query &#123; books: [Book]&#125;</span></span><br><span class=\"line\"><span class=\"string\">  type Book &#123; title: String, author: String&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolvers = &#123;</span><br><span class=\"line\">  Query: &#123; books: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> books&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> schema = makeExecutableSchema(&#123;</span><br><span class=\"line\">  typeDefs,</span><br><span class=\"line\">  resolvers</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(</span><br><span class=\"line\">  <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  graphqlKoa(&#123;</span><br><span class=\"line\">    schema,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// graphiql</span></span><br><span class=\"line\">router.get(</span><br><span class=\"line\">  <span class=\"string\">'/graphiql'</span>,</span><br><span class=\"line\">  graphiqlKoa(&#123;</span><br><span class=\"line\">    endpointURL: <span class=\"string\">'/graphql'</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/404'</span>, <span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  ctx.body = <span class=\"string\">'404!!!'</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, <span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'🌏 =&gt; server is open loaclhost:'</span> + port)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"CO函数，异步","date":"2017-08-18T15:01:50.000Z","comments":1,"layout":"post","_content":"\n# CO函数库\n\n[co 函数库](https://github.com/tj/co)是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 **Generator 函数的自动执行**。\n\n有一个 Generator 函数，用于依次读取两个文件。\n\n```javascript\nvar gen = function* (){\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n<!--more-->\n\n**co 函数库可以让你不用编写 Generator 函数的执行器。**\n\n```javascript\nvar co = require('co');\nco(gen);\n```\n\n上面代码中，Generator 函数只要传入 co 函数，就会自动执行。\n\nco 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n\n```javascript\nco(gen).then(function (){\n  console.log('Generator 函数执行完成');\n})\n```\n\n\n\n## co 函数库的源码\n\nco 就是上面那个自动执行器的扩展，它的[源码](https://github.com/tj/co/blob/master/index.js)只有几十行，非常简单。\n\n首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n  });\n}\n```\n\n在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n  });\n}\n```\n\n接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }    \n  });\n}\n```\n\n最后，就是关键的 next 函数，它会反复调用自身。\n\n```javascript\nfunction next(ret) {\n  if (ret.done) return resolve(ret.value);\n  var value = toPromise.call(ctx, ret.value);\n  if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n  return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n});\n```\n\n\n\n上面代码中，next 函数的内部代码，一共只有四行命令。\n\n> 第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。\n>\n> 第二行，确保每一步的返回值，是 Promise 对象。\n>\n> 第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。\n>\n> 第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。\n\n## 并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面。\n\n```javascript\nco(function* (){\n  var values = [n1,n2,n3];\n  yield values.map(somethingAsync);\n});\nfunction* somethingAsync(x){\n  return y\n};\n```\n\n\n\n# ","source":"_posts/CO函数，异步.md","raw":"---\ntitle: CO函数，异步\ndate: 2017-08-18 23：02\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之旅\n---\n\n# CO函数库\n\n[co 函数库](https://github.com/tj/co)是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 **Generator 函数的自动执行**。\n\n有一个 Generator 函数，用于依次读取两个文件。\n\n```javascript\nvar gen = function* (){\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n<!--more-->\n\n**co 函数库可以让你不用编写 Generator 函数的执行器。**\n\n```javascript\nvar co = require('co');\nco(gen);\n```\n\n上面代码中，Generator 函数只要传入 co 函数，就会自动执行。\n\nco 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n\n```javascript\nco(gen).then(function (){\n  console.log('Generator 函数执行完成');\n})\n```\n\n\n\n## co 函数库的源码\n\nco 就是上面那个自动执行器的扩展，它的[源码](https://github.com/tj/co/blob/master/index.js)只有几十行，非常简单。\n\n首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n  });\n}\n```\n\n在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n  });\n}\n```\n\n接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。\n\n```javascript\nfunction co(gen) {\n  var ctx = this;\n\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.call(ctx);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n\n    onFulfilled();\n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }    \n  });\n}\n```\n\n最后，就是关键的 next 函数，它会反复调用自身。\n\n```javascript\nfunction next(ret) {\n  if (ret.done) return resolve(ret.value);\n  var value = toPromise.call(ctx, ret.value);\n  if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n  return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n});\n```\n\n\n\n上面代码中，next 函数的内部代码，一共只有四行命令。\n\n> 第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。\n>\n> 第二行，确保每一步的返回值，是 Promise 对象。\n>\n> 第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。\n>\n> 第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。\n\n## 并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面。\n\n```javascript\nco(function* (){\n  var values = [n1,n2,n3];\n  yield values.map(somethingAsync);\n});\nfunction* somethingAsync(x){\n  return y\n};\n```\n\n\n\n# ","slug":"CO函数，异步","published":1,"updated":"2017-12-13T13:43:03.967Z","photos":[],"link":"","_id":"cjollnblt000cunfyhwqje51x","content":"<h1 id=\"CO函数库\"><a href=\"#CO函数库\" class=\"headerlink\" title=\"CO函数库\"></a>CO函数库</h1><p><a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"noopener\">co 函数库</a>是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 <strong>Generator 函数的自动执行</strong>。</p>\n<p>有一个 Generator 函数，用于依次读取两个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>co 函数库可以让你不用编写 Generator 函数的执行器。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\">co(gen);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Generator 函数只要传入 co 函数，就会自动执行。</p>\n<p>co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(gen).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generator 函数执行完成'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"co-函数库的源码\"><a href=\"#co-函数库的源码\" class=\"headerlink\" title=\"co 函数库的源码\"></a>co 函数库的源码</h2><p>co 就是上面那个自动执行器的扩展，它的<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">源码</a>只有几十行，非常简单。</p>\n<p>首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\"></span><br><span class=\"line\">    onFulfilled();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ret = gen.next(res);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      next(ret);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，就是关键的 next 函数，它会反复调用自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret.done) <span class=\"keyword\">return</span> resolve(ret.value);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = toPromise.call(ctx, ret.value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &amp;&amp; isPromise(value)) <span class=\"keyword\">return</span> value.then(onFulfilled, onRejected);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'You may only yield a function, promise, generator, array, or object, '</span></span><br><span class=\"line\">        + <span class=\"string\">'but the following object was passed: \"'</span> + <span class=\"built_in\">String</span>(ret.value) + <span class=\"string\">'\"'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，next 函数的内部代码，一共只有四行命令。</p>\n<blockquote>\n<p>第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。</p>\n<p>第二行，确保每一步的返回值，是 Promise 对象。</p>\n<p>第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。</p>\n<p>第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。</p>\n</blockquote>\n<h2 id=\"并发的异步操作\"><a href=\"#并发的异步操作\" class=\"headerlink\" title=\"并发的异步操作\"></a>并发的异步操作</h2><p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p>\n<p>这时，要把并发的操作都放在数组或对象里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [n1,n2,n3];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> values.map(somethingAsync);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">somethingAsync</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p># </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CO函数库\"><a href=\"#CO函数库\" class=\"headerlink\" title=\"CO函数库\"></a>CO函数库</h1><p><a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"noopener\">co 函数库</a>是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 <strong>Generator 函数的自动执行</strong>。</p>\n<p>有一个 Generator 函数，用于依次读取两个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<p><strong>co 函数库可以让你不用编写 Generator 函数的执行器。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</span><br><span class=\"line\">co(gen);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Generator 函数只要传入 co 函数，就会自动执行。</p>\n<p>co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(gen).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generator 函数执行完成'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"co-函数库的源码\"><a href=\"#co-函数库的源码\" class=\"headerlink\" title=\"co 函数库的源码\"></a>co 函数库的源码</h2><p>co 就是上面那个自动执行器的扩展，它的<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">源码</a>只有几十行，非常简单。</p>\n<p>首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</span><br><span class=\"line\"></span><br><span class=\"line\">    onFulfilled();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ret = gen.next(res);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      next(ret);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，就是关键的 next 函数，它会反复调用自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ret.done) <span class=\"keyword\">return</span> resolve(ret.value);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = toPromise.call(ctx, ret.value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &amp;&amp; isPromise(value)) <span class=\"keyword\">return</span> value.then(onFulfilled, onRejected);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'You may only yield a function, promise, generator, array, or object, '</span></span><br><span class=\"line\">        + <span class=\"string\">'but the following object was passed: \"'</span> + <span class=\"built_in\">String</span>(ret.value) + <span class=\"string\">'\"'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，next 函数的内部代码，一共只有四行命令。</p>\n<blockquote>\n<p>第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。</p>\n<p>第二行，确保每一步的返回值，是 Promise 对象。</p>\n<p>第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。</p>\n<p>第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。</p>\n</blockquote>\n<h2 id=\"并发的异步操作\"><a href=\"#并发的异步操作\" class=\"headerlink\" title=\"并发的异步操作\"></a>并发的异步操作</h2><p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p>\n<p>这时，要把并发的操作都放在数组或对象里面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> values = [n1,n2,n3];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> values.map(somethingAsync);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">somethingAsync</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p># </p>"},{"title":"BOM","date":"2017-12-06T13:42:00.000Z","comments":1,"updated":"2017-12-07T13:22:28.000Z","thumbnail":"http://ozar6ogjb.bkt.clouddn.com/BOM.jpg","layout":"post","_content":"\n## location对象\n\n它既是window对象的属性，也是document对象的属性。\n\n<!--more-->\n\n* location.hash\t\t\"#contents\"\n  * 返回URL中的hash，如果URL中不包含散列，则返回空字符串\n* location.host                 \"www.wrox.com:80\"\n  * 返回服务器名称和端口号\n* location.hostname       \"www.wrox.com\"\n  * 返回不带端口号的服务器名称\n* location.href                  \"http:/www.wrox.com\"\n  * 返回当前加载页面的完整URL\n* location.pathname       \"/WileyCDA/\"\n  * 返回URL中的目录和（或者）文件名\n* location.port                  \"8080\"\n  * 返回URL中指定的端口号\n* location.protocol           \"http:\"\n  * 返回页面使用的协议\n* location.search              \"?q=javascript\"\n  * 返回URL的查询字符串，字符串以问号开头\n\n## 位置操作\n\n* location.assign \n  * 可以立即打开新URL，而且还在浏览器的历史记录中生成一条记录\n* location.replace             \n  * 导航到的URL，不会在历史记录中生成新纪录，用户不能回到前一个页面。\n* location.reload \n  * 不传递任何参数，页面就会以最有效的方式重新加载\n  * 要强制从服务器重新加载，那么就需要给个参数为**true**\n\n## navigator对象\n\n[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator)\n\n## screen对象\n\n[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Screen)\n\n## history对象\n\n* history.go(-1)\t\t后退一页\n* history.go(1)                 前进一页，以此类推\n* history.go(\"wrox.com\")       跳转到最近的wrox.com\n\n如果历史记录中不包含该字符串的话，那么这个方法什么也不做\n\n还有两个简写方法,方法可以模仿浏览器的“后退” 和 “前进” 按钮。\n\n* history.back\n* history.forward\n\n\n\n* history.length\n  * 这个length属性保存着历史记录的数量。","source":"_posts/BOM.md","raw":"---\ntitle: BOM\ndate: 2017-12-06 21:42\ncomments: true\nupdated: 2017-12-07 21:22:28\nthumbnail: http://ozar6ogjb.bkt.clouddn.com/BOM.jpg\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n## location对象\n\n它既是window对象的属性，也是document对象的属性。\n\n<!--more-->\n\n* location.hash\t\t\"#contents\"\n  * 返回URL中的hash，如果URL中不包含散列，则返回空字符串\n* location.host                 \"www.wrox.com:80\"\n  * 返回服务器名称和端口号\n* location.hostname       \"www.wrox.com\"\n  * 返回不带端口号的服务器名称\n* location.href                  \"http:/www.wrox.com\"\n  * 返回当前加载页面的完整URL\n* location.pathname       \"/WileyCDA/\"\n  * 返回URL中的目录和（或者）文件名\n* location.port                  \"8080\"\n  * 返回URL中指定的端口号\n* location.protocol           \"http:\"\n  * 返回页面使用的协议\n* location.search              \"?q=javascript\"\n  * 返回URL的查询字符串，字符串以问号开头\n\n## 位置操作\n\n* location.assign \n  * 可以立即打开新URL，而且还在浏览器的历史记录中生成一条记录\n* location.replace             \n  * 导航到的URL，不会在历史记录中生成新纪录，用户不能回到前一个页面。\n* location.reload \n  * 不传递任何参数，页面就会以最有效的方式重新加载\n  * 要强制从服务器重新加载，那么就需要给个参数为**true**\n\n## navigator对象\n\n[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator)\n\n## screen对象\n\n[查看MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Screen)\n\n## history对象\n\n* history.go(-1)\t\t后退一页\n* history.go(1)                 前进一页，以此类推\n* history.go(\"wrox.com\")       跳转到最近的wrox.com\n\n如果历史记录中不包含该字符串的话，那么这个方法什么也不做\n\n还有两个简写方法,方法可以模仿浏览器的“后退” 和 “前进” 按钮。\n\n* history.back\n* history.forward\n\n\n\n* history.length\n  * 这个length属性保存着历史记录的数量。","slug":"BOM","published":1,"photos":[],"link":"","_id":"cjollnblw000funfy7giuanrr","content":"<h2 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h2><p>它既是window对象的属性，也是document对象的属性。</p>\n<a id=\"more\"></a>\n<ul>\n<li>location.hash        “#contents”<ul>\n<li>返回URL中的hash，如果URL中不包含散列，则返回空字符串</li>\n</ul>\n</li>\n<li>location.host                 “<a href=\"http://www.wrox.com:80&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com:80&quot;</a><ul>\n<li>返回服务器名称和端口号</li>\n</ul>\n</li>\n<li>location.hostname       “<a href=\"http://www.wrox.com&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com&quot;</a><ul>\n<li>返回不带端口号的服务器名称</li>\n</ul>\n</li>\n<li>location.href                  “http:/<a href=\"http://www.wrox.com&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com&quot;</a><ul>\n<li>返回当前加载页面的完整URL</li>\n</ul>\n</li>\n<li>location.pathname       “/WileyCDA/“<ul>\n<li>返回URL中的目录和（或者）文件名</li>\n</ul>\n</li>\n<li>location.port                  “8080”<ul>\n<li>返回URL中指定的端口号</li>\n</ul>\n</li>\n<li>location.protocol           “http:”<ul>\n<li>返回页面使用的协议</li>\n</ul>\n</li>\n<li>location.search              “?q=javascript”<ul>\n<li>返回URL的查询字符串，字符串以问号开头</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h2><ul>\n<li>location.assign <ul>\n<li>可以立即打开新URL，而且还在浏览器的历史记录中生成一条记录</li>\n</ul>\n</li>\n<li>location.replace             <ul>\n<li>导航到的URL，不会在历史记录中生成新纪录，用户不能回到前一个页面。</li>\n</ul>\n</li>\n<li>location.reload <ul>\n<li>不传递任何参数，页面就会以最有效的方式重新加载</li>\n<li>要强制从服务器重新加载，那么就需要给个参数为<strong>true</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator\" target=\"_blank\" rel=\"noopener\">查看MDN</a></p>\n<h2 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Screen\" target=\"_blank\" rel=\"noopener\">查看MDN</a></p>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><ul>\n<li>history.go(-1)        后退一页</li>\n<li>history.go(1)                 前进一页，以此类推</li>\n<li>history.go(“wrox.com”)       跳转到最近的wrox.com</li>\n</ul>\n<p>如果历史记录中不包含该字符串的话，那么这个方法什么也不做</p>\n<p>还有两个简写方法,方法可以模仿浏览器的“后退” 和 “前进” 按钮。</p>\n<ul>\n<li>history.back</li>\n<li>history.forward</li>\n</ul>\n<ul>\n<li>history.length<ul>\n<li>这个length属性保存着历史记录的数量。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"location对象\"><a href=\"#location对象\" class=\"headerlink\" title=\"location对象\"></a>location对象</h2><p>它既是window对象的属性，也是document对象的属性。</p>","more":"<ul>\n<li>location.hash        “#contents”<ul>\n<li>返回URL中的hash，如果URL中不包含散列，则返回空字符串</li>\n</ul>\n</li>\n<li>location.host                 “<a href=\"http://www.wrox.com:80&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com:80&quot;</a><ul>\n<li>返回服务器名称和端口号</li>\n</ul>\n</li>\n<li>location.hostname       “<a href=\"http://www.wrox.com&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com&quot;</a><ul>\n<li>返回不带端口号的服务器名称</li>\n</ul>\n</li>\n<li>location.href                  “http:/<a href=\"http://www.wrox.com&quot;\" target=\"_blank\" rel=\"noopener\">www.wrox.com&quot;</a><ul>\n<li>返回当前加载页面的完整URL</li>\n</ul>\n</li>\n<li>location.pathname       “/WileyCDA/“<ul>\n<li>返回URL中的目录和（或者）文件名</li>\n</ul>\n</li>\n<li>location.port                  “8080”<ul>\n<li>返回URL中指定的端口号</li>\n</ul>\n</li>\n<li>location.protocol           “http:”<ul>\n<li>返回页面使用的协议</li>\n</ul>\n</li>\n<li>location.search              “?q=javascript”<ul>\n<li>返回URL的查询字符串，字符串以问号开头</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"位置操作\"><a href=\"#位置操作\" class=\"headerlink\" title=\"位置操作\"></a>位置操作</h2><ul>\n<li>location.assign <ul>\n<li>可以立即打开新URL，而且还在浏览器的历史记录中生成一条记录</li>\n</ul>\n</li>\n<li>location.replace             <ul>\n<li>导航到的URL，不会在历史记录中生成新纪录，用户不能回到前一个页面。</li>\n</ul>\n</li>\n<li>location.reload <ul>\n<li>不传递任何参数，页面就会以最有效的方式重新加载</li>\n<li>要强制从服务器重新加载，那么就需要给个参数为<strong>true</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator\" target=\"_blank\" rel=\"noopener\">查看MDN</a></p>\n<h2 id=\"screen对象\"><a href=\"#screen对象\" class=\"headerlink\" title=\"screen对象\"></a>screen对象</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Screen\" target=\"_blank\" rel=\"noopener\">查看MDN</a></p>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><ul>\n<li>history.go(-1)        后退一页</li>\n<li>history.go(1)                 前进一页，以此类推</li>\n<li>history.go(“wrox.com”)       跳转到最近的wrox.com</li>\n</ul>\n<p>如果历史记录中不包含该字符串的话，那么这个方法什么也不做</p>\n<p>还有两个简写方法,方法可以模仿浏览器的“后退” 和 “前进” 按钮。</p>\n<ul>\n<li>history.back</li>\n<li>history.forward</li>\n</ul>\n<ul>\n<li>history.length<ul>\n<li>这个length属性保存着历史记录的数量。</li>\n</ul>\n</li>\n</ul>"},{"title":"C++ 初体验","date":"2017-12-08T14:05:00.000Z","updated":"2017-12-09T06:27:28.000Z","comments":1,"thumbnail":"http://ozar6ogjb.bkt.clouddn.com/c++.jpeg","layout":"post","_content":"\n## First\n\nClion给我建的第一个C++文件如下\n```c++\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}\n```\n<!--more-->\n那么我在想这和平常写得js不同啊，那个`std::`是啥...\n\n经过强大的搜索引擎我知道了！这玩意儿就是一个类（std）啊（输入输出标准），它包括了cin成员和cout成员。\n\n当我加了`using namespace std;`以后，我才能使用它的成员。我的c++程序可以写成:\n\n```c++\n#include <iostream>\nusing namespace std;\n \n// main() 是程序开始执行的地方\n \nint main()\n{\n   cout << \"Hello World\"; // 输出 Hello World\n   return 0;\n}\n```\n\n那我又发现 `namespace`这个东西。原来它是指标识符的各种可见范围。\n\n\n\n## C++数据类型\n\n讲到数据类型。。我这个写惯了动态语言的人。。。诶西。强制让我写静态有点不行惯，没办法只能去写啊！\n\nC++有七种数据类型：\n\n| 类型   | 关键字     |\n| ---- | ------- |\n| 布尔型  | bool    |\n| 字符型  | Char    |\n| 整型   | int     |\n| 浮点型  | float   |\n| 双浮点型 | double  |\n| 无类型  | void    |\n| 宽字符型 | wchar_t |\n\n有一些基本类型可以使用一个或多个类型装饰符进行修饰：\n\n* signed\n* unsigned\n* short\n* long\n\n\n\n## 枚举类型\n\n枚举大家可能都听过吧，它其实就是将变量的值一一列举出来，在这提醒下！变量的值只能在列举出来的值的范围内。\n\n```c++\nenum animal { dog, cat, pig } c;\nc = cat;\n//这段代码意思为 变量c的类型为animal，最后c被赋值给cat。\n```\n\n在默认情况下第一个名称的值为0，第二个名称值为1，第三个名称的值为2.\n\n如果我这有写：\n\n```c++\nenum animal { dog, cat=5, pig };\n```\n\n在这里，cat的值为5，那么pig值为6.\n\n\n\n## 变量类型\n\n类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。\n\n* 布尔\n* char\n  * 通常为8位字节，这是一个整数类型\n* int\n* float\n  * 单精度浮点类型，32位\n* double\n  * 双精度浮点类型，64位\n* void\n* wchar_t\n\n而且C++ 也允许定义各种其他类型的变量，比如**枚举、指针、数组、引用、数据结构、类**。\n\n我们可以使用 **extern** 关键字在任何地方声明一个变量\n\n```c++\n#include <iostream>\nusing namespace std;\n\nextern int a, b;\n\nint main(){\n    int a, b;\n  \n  \ta = 10;\n  \n  cout << a ;  //=> 10\n}\n```\n\n## 作用域\n\n在JS中我们的作用域可是太坑了！现在我们来看看C++的作用域吧。\n\n- （1）在函数或一个代码块内部声明的变量，称为局部变量。\n- （2）在函数参数的定义中声明的变量，称为形式参数。\n- （3）在所有函数外部声明的变量，称为全局变量。\n\n```c++\n(1局部变量)\n#include <iostream>\nusing namespace std;\n \nint main ()\n{\n  // 局部变量声明\n  int a, b;\n  int c;\n \n  // 实际初始化\n  a = 10;\n  b = 20;\n  c = a + b;\n \n  cout << c;\n \n  return 0;\n}\n```\n\n\n\n```c++\n(3全局变量)\n#include <iostream>\nusing namespace std;\n \n// 全局变量声明\nint g;\n \nint main ()\n{\n  // 局部变量声明\n  int a, b;\n \n  // 实际初始化\n  a = 10;\n  b = 20;\n  g = a + b;\n \n  cout << g;\n \n  return 0;\n}\n```\n\n当我们遇到全局变量和局部变量的名称相同时，和js一样，**在函数体内局部变量的值会覆盖全局变量**。\n\n## 定义常量\n\n在 C++ 中，有两种简单的定义常量的方式：\n\n- 使用 **#define** 预处理器。\n- 使用 **const** 关键字。\n\n```c++\n#include <iostream>\nusing namespace std;\n \n#define DOGFOOT 4   \n#define CHICKENFOOT  2\n#define NEWLINE '\\n'\n \nint main()\n{\n \n   int area;  \n   \n   allFoot = DOGFOOT * CHICKENFOOT;\n   cout << allFoot;\n   cout << NEWLINE;\n   return 0;\n}\n//会输出8.\n```\n\n\n\n那么const很简单就和es6中一样只**可读不可写**。\n\n","source":"_posts/C++初体验.md","raw":"---\ntitle: C++ 初体验\ndate: 2017-12-08 22:05\nupdated: 2017-12-09 14:27:28\ncomments: true\nthumbnail: http://ozar6ogjb.bkt.clouddn.com/c++.jpeg\nlayout: post\ntags: [C++]\ncategories: C++\n---\n\n## First\n\nClion给我建的第一个C++文件如下\n```c++\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}\n```\n<!--more-->\n那么我在想这和平常写得js不同啊，那个`std::`是啥...\n\n经过强大的搜索引擎我知道了！这玩意儿就是一个类（std）啊（输入输出标准），它包括了cin成员和cout成员。\n\n当我加了`using namespace std;`以后，我才能使用它的成员。我的c++程序可以写成:\n\n```c++\n#include <iostream>\nusing namespace std;\n \n// main() 是程序开始执行的地方\n \nint main()\n{\n   cout << \"Hello World\"; // 输出 Hello World\n   return 0;\n}\n```\n\n那我又发现 `namespace`这个东西。原来它是指标识符的各种可见范围。\n\n\n\n## C++数据类型\n\n讲到数据类型。。我这个写惯了动态语言的人。。。诶西。强制让我写静态有点不行惯，没办法只能去写啊！\n\nC++有七种数据类型：\n\n| 类型   | 关键字     |\n| ---- | ------- |\n| 布尔型  | bool    |\n| 字符型  | Char    |\n| 整型   | int     |\n| 浮点型  | float   |\n| 双浮点型 | double  |\n| 无类型  | void    |\n| 宽字符型 | wchar_t |\n\n有一些基本类型可以使用一个或多个类型装饰符进行修饰：\n\n* signed\n* unsigned\n* short\n* long\n\n\n\n## 枚举类型\n\n枚举大家可能都听过吧，它其实就是将变量的值一一列举出来，在这提醒下！变量的值只能在列举出来的值的范围内。\n\n```c++\nenum animal { dog, cat, pig } c;\nc = cat;\n//这段代码意思为 变量c的类型为animal，最后c被赋值给cat。\n```\n\n在默认情况下第一个名称的值为0，第二个名称值为1，第三个名称的值为2.\n\n如果我这有写：\n\n```c++\nenum animal { dog, cat=5, pig };\n```\n\n在这里，cat的值为5，那么pig值为6.\n\n\n\n## 变量类型\n\n类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。\n\n* 布尔\n* char\n  * 通常为8位字节，这是一个整数类型\n* int\n* float\n  * 单精度浮点类型，32位\n* double\n  * 双精度浮点类型，64位\n* void\n* wchar_t\n\n而且C++ 也允许定义各种其他类型的变量，比如**枚举、指针、数组、引用、数据结构、类**。\n\n我们可以使用 **extern** 关键字在任何地方声明一个变量\n\n```c++\n#include <iostream>\nusing namespace std;\n\nextern int a, b;\n\nint main(){\n    int a, b;\n  \n  \ta = 10;\n  \n  cout << a ;  //=> 10\n}\n```\n\n## 作用域\n\n在JS中我们的作用域可是太坑了！现在我们来看看C++的作用域吧。\n\n- （1）在函数或一个代码块内部声明的变量，称为局部变量。\n- （2）在函数参数的定义中声明的变量，称为形式参数。\n- （3）在所有函数外部声明的变量，称为全局变量。\n\n```c++\n(1局部变量)\n#include <iostream>\nusing namespace std;\n \nint main ()\n{\n  // 局部变量声明\n  int a, b;\n  int c;\n \n  // 实际初始化\n  a = 10;\n  b = 20;\n  c = a + b;\n \n  cout << c;\n \n  return 0;\n}\n```\n\n\n\n```c++\n(3全局变量)\n#include <iostream>\nusing namespace std;\n \n// 全局变量声明\nint g;\n \nint main ()\n{\n  // 局部变量声明\n  int a, b;\n \n  // 实际初始化\n  a = 10;\n  b = 20;\n  g = a + b;\n \n  cout << g;\n \n  return 0;\n}\n```\n\n当我们遇到全局变量和局部变量的名称相同时，和js一样，**在函数体内局部变量的值会覆盖全局变量**。\n\n## 定义常量\n\n在 C++ 中，有两种简单的定义常量的方式：\n\n- 使用 **#define** 预处理器。\n- 使用 **const** 关键字。\n\n```c++\n#include <iostream>\nusing namespace std;\n \n#define DOGFOOT 4   \n#define CHICKENFOOT  2\n#define NEWLINE '\\n'\n \nint main()\n{\n \n   int area;  \n   \n   allFoot = DOGFOOT * CHICKENFOOT;\n   cout << allFoot;\n   cout << NEWLINE;\n   return 0;\n}\n//会输出8.\n```\n\n\n\n那么const很简单就和es6中一样只**可读不可写**。\n\n","slug":"C++初体验","published":1,"photos":[],"link":"","_id":"cjollnblz000gunfysl0jy20p","content":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>Clion给我建的第一个C++文件如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello, World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>那么我在想这和平常写得js不同啊，那个<code>std::</code>是啥…</p>\n<p>经过强大的搜索引擎我知道了！这玩意儿就是一个类（std）啊（输入输出标准），它包括了cin成员和cout成员。</p>\n<p>当我加了<code>using namespace std;</code>以后，我才能使用它的成员。我的c++程序可以写成:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// main() 是程序开始执行的地方</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World\"</span>; <span class=\"comment\">// 输出 Hello World</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我又发现 <code>namespace</code>这个东西。原来它是指标识符的各种可见范围。</p>\n<h2 id=\"C-数据类型\"><a href=\"#C-数据类型\" class=\"headerlink\" title=\"C++数据类型\"></a>C++数据类型</h2><p>讲到数据类型。。我这个写惯了动态语言的人。。。诶西。强制让我写静态有点不行惯，没办法只能去写啊！</p>\n<p>C++有七种数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>布尔型</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>字符型</td>\n<td>Char</td>\n</tr>\n<tr>\n<td>整型</td>\n<td>int</td>\n</tr>\n<tr>\n<td>浮点型</td>\n<td>float</td>\n</tr>\n<tr>\n<td>双浮点型</td>\n<td>double</td>\n</tr>\n<tr>\n<td>无类型</td>\n<td>void</td>\n</tr>\n<tr>\n<td>宽字符型</td>\n<td>wchar_t</td>\n</tr>\n</tbody>\n</table>\n<p>有一些基本类型可以使用一个或多个类型装饰符进行修饰：</p>\n<ul>\n<li>signed</li>\n<li>unsigned</li>\n<li>short</li>\n<li>long</li>\n</ul>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><p>枚举大家可能都听过吧，它其实就是将变量的值一一列举出来，在这提醒下！变量的值只能在列举出来的值的范围内。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> animal &#123; dog, cat, pig &#125; c;</span><br><span class=\"line\">c = cat;</span><br><span class=\"line\"><span class=\"comment\">//这段代码意思为 变量c的类型为animal，最后c被赋值给cat。</span></span><br></pre></td></tr></table></figure>\n<p>在默认情况下第一个名称的值为0，第二个名称值为1，第三个名称的值为2.</p>\n<p>如果我这有写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> animal &#123; dog, cat=<span class=\"number\">5</span>, pig &#125;;</span><br></pre></td></tr></table></figure>\n<p>在这里，cat的值为5，那么pig值为6.</p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>\n<ul>\n<li>布尔</li>\n<li>char<ul>\n<li>通常为8位字节，这是一个整数类型</li>\n</ul>\n</li>\n<li>int</li>\n<li>float<ul>\n<li>单精度浮点类型，32位</li>\n</ul>\n</li>\n<li>double<ul>\n<li>双精度浮点类型，64位</li>\n</ul>\n</li>\n<li>void</li>\n<li>wchar_t</li>\n</ul>\n<p>而且C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>。</p>\n<p>我们可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; a ;  <span class=\"comment\">//=&gt; 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>在JS中我们的作用域可是太坑了！现在我们来看看C++的作用域吧。</p>\n<ul>\n<li>（1）在函数或一个代码块内部声明的变量，称为局部变量。</li>\n<li>（2）在函数参数的定义中声明的变量，称为形式参数。</li>\n<li>（3）在所有函数外部声明的变量，称为全局变量。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>局部变量)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部变量声明</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> c;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 实际初始化</span></span><br><span class=\"line\">  a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  b = <span class=\"number\">20</span>;</span><br><span class=\"line\">  c = a + b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">3</span>全局变量)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 全局变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> g;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部变量声明</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 实际初始化</span></span><br><span class=\"line\">  a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  b = <span class=\"number\">20</span>;</span><br><span class=\"line\">  g = a + b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; g;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们遇到全局变量和局部变量的名称相同时，和js一样，<strong>在函数体内局部变量的值会覆盖全局变量</strong>。</p>\n<h2 id=\"定义常量\"><a href=\"#定义常量\" class=\"headerlink\" title=\"定义常量\"></a>定义常量</h2><p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DOGFOOT 4   </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHICKENFOOT  2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NEWLINE <span class=\"meta-string\">'\\n'</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">int</span> area;  </span><br><span class=\"line\">   </span><br><span class=\"line\">   allFoot = DOGFOOT * CHICKENFOOT;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; allFoot;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; NEWLINE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//会输出8.</span></span><br></pre></td></tr></table></figure>\n<p>那么const很简单就和es6中一样只<strong>可读不可写</strong>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>Clion给我建的第一个C++文件如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello, World!\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<p>那么我在想这和平常写得js不同啊，那个<code>std::</code>是啥…</p>\n<p>经过强大的搜索引擎我知道了！这玩意儿就是一个类（std）啊（输入输出标准），它包括了cin成员和cout成员。</p>\n<p>当我加了<code>using namespace std;</code>以后，我才能使用它的成员。我的c++程序可以写成:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// main() 是程序开始执行的地方</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Hello World\"</span>; <span class=\"comment\">// 输出 Hello World</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我又发现 <code>namespace</code>这个东西。原来它是指标识符的各种可见范围。</p>\n<h2 id=\"C-数据类型\"><a href=\"#C-数据类型\" class=\"headerlink\" title=\"C++数据类型\"></a>C++数据类型</h2><p>讲到数据类型。。我这个写惯了动态语言的人。。。诶西。强制让我写静态有点不行惯，没办法只能去写啊！</p>\n<p>C++有七种数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>布尔型</td>\n<td>bool</td>\n</tr>\n<tr>\n<td>字符型</td>\n<td>Char</td>\n</tr>\n<tr>\n<td>整型</td>\n<td>int</td>\n</tr>\n<tr>\n<td>浮点型</td>\n<td>float</td>\n</tr>\n<tr>\n<td>双浮点型</td>\n<td>double</td>\n</tr>\n<tr>\n<td>无类型</td>\n<td>void</td>\n</tr>\n<tr>\n<td>宽字符型</td>\n<td>wchar_t</td>\n</tr>\n</tbody>\n</table>\n<p>有一些基本类型可以使用一个或多个类型装饰符进行修饰：</p>\n<ul>\n<li>signed</li>\n<li>unsigned</li>\n<li>short</li>\n<li>long</li>\n</ul>\n<h2 id=\"枚举类型\"><a href=\"#枚举类型\" class=\"headerlink\" title=\"枚举类型\"></a>枚举类型</h2><p>枚举大家可能都听过吧，它其实就是将变量的值一一列举出来，在这提醒下！变量的值只能在列举出来的值的范围内。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> animal &#123; dog, cat, pig &#125; c;</span><br><span class=\"line\">c = cat;</span><br><span class=\"line\"><span class=\"comment\">//这段代码意思为 变量c的类型为animal，最后c被赋值给cat。</span></span><br></pre></td></tr></table></figure>\n<p>在默认情况下第一个名称的值为0，第二个名称值为1，第三个名称的值为2.</p>\n<p>如果我这有写：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> animal &#123; dog, cat=<span class=\"number\">5</span>, pig &#125;;</span><br></pre></td></tr></table></figure>\n<p>在这里，cat的值为5，那么pig值为6.</p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。</p>\n<ul>\n<li>布尔</li>\n<li>char<ul>\n<li>通常为8位字节，这是一个整数类型</li>\n</ul>\n</li>\n<li>int</li>\n<li>float<ul>\n<li>单精度浮点类型，32位</li>\n</ul>\n</li>\n<li>double<ul>\n<li>双精度浮点类型，64位</li>\n</ul>\n</li>\n<li>void</li>\n<li>wchar_t</li>\n</ul>\n<p>而且C++ 也允许定义各种其他类型的变量，比如<strong>枚举、指针、数组、引用、数据结构、类</strong>。</p>\n<p>我们可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">  </span><br><span class=\"line\">  \ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; a ;  <span class=\"comment\">//=&gt; 10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>在JS中我们的作用域可是太坑了！现在我们来看看C++的作用域吧。</p>\n<ul>\n<li>（1）在函数或一个代码块内部声明的变量，称为局部变量。</li>\n<li>（2）在函数参数的定义中声明的变量，称为形式参数。</li>\n<li>（3）在所有函数外部声明的变量，称为全局变量。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">1</span>局部变量)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部变量声明</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> c;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 实际初始化</span></span><br><span class=\"line\">  a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  b = <span class=\"number\">20</span>;</span><br><span class=\"line\">  c = a + b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; c;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">3</span>全局变量)</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 全局变量声明</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> g;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 局部变量声明</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 实际初始化</span></span><br><span class=\"line\">  a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  b = <span class=\"number\">20</span>;</span><br><span class=\"line\">  g = a + b;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"built_in\">cout</span> &lt;&lt; g;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们遇到全局变量和局部变量的名称相同时，和js一样，<strong>在函数体内局部变量的值会覆盖全局变量</strong>。</p>\n<h2 id=\"定义常量\"><a href=\"#定义常量\" class=\"headerlink\" title=\"定义常量\"></a>定义常量</h2><p>在 C++ 中，有两种简单的定义常量的方式：</p>\n<ul>\n<li>使用 <strong>#define</strong> 预处理器。</li>\n<li>使用 <strong>const</strong> 关键字。</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DOGFOOT 4   </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CHICKENFOOT  2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NEWLINE <span class=\"meta-string\">'\\n'</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">int</span> area;  </span><br><span class=\"line\">   </span><br><span class=\"line\">   allFoot = DOGFOOT * CHICKENFOOT;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; allFoot;</span><br><span class=\"line\">   <span class=\"built_in\">cout</span> &lt;&lt; NEWLINE;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//会输出8.</span></span><br></pre></td></tr></table></figure>\n<p>那么const很简单就和es6中一样只<strong>可读不可写</strong>。</p>"},{"title":"CSS3外轮廓","date":"2018-03-18T14:38:00.000Z","comments":1,"layout":"post","_content":"\n# Outline\n\n看一个Outline的例子：[outline](https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61)\n\n在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用`outline`实现的外边框中border为`-`。\n\n## outline和border对比\n\n* border属于盒模型的一部分，会直接影响盒子大小。\n* outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。\n* border创建是可以显示单边的，而outline是不行的。看demo：[单边](https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c)\n* border只可以外轮廓，而outline可以借助`outline-offset`设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：[内轮廓](https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4)","source":"_posts/CSS外轮廓.md","raw":"---\ntitle: CSS3外轮廓\ndate: 2018-03-18 22:38\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n# Outline\n\n看一个Outline的例子：[outline](https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61)\n\n在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用`outline`实现的外边框中border为`-`。\n\n## outline和border对比\n\n* border属于盒模型的一部分，会直接影响盒子大小。\n* outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。\n* border创建是可以显示单边的，而outline是不行的。看demo：[单边](https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c)\n* border只可以外轮廓，而outline可以借助`outline-offset`设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：[内轮廓](https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4)","slug":"CSS外轮廓","published":1,"updated":"2018-03-19T13:21:36.585Z","photos":[],"link":"","_id":"cjollnbm5000lunfyhwr8lc3w","content":"<h1 id=\"Outline\"><a href=\"#Outline\" class=\"headerlink\" title=\"Outline\"></a>Outline</h1><p>看一个Outline的例子：<a href=\"https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61\" target=\"_blank\" rel=\"noopener\">outline</a></p>\n<p>在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用<code>outline</code>实现的外边框中border为<code>-</code>。</p>\n<h2 id=\"outline和border对比\"><a href=\"#outline和border对比\" class=\"headerlink\" title=\"outline和border对比\"></a>outline和border对比</h2><ul>\n<li>border属于盒模型的一部分，会直接影响盒子大小。</li>\n<li>outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。</li>\n<li>border创建是可以显示单边的，而outline是不行的。看demo：<a href=\"https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c\" target=\"_blank\" rel=\"noopener\">单边</a></li>\n<li>border只可以外轮廓，而outline可以借助<code>outline-offset</code>设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：<a href=\"https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4\" target=\"_blank\" rel=\"noopener\">内轮廓</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Outline\"><a href=\"#Outline\" class=\"headerlink\" title=\"Outline\"></a>Outline</h1><p>看一个Outline的例子：<a href=\"https://codepan.net/gist/7a96f5e15ee26e3523fd17c577c01c61\" target=\"_blank\" rel=\"noopener\">outline</a></p>\n<p>在下面看见一个div也有类似的效果。但是我们打开开发者工具看会发现。下面用<code>outline</code>实现的外边框中border为<code>-</code>。</p>\n<h2 id=\"outline和border对比\"><a href=\"#outline和border对比\" class=\"headerlink\" title=\"outline和border对比\"></a>outline和border对比</h2><ul>\n<li>border属于盒模型的一部分，会直接影响盒子大小。</li>\n<li>outline则是将边框画在盒子上，不会影响该框。所以它不会破坏网页布局。</li>\n<li>border创建是可以显示单边的，而outline是不行的。看demo：<a href=\"https://codepan.net/gist/92abb7960aed0c5917f235f1a6180e5c\" target=\"_blank\" rel=\"noopener\">单边</a></li>\n<li>border只可以外轮廓，而outline可以借助<code>outline-offset</code>设成负值就可以实现内轮廓，而设成正值就是外轮廓。看demo：<a href=\"https://codepan.net/gist/de786dc265e45ebefcd6a54614b348c4\" target=\"_blank\" rel=\"noopener\">内轮廓</a></li>\n</ul>\n"},{"title":"CSS3transform/transition","date":"2018-03-15T13:52:00.000Z","updated":"2018-04-16T04:19:18.000Z","comments":1,"layout":"post","_content":"# CSS3 transform\n\n先来了解下单位：\n\n* 度（deg）。一个圆360度\n\nTransform就指变换。\n\ntransform:\n\n* 矩阵  (matrix)\n  * 用六个指定的值来指定一个均匀的二维（2D）变换矩阵\n* 转换（translate）\n* 旋转（rotate）\n* 缩放（scale）\n* 倾斜（skew）\n\n<!--more-->\n\n但是还可以这样玩\n\n> scaleX, scaleY\n>\n> skewX, skewY\n>\n> translateX, translateY\n>\n> matrix3d\n>\n> `matrix(a, b, c, d, tx, ty)` 是 `matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)` 的简写\n\n* **transform-origin**\n  * 以一个点去变形\n* **transform-style**\n  * 确定元素的子元素是否位于3D空间中，还是在该元素所在的平面内被扁平化。\n\n\n# CSS transition\n\n`transition = <transition-property> | <transition-duration> | <transition-delay> | <transition-timing-function>`\n\n* Transition-property: 指定过渡的属性值。\n* Transition-duration: 指定这个过渡的持续时间\n* Transition-delay: 延迟过渡时间\n* Transition-timing-function: 指定过渡动画运行类型；\n  * ease\t越来越慢\n  * linear      匀速\n  * ease-in    先慢后快\n  * ease-out 先快后慢 \n  * ease-in-out 先慢后快再慢\n  * cubic-bezier()\n\n\n\n先来看一个transform和transition结合的demo：[字体歪斜变正](https://codepan.net/gist/02e3a0857615ee407878f1b46663f950)\n\n","source":"_posts/CSS3transform.md","raw":"---\ntitle: CSS3transform/transition\ndate: 2018-03-15 21:52\nupdated: 2018-04-16 12:19:18\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n# CSS3 transform\n\n先来了解下单位：\n\n* 度（deg）。一个圆360度\n\nTransform就指变换。\n\ntransform:\n\n* 矩阵  (matrix)\n  * 用六个指定的值来指定一个均匀的二维（2D）变换矩阵\n* 转换（translate）\n* 旋转（rotate）\n* 缩放（scale）\n* 倾斜（skew）\n\n<!--more-->\n\n但是还可以这样玩\n\n> scaleX, scaleY\n>\n> skewX, skewY\n>\n> translateX, translateY\n>\n> matrix3d\n>\n> `matrix(a, b, c, d, tx, ty)` 是 `matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)` 的简写\n\n* **transform-origin**\n  * 以一个点去变形\n* **transform-style**\n  * 确定元素的子元素是否位于3D空间中，还是在该元素所在的平面内被扁平化。\n\n\n# CSS transition\n\n`transition = <transition-property> | <transition-duration> | <transition-delay> | <transition-timing-function>`\n\n* Transition-property: 指定过渡的属性值。\n* Transition-duration: 指定这个过渡的持续时间\n* Transition-delay: 延迟过渡时间\n* Transition-timing-function: 指定过渡动画运行类型；\n  * ease\t越来越慢\n  * linear      匀速\n  * ease-in    先慢后快\n  * ease-out 先快后慢 \n  * ease-in-out 先慢后快再慢\n  * cubic-bezier()\n\n\n\n先来看一个transform和transition结合的demo：[字体歪斜变正](https://codepan.net/gist/02e3a0857615ee407878f1b46663f950)\n\n","slug":"CSS3transform","published":1,"photos":[],"link":"","_id":"cjollnbm8000munfyyv24ydhf","content":"<h1 id=\"CSS3-transform\"><a href=\"#CSS3-transform\" class=\"headerlink\" title=\"CSS3 transform\"></a>CSS3 transform</h1><p>先来了解下单位：</p>\n<ul>\n<li>度（deg）。一个圆360度</li>\n</ul>\n<p>Transform就指变换。</p>\n<p>transform:</p>\n<ul>\n<li>矩阵  (matrix)<ul>\n<li>用六个指定的值来指定一个均匀的二维（2D）变换矩阵</li>\n</ul>\n</li>\n<li>转换（translate）</li>\n<li>旋转（rotate）</li>\n<li>缩放（scale）</li>\n<li>倾斜（skew）</li>\n</ul>\n<a id=\"more\"></a>\n<p>但是还可以这样玩</p>\n<blockquote>\n<p>scaleX, scaleY</p>\n<p>skewX, skewY</p>\n<p>translateX, translateY</p>\n<p>matrix3d</p>\n<p><code>matrix(a, b, c, d, tx, ty)</code> 是 <code>matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)</code> 的简写</p>\n</blockquote>\n<ul>\n<li><strong>transform-origin</strong><ul>\n<li>以一个点去变形</li>\n</ul>\n</li>\n<li><strong>transform-style</strong><ul>\n<li>确定元素的子元素是否位于3D空间中，还是在该元素所在的平面内被扁平化。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h1><p><code>transition = &lt;transition-property&gt; | &lt;transition-duration&gt; | &lt;transition-delay&gt; | &lt;transition-timing-function&gt;</code></p>\n<ul>\n<li>Transition-property: 指定过渡的属性值。</li>\n<li>Transition-duration: 指定这个过渡的持续时间</li>\n<li>Transition-delay: 延迟过渡时间</li>\n<li>Transition-timing-function: 指定过渡动画运行类型；<ul>\n<li>ease    越来越慢</li>\n<li>linear      匀速</li>\n<li>ease-in    先慢后快</li>\n<li>ease-out 先快后慢 </li>\n<li>ease-in-out 先慢后快再慢</li>\n<li>cubic-bezier()</li>\n</ul>\n</li>\n</ul>\n<p>先来看一个transform和transition结合的demo：<a href=\"https://codepan.net/gist/02e3a0857615ee407878f1b46663f950\" target=\"_blank\" rel=\"noopener\">字体歪斜变正</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CSS3-transform\"><a href=\"#CSS3-transform\" class=\"headerlink\" title=\"CSS3 transform\"></a>CSS3 transform</h1><p>先来了解下单位：</p>\n<ul>\n<li>度（deg）。一个圆360度</li>\n</ul>\n<p>Transform就指变换。</p>\n<p>transform:</p>\n<ul>\n<li>矩阵  (matrix)<ul>\n<li>用六个指定的值来指定一个均匀的二维（2D）变换矩阵</li>\n</ul>\n</li>\n<li>转换（translate）</li>\n<li>旋转（rotate）</li>\n<li>缩放（scale）</li>\n<li>倾斜（skew）</li>\n</ul>","more":"<p>但是还可以这样玩</p>\n<blockquote>\n<p>scaleX, scaleY</p>\n<p>skewX, skewY</p>\n<p>translateX, translateY</p>\n<p>matrix3d</p>\n<p><code>matrix(a, b, c, d, tx, ty)</code> 是 <code>matrix3d(a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1)</code> 的简写</p>\n</blockquote>\n<ul>\n<li><strong>transform-origin</strong><ul>\n<li>以一个点去变形</li>\n</ul>\n</li>\n<li><strong>transform-style</strong><ul>\n<li>确定元素的子元素是否位于3D空间中，还是在该元素所在的平面内被扁平化。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h1><p><code>transition = &lt;transition-property&gt; | &lt;transition-duration&gt; | &lt;transition-delay&gt; | &lt;transition-timing-function&gt;</code></p>\n<ul>\n<li>Transition-property: 指定过渡的属性值。</li>\n<li>Transition-duration: 指定这个过渡的持续时间</li>\n<li>Transition-delay: 延迟过渡时间</li>\n<li>Transition-timing-function: 指定过渡动画运行类型；<ul>\n<li>ease    越来越慢</li>\n<li>linear      匀速</li>\n<li>ease-in    先慢后快</li>\n<li>ease-out 先快后慢 </li>\n<li>ease-in-out 先慢后快再慢</li>\n<li>cubic-bezier()</li>\n</ul>\n</li>\n</ul>\n<p>先来看一个transform和transition结合的demo：<a href=\"https://codepan.net/gist/02e3a0857615ee407878f1b46663f950\" target=\"_blank\" rel=\"noopener\">字体歪斜变正</a></p>"},{"title":"CSS之em/rem","date":"2018-08-13T10:51:00.000Z","comments":1,"layout":"post","_content":"\n# CSS之em/rem\n#blog\n先来个一句话概括：\n- `em`相对于父元素\n- `rem`相对于根元素\n所以这些都是相对单位。\n\n默认`font-size`为16px所以我们可以知道`1px和1em`之间的关系\n> 1em = 16px  \n> 1px = 1 ÷ 16 = 0.0625em  \n\n那么我们知道具体的px值后我们就能直接换算，比如：\n> 我想要800px转换成`em`  \n> 800 * 0.0625em = 50em  \n\n那么如果父元素不为16px，根据上面我们可以得出一个公式：\n> 1 ÷ 父元素的font-size × 你想要的像素值 = em值  \n\n## REM\n那么REM其实和EM没啥区别。\n本质在REM以`<html>`标签中的`font-size`为依据","source":"_posts/CSS之em-rem.md","raw":"---\ntitle: CSS之em/rem\ndate: 2018-08-13 18:51\ncomments: true\nlayout: post\ntags: CSS\ncategories: CSS\n---\n\n# CSS之em/rem\n#blog\n先来个一句话概括：\n- `em`相对于父元素\n- `rem`相对于根元素\n所以这些都是相对单位。\n\n默认`font-size`为16px所以我们可以知道`1px和1em`之间的关系\n> 1em = 16px  \n> 1px = 1 ÷ 16 = 0.0625em  \n\n那么我们知道具体的px值后我们就能直接换算，比如：\n> 我想要800px转换成`em`  \n> 800 * 0.0625em = 50em  \n\n那么如果父元素不为16px，根据上面我们可以得出一个公式：\n> 1 ÷ 父元素的font-size × 你想要的像素值 = em值  \n\n## REM\n那么REM其实和EM没啥区别。\n本质在REM以`<html>`标签中的`font-size`为依据","slug":"CSS之em-rem","published":1,"updated":"2018-08-13T10:53:40.296Z","photos":[],"link":"","_id":"cjollnbmc000qunfyzvhafpyt","content":"<h1 id=\"CSS之em-rem\"><a href=\"#CSS之em-rem\" class=\"headerlink\" title=\"CSS之em/rem\"></a>CSS之em/rem</h1><p>#blog<br>先来个一句话概括：</p>\n<ul>\n<li><code>em</code>相对于父元素</li>\n<li><code>rem</code>相对于根元素<br>所以这些都是相对单位。</li>\n</ul>\n<p>默认<code>font-size</code>为16px所以我们可以知道<code>1px和1em</code>之间的关系</p>\n<blockquote>\n<p>1em = 16px<br>1px = 1 ÷ 16 = 0.0625em  </p>\n</blockquote>\n<p>那么我们知道具体的px值后我们就能直接换算，比如：</p>\n<blockquote>\n<p>我想要800px转换成<code>em</code><br>800 * 0.0625em = 50em  </p>\n</blockquote>\n<p>那么如果父元素不为16px，根据上面我们可以得出一个公式：</p>\n<blockquote>\n<p>1 ÷ 父元素的font-size × 你想要的像素值 = em值  </p>\n</blockquote>\n<h2 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h2><p>那么REM其实和EM没啥区别。<br>本质在REM以<code>&lt;html&gt;</code>标签中的<code>font-size</code>为依据</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS之em-rem\"><a href=\"#CSS之em-rem\" class=\"headerlink\" title=\"CSS之em/rem\"></a>CSS之em/rem</h1><p>#blog<br>先来个一句话概括：</p>\n<ul>\n<li><code>em</code>相对于父元素</li>\n<li><code>rem</code>相对于根元素<br>所以这些都是相对单位。</li>\n</ul>\n<p>默认<code>font-size</code>为16px所以我们可以知道<code>1px和1em</code>之间的关系</p>\n<blockquote>\n<p>1em = 16px<br>1px = 1 ÷ 16 = 0.0625em  </p>\n</blockquote>\n<p>那么我们知道具体的px值后我们就能直接换算，比如：</p>\n<blockquote>\n<p>我想要800px转换成<code>em</code><br>800 * 0.0625em = 50em  </p>\n</blockquote>\n<p>那么如果父元素不为16px，根据上面我们可以得出一个公式：</p>\n<blockquote>\n<p>1 ÷ 父元素的font-size × 你想要的像素值 = em值  </p>\n</blockquote>\n<h2 id=\"REM\"><a href=\"#REM\" class=\"headerlink\" title=\"REM\"></a>REM</h2><p>那么REM其实和EM没啥区别。<br>本质在REM以<code>&lt;html&gt;</code>标签中的<code>font-size</code>为依据</p>\n"},{"title":"CSS布局","date":"2018-04-01T06:50:00.000Z","comments":1,"layout":"post","_content":"\n## 两栏——左固定右自适应布局\n\n## 方法一\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n\n// css \n.left {\n  width: 40px;\n  height: 200px;\n  background: red;\n  float: left\n}\n\n.right {\n  height: 200px;\n  margin-left: 40px;\n  background: blue;\n}\n```\n\n[Demo](https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561)\n\n<!--more-->\n\n## 方法二\n\n```Html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n\n//css\n.left {\n  position: absolute;\n  height: 200px;\n  width: 40px;\n  background: red;\n}\n.right {\n  height: 200px;\n  margin-left: 40px;\n  background: blue;\n}\n```\n\n[Demo](https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98)","source":"_posts/CSS布局.md","raw":"---\ntitle: CSS布局\ndate: 2018-04-01 14:50\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n## 两栏——左固定右自适应布局\n\n## 方法一\n\n```html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n\n// css \n.left {\n  width: 40px;\n  height: 200px;\n  background: red;\n  float: left\n}\n\n.right {\n  height: 200px;\n  margin-left: 40px;\n  background: blue;\n}\n```\n\n[Demo](https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561)\n\n<!--more-->\n\n## 方法二\n\n```Html\n<div class=\"left\"></div>\n<div class=\"right\"></div>\n\n//css\n.left {\n  position: absolute;\n  height: 200px;\n  width: 40px;\n  background: red;\n}\n.right {\n  height: 200px;\n  margin-left: 40px;\n  background: blue;\n}\n```\n\n[Demo](https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98)","slug":"CSS布局","published":1,"updated":"2018-04-01T07:28:26.254Z","photos":[],"link":"","_id":"cjollnbmf000runfy9h3gu97a","content":"<h2 id=\"两栏——左固定右自适应布局\"><a href=\"#两栏——左固定右自适应布局\" class=\"headerlink\" title=\"两栏——左固定右自适应布局\"></a>两栏——左固定右自适应布局</h2><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// css </span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  width: 40px;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  float: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  margin-left: 40px;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561\" target=\"_blank\" rel=\"noopener\">Demo</a></p>\n<a id=\"more\"></a>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//css</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  width: 40px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  margin-left: 40px;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98\" target=\"_blank\" rel=\"noopener\">Demo</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"两栏——左固定右自适应布局\"><a href=\"#两栏——左固定右自适应布局\" class=\"headerlink\" title=\"两栏——左固定右自适应布局\"></a>两栏——左固定右自适应布局</h2><h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// css </span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  width: 40px;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  float: left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  margin-left: 40px;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepan.net/gist/9c5dd595475bf4a68adc87c895f6e561\" target=\"_blank\" rel=\"noopener\">Demo</a></p>","more":"<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">//css</span><br><span class=\"line\">.left &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  width: 40px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.right &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">  margin-left: 40px;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://codepan.net/gist/4166718a79e3d3013d43a63bb4220b98\" target=\"_blank\" rel=\"noopener\">Demo</a></p>"},{"title":"《Css权威指南》","date":"2018-05-28T12:18:00.000Z","comments":1,"layout":"post","_content":"\n# CSS权威指南\n## 候选样式表\n```html\n<link rel=\"alternate stylesheet\" type=\"text/css\" href=\"styles.css\" title=\"Big Text\"/>\n```\n<!--more-->\n候选样式表在大多数`Gecko`的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.\n或者设置同样的`title`属性，之后设置不同的`media`属性，在各种场景会使用对应的`css`文件\n## @import\n@import也可以应用媒体。\n```html\n@import url(styles.css) all;\n@import url(styles1.css) print;\n@import url(styles2.css) print, screen;\n```","source":"_posts/CSS权威指南.md","raw":"---\ntitle: 《Css权威指南》\ndate: 2018-05-28 20:18\ncomments: true\nlayout: post\ntags: 读书笔记\ncategories: 读书笔记\n---\n\n# CSS权威指南\n## 候选样式表\n```html\n<link rel=\"alternate stylesheet\" type=\"text/css\" href=\"styles.css\" title=\"Big Text\"/>\n```\n<!--more-->\n候选样式表在大多数`Gecko`的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.\n或者设置同样的`title`属性，之后设置不同的`media`属性，在各种场景会使用对应的`css`文件\n## @import\n@import也可以应用媒体。\n```html\n@import url(styles.css) all;\n@import url(styles1.css) print;\n@import url(styles2.css) print, screen;\n```","slug":"CSS权威指南","published":1,"updated":"2018-05-28T12:18:47.381Z","photos":[],"link":"","_id":"cjollnbmi000vunfyumes9lrw","content":"<h1 id=\"CSS权威指南\"><a href=\"#CSS权威指南\" class=\"headerlink\" title=\"CSS权威指南\"></a>CSS权威指南</h1><h2 id=\"候选样式表\"><a href=\"#候选样式表\" class=\"headerlink\" title=\"候选样式表\"></a>候选样式表</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Big Text\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>候选样式表在大多数<code>Gecko</code>的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.<br>或者设置同样的<code>title</code>属性，之后设置不同的<code>media</code>属性，在各种场景会使用对应的<code>css</code>文件</p>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h2><p>@import也可以应用媒体。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import url(styles.css) all;</span><br><span class=\"line\">@import url(styles1.css) print;</span><br><span class=\"line\">@import url(styles2.css) print, screen;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CSS权威指南\"><a href=\"#CSS权威指南\" class=\"headerlink\" title=\"CSS权威指南\"></a>CSS权威指南</h1><h2 id=\"候选样式表\"><a href=\"#候选样式表\" class=\"headerlink\" title=\"候选样式表\"></a>候选样式表</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"alternate stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Big Text\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>候选样式表在大多数<code>Gecko</code>的浏览器中得到支持，如：Firefox、Netscape以及Opera 7.<br>或者设置同样的<code>title</code>属性，之后设置不同的<code>media</code>属性，在各种场景会使用对应的<code>css</code>文件</p>\n<h2 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"@import\"></a>@import</h2><p>@import也可以应用媒体。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import url(styles.css) all;</span><br><span class=\"line\">@import url(styles1.css) print;</span><br><span class=\"line\">@import url(styles2.css) print, screen;</span><br></pre></td></tr></table></figure></p>"},{"title":"Cookie、Session","date":"2018-03-17T06:54:00.000Z","comments":1,"layout":"post","_content":"\n## Cookie\n\n中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。\n\n> 摘自维基百科\n\n<!--more-->\n\n按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。\n\n### 为什么要有Cookie？\n\n因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。**也就是说服务器会给客户端发送一段cookie**.\n\nLocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。\n\n## Session\n\n它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。\n\n## Cookie和Session的关系\n\n这里我做了一个图![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png)","source":"_posts/Cookie-Session.md","raw":"---\ntitle: Cookie、Session\ndate: 2018-03-17 14:54\ncomments: true\nlayout: post\ntags: [计算机网络]\ncategories: 计算机网络\n---\n\n## Cookie\n\n中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。\n\n> 摘自维基百科\n\n<!--more-->\n\n按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。\n\n### 为什么要有Cookie？\n\n因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。**也就是说服务器会给客户端发送一段cookie**.\n\nLocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。\n\n## Session\n\n它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。\n\n## Cookie和Session的关系\n\n这里我做了一个图![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png)","slug":"Cookie-Session","published":1,"updated":"2018-03-17T07:43:26.135Z","photos":[],"link":"","_id":"cjollnbmn000xunfywrztm30d","content":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。</p>\n<blockquote>\n<p>摘自维基百科</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。</p>\n<h3 id=\"为什么要有Cookie？\"><a href=\"#为什么要有Cookie？\" class=\"headerlink\" title=\"为什么要有Cookie？\"></a>为什么要有Cookie？</h3><p>因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。<strong>也就是说服务器会给客户端发送一段cookie</strong>.</p>\n<p>LocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。</p>\n<h2 id=\"Cookie和Session的关系\"><a href=\"#Cookie和Session的关系\" class=\"headerlink\" title=\"Cookie和Session的关系\"></a>Cookie和Session的关系</h2><p>这里我做了一个图<img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>中文名称为“小型文本文件”或“小甜饼”，总大小要小于4kb，并且尽量保证cookie的个数小于20个。</p>\n<blockquote>\n<p>摘自维基百科</p>\n</blockquote>","more":"<p>按存在时间所分，可以分为非持久Cookie和持久Cookie。那么非持久Cookie是保存在内存中，即你关闭浏览器就会消失。而非持久Cookie保存在硬盘中，只有你去清理或者Cookie到了过期时间该Cookie才会消失。</p>\n<h3 id=\"为什么要有Cookie？\"><a href=\"#为什么要有Cookie？\" class=\"headerlink\" title=\"为什么要有Cookie？\"></a>为什么要有Cookie？</h3><p>因为HTTP协议是无状态的。也就是说，服务器并不知道你上次做了什么操作。所以我们需要一个帮手去记录我们刚刚都在网页上做了什么操作，所以Cookie就诞生了。<strong>也就是说服务器会给客户端发送一段cookie</strong>.</p>\n<p>LocalStorage和SessionStorage都是本地存储，不会被发送到服务器上。同时空间比Cookie大很多，一般支持5-10M。 与Cookie类似，每个域名下会有不同的localStorage和SessionStorage实例，而且localStorage可以在多个标签页中互相访问。 其中LocalStorage没有过期时间，除非手动删除它会一直存在。而SessionStorage在浏览器会话结束时（关闭标签页，不包括刷新和跳转）清空。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>它其实是一个抽象的概念。它本质上是借助cookie本身和后端存储实现的。</p>\n<h2 id=\"Cookie和Session的关系\"><a href=\"#Cookie和Session的关系\" class=\"headerlink\" title=\"Cookie和Session的关系\"></a>Cookie和Session的关系</h2><p>这里我做了一个图<img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/WX20180317-145114@2x.png\" alt=\"\"></p>"},{"title":"CSS3选择器","date":"2018-03-05T07:23:00.000Z","comments":1,"layout":"post","_content":"\n# Css3选择器\n\n在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！\n\n![CSS选择器](http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png)","source":"_posts/Css3选择器.md","raw":"---\ntitle: CSS3选择器\ndate: 2018-03-05 15:23\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n# Css3选择器\n\n在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！\n\n![CSS选择器](http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png)","slug":"Css3选择器","published":1,"updated":"2018-03-05T07:26:02.427Z","photos":[],"link":"","_id":"cjollnbms0011unfyv5j1f38k","content":"<h1 id=\"Css3选择器\"><a href=\"#Css3选择器\" class=\"headerlink\" title=\"Css3选择器\"></a>Css3选择器</h1><p>在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！</p>\n<p><img src=\"http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png\" alt=\"CSS选择器\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Css3选择器\"><a href=\"#Css3选择器\" class=\"headerlink\" title=\"Css3选择器\"></a>Css3选择器</h1><p>在写css最基本的就是如何去选择节点去改变样式了。特地做了个思维导图把现有的选择器都做成了个思维导图，有不足的地方大家来提意见！</p>\n<p><img src=\"http://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/CSS3%E9%80%89%E6%8B%A9%E5%99%A8.png\" alt=\"CSS选择器\"></p>\n"},{"title":"DOM","date":"2017-12-10T07:17:00.000Z","comments":1,"thumbnail":"http://ozar6ogjb.bkt.clouddn.com/DOM.jpg","layout":"post","_content":"\n# 文档对象模型\n\n一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。\n\n\n\n## 节点属性\n\n每个节点的属性\n\n* childNodes\n  * 它里面有一个对象叫NodeList\n* patentNode\n* previousSibling\n* nextSibling\n* ownerDoucment\n\n\n<!--more-->\n\n## Node类型\n\n* appendChild（）\n  * 向childNodes列表的末尾添加一个节点\n* insertBefour()\n  * ​把节点放在childNodes列表的特定位置，它接受两参数要插入的节点，和作为参照的节点。\n* replaceChild()\n  * 把节点替换，这个方法接受两个参数：要插入的节点和要替换的节点\n* removeChild()\n  * 看英文就知道remove,移除。就只接受一个参数：就是你要移除的节点。\n* cloneNode()\n  * 这个方法接受一个布尔值参数，在参数为true进行深复制，反之则执行浅复制。\n* normalize()\n  * 处理文档树中的文本节点。\n\n## Document类型\nnodeType的值是9.\n\ndocument的对象是window对象的一个属性，因此可以将其作为全局对象来访问。\n\n查找元素的方法：\n* getElementById()\n* getElementByTagName()\n* getElementByName()\n* document.anchors\n  * 包含文档中所有带name特性的<a>元素\n* document.applets\n  * 包含文档中所有的<applet>元素​\n* document.forms\n* document.images\n* document.links\n  * 包含文档中所有带href特性的<a>元素\n\n## Element类型\nnodeType的值是1。\n\n它提供了对元素标签名、子节点及特性的访问。\n\n操作特性的DOM方法：\n* getAttribute()\n* setAttribute()\n* removeAttribute()\n\nattributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个“动态”的集合。\nNamedNodeMap对象有下列方法\n* getNamedItem(name)\n  * 返回nodeName属性等于name的节点\n* removeNamedItem(name)\n  * 从列表移除nodeName属性等于name的节点\n* setNamedItem(node)\n  * 向列表中添加节点，以节点的nodeName属性为索引\n* item(pos)\n  * 返回位于数字pos属性位置处的节点。\n\n## Text类型\nnodeType的值是3\n\n下列方法可以操作节点中的文本：\n* appendData(text)\n  * 将text添加到节点的末尾\n* deleteData(offset, count)\n  * 从**offset**指定的位置开始删除**count**个字符\n* insertData(offset, text)\n  * 在**offset**指定的位置插入**text**\n* replaceData(offset, count, text)\n  * 用**text**替换从**offset**指定的位置开始到**offset + count**为止处的文本\n* splitText(offset)\n  * 从**offset**指定的位置将当前文本节点分成两个文本节点\n* substringData(offset, count)\n  * 提取从**offset**指定的位置开始到**offset + count**为止处的字符串\n\n* document.createTextNode()\n  * 接受一个参数就是，要插入的文本内容\n  * document.createTextNode(\"<strong>Hello</strong> world!\");\n\n### 文本节点合并\nnormalize()\n\n### 文本节点分割\nsplitText()\n\n## Comment类型\nnodeType的值是8\n\nComment类型与Text类型继承自相同的基类，所以它拥有除了splitText()之外的所有字符串操作方法。\ndocument.createComment()\n创建注释节点\n\n\n\n## CDATASection类型\nnodeType的值是4\n\nCDATA区域只会出现在XML文档中\n\n## DocumentType类型\nnodeType的值是10\n\nDocumentType包含着与文档的doctype有关的所有信息。\n\n## DocumentFragment类型\nnodeType的值是11\n\nDocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。\n\n该接口继承 Node 的全部方法，并实现了 ParentNode 接口中的方法。\n\n## Attr类型\nnodeType的值是2.\n\nAttr对象有三个属性：name、 value、 specified\n\n#总结：\nDOM由各种节点构成：\n\n1. 最基本的节点类型是Node;所有其他类型都继承自Node。\n2. Document类型表示整个文档，是一组分层节点的根节点。在JS中document对象是Document的一个实例。\n3. Element节点表示文档中所有HTML或XML元素，可以用来操作这些元素的内容和特性。\n4. 还有一些节点就是文本内容啊、注释、文档类型、CDATA区域和文档片段。\n5. 理解DOM的关键，就是理解DOM对性能的影响。DOM操作是Js程序中开销最大的部分，因此访问NodeList导致的问题为最多。所以每次访问NodeList对象，都会运行一次查询。\n6. **尽量减少DOM操作！！！**\n\n\n\n## DOM扩展\nLeval 1两个方法：\n1. querySelector()\n2. querySelectorAll()\n\nLevel 2 的一个方法：\n1. matchesSelector()\n\n### 元素遍历\nElement Traversal API 为DOM元素添加了以下5个属性：\n1. childElementCount: 返回子元素的个数\n2. firstElementChild：指向第一个子元素\n3. lastElementChild：指向最后一个子元素\n4. previousElementSibling ：指向前一个同辈元素\n5. nextElementSibling：指向后一个同辈元素\n\n### 与类相关的扩充\n1.getElementsByClassName()\n2.classList\n\nclassList属性有以下方法：\n* add(value)\n* contains(value)\n* remove(value)\n* toggle(value)\n\n### 焦点管理\ndocument.actoveElement()\ndocument.hasFocus()\n\n### 插入标记\n* innerHTML\n* outerHTML\n* insertAdjacentHTML()方法\n  * beforebegin: 在**当前元素之前**插入一个紧邻的同辈元素\n  * afterbegin：在**当前元素之下**插入一个新的子元素或**第一个子元素之前**再插入新的子元素\n  * beforeend：在**当前元素之下**插入一个新的子元素或在**最后一个子元素之**后再插入新的子元素\n  * afterend：在**当前元素之后**插入一个紧邻的同辈元素。\n\n### scrollIntoView()","source":"_posts/DOM.md","raw":"---\ntitle: DOM\ndate: 2017-12-10 15:17\ncomments: true\nthumbnail: http://ozar6ogjb.bkt.clouddn.com/DOM.jpg\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# 文档对象模型\n\n一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。\n\n\n\n## 节点属性\n\n每个节点的属性\n\n* childNodes\n  * 它里面有一个对象叫NodeList\n* patentNode\n* previousSibling\n* nextSibling\n* ownerDoucment\n\n\n<!--more-->\n\n## Node类型\n\n* appendChild（）\n  * 向childNodes列表的末尾添加一个节点\n* insertBefour()\n  * ​把节点放在childNodes列表的特定位置，它接受两参数要插入的节点，和作为参照的节点。\n* replaceChild()\n  * 把节点替换，这个方法接受两个参数：要插入的节点和要替换的节点\n* removeChild()\n  * 看英文就知道remove,移除。就只接受一个参数：就是你要移除的节点。\n* cloneNode()\n  * 这个方法接受一个布尔值参数，在参数为true进行深复制，反之则执行浅复制。\n* normalize()\n  * 处理文档树中的文本节点。\n\n## Document类型\nnodeType的值是9.\n\ndocument的对象是window对象的一个属性，因此可以将其作为全局对象来访问。\n\n查找元素的方法：\n* getElementById()\n* getElementByTagName()\n* getElementByName()\n* document.anchors\n  * 包含文档中所有带name特性的<a>元素\n* document.applets\n  * 包含文档中所有的<applet>元素​\n* document.forms\n* document.images\n* document.links\n  * 包含文档中所有带href特性的<a>元素\n\n## Element类型\nnodeType的值是1。\n\n它提供了对元素标签名、子节点及特性的访问。\n\n操作特性的DOM方法：\n* getAttribute()\n* setAttribute()\n* removeAttribute()\n\nattributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个“动态”的集合。\nNamedNodeMap对象有下列方法\n* getNamedItem(name)\n  * 返回nodeName属性等于name的节点\n* removeNamedItem(name)\n  * 从列表移除nodeName属性等于name的节点\n* setNamedItem(node)\n  * 向列表中添加节点，以节点的nodeName属性为索引\n* item(pos)\n  * 返回位于数字pos属性位置处的节点。\n\n## Text类型\nnodeType的值是3\n\n下列方法可以操作节点中的文本：\n* appendData(text)\n  * 将text添加到节点的末尾\n* deleteData(offset, count)\n  * 从**offset**指定的位置开始删除**count**个字符\n* insertData(offset, text)\n  * 在**offset**指定的位置插入**text**\n* replaceData(offset, count, text)\n  * 用**text**替换从**offset**指定的位置开始到**offset + count**为止处的文本\n* splitText(offset)\n  * 从**offset**指定的位置将当前文本节点分成两个文本节点\n* substringData(offset, count)\n  * 提取从**offset**指定的位置开始到**offset + count**为止处的字符串\n\n* document.createTextNode()\n  * 接受一个参数就是，要插入的文本内容\n  * document.createTextNode(\"<strong>Hello</strong> world!\");\n\n### 文本节点合并\nnormalize()\n\n### 文本节点分割\nsplitText()\n\n## Comment类型\nnodeType的值是8\n\nComment类型与Text类型继承自相同的基类，所以它拥有除了splitText()之外的所有字符串操作方法。\ndocument.createComment()\n创建注释节点\n\n\n\n## CDATASection类型\nnodeType的值是4\n\nCDATA区域只会出现在XML文档中\n\n## DocumentType类型\nnodeType的值是10\n\nDocumentType包含着与文档的doctype有关的所有信息。\n\n## DocumentFragment类型\nnodeType的值是11\n\nDocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。\n\n该接口继承 Node 的全部方法，并实现了 ParentNode 接口中的方法。\n\n## Attr类型\nnodeType的值是2.\n\nAttr对象有三个属性：name、 value、 specified\n\n#总结：\nDOM由各种节点构成：\n\n1. 最基本的节点类型是Node;所有其他类型都继承自Node。\n2. Document类型表示整个文档，是一组分层节点的根节点。在JS中document对象是Document的一个实例。\n3. Element节点表示文档中所有HTML或XML元素，可以用来操作这些元素的内容和特性。\n4. 还有一些节点就是文本内容啊、注释、文档类型、CDATA区域和文档片段。\n5. 理解DOM的关键，就是理解DOM对性能的影响。DOM操作是Js程序中开销最大的部分，因此访问NodeList导致的问题为最多。所以每次访问NodeList对象，都会运行一次查询。\n6. **尽量减少DOM操作！！！**\n\n\n\n## DOM扩展\nLeval 1两个方法：\n1. querySelector()\n2. querySelectorAll()\n\nLevel 2 的一个方法：\n1. matchesSelector()\n\n### 元素遍历\nElement Traversal API 为DOM元素添加了以下5个属性：\n1. childElementCount: 返回子元素的个数\n2. firstElementChild：指向第一个子元素\n3. lastElementChild：指向最后一个子元素\n4. previousElementSibling ：指向前一个同辈元素\n5. nextElementSibling：指向后一个同辈元素\n\n### 与类相关的扩充\n1.getElementsByClassName()\n2.classList\n\nclassList属性有以下方法：\n* add(value)\n* contains(value)\n* remove(value)\n* toggle(value)\n\n### 焦点管理\ndocument.actoveElement()\ndocument.hasFocus()\n\n### 插入标记\n* innerHTML\n* outerHTML\n* insertAdjacentHTML()方法\n  * beforebegin: 在**当前元素之前**插入一个紧邻的同辈元素\n  * afterbegin：在**当前元素之下**插入一个新的子元素或**第一个子元素之前**再插入新的子元素\n  * beforeend：在**当前元素之下**插入一个新的子元素或在**最后一个子元素之**后再插入新的子元素\n  * afterend：在**当前元素之后**插入一个紧邻的同辈元素。\n\n### scrollIntoView()","slug":"DOM","published":1,"updated":"2017-12-13T13:47:24.096Z","photos":[],"link":"","_id":"cjollnbmw0014unfyg0hwgqwi","content":"<h1 id=\"文档对象模型\"><a href=\"#文档对象模型\" class=\"headerlink\" title=\"文档对象模型\"></a>文档对象模型</h1><p>一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。</p>\n<h2 id=\"节点属性\"><a href=\"#节点属性\" class=\"headerlink\" title=\"节点属性\"></a>节点属性</h2><p>每个节点的属性</p>\n<ul>\n<li>childNodes<ul>\n<li>它里面有一个对象叫NodeList</li>\n</ul>\n</li>\n<li>patentNode</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>ownerDoucment</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Node类型\"><a href=\"#Node类型\" class=\"headerlink\" title=\"Node类型\"></a>Node类型</h2><ul>\n<li>appendChild（）<ul>\n<li>向childNodes列表的末尾添加一个节点</li>\n</ul>\n</li>\n<li>insertBefour()<ul>\n<li>​把节点放在childNodes列表的特定位置，它接受两参数要插入的节点，和作为参照的节点。</li>\n</ul>\n</li>\n<li>replaceChild()<ul>\n<li>把节点替换，这个方法接受两个参数：要插入的节点和要替换的节点</li>\n</ul>\n</li>\n<li>removeChild()<ul>\n<li>看英文就知道remove,移除。就只接受一个参数：就是你要移除的节点。</li>\n</ul>\n</li>\n<li>cloneNode()<ul>\n<li>这个方法接受一个布尔值参数，在参数为true进行深复制，反之则执行浅复制。</li>\n</ul>\n</li>\n<li>normalize()<ul>\n<li>处理文档树中的文本节点。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Document类型\"><a href=\"#Document类型\" class=\"headerlink\" title=\"Document类型\"></a>Document类型</h2><p>nodeType的值是9.</p>\n<p>document的对象是window对象的一个属性，因此可以将其作为全局对象来访问。</p>\n<p>查找元素的方法：</p>\n<ul>\n<li>getElementById()</li>\n<li>getElementByTagName()</li>\n<li>getElementByName()</li>\n<li>document.anchors<ul>\n<li>包含文档中所有带name特性的<a>元素</a></li>\n</ul>\n</li>\n<li>document.applets<ul>\n<li>包含文档中所有的<applet>元素​</applet></li>\n</ul>\n</li>\n<li>document.forms</li>\n<li>document.images</li>\n<li>document.links<ul>\n<li>包含文档中所有带href特性的<a>元素</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Element类型\"><a href=\"#Element类型\" class=\"headerlink\" title=\"Element类型\"></a>Element类型</h2><p>nodeType的值是1。</p>\n<p>它提供了对元素标签名、子节点及特性的访问。</p>\n<p>操作特性的DOM方法：</p>\n<ul>\n<li>getAttribute()</li>\n<li>setAttribute()</li>\n<li>removeAttribute()</li>\n</ul>\n<p>attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个“动态”的集合。<br>NamedNodeMap对象有下列方法</p>\n<ul>\n<li>getNamedItem(name)<ul>\n<li>返回nodeName属性等于name的节点</li>\n</ul>\n</li>\n<li>removeNamedItem(name)<ul>\n<li>从列表移除nodeName属性等于name的节点</li>\n</ul>\n</li>\n<li>setNamedItem(node)<ul>\n<li>向列表中添加节点，以节点的nodeName属性为索引</li>\n</ul>\n</li>\n<li>item(pos)<ul>\n<li>返回位于数字pos属性位置处的节点。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Text类型\"><a href=\"#Text类型\" class=\"headerlink\" title=\"Text类型\"></a>Text类型</h2><p>nodeType的值是3</p>\n<p>下列方法可以操作节点中的文本：</p>\n<ul>\n<li>appendData(text)<ul>\n<li>将text添加到节点的末尾</li>\n</ul>\n</li>\n<li>deleteData(offset, count)<ul>\n<li>从<strong>offset</strong>指定的位置开始删除<strong>count</strong>个字符</li>\n</ul>\n</li>\n<li>insertData(offset, text)<ul>\n<li>在<strong>offset</strong>指定的位置插入<strong>text</strong></li>\n</ul>\n</li>\n<li>replaceData(offset, count, text)<ul>\n<li>用<strong>text</strong>替换从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的文本</li>\n</ul>\n</li>\n<li>splitText(offset)<ul>\n<li>从<strong>offset</strong>指定的位置将当前文本节点分成两个文本节点</li>\n</ul>\n</li>\n<li><p>substringData(offset, count)</p>\n<ul>\n<li>提取从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的字符串</li>\n</ul>\n</li>\n<li><p>document.createTextNode()</p>\n<ul>\n<li>接受一个参数就是，要插入的文本内容</li>\n<li>document.createTextNode(“<strong>Hello</strong> world!”);</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文本节点合并\"><a href=\"#文本节点合并\" class=\"headerlink\" title=\"文本节点合并\"></a>文本节点合并</h3><p>normalize()</p>\n<h3 id=\"文本节点分割\"><a href=\"#文本节点分割\" class=\"headerlink\" title=\"文本节点分割\"></a>文本节点分割</h3><p>splitText()</p>\n<h2 id=\"Comment类型\"><a href=\"#Comment类型\" class=\"headerlink\" title=\"Comment类型\"></a>Comment类型</h2><p>nodeType的值是8</p>\n<p>Comment类型与Text类型继承自相同的基类，所以它拥有除了splitText()之外的所有字符串操作方法。<br>document.createComment()<br>创建注释节点</p>\n<h2 id=\"CDATASection类型\"><a href=\"#CDATASection类型\" class=\"headerlink\" title=\"CDATASection类型\"></a>CDATASection类型</h2><p>nodeType的值是4</p>\n<p>CDATA区域只会出现在XML文档中</p>\n<h2 id=\"DocumentType类型\"><a href=\"#DocumentType类型\" class=\"headerlink\" title=\"DocumentType类型\"></a>DocumentType类型</h2><p>nodeType的值是10</p>\n<p>DocumentType包含着与文档的doctype有关的所有信息。</p>\n<h2 id=\"DocumentFragment类型\"><a href=\"#DocumentFragment类型\" class=\"headerlink\" title=\"DocumentFragment类型\"></a>DocumentFragment类型</h2><p>nodeType的值是11</p>\n<p>DocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。</p>\n<p>该接口继承 Node 的全部方法，并实现了 ParentNode 接口中的方法。</p>\n<h2 id=\"Attr类型\"><a href=\"#Attr类型\" class=\"headerlink\" title=\"Attr类型\"></a>Attr类型</h2><p>nodeType的值是2.</p>\n<p>Attr对象有三个属性：name、 value、 specified</p>\n<p>#总结：<br>DOM由各种节点构成：</p>\n<ol>\n<li>最基本的节点类型是Node;所有其他类型都继承自Node。</li>\n<li>Document类型表示整个文档，是一组分层节点的根节点。在JS中document对象是Document的一个实例。</li>\n<li>Element节点表示文档中所有HTML或XML元素，可以用来操作这些元素的内容和特性。</li>\n<li>还有一些节点就是文本内容啊、注释、文档类型、CDATA区域和文档片段。</li>\n<li>理解DOM的关键，就是理解DOM对性能的影响。DOM操作是Js程序中开销最大的部分，因此访问NodeList导致的问题为最多。所以每次访问NodeList对象，都会运行一次查询。</li>\n<li><strong>尽量减少DOM操作！！！</strong></li>\n</ol>\n<h2 id=\"DOM扩展\"><a href=\"#DOM扩展\" class=\"headerlink\" title=\"DOM扩展\"></a>DOM扩展</h2><p>Leval 1两个方法：</p>\n<ol>\n<li>querySelector()</li>\n<li>querySelectorAll()</li>\n</ol>\n<p>Level 2 的一个方法：</p>\n<ol>\n<li>matchesSelector()</li>\n</ol>\n<h3 id=\"元素遍历\"><a href=\"#元素遍历\" class=\"headerlink\" title=\"元素遍历\"></a>元素遍历</h3><p>Element Traversal API 为DOM元素添加了以下5个属性：</p>\n<ol>\n<li>childElementCount: 返回子元素的个数</li>\n<li>firstElementChild：指向第一个子元素</li>\n<li>lastElementChild：指向最后一个子元素</li>\n<li>previousElementSibling ：指向前一个同辈元素</li>\n<li>nextElementSibling：指向后一个同辈元素</li>\n</ol>\n<h3 id=\"与类相关的扩充\"><a href=\"#与类相关的扩充\" class=\"headerlink\" title=\"与类相关的扩充\"></a>与类相关的扩充</h3><p>1.getElementsByClassName()<br>2.classList</p>\n<p>classList属性有以下方法：</p>\n<ul>\n<li>add(value)</li>\n<li>contains(value)</li>\n<li>remove(value)</li>\n<li>toggle(value)</li>\n</ul>\n<h3 id=\"焦点管理\"><a href=\"#焦点管理\" class=\"headerlink\" title=\"焦点管理\"></a>焦点管理</h3><p>document.actoveElement()<br>document.hasFocus()</p>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><ul>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>insertAdjacentHTML()方法<ul>\n<li>beforebegin: 在<strong>当前元素之前</strong>插入一个紧邻的同辈元素</li>\n<li>afterbegin：在<strong>当前元素之下</strong>插入一个新的子元素或<strong>第一个子元素之前</strong>再插入新的子元素</li>\n<li>beforeend：在<strong>当前元素之下</strong>插入一个新的子元素或在<strong>最后一个子元素之</strong>后再插入新的子元素</li>\n<li>afterend：在<strong>当前元素之后</strong>插入一个紧邻的同辈元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"scrollIntoView\"><a href=\"#scrollIntoView\" class=\"headerlink\" title=\"scrollIntoView()\"></a>scrollIntoView()</h3>","site":{"data":{}},"excerpt":"<h1 id=\"文档对象模型\"><a href=\"#文档对象模型\" class=\"headerlink\" title=\"文档对象模型\"></a>文档对象模型</h1><p>一点小差异，IE中所有DOM对象都是以COM对象的形式实现的。</p>\n<h2 id=\"节点属性\"><a href=\"#节点属性\" class=\"headerlink\" title=\"节点属性\"></a>节点属性</h2><p>每个节点的属性</p>\n<ul>\n<li>childNodes<ul>\n<li>它里面有一个对象叫NodeList</li>\n</ul>\n</li>\n<li>patentNode</li>\n<li>previousSibling</li>\n<li>nextSibling</li>\n<li>ownerDoucment</li>\n</ul>","more":"<h2 id=\"Node类型\"><a href=\"#Node类型\" class=\"headerlink\" title=\"Node类型\"></a>Node类型</h2><ul>\n<li>appendChild（）<ul>\n<li>向childNodes列表的末尾添加一个节点</li>\n</ul>\n</li>\n<li>insertBefour()<ul>\n<li>​把节点放在childNodes列表的特定位置，它接受两参数要插入的节点，和作为参照的节点。</li>\n</ul>\n</li>\n<li>replaceChild()<ul>\n<li>把节点替换，这个方法接受两个参数：要插入的节点和要替换的节点</li>\n</ul>\n</li>\n<li>removeChild()<ul>\n<li>看英文就知道remove,移除。就只接受一个参数：就是你要移除的节点。</li>\n</ul>\n</li>\n<li>cloneNode()<ul>\n<li>这个方法接受一个布尔值参数，在参数为true进行深复制，反之则执行浅复制。</li>\n</ul>\n</li>\n<li>normalize()<ul>\n<li>处理文档树中的文本节点。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Document类型\"><a href=\"#Document类型\" class=\"headerlink\" title=\"Document类型\"></a>Document类型</h2><p>nodeType的值是9.</p>\n<p>document的对象是window对象的一个属性，因此可以将其作为全局对象来访问。</p>\n<p>查找元素的方法：</p>\n<ul>\n<li>getElementById()</li>\n<li>getElementByTagName()</li>\n<li>getElementByName()</li>\n<li>document.anchors<ul>\n<li>包含文档中所有带name特性的<a>元素</a></li>\n</ul>\n</li>\n<li>document.applets<ul>\n<li>包含文档中所有的<applet>元素​</applet></li>\n</ul>\n</li>\n<li>document.forms</li>\n<li>document.images</li>\n<li>document.links<ul>\n<li>包含文档中所有带href特性的<a>元素</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Element类型\"><a href=\"#Element类型\" class=\"headerlink\" title=\"Element类型\"></a>Element类型</h2><p>nodeType的值是1。</p>\n<p>它提供了对元素标签名、子节点及特性的访问。</p>\n<p>操作特性的DOM方法：</p>\n<ul>\n<li>getAttribute()</li>\n<li>setAttribute()</li>\n<li>removeAttribute()</li>\n</ul>\n<p>attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个“动态”的集合。<br>NamedNodeMap对象有下列方法</p>\n<ul>\n<li>getNamedItem(name)<ul>\n<li>返回nodeName属性等于name的节点</li>\n</ul>\n</li>\n<li>removeNamedItem(name)<ul>\n<li>从列表移除nodeName属性等于name的节点</li>\n</ul>\n</li>\n<li>setNamedItem(node)<ul>\n<li>向列表中添加节点，以节点的nodeName属性为索引</li>\n</ul>\n</li>\n<li>item(pos)<ul>\n<li>返回位于数字pos属性位置处的节点。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Text类型\"><a href=\"#Text类型\" class=\"headerlink\" title=\"Text类型\"></a>Text类型</h2><p>nodeType的值是3</p>\n<p>下列方法可以操作节点中的文本：</p>\n<ul>\n<li>appendData(text)<ul>\n<li>将text添加到节点的末尾</li>\n</ul>\n</li>\n<li>deleteData(offset, count)<ul>\n<li>从<strong>offset</strong>指定的位置开始删除<strong>count</strong>个字符</li>\n</ul>\n</li>\n<li>insertData(offset, text)<ul>\n<li>在<strong>offset</strong>指定的位置插入<strong>text</strong></li>\n</ul>\n</li>\n<li>replaceData(offset, count, text)<ul>\n<li>用<strong>text</strong>替换从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的文本</li>\n</ul>\n</li>\n<li>splitText(offset)<ul>\n<li>从<strong>offset</strong>指定的位置将当前文本节点分成两个文本节点</li>\n</ul>\n</li>\n<li><p>substringData(offset, count)</p>\n<ul>\n<li>提取从<strong>offset</strong>指定的位置开始到<strong>offset + count</strong>为止处的字符串</li>\n</ul>\n</li>\n<li><p>document.createTextNode()</p>\n<ul>\n<li>接受一个参数就是，要插入的文本内容</li>\n<li>document.createTextNode(“<strong>Hello</strong> world!”);</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文本节点合并\"><a href=\"#文本节点合并\" class=\"headerlink\" title=\"文本节点合并\"></a>文本节点合并</h3><p>normalize()</p>\n<h3 id=\"文本节点分割\"><a href=\"#文本节点分割\" class=\"headerlink\" title=\"文本节点分割\"></a>文本节点分割</h3><p>splitText()</p>\n<h2 id=\"Comment类型\"><a href=\"#Comment类型\" class=\"headerlink\" title=\"Comment类型\"></a>Comment类型</h2><p>nodeType的值是8</p>\n<p>Comment类型与Text类型继承自相同的基类，所以它拥有除了splitText()之外的所有字符串操作方法。<br>document.createComment()<br>创建注释节点</p>\n<h2 id=\"CDATASection类型\"><a href=\"#CDATASection类型\" class=\"headerlink\" title=\"CDATASection类型\"></a>CDATASection类型</h2><p>nodeType的值是4</p>\n<p>CDATA区域只会出现在XML文档中</p>\n<h2 id=\"DocumentType类型\"><a href=\"#DocumentType类型\" class=\"headerlink\" title=\"DocumentType类型\"></a>DocumentType类型</h2><p>nodeType的值是10</p>\n<p>DocumentType包含着与文档的doctype有关的所有信息。</p>\n<h2 id=\"DocumentFragment类型\"><a href=\"#DocumentFragment类型\" class=\"headerlink\" title=\"DocumentFragment类型\"></a>DocumentFragment类型</h2><p>nodeType的值是11</p>\n<p>DocumentFragment 接口表示一个没有父级文件的最小文档对象。它被当做一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染的操作(reflow) ，且不会导致性能等问题。</p>\n<p>该接口继承 Node 的全部方法，并实现了 ParentNode 接口中的方法。</p>\n<h2 id=\"Attr类型\"><a href=\"#Attr类型\" class=\"headerlink\" title=\"Attr类型\"></a>Attr类型</h2><p>nodeType的值是2.</p>\n<p>Attr对象有三个属性：name、 value、 specified</p>\n<p>#总结：<br>DOM由各种节点构成：</p>\n<ol>\n<li>最基本的节点类型是Node;所有其他类型都继承自Node。</li>\n<li>Document类型表示整个文档，是一组分层节点的根节点。在JS中document对象是Document的一个实例。</li>\n<li>Element节点表示文档中所有HTML或XML元素，可以用来操作这些元素的内容和特性。</li>\n<li>还有一些节点就是文本内容啊、注释、文档类型、CDATA区域和文档片段。</li>\n<li>理解DOM的关键，就是理解DOM对性能的影响。DOM操作是Js程序中开销最大的部分，因此访问NodeList导致的问题为最多。所以每次访问NodeList对象，都会运行一次查询。</li>\n<li><strong>尽量减少DOM操作！！！</strong></li>\n</ol>\n<h2 id=\"DOM扩展\"><a href=\"#DOM扩展\" class=\"headerlink\" title=\"DOM扩展\"></a>DOM扩展</h2><p>Leval 1两个方法：</p>\n<ol>\n<li>querySelector()</li>\n<li>querySelectorAll()</li>\n</ol>\n<p>Level 2 的一个方法：</p>\n<ol>\n<li>matchesSelector()</li>\n</ol>\n<h3 id=\"元素遍历\"><a href=\"#元素遍历\" class=\"headerlink\" title=\"元素遍历\"></a>元素遍历</h3><p>Element Traversal API 为DOM元素添加了以下5个属性：</p>\n<ol>\n<li>childElementCount: 返回子元素的个数</li>\n<li>firstElementChild：指向第一个子元素</li>\n<li>lastElementChild：指向最后一个子元素</li>\n<li>previousElementSibling ：指向前一个同辈元素</li>\n<li>nextElementSibling：指向后一个同辈元素</li>\n</ol>\n<h3 id=\"与类相关的扩充\"><a href=\"#与类相关的扩充\" class=\"headerlink\" title=\"与类相关的扩充\"></a>与类相关的扩充</h3><p>1.getElementsByClassName()<br>2.classList</p>\n<p>classList属性有以下方法：</p>\n<ul>\n<li>add(value)</li>\n<li>contains(value)</li>\n<li>remove(value)</li>\n<li>toggle(value)</li>\n</ul>\n<h3 id=\"焦点管理\"><a href=\"#焦点管理\" class=\"headerlink\" title=\"焦点管理\"></a>焦点管理</h3><p>document.actoveElement()<br>document.hasFocus()</p>\n<h3 id=\"插入标记\"><a href=\"#插入标记\" class=\"headerlink\" title=\"插入标记\"></a>插入标记</h3><ul>\n<li>innerHTML</li>\n<li>outerHTML</li>\n<li>insertAdjacentHTML()方法<ul>\n<li>beforebegin: 在<strong>当前元素之前</strong>插入一个紧邻的同辈元素</li>\n<li>afterbegin：在<strong>当前元素之下</strong>插入一个新的子元素或<strong>第一个子元素之前</strong>再插入新的子元素</li>\n<li>beforeend：在<strong>当前元素之下</strong>插入一个新的子元素或在<strong>最后一个子元素之</strong>后再插入新的子元素</li>\n<li>afterend：在<strong>当前元素之后</strong>插入一个紧邻的同辈元素。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"scrollIntoView\"><a href=\"#scrollIntoView\" class=\"headerlink\" title=\"scrollIntoView()\"></a>scrollIntoView()</h3>"},{"title":"Draft —— Rich Styling","date":"2018-07-06T13:02:00.000Z","comments":1,"layout":"post","_content":"现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到`Dragt`编辑器中。\n\nA [richTextExample](https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich) is also available to follow along.\n\n## EditorState: Yours to Command\n上一篇文章介绍了`EditorState`对象作为编辑器完整状态的快照,由`Editor`核心通过`onChange props`给的.\n\n但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该`EditorState`对象。\n\n例如，对于内联和块样式行为，`RichUtils` 模块提供了许多有用的函数来帮助操作状态。\n\n同样，[Modifier](https://draftjs.org/docs/api-reference-modifier.html) 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的`EditorState`对象。\n\n对于此示例，我们将坚持使用`RichUtils`来演示如何在最顶层组件中应用基本的丰富样式。\n\n<!--more-->\n## RichUtils and Key Commands\n`RichUtils` 包含有关Web编辑器可用的核心键命令的信息，例如`Cmd + B（粗体）`，`Cmd + I（斜体）`等。\n\n我们可以通过`handleKeyCommand` `prop`观察和处理关键命令，并将它们挂钩到`RichUtils`中以应用或删除所需的样式。\n\n```javascript\nimport {Editor, EditorState, RichUtils} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n```\n\n> handleKeyCommand  \n> \n> 提供给`handleKeyCommand`的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。`editorState`参数表示最新的编辑器状态，因为在处理密钥时它可能会被`Draft`内部更改。在`handleKeyCommand`中使用编辑器状态的这个实例。有关详细信息，请参阅[ Advanced Topics - Key Binding](https://draftjs.org/docs/advanced-topics-key-bindings.html)，以及有关函数返回处理或未处理的详细信息。  \n\n## Styling Controls in UI\n在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。\n\n这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。\n\n```javascript\nclass MyEditor extends React.Component {\n  // …\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this._onBoldClick.bind(this)}>Bold</button>\n        <Editor\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n```\n","source":"_posts/Draft-RichUtils.md","raw":"---\ntitle: Draft —— Rich Styling\ndate: 2018-07-06 21:02\ncomments: true\nlayout: post\ntags: [React, Draft.js]\ncategories: Draft\n---\n现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到`Dragt`编辑器中。\n\nA [richTextExample](https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich) is also available to follow along.\n\n## EditorState: Yours to Command\n上一篇文章介绍了`EditorState`对象作为编辑器完整状态的快照,由`Editor`核心通过`onChange props`给的.\n\n但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该`EditorState`对象。\n\n例如，对于内联和块样式行为，`RichUtils` 模块提供了许多有用的函数来帮助操作状态。\n\n同样，[Modifier](https://draftjs.org/docs/api-reference-modifier.html) 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的`EditorState`对象。\n\n对于此示例，我们将坚持使用`RichUtils`来演示如何在最顶层组件中应用基本的丰富样式。\n\n<!--more-->\n## RichUtils and Key Commands\n`RichUtils` 包含有关Web编辑器可用的核心键命令的信息，例如`Cmd + B（粗体）`，`Cmd + I（斜体）`等。\n\n我们可以通过`handleKeyCommand` `prop`观察和处理关键命令，并将它们挂钩到`RichUtils`中以应用或删除所需的样式。\n\n```javascript\nimport {Editor, EditorState, RichUtils} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n  render() {\n    return (\n      <Editor\n        editorState={this.state.editorState}\n        handleKeyCommand={this.handleKeyCommand}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n```\n\n> handleKeyCommand  \n> \n> 提供给`handleKeyCommand`的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。`editorState`参数表示最新的编辑器状态，因为在处理密钥时它可能会被`Draft`内部更改。在`handleKeyCommand`中使用编辑器状态的这个实例。有关详细信息，请参阅[ Advanced Topics - Key Binding](https://draftjs.org/docs/advanced-topics-key-bindings.html)，以及有关函数返回处理或未处理的详细信息。  \n\n## Styling Controls in UI\n在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。\n\n这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。\n\n```javascript\nclass MyEditor extends React.Component {\n  // …\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this._onBoldClick.bind(this)}>Bold</button>\n        <Editor\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n```\n","slug":"Draft-RichUtils","published":1,"updated":"2018-07-06T13:02:52.463Z","photos":[],"link":"","_id":"cjollnbn10018unfy1yf72rsq","content":"<p>现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到<code>Dragt</code>编辑器中。</p>\n<p>A <a href=\"https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich\" target=\"_blank\" rel=\"noopener\">richTextExample</a> is also available to follow along.</p>\n<h2 id=\"EditorState-Yours-to-Command\"><a href=\"#EditorState-Yours-to-Command\" class=\"headerlink\" title=\"EditorState: Yours to Command\"></a>EditorState: Yours to Command</h2><p>上一篇文章介绍了<code>EditorState</code>对象作为编辑器完整状态的快照,由<code>Editor</code>核心通过<code>onChange props</code>给的.</p>\n<p>但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该<code>EditorState</code>对象。</p>\n<p>例如，对于内联和块样式行为，<code>RichUtils</code> 模块提供了许多有用的函数来帮助操作状态。</p>\n<p>同样，<a href=\"https://draftjs.org/docs/api-reference-modifier.html\" target=\"_blank\" rel=\"noopener\">Modifier</a> 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的<code>EditorState</code>对象。</p>\n<p>对于此示例，我们将坚持使用<code>RichUtils</code>来演示如何在最顶层组件中应用基本的丰富样式。</p>\n<a id=\"more\"></a>\n<h2 id=\"RichUtils-and-Key-Commands\"><a href=\"#RichUtils-and-Key-Commands\" class=\"headerlink\" title=\"RichUtils and Key Commands\"></a>RichUtils and Key Commands</h2><p><code>RichUtils</code> 包含有关Web编辑器可用的核心键命令的信息，例如<code>Cmd + B（粗体）</code>，<code>Cmd + I（斜体）</code>等。</p>\n<p>我们可以通过<code>handleKeyCommand</code> <code>prop</code>观察和处理关键命令，并将它们挂钩到<code>RichUtils</code>中以应用或删除所需的样式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState, RichUtils&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleKeyCommand = <span class=\"keyword\">this</span>.handleKeyCommand.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleKeyCommand(command, editorState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onChange(newState);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>handleKeyCommand  </p>\n<p>提供给<code>handleKeyCommand</code>的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。<code>editorState</code>参数表示最新的编辑器状态，因为在处理密钥时它可能会被<code>Draft</code>内部更改。在<code>handleKeyCommand</code>中使用编辑器状态的这个实例。有关详细信息，请参阅<a href=\"https://draftjs.org/docs/advanced-topics-key-bindings.html\" target=\"_blank\" rel=\"noopener\"> Advanced Topics - Key Binding</a>，以及有关函数返回处理或未处理的详细信息。  </p>\n</blockquote>\n<h2 id=\"Styling-Controls-in-UI\"><a href=\"#Styling-Controls-in-UI\" class=\"headerlink\" title=\"Styling Controls in UI\"></a>Styling Controls in UI</h2><p>在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。</p>\n<p>这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _onBoldClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'BOLD'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>._onBoldClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;Bold&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onChange=&#123;this.onChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>现在我们已经建立了顶级API的基础知识，我们可以更进一步，研究如何将基本的丰富样式添加到<code>Dragt</code>编辑器中。</p>\n<p>A <a href=\"https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/rich\" target=\"_blank\" rel=\"noopener\">richTextExample</a> is also available to follow along.</p>\n<h2 id=\"EditorState-Yours-to-Command\"><a href=\"#EditorState-Yours-to-Command\" class=\"headerlink\" title=\"EditorState: Yours to Command\"></a>EditorState: Yours to Command</h2><p>上一篇文章介绍了<code>EditorState</code>对象作为编辑器完整状态的快照,由<code>Editor</code>核心通过<code>onChange props</code>给的.</p>\n<p>但是，由于最顶层的React组件负责维护状态，因此您还可以以任何您认为合适的方式自由地将更改应用于该<code>EditorState</code>对象。</p>\n<p>例如，对于内联和块样式行为，<code>RichUtils</code> 模块提供了许多有用的函数来帮助操作状态。</p>\n<p>同样，<a href=\"https://draftjs.org/docs/api-reference-modifier.html\" target=\"_blank\" rel=\"noopener\">Modifier</a> 模块还提供了许多允许您应用编辑的常用操作，包括对文本，样式等更改。该模块是一套编辑函数，它们组成更简单，更小的编辑函数，以返回所需的<code>EditorState</code>对象。</p>\n<p>对于此示例，我们将坚持使用<code>RichUtils</code>来演示如何在最顶层组件中应用基本的丰富样式。</p>","more":"<h2 id=\"RichUtils-and-Key-Commands\"><a href=\"#RichUtils-and-Key-Commands\" class=\"headerlink\" title=\"RichUtils and Key Commands\"></a>RichUtils and Key Commands</h2><p><code>RichUtils</code> 包含有关Web编辑器可用的核心键命令的信息，例如<code>Cmd + B（粗体）</code>，<code>Cmd + I（斜体）</code>等。</p>\n<p>我们可以通过<code>handleKeyCommand</code> <code>prop</code>观察和处理关键命令，并将它们挂钩到<code>RichUtils</code>中以应用或删除所需的样式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState, RichUtils&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleKeyCommand = <span class=\"keyword\">this</span>.handleKeyCommand.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  handleKeyCommand(command, editorState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newState = RichUtils.handleKeyCommand(editorState, command);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newState) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onChange(newState);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'handled'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'not-handled'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Editor</span><br><span class=\"line\">        editorState=&#123;<span class=\"keyword\">this</span>.state.editorState&#125;</span><br><span class=\"line\">        handleKeyCommand=&#123;<span class=\"keyword\">this</span>.handleKeyCommand&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>handleKeyCommand  </p>\n<p>提供给<code>handleKeyCommand</code>的命令参数是一个字符串值，即要执行的命令的名称。这是从DOM键事件映射的。<code>editorState</code>参数表示最新的编辑器状态，因为在处理密钥时它可能会被<code>Draft</code>内部更改。在<code>handleKeyCommand</code>中使用编辑器状态的这个实例。有关详细信息，请参阅<a href=\"https://draftjs.org/docs/advanced-topics-key-bindings.html\" target=\"_blank\" rel=\"noopener\"> Advanced Topics - Key Binding</a>，以及有关函数返回处理或未处理的详细信息。  </p>\n</blockquote>\n<h2 id=\"Styling-Controls-in-UI\"><a href=\"#Styling-Controls-in-UI\" class=\"headerlink\" title=\"Styling Controls in UI\"></a>Styling Controls in UI</h2><p>在React组件中，您可以添加按钮或其他控件以允许用户在编辑器中修改样式。在上面的示例中，我们使用已知的键命令，但我们可以添加更复杂的UI来提供这些丰富的功能。</p>\n<p>这是一个超级基本的例子，带有一个“粗体”按钮来切换BOLD风格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _onBoldClick() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange(RichUtils.toggleInlineStyle(<span class=\"keyword\">this</span>.state.editorState, <span class=\"string\">'BOLD'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"keyword\">this</span>._onBoldClick.bind(<span class=\"keyword\">this</span>)&#125;&gt;Bold&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Editor</span></span><br><span class=\"line\"><span class=\"regexp\">          editorState=&#123;this.state.editorState&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          handleKeyCommand=&#123;this.handleKeyCommand&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          onChange=&#123;this.onChange&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"Draft.js —— API Basics","date":"2018-07-05T12:49:00.000Z","comments":1,"layout":"post","_content":"# Draft.js ——API Basics\n## API Basics\nReact组件`Editor`是作为HTML5的`ContentEditable`元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。\n\n简要回顾，受控输入涉及两个关键部分：\n1. 一个`state` 代表输入`value`的值。\n2. `onChange`函数用于接受输入的值并更新。\n\n这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新`DOM`以提供有关用户编写的文本的信息。\n```javascript\nclass MyInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.onChange = (evt) => this.setState({value: evt.target.value});\n  }\n  render() {\n    return <input value={this.state.value} onChange={this.onChange} />;\n  }\n}\n```\n顶级组件可以通过此值state属性保持对输入状态的控制。\n<!--more-->\n## 受控富文本\n在React富文本方案中，有两个明显的问题：\n1. 一串字符串纯文本不足以表示富编辑器的复杂状态\n2. HTML5的 `ContentEditable`元素没有可用的`onChange`事件。\n\n`State` 因此就被作为一个单个不可变的`EditorState`对象，并且和`onChange`一起在`Editor`核心中实现，以将此状态值提供给顶部。\n\n`EditorState`对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的`EditorState`对象。\n注意：由于横过不可变对象的数据持久性，这仍然有效。\n\n```javascript\nimport {Editor, EditorState} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n  }\n  render() {\n    return <Editor editorState={this.state.editorState} onChange={this.onChange} />;\n  }\n}\n```\n对于编辑器DOM中发生的任何编辑或选择更改，`onChange`处理程序将根据这些更改使用最新的`EditorState`对象执行。","source":"_posts/Draft.js ——API Basics.md","raw":"---\ntitle: Draft.js —— API Basics\ndate: 2018-07-05 20:49\ncomments: true\nlayout: post\ntags: [React, Draft.js]\ncategories: Draft\n---\n# Draft.js ——API Basics\n## API Basics\nReact组件`Editor`是作为HTML5的`ContentEditable`元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。\n\n简要回顾，受控输入涉及两个关键部分：\n1. 一个`state` 代表输入`value`的值。\n2. `onChange`函数用于接受输入的值并更新。\n\n这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新`DOM`以提供有关用户编写的文本的信息。\n```javascript\nclass MyInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.onChange = (evt) => this.setState({value: evt.target.value});\n  }\n  render() {\n    return <input value={this.state.value} onChange={this.onChange} />;\n  }\n}\n```\n顶级组件可以通过此值state属性保持对输入状态的控制。\n<!--more-->\n## 受控富文本\n在React富文本方案中，有两个明显的问题：\n1. 一串字符串纯文本不足以表示富编辑器的复杂状态\n2. HTML5的 `ContentEditable`元素没有可用的`onChange`事件。\n\n`State` 因此就被作为一个单个不可变的`EditorState`对象，并且和`onChange`一起在`Editor`核心中实现，以将此状态值提供给顶部。\n\n`EditorState`对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的`EditorState`对象。\n注意：由于横过不可变对象的数据持久性，这仍然有效。\n\n```javascript\nimport {Editor, EditorState} from 'draft-js';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = (editorState) => this.setState({editorState});\n  }\n  render() {\n    return <Editor editorState={this.state.editorState} onChange={this.onChange} />;\n  }\n}\n```\n对于编辑器DOM中发生的任何编辑或选择更改，`onChange`处理程序将根据这些更改使用最新的`EditorState`对象执行。","slug":"Draft.js ——API Basics","published":1,"updated":"2018-07-05T12:50:47.002Z","photos":[],"link":"","_id":"cjollnbnl001bunfy87zy01hy","content":"<h1 id=\"Draft-js-——API-Basics\"><a href=\"#Draft-js-——API-Basics\" class=\"headerlink\" title=\"Draft.js ——API Basics\"></a>Draft.js ——API Basics</h1><h2 id=\"API-Basics\"><a href=\"#API-Basics\" class=\"headerlink\" title=\"API Basics\"></a>API Basics</h2><p>React组件<code>Editor</code>是作为HTML5的<code>ContentEditable</code>元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。</p>\n<p>简要回顾，受控输入涉及两个关键部分：</p>\n<ol>\n<li>一个<code>state</code> 代表输入<code>value</code>的值。</li>\n<li><code>onChange</code>函数用于接受输入的值并更新。</li>\n</ol>\n<p>这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新<code>DOM</code>以提供有关用户编写的文本的信息。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">evt</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: evt.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.value&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>顶级组件可以通过此值state属性保持对输入状态的控制。<br><a id=\"more\"></a></p>\n<h2 id=\"受控富文本\"><a href=\"#受控富文本\" class=\"headerlink\" title=\"受控富文本\"></a>受控富文本</h2><p>在React富文本方案中，有两个明显的问题：</p>\n<ol>\n<li>一串字符串纯文本不足以表示富编辑器的复杂状态</li>\n<li>HTML5的 <code>ContentEditable</code>元素没有可用的<code>onChange</code>事件。</li>\n</ol>\n<p><code>State</code> 因此就被作为一个单个不可变的<code>EditorState</code>对象，并且和<code>onChange</code>一起在<code>Editor</code>核心中实现，以将此状态值提供给顶部。</p>\n<p><code>EditorState</code>对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的<code>EditorState</code>对象。<br>注意：由于横过不可变对象的数据持久性，这仍然有效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Editor</span> <span class=\"attr\">editorState</span>=<span class=\"string\">&#123;this.state.editorState&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于编辑器DOM中发生的任何编辑或选择更改，<code>onChange</code>处理程序将根据这些更改使用最新的<code>EditorState</code>对象执行。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Draft-js-——API-Basics\"><a href=\"#Draft-js-——API-Basics\" class=\"headerlink\" title=\"Draft.js ——API Basics\"></a>Draft.js ——API Basics</h1><h2 id=\"API-Basics\"><a href=\"#API-Basics\" class=\"headerlink\" title=\"API Basics\"></a>API Basics</h2><p>React组件<code>Editor</code>是作为HTML5的<code>ContentEditable</code>元素并以受控组件来构建的，其目标是提供以熟悉的React控制输入API为模型的顶级API。</p>\n<p>简要回顾，受控输入涉及两个关键部分：</p>\n<ol>\n<li>一个<code>state</code> 代表输入<code>value</code>的值。</li>\n<li><code>onChange</code>函数用于接受输入的值并更新。</li>\n</ol>\n<p>这种方法允许组成输入的组件严格控制输入的状态，同时仍然允许更新<code>DOM</code>以提供有关用户编写的文本的信息。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">evt</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: evt.target.value&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.value&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>顶级组件可以通过此值state属性保持对输入状态的控制。<br>","more":"</p>\n<h2 id=\"受控富文本\"><a href=\"#受控富文本\" class=\"headerlink\" title=\"受控富文本\"></a>受控富文本</h2><p>在React富文本方案中，有两个明显的问题：</p>\n<ol>\n<li>一串字符串纯文本不足以表示富编辑器的复杂状态</li>\n<li>HTML5的 <code>ContentEditable</code>元素没有可用的<code>onChange</code>事件。</li>\n</ol>\n<p><code>State</code> 因此就被作为一个单个不可变的<code>EditorState</code>对象，并且和<code>onChange</code>一起在<code>Editor</code>核心中实现，以将此状态值提供给顶部。</p>\n<p><code>EditorState</code>对象是编辑器状态的完整快照，包含内容(contents)，光标(cursor)，和撤消(undo)/重做(redo)的历史记录。对内容的所有改变和编辑器中的选择都将创建新的<code>EditorState</code>对象。<br>注意：由于横过不可变对象的数据持久性，这仍然有效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Editor, EditorState&#125; <span class=\"keyword\">from</span> <span class=\"string\">'draft-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyEditor</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">editorState</span>: EditorState.createEmpty()&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onChange = <span class=\"function\">(<span class=\"params\">editorState</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123;editorState&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Editor</span> <span class=\"attr\">editorState</span>=<span class=\"string\">&#123;this.state.editorState&#125;</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.onChange&#125;</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>对于编辑器DOM中发生的任何编辑或选择更改，<code>onChange</code>处理程序将根据这些更改使用最新的<code>EditorState</code>对象执行。</p>"},{"title":"Draft——Entities","date":"2018-07-07T11:36:00.000Z","comments":1,"layout":"post","_content":"# Draft——Entities\n本文讨论实体系统，`Draft` 用于使用元数据注释文本范围。`Entities`引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来`Entities`。\n\n在`Draft`存储库中，[链接编辑器](https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link)和`Entities`演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。\n\n[Entity API Reference](https://draftjs.org/docs/api-reference-entity.html)提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。\n\n有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的[v0.10 API迁移指南](https://draftjs.org/docs/v0-10-api-migration.html#content)。\n<!--more-->\n## 介绍\n`Entity`是表示`Draft`编辑器中一系列文本的元数据的对象。它有三个属性：\n- type: 一个字符串，表示它是什么类型的实体，例如'LINK'，'MENTION'，'PHOTO'。\n- mutability: 不要与不变性的`immutable-js`混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。\n- data: 包含实体元数据的可选对象。例如，`LINK`实体可能包含一个包含该链接的`href`值的数据对象。\n\n所有`Entities `都存储在`ContentState`记录中。`ContentState`中的键引用`Entities`，用于装饰带注释的范围的React组件。\n\n使用装饰器或自定义块组件，您可以根据`Entities `元数据向编辑器添加丰富的渲染。\n\n## 创建和回收 Entities\n应使用`contentState.createEntity`创建`Entities`，它接受上面的三个属性作为参数。此方法返回更新的`ContentState`记录以包含新创建的实体，然后您可以调用`contentState.getLastCreatedEntityKey`来获取新创建的`Entities`记录的密钥。\n\n此键是将`Entities`应用于内容时应使用的值。例如，`Modifier`模块包含`applyEntity`方法：\n\n```javascript\nconst contentState = editorState.getCurrentContent();\nconst contentStateWithEntity = contentState.createEntity(\n  'LINK',\n  'MUTABLE',\n  {url: 'http://www.zombo.com'}\n);\nconst entityKey = contentStateWithEntity.getLastCreatedEntityKey();\nconst contentStateWithLink = Modifier.applyEntity(\n  contentStateWithEntity,\n  selectionState,\n  entityKey\n);\n```\n对于给定的文本范围，您可以通过在`ContentBlock`对象上使用`getEntityAt()`方法提取其关联的实体键，并传入目标偏移值。\n\n## Mutability\n`Entities`可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。\n\n`SelectionState`对象的最常见用途是通过`EditorState.getSelection()`，它提供当前在编辑器中呈现的`SelectionState`。\n\n由于`Draft`使用`ContentBlock`对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的`ContentBlock`的键，并且偏移值是块内的字符偏移。\n\n## Start/End vs. Anchor/Focus\n当实际在浏览器中呈现选择状态时，`anchor`和`focus`的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑`start`和`end`更合适。\n\n因此，`SelectionState`会公开`anchor`/`focus`值和`start`/`end`值。管理选择行为时，我们建议您使用`anchor`和`focus`值来维护选择方向。但是，在管理内容操作时，我们建议您使用`start`和`end`值。\n\n例如，当基于`SelectionState`从块中提取文本切片时，选择是否向后是无关紧要的：\n\n```javascript\nar selectionState = editorState.getSelection();\nvar anchorKey = selectionState.getAnchorKey();\nvar currentContent = editorState.getCurrentContent();\nvar currentContentBlock = currentContent.getBlockForKey(anchorKey);\nvar start = selectionState.getStartOffset();\nvar end = selectionState.getEndOffset();\nvar selectedText = currentContentBlock.getText().slice(start, end);\n```\n请注意，`SelectionState`本身仅跟踪锚点和焦点值。导出起始值和结束值。\n","source":"_posts/Draft——Entities.md","raw":"---\ntitle: Draft——Entities\ndate: 2018-07-07 19:36\ncomments: true\nlayout: post\ntags: [React, Draft.js]\ncategories: Draft\n---\n# Draft——Entities\n本文讨论实体系统，`Draft` 用于使用元数据注释文本范围。`Entities`引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来`Entities`。\n\n在`Draft`存储库中，[链接编辑器](https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link)和`Entities`演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。\n\n[Entity API Reference](https://draftjs.org/docs/api-reference-entity.html)提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。\n\n有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的[v0.10 API迁移指南](https://draftjs.org/docs/v0-10-api-migration.html#content)。\n<!--more-->\n## 介绍\n`Entity`是表示`Draft`编辑器中一系列文本的元数据的对象。它有三个属性：\n- type: 一个字符串，表示它是什么类型的实体，例如'LINK'，'MENTION'，'PHOTO'。\n- mutability: 不要与不变性的`immutable-js`混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。\n- data: 包含实体元数据的可选对象。例如，`LINK`实体可能包含一个包含该链接的`href`值的数据对象。\n\n所有`Entities `都存储在`ContentState`记录中。`ContentState`中的键引用`Entities`，用于装饰带注释的范围的React组件。\n\n使用装饰器或自定义块组件，您可以根据`Entities `元数据向编辑器添加丰富的渲染。\n\n## 创建和回收 Entities\n应使用`contentState.createEntity`创建`Entities`，它接受上面的三个属性作为参数。此方法返回更新的`ContentState`记录以包含新创建的实体，然后您可以调用`contentState.getLastCreatedEntityKey`来获取新创建的`Entities`记录的密钥。\n\n此键是将`Entities`应用于内容时应使用的值。例如，`Modifier`模块包含`applyEntity`方法：\n\n```javascript\nconst contentState = editorState.getCurrentContent();\nconst contentStateWithEntity = contentState.createEntity(\n  'LINK',\n  'MUTABLE',\n  {url: 'http://www.zombo.com'}\n);\nconst entityKey = contentStateWithEntity.getLastCreatedEntityKey();\nconst contentStateWithLink = Modifier.applyEntity(\n  contentStateWithEntity,\n  selectionState,\n  entityKey\n);\n```\n对于给定的文本范围，您可以通过在`ContentBlock`对象上使用`getEntityAt()`方法提取其关联的实体键，并传入目标偏移值。\n\n## Mutability\n`Entities`可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。\n\n`SelectionState`对象的最常见用途是通过`EditorState.getSelection()`，它提供当前在编辑器中呈现的`SelectionState`。\n\n由于`Draft`使用`ContentBlock`对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的`ContentBlock`的键，并且偏移值是块内的字符偏移。\n\n## Start/End vs. Anchor/Focus\n当实际在浏览器中呈现选择状态时，`anchor`和`focus`的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑`start`和`end`更合适。\n\n因此，`SelectionState`会公开`anchor`/`focus`值和`start`/`end`值。管理选择行为时，我们建议您使用`anchor`和`focus`值来维护选择方向。但是，在管理内容操作时，我们建议您使用`start`和`end`值。\n\n例如，当基于`SelectionState`从块中提取文本切片时，选择是否向后是无关紧要的：\n\n```javascript\nar selectionState = editorState.getSelection();\nvar anchorKey = selectionState.getAnchorKey();\nvar currentContent = editorState.getCurrentContent();\nvar currentContentBlock = currentContent.getBlockForKey(anchorKey);\nvar start = selectionState.getStartOffset();\nvar end = selectionState.getEndOffset();\nvar selectedText = currentContentBlock.getText().slice(start, end);\n```\n请注意，`SelectionState`本身仅跟踪锚点和焦点值。导出起始值和结束值。\n","slug":"Draft——Entities","published":1,"updated":"2018-07-07T11:36:38.559Z","photos":[],"link":"","_id":"cjollnbns001eunfy04z8l4am","content":"<h1 id=\"Draft——Entities\"><a href=\"#Draft——Entities\" class=\"headerlink\" title=\"Draft——Entities\"></a>Draft——Entities</h1><p>本文讨论实体系统，<code>Draft</code> 用于使用元数据注释文本范围。<code>Entities</code>引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来<code>Entities</code>。</p>\n<p>在<code>Draft</code>存储库中，<a href=\"https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link\" target=\"_blank\" rel=\"noopener\">链接编辑器</a>和<code>Entities</code>演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。</p>\n<p><a href=\"https://draftjs.org/docs/api-reference-entity.html\" target=\"_blank\" rel=\"noopener\">Entity API Reference</a>提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。</p>\n<p>有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的<a href=\"https://draftjs.org/docs/v0-10-api-migration.html#content\" target=\"_blank\" rel=\"noopener\">v0.10 API迁移指南</a>。<br><a id=\"more\"></a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>Entity</code>是表示<code>Draft</code>编辑器中一系列文本的元数据的对象。它有三个属性：</p>\n<ul>\n<li>type: 一个字符串，表示它是什么类型的实体，例如’LINK’，’MENTION’，’PHOTO’。</li>\n<li>mutability: 不要与不变性的<code>immutable-js</code>混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。</li>\n<li>data: 包含实体元数据的可选对象。例如，<code>LINK</code>实体可能包含一个包含该链接的<code>href</code>值的数据对象。</li>\n</ul>\n<p>所有<code>Entities</code>都存储在<code>ContentState</code>记录中。<code>ContentState</code>中的键引用<code>Entities</code>，用于装饰带注释的范围的React组件。</p>\n<p>使用装饰器或自定义块组件，您可以根据<code>Entities</code>元数据向编辑器添加丰富的渲染。</p>\n<h2 id=\"创建和回收-Entities\"><a href=\"#创建和回收-Entities\" class=\"headerlink\" title=\"创建和回收 Entities\"></a>创建和回收 Entities</h2><p>应使用<code>contentState.createEntity</code>创建<code>Entities</code>，它接受上面的三个属性作为参数。此方法返回更新的<code>ContentState</code>记录以包含新创建的实体，然后您可以调用<code>contentState.getLastCreatedEntityKey</code>来获取新创建的<code>Entities</code>记录的密钥。</p>\n<p>此键是将<code>Entities</code>应用于内容时应使用的值。例如，<code>Modifier</code>模块包含<code>applyEntity</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contentState = editorState.getCurrentContent();</span><br><span class=\"line\"><span class=\"keyword\">const</span> contentStateWithEntity = contentState.createEntity(</span><br><span class=\"line\">  <span class=\"string\">'LINK'</span>,</span><br><span class=\"line\">  <span class=\"string\">'MUTABLE'</span>,</span><br><span class=\"line\">  &#123;<span class=\"attr\">url</span>: <span class=\"string\">'http://www.zombo.com'</span>&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">const</span> entityKey = contentStateWithEntity.getLastCreatedEntityKey();</span><br><span class=\"line\"><span class=\"keyword\">const</span> contentStateWithLink = Modifier.applyEntity(</span><br><span class=\"line\">  contentStateWithEntity,</span><br><span class=\"line\">  selectionState,</span><br><span class=\"line\">  entityKey</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>对于给定的文本范围，您可以通过在<code>ContentBlock</code>对象上使用<code>getEntityAt()</code>方法提取其关联的实体键，并传入目标偏移值。</p>\n<h2 id=\"Mutability\"><a href=\"#Mutability\" class=\"headerlink\" title=\"Mutability\"></a>Mutability</h2><p><code>Entities</code>可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。</p>\n<p><code>SelectionState</code>对象的最常见用途是通过<code>EditorState.getSelection()</code>，它提供当前在编辑器中呈现的<code>SelectionState</code>。</p>\n<p>由于<code>Draft</code>使用<code>ContentBlock</code>对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的<code>ContentBlock</code>的键，并且偏移值是块内的字符偏移。</p>\n<h2 id=\"Start-End-vs-Anchor-Focus\"><a href=\"#Start-End-vs-Anchor-Focus\" class=\"headerlink\" title=\"Start/End vs. Anchor/Focus\"></a>Start/End vs. Anchor/Focus</h2><p>当实际在浏览器中呈现选择状态时，<code>anchor</code>和<code>focus</code>的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑<code>start</code>和<code>end</code>更合适。</p>\n<p>因此，<code>SelectionState</code>会公开<code>anchor</code>/<code>focus</code>值和<code>start</code>/<code>end</code>值。管理选择行为时，我们建议您使用<code>anchor</code>和<code>focus</code>值来维护选择方向。但是，在管理内容操作时，我们建议您使用<code>start</code>和<code>end</code>值。</p>\n<p>例如，当基于<code>SelectionState</code>从块中提取文本切片时，选择是否向后是无关紧要的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ar selectionState = editorState.getSelection();</span><br><span class=\"line\"><span class=\"keyword\">var</span> anchorKey = selectionState.getAnchorKey();</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentContent = editorState.getCurrentContent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentContentBlock = currentContent.getBlockForKey(anchorKey);</span><br><span class=\"line\"><span class=\"keyword\">var</span> start = selectionState.getStartOffset();</span><br><span class=\"line\"><span class=\"keyword\">var</span> end = selectionState.getEndOffset();</span><br><span class=\"line\"><span class=\"keyword\">var</span> selectedText = currentContentBlock.getText().slice(start, end);</span><br></pre></td></tr></table></figure>\n<p>请注意，<code>SelectionState</code>本身仅跟踪锚点和焦点值。导出起始值和结束值。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Draft——Entities\"><a href=\"#Draft——Entities\" class=\"headerlink\" title=\"Draft——Entities\"></a>Draft——Entities</h1><p>本文讨论实体系统，<code>Draft</code> 用于使用元数据注释文本范围。<code>Entities</code>引入了超出样式文本的丰富程度。链接(Link)，发言(mentions)和嵌入内容(embedded)都可以使用实体来<code>Entities</code>。</p>\n<p>在<code>Draft</code>存储库中，<a href=\"https://github.com/facebook/draft-js/tree/master/examples/draft-0-10-0/link\" target=\"_blank\" rel=\"noopener\">链接编辑器</a>和<code>Entities</code>演示提供了实时代码示例，以帮助阐明如何使用实体以及它们的内置行为。</p>\n<p><a href=\"https://draftjs.org/docs/api-reference-entity.html\" target=\"_blank\" rel=\"noopener\">Entity API Reference</a>提供了有关在创建，检索或更新实体对象时使用的静态方法的详细信息。</p>\n<p>有关Entity API最近更改的信息以及如何更新应用程序的示例，请参阅我们的<a href=\"https://draftjs.org/docs/v0-10-api-migration.html#content\" target=\"_blank\" rel=\"noopener\">v0.10 API迁移指南</a>。<br>","more":"</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>Entity</code>是表示<code>Draft</code>编辑器中一系列文本的元数据的对象。它有三个属性：</p>\n<ul>\n<li>type: 一个字符串，表示它是什么类型的实体，例如’LINK’，’MENTION’，’PHOTO’。</li>\n<li>mutability: 不要与不变性的<code>immutable-js</code>混淆，此属性表示在编辑器中编辑文本范围时使用此实体对象注释的一系列文本的行为。这将在下面更详细地解决。</li>\n<li>data: 包含实体元数据的可选对象。例如，<code>LINK</code>实体可能包含一个包含该链接的<code>href</code>值的数据对象。</li>\n</ul>\n<p>所有<code>Entities</code>都存储在<code>ContentState</code>记录中。<code>ContentState</code>中的键引用<code>Entities</code>，用于装饰带注释的范围的React组件。</p>\n<p>使用装饰器或自定义块组件，您可以根据<code>Entities</code>元数据向编辑器添加丰富的渲染。</p>\n<h2 id=\"创建和回收-Entities\"><a href=\"#创建和回收-Entities\" class=\"headerlink\" title=\"创建和回收 Entities\"></a>创建和回收 Entities</h2><p>应使用<code>contentState.createEntity</code>创建<code>Entities</code>，它接受上面的三个属性作为参数。此方法返回更新的<code>ContentState</code>记录以包含新创建的实体，然后您可以调用<code>contentState.getLastCreatedEntityKey</code>来获取新创建的<code>Entities</code>记录的密钥。</p>\n<p>此键是将<code>Entities</code>应用于内容时应使用的值。例如，<code>Modifier</code>模块包含<code>applyEntity</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contentState = editorState.getCurrentContent();</span><br><span class=\"line\"><span class=\"keyword\">const</span> contentStateWithEntity = contentState.createEntity(</span><br><span class=\"line\">  <span class=\"string\">'LINK'</span>,</span><br><span class=\"line\">  <span class=\"string\">'MUTABLE'</span>,</span><br><span class=\"line\">  &#123;<span class=\"attr\">url</span>: <span class=\"string\">'http://www.zombo.com'</span>&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">const</span> entityKey = contentStateWithEntity.getLastCreatedEntityKey();</span><br><span class=\"line\"><span class=\"keyword\">const</span> contentStateWithLink = Modifier.applyEntity(</span><br><span class=\"line\">  contentStateWithEntity,</span><br><span class=\"line\">  selectionState,</span><br><span class=\"line\">  entityKey</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>对于给定的文本范围，您可以通过在<code>ContentBlock</code>对象上使用<code>getEntityAt()</code>方法提取其关联的实体键，并传入目标偏移值。</p>\n<h2 id=\"Mutability\"><a href=\"#Mutability\" class=\"headerlink\" title=\"Mutability\"></a>Mutability</h2><p><code>Entities</code>可以具有三个“Mutability”值中的一个。它们之间的区别在于用户对其进行编辑时的行为方式。</p>\n<p><code>SelectionState</code>对象的最常见用途是通过<code>EditorState.getSelection()</code>，它提供当前在编辑器中呈现的<code>SelectionState</code>。</p>\n<p>由于<code>Draft</code>使用<code>ContentBlock</code>对象维护编辑器的内容，因此我们可以使用自己的模型来表示这些点。因此，选择点被跟踪为键/偏移对，其中键值是位于该点的<code>ContentBlock</code>的键，并且偏移值是块内的字符偏移。</p>\n<h2 id=\"Start-End-vs-Anchor-Focus\"><a href=\"#Start-End-vs-Anchor-Focus\" class=\"headerlink\" title=\"Start/End vs. Anchor/Focus\"></a>Start/End vs. Anchor/Focus</h2><p>当实际在浏览器中呈现选择状态时，<code>anchor</code>和<code>focus</code>的概念非常有用，因为它允许我们根据需要使用向前和向后选择。但是，对于编辑操作，选择的方向无关紧要。在这种情况下，考虑<code>start</code>和<code>end</code>更合适。</p>\n<p>因此，<code>SelectionState</code>会公开<code>anchor</code>/<code>focus</code>值和<code>start</code>/<code>end</code>值。管理选择行为时，我们建议您使用<code>anchor</code>和<code>focus</code>值来维护选择方向。但是，在管理内容操作时，我们建议您使用<code>start</code>和<code>end</code>值。</p>\n<p>例如，当基于<code>SelectionState</code>从块中提取文本切片时，选择是否向后是无关紧要的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ar selectionState = editorState.getSelection();</span><br><span class=\"line\"><span class=\"keyword\">var</span> anchorKey = selectionState.getAnchorKey();</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentContent = editorState.getCurrentContent();</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentContentBlock = currentContent.getBlockForKey(anchorKey);</span><br><span class=\"line\"><span class=\"keyword\">var</span> start = selectionState.getStartOffset();</span><br><span class=\"line\"><span class=\"keyword\">var</span> end = selectionState.getEndOffset();</span><br><span class=\"line\"><span class=\"keyword\">var</span> selectedText = currentContentBlock.getText().slice(start, end);</span><br></pre></td></tr></table></figure>\n<p>请注意，<code>SelectionState</code>本身仅跟踪锚点和焦点值。导出起始值和结束值。</p>"},{"title":"ES6箭头函数","date":"2017-04-27T07:29:00.000Z","comments":1,"layout":"post","_content":"简单地说，\n\n```javascript\nvar a = x => x;\n//\nvar a =function(x){\n  return x;\n};\n```\n\n这个就是最简单的箭头函数。\n\n<!--more-->\n\n接着如果箭头函数不需要参数或者多个参数的话，\n\n```JavaScript\nvar a = () => 1;\n//\nvar a =function(){\n  return 1;\n};\n或者\nvar a = _ =>1;\n```\n\n```javascript\nvar sum = (num1,num2) =>num1 +num2;\n//\nvar sum =function(num1,num2){\n  return num1+num2;\n};\n```\n\n**箭头函数没有自己的`this`**，\n\n```javascript\n(function (){\n  return [\n    (()=> this.x).bind({x :'inner'})()\n  ]\n}).call({x :'outer'});\n//['outer']\n```\n\n所以`bind`的方法无效。并且`call()`,`apply()`,也无效。\n\n**MDN上的**\n\n```javascript\nvar adder = {\n  base : 1,\n    \n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };\n            \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n\n\n\n\n\n\n","source":"_posts/Es6箭头函数.md","raw":"---\ntitle: ES6箭头函数\ndate: 2017-04-27 15:29\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n简单地说，\n\n```javascript\nvar a = x => x;\n//\nvar a =function(x){\n  return x;\n};\n```\n\n这个就是最简单的箭头函数。\n\n<!--more-->\n\n接着如果箭头函数不需要参数或者多个参数的话，\n\n```JavaScript\nvar a = () => 1;\n//\nvar a =function(){\n  return 1;\n};\n或者\nvar a = _ =>1;\n```\n\n```javascript\nvar sum = (num1,num2) =>num1 +num2;\n//\nvar sum =function(num1,num2){\n  return num1+num2;\n};\n```\n\n**箭头函数没有自己的`this`**，\n\n```javascript\n(function (){\n  return [\n    (()=> this.x).bind({x :'inner'})()\n  ]\n}).call({x :'outer'});\n//['outer']\n```\n\n所以`bind`的方法无效。并且`call()`,`apply()`,也无效。\n\n**MDN上的**\n\n```javascript\nvar adder = {\n  base : 1,\n    \n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };\n            \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n\n\n\n\n\n\n","slug":"Es6箭头函数","published":1,"updated":"2017-12-13T13:43:15.410Z","photos":[],"link":"","_id":"cjollnbnw001junfyyc2sgb1e","content":"<p>简单地说，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个就是最简单的箭头函数。</p>\n<a id=\"more\"></a>\n<p>接着如果箭头函数不需要参数或者多个参数的话，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span>num1 +num2;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>箭头函数没有自己的<code>this</code></strong>，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> <span class=\"keyword\">this</span>.x).bind(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'inner'</span>&#125;)()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;).call(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'outer'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//['outer']</span></span><br></pre></td></tr></table></figure>\n<p>所以<code>bind</code>的方法无效。并且<code>call()</code>,<code>apply()</code>,也无效。</p>\n<p><strong>MDN上的</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adder = &#123;</span><br><span class=\"line\">  base : <span class=\"number\">1</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">  add : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addThruCall: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">      base : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>简单地说，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个就是最简单的箭头函数。</p>","more":"<p>接着如果箭头函数不需要参数或者多个参数的话，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">或者</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span>num1 +num2;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>箭头函数没有自己的<code>this</code></strong>，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> <span class=\"keyword\">this</span>.x).bind(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'inner'</span>&#125;)()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;).call(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'outer'</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//['outer']</span></span><br></pre></td></tr></table></figure>\n<p>所以<code>bind</code>的方法无效。并且<code>call()</code>,<code>apply()</code>,也无效。</p>\n<p><strong>MDN上的</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> adder = &#123;</span><br><span class=\"line\">  base : <span class=\"number\">1</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">  add : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(a);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  addThruCall: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">      base : <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></span><br></pre></td></tr></table></figure>"},{"title":"数据库E-R图","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# E-R图\n\nE-R图是指实体-关系-属性三个基本概括数据的基本结构.\n\n强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。\n\n<!--more-->\n\n- ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。\n\n\n\n- ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。\n\n\n\n- ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。\n\n","source":"_posts/E-R图.md","raw":"---\ntitle: 数据库E-R图\ndate: 2017-7-17 16：05\ncomments: true\nlayout: post\ntags: [数据库]\ncategories: 数据库\n---\n\n# E-R图\n\nE-R图是指实体-关系-属性三个基本概括数据的基本结构.\n\n强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。\n\n<!--more-->\n\n- ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。\n\n\n\n- ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。\n\n\n\n- ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。\n\n","slug":"E-R图","published":1,"updated":"2017-07-17T08:06:54.000Z","photos":[],"link":"","_id":"cjollnbo1001lunfyaaqg80mx","content":"<h1 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h1><p>E-R图是指实体-关系-属性三个基本概括数据的基本结构.</p>\n<p>强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。</p>\n<a id=\"more\"></a>\n<ul>\n<li>ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。</li>\n</ul>\n<ul>\n<li>ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</li>\n</ul>\n<ul>\n<li>ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h1><p>E-R图是指实体-关系-属性三个基本概括数据的基本结构.</p>\n<p>强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。</p>","more":"<ul>\n<li>ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。</li>\n</ul>\n<ul>\n<li>ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</li>\n</ul>\n<ul>\n<li>ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。</li>\n</ul>"},{"title":"初入Express","date":"2017-07-30T02:33:26.000Z","comments":1,"layout":"post","_content":"\n\n\n## expressjs里的请求参数，4.x里只有3种(都引用官方例子) \n\n- req.params\n- req.body\n- req.query\n\n### req.params\n\n```javascript\napp.get('/user/:id',function(req,res){\n  \tres.send('user' + req.parms.id);\n});\n```\n\n就是取带冒号的参数.\n\n<!--more-->\n\n### req.body\n\n```JavaScript\nvar app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer'); \n\napp.use(bodyParser.json()); // 用于解析application / json\napp.use(bodyParser.urlencoded({ extended: true })); // 用于解析 application/x-www-form-urlencoded\napp.use(multer()); // 用于解析多部分/表单数据\n\napp.post('/', function (req, res) {\n  console.log(req.body);\n  res.json(req.body);\n})\n```\n\n- req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.\n\n### req.query\n\n```javascript\n// GET /search?q=tobi+ferret\nreq.query.q\n// => \"tobi ferret\"\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nreq.query.order\n// => \"desc\"\n\nreq.query.shoe.color\n// => \"blue\"\n\nreq.query.shoe.type\n// => \"converse\"\n```\n\n","source":"_posts/Express.md","raw":"---\ntitle: 初入Express\ndate: 2017-07-30 10:33:26\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Node.js\n---\n\n\n\n## expressjs里的请求参数，4.x里只有3种(都引用官方例子) \n\n- req.params\n- req.body\n- req.query\n\n### req.params\n\n```javascript\napp.get('/user/:id',function(req,res){\n  \tres.send('user' + req.parms.id);\n});\n```\n\n就是取带冒号的参数.\n\n<!--more-->\n\n### req.body\n\n```JavaScript\nvar app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer'); \n\napp.use(bodyParser.json()); // 用于解析application / json\napp.use(bodyParser.urlencoded({ extended: true })); // 用于解析 application/x-www-form-urlencoded\napp.use(multer()); // 用于解析多部分/表单数据\n\napp.post('/', function (req, res) {\n  console.log(req.body);\n  res.json(req.body);\n})\n```\n\n- req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.\n\n### req.query\n\n```javascript\n// GET /search?q=tobi+ferret\nreq.query.q\n// => \"tobi ferret\"\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nreq.query.order\n// => \"desc\"\n\nreq.query.shoe.color\n// => \"blue\"\n\nreq.query.shoe.type\n// => \"converse\"\n```\n\n","slug":"Express","published":1,"updated":"2017-09-06T09:41:52.000Z","photos":[],"link":"","_id":"cjollnbo6001qunfyh470zc7o","content":"<h2 id=\"expressjs里的请求参数，4-x里只有3种-都引用官方例子\"><a href=\"#expressjs里的请求参数，4-x里只有3种-都引用官方例子\" class=\"headerlink\" title=\"expressjs里的请求参数，4.x里只有3种(都引用官方例子)\"></a>expressjs里的请求参数，4.x里只有3种(都引用官方例子)</h2><ul>\n<li>req.params</li>\n<li>req.body</li>\n<li>req.query</li>\n</ul>\n<h3 id=\"req-params\"><a href=\"#req-params\" class=\"headerlink\" title=\"req.params\"></a>req.params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  \tres.send(<span class=\"string\">'user'</span> + req.parms.id);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>就是取带冒号的参数.</p>\n<a id=\"more\"></a>\n<h3 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json()); <span class=\"comment\">// 用于解析application / json</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">true</span> &#125;)); <span class=\"comment\">// 用于解析 application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(multer()); <span class=\"comment\">// 用于解析多部分/表单数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  res.json(req.body);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.</li>\n</ul>\n<h3 id=\"req-query\"><a href=\"#req-query\" class=\"headerlink\" title=\"req.query\"></a>req.query</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /search?q=tobi+ferret</span></span><br><span class=\"line\">req.query.q</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"tobi ferret\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class=\"line\">req.query.order</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"desc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">req.query.shoe.color</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"blue\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">req.query.shoe.type</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"converse\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"expressjs里的请求参数，4-x里只有3种-都引用官方例子\"><a href=\"#expressjs里的请求参数，4-x里只有3种-都引用官方例子\" class=\"headerlink\" title=\"expressjs里的请求参数，4.x里只有3种(都引用官方例子)\"></a>expressjs里的请求参数，4.x里只有3种(都引用官方例子)</h2><ul>\n<li>req.params</li>\n<li>req.body</li>\n<li>req.query</li>\n</ul>\n<h3 id=\"req-params\"><a href=\"#req-params\" class=\"headerlink\" title=\"req.params\"></a>req.params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">  \tres.send(<span class=\"string\">'user'</span> + req.parms.id);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>就是取带冒号的参数.</p>","more":"<h3 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json()); <span class=\"comment\">// 用于解析application / json</span></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">true</span> &#125;)); <span class=\"comment\">// 用于解析 application/x-www-form-urlencoded</span></span><br><span class=\"line\">app.use(multer()); <span class=\"comment\">// 用于解析多部分/表单数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</span><br><span class=\"line\">  res.json(req.body);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.</li>\n</ul>\n<h3 id=\"req-query\"><a href=\"#req-query\" class=\"headerlink\" title=\"req.query\"></a>req.query</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GET /search?q=tobi+ferret</span></span><br><span class=\"line\">req.query.q</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"tobi ferret\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></span><br><span class=\"line\">req.query.order</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"desc\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">req.query.shoe.color</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"blue\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">req.query.shoe.type</span><br><span class=\"line\"><span class=\"comment\">// =&gt; \"converse\"</span></span><br></pre></td></tr></table></figure>"},{"title":"Generator函数","date":"2017-07-29T06:21:06.000Z","comments":1,"layout":"post","_content":"\n\n\nGenerator最大的特点就是定义的函数可以被**暂停执行**.\n\n## 作用\n\n迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.\n\nasync generator/iterator \n\n> 摘自MDN\n\n**生成器**对象是由一个 [generator function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*) 返回的,并且它符合[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)和[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)。\n\n> 摘自ES6标准入门\n\n可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.\n\n<!--more-->\n\n```javascript\nfunction* hi(){\nyield 'nihao';\nyield 'hello';\nreturn 'ending';\n}\nvar hw = hi();\nhw.next();\nhw.next();\nhw.next();\n```\n\n![generator](/images/generator.png)\n\n\n\n> 通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。\n\n\n\n在`Generator函数`返回的遍历器对象只有调用`next方法`才会遍历下一个内部状态,所以yield语句就是**暂停标志**.\n\n- yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.\n\n```JavaScript\nfunction* add(){\n  yield 123+123;\n}\n//在上面代码里123+123不去求值.当有next();时,才去求值\n```\n\n1. 每个yield将代码分割成两个部分，需要执行两次next才能执行完。\n2. yield其实由两个动作组成，**输入** + **输出**（输入在输出前面），每次执行next，代码会暂停在yield **输出**执行后，其它的语句不再执行（**很重要**）。\n\n## for...of循环\n\n可以自动遍历generator函数,不用去调用next方法.\n\n```javascript\nfunction* foo(){\n  yiled 1;\n  yiled 2;\n  yiled 3;\n  yiled 4;\n  yiled 5;\n  return 6;\n}\nfor(let v of foo()){\n  console.log(v);\n}\n//1 2 3 4 5\n```\n\n# Generator函数的数据交换和错误处理\n\n`next()`方法返回值的`value`属性，是`Generator`函数向外输出的数据；`next()`方法还可以接受参数，向`Generator`函数体内输入数据。\n\n```JavaScript\nfunction* gen(x) {\n    var y = yield x + 2;\n    return y;\n} \n\nvar g = gen(1);\ng.next()      // { value: 3, done: false }\ng.next(2)     // { value: 2, done: true }\n```\n\n`Generator`函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\n```\nfunction* gen(x) {\n    try {\n        var y = yield x + 2\n    } catch(e) {\n        console.log(e)\n    }\n    return y\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n```\n\n上面代码的最后一行，`Generator`函数体外，使用指针对象的`throw`方法抛出的错误，可以被函数体内的`try...catch` 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。","source":"_posts/Generator.md","raw":"---\ntitle: Generator函数\ndate: 2017-07-29 14：27\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之旅\n---\n\n\n\nGenerator最大的特点就是定义的函数可以被**暂停执行**.\n\n## 作用\n\n迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.\n\nasync generator/iterator \n\n> 摘自MDN\n\n**生成器**对象是由一个 [generator function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*) 返回的,并且它符合[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)和[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)。\n\n> 摘自ES6标准入门\n\n可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.\n\n<!--more-->\n\n```javascript\nfunction* hi(){\nyield 'nihao';\nyield 'hello';\nreturn 'ending';\n}\nvar hw = hi();\nhw.next();\nhw.next();\nhw.next();\n```\n\n![generator](/images/generator.png)\n\n\n\n> 通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。\n\n\n\n在`Generator函数`返回的遍历器对象只有调用`next方法`才会遍历下一个内部状态,所以yield语句就是**暂停标志**.\n\n- yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.\n\n```JavaScript\nfunction* add(){\n  yield 123+123;\n}\n//在上面代码里123+123不去求值.当有next();时,才去求值\n```\n\n1. 每个yield将代码分割成两个部分，需要执行两次next才能执行完。\n2. yield其实由两个动作组成，**输入** + **输出**（输入在输出前面），每次执行next，代码会暂停在yield **输出**执行后，其它的语句不再执行（**很重要**）。\n\n## for...of循环\n\n可以自动遍历generator函数,不用去调用next方法.\n\n```javascript\nfunction* foo(){\n  yiled 1;\n  yiled 2;\n  yiled 3;\n  yiled 4;\n  yiled 5;\n  return 6;\n}\nfor(let v of foo()){\n  console.log(v);\n}\n//1 2 3 4 5\n```\n\n# Generator函数的数据交换和错误处理\n\n`next()`方法返回值的`value`属性，是`Generator`函数向外输出的数据；`next()`方法还可以接受参数，向`Generator`函数体内输入数据。\n\n```JavaScript\nfunction* gen(x) {\n    var y = yield x + 2;\n    return y;\n} \n\nvar g = gen(1);\ng.next()      // { value: 3, done: false }\ng.next(2)     // { value: 2, done: true }\n```\n\n`Generator`函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\n```\nfunction* gen(x) {\n    try {\n        var y = yield x + 2\n    } catch(e) {\n        console.log(e)\n    }\n    return y\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n```\n\n上面代码的最后一行，`Generator`函数体外，使用指针对象的`throw`方法抛出的错误，可以被函数体内的`try...catch` 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。","slug":"Generator","published":1,"updated":"2017-12-13T13:43:30.557Z","photos":[],"link":"","_id":"cjollnbod001sunfya5ogbjkf","content":"<p>Generator最大的特点就是定义的函数可以被<strong>暂停执行</strong>.</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.</p>\n<p>async generator/iterator </p>\n<blockquote>\n<p>摘自MDN</p>\n</blockquote>\n<p><strong>生成器</strong>对象是由一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"noopener\">generator function</a> 返回的,并且它符合<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"noopener\">可迭代协议</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator\" target=\"_blank\" rel=\"noopener\">迭代器协议</a>。</p>\n<blockquote>\n<p>摘自ES6标准入门</p>\n</blockquote>\n<p>可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'nihao'</span>;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = hi();</span><br><span class=\"line\">hw.next();</span><br><span class=\"line\">hw.next();</span><br><span class=\"line\">hw.next();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/generator.png\" alt=\"generator\"></p>\n<blockquote>\n<p>通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。</p>\n</blockquote>\n<p>在<code>Generator函数</code>返回的遍历器对象只有调用<code>next方法</code>才会遍历下一个内部状态,所以yield语句就是<strong>暂停标志</strong>.</p>\n<ul>\n<li>yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">123</span>+<span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在上面代码里123+123不去求值.当有next();时,才去求值</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>每个yield将代码分割成两个部分，需要执行两次next才能执行完。</li>\n<li>yield其实由两个动作组成，<strong>输入</strong> + <strong>输出</strong>（输入在输出前面），每次执行next，代码会暂停在yield <strong>输出</strong>执行后，其它的语句不再执行（<strong>很重要</strong>）。</li>\n</ol>\n<h2 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h2><p>可以自动遍历generator函数,不用去调用next方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  yiled <span class=\"number\">1</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">2</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">3</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">4</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Generator函数的数据交换和错误处理\"><a href=\"#Generator函数的数据交换和错误处理\" class=\"headerlink\" title=\"Generator函数的数据交换和错误处理\"></a>Generator函数的数据交换和错误处理</h1><p><code>next()</code>方法返回值的<code>value</code>属性，是<code>Generator</code>函数向外输出的数据；<code>next()</code>方法还可以接受参数，向<code>Generator</code>函数体内输入数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>);</span><br><span class=\"line\">g.next()      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next(<span class=\"number\">2</span>)     <span class=\"comment\">// &#123; value: 2, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>Generator</code>函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* gen(x) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        var y = yield x + 2</span><br><span class=\"line\">    &#125; catch(e) &#123;</span><br><span class=\"line\">        console.log(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = gen(1);</span><br><span class=\"line\">g.next();</span><br><span class=\"line\">g.throw(&apos;出错了&apos;);</span><br></pre></td></tr></table></figure>\n<p>上面代码的最后一行，<code>Generator</code>函数体外，使用指针对象的<code>throw</code>方法抛出的错误，可以被函数体内的<code>try...catch</code> 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p>\n","site":{"data":{}},"excerpt":"<p>Generator最大的特点就是定义的函数可以被<strong>暂停执行</strong>.</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.</p>\n<p>async generator/iterator </p>\n<blockquote>\n<p>摘自MDN</p>\n</blockquote>\n<p><strong>生成器</strong>对象是由一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"noopener\">generator function</a> 返回的,并且它符合<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"noopener\">可迭代协议</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator\" target=\"_blank\" rel=\"noopener\">迭代器协议</a>。</p>\n<blockquote>\n<p>摘自ES6标准入门</p>\n</blockquote>\n<p>可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'nihao'</span>;</span><br><span class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> hw = hi();</span><br><span class=\"line\">hw.next();</span><br><span class=\"line\">hw.next();</span><br><span class=\"line\">hw.next();</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/generator.png\" alt=\"generator\"></p>\n<blockquote>\n<p>通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。</p>\n</blockquote>\n<p>在<code>Generator函数</code>返回的遍历器对象只有调用<code>next方法</code>才会遍历下一个内部状态,所以yield语句就是<strong>暂停标志</strong>.</p>\n<ul>\n<li>yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">123</span>+<span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//在上面代码里123+123不去求值.当有next();时,才去求值</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>每个yield将代码分割成两个部分，需要执行两次next才能执行完。</li>\n<li>yield其实由两个动作组成，<strong>输入</strong> + <strong>输出</strong>（输入在输出前面），每次执行next，代码会暂停在yield <strong>输出</strong>执行后，其它的语句不再执行（<strong>很重要</strong>）。</li>\n</ol>\n<h2 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h2><p>可以自动遍历generator函数,不用去调用next方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  yiled <span class=\"number\">1</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">2</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">3</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">4</span>;</span><br><span class=\"line\">  yiled <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo())&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Generator函数的数据交换和错误处理\"><a href=\"#Generator函数的数据交换和错误处理\" class=\"headerlink\" title=\"Generator函数的数据交换和错误处理\"></a>Generator函数的数据交换和错误处理</h1><p><code>next()</code>方法返回值的<code>value</code>属性，是<code>Generator</code>函数向外输出的数据；<code>next()</code>方法还可以接受参数，向<code>Generator</code>函数体内输入数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>);</span><br><span class=\"line\">g.next()      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\">g.next(<span class=\"number\">2</span>)     <span class=\"comment\">// &#123; value: 2, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>Generator</code>函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function* gen(x) &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        var y = yield x + 2</span><br><span class=\"line\">    &#125; catch(e) &#123;</span><br><span class=\"line\">        console.log(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = gen(1);</span><br><span class=\"line\">g.next();</span><br><span class=\"line\">g.throw(&apos;出错了&apos;);</span><br></pre></td></tr></table></figure>\n<p>上面代码的最后一行，<code>Generator</code>函数体外，使用指针对象的<code>throw</code>方法抛出的错误，可以被函数体内的<code>try...catch</code> 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p>"},{"title":"GraphQL基本操作","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# GraphQL()\n\n强类型\n\n也就是说，你可以查询值类型：`Int`, `Float`, `String`, `Boolean`和`ID`\n\nGraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。\n\n你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。\n\n## 操作(operation)\n\n**操作（Operations）**\n\nGraphQL 规范支持两种操作：\n\n- query：仅获取数据（fetch）的只读请求\n- mutation：获取数据后还有写操作的请求\n\n```json\nquery{\n    clent(id:1){\n      id\n      name\n  }\n}\n```\n- client 是查询的operation\n- (id:1)包含了传入给Query的参数\n- 查询包含id和name字段,这些字段也是我们希望查询可以返回的.\n\n<!--more-->\n\nserver会给这个查询返回什么：\n\n```json\n{\n  \"data\": {\n    \"client\": {\n      \"id\": \"1\",\n      \"name\": \"Uncle Charlie\"\n    }\n  }\n}\n```\n\nserver会返回一个JSON串。这个JSON的schema和查询的基本一致。\n\n## 变量(Variable)\n\n```json\nquery($clientId: Int) {\n  client(id: $clientId) {\n    name\n    dob\n  }\n\n  purchases(client_id: $clientId) {\n    date\n    quantity\n    total\n    product {\n      name\n      price\n      product_category {\n        name\n      }\n    }\n    client {\n      name\n      dob\n    }\n  }\n}\n```\n\n```json\n{\n  \"clientId\": 1\n}\n```\n\n# Graphql的schema下\n\n```\nschema{\t\n\n\tquery: Query,\n\n\tmutation: Mutation,\n\n}\n```\n\n## Mutation（修改）\n\n增、删、改一类的operation在GraphQL里统称为**变异（mutation，即修改数据）**\n\nGraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：\n\nmutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：\n\n请求结束时 theNumber 的值会是 2。\n\n- create_client增加\n\n```json\nmutation {\n  create_client (\n    name: \"查理大叔\"\n    dob: \"2017/01/28\"\n  ) {\n    id \n    name\n    dob\n  }\n}\n```\n\n- update_client更新\n\n```json\nmutation {\n  update_client (\n    id: 5\n    dob: \"1990/01/01\"\n  ) {\n    id\n    name\n    dob\n  }\n}\n```\n\n- destroy_client删除\n\n```json\nmutation {\n  destroy_client(id: 5) {\n    name \n    dob\n  }\n}\n```\n\n# 修改数据\n\n就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：\n\n```\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { //!表示必须填写的查询条件  \n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n{\n  \"ep\": \"JEDI\",\n  \"review\": {\n    \"stars\": 5,\n    \"commentary\": \"This is a great movie!\"\n  }\n}\n```\n\n需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。\n\n## 强类型\n\n由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。\n\n## Fragments(组合)\n\nGraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：\n\n```json\n{\n  me {\n    name\n    friends {\n      name\n      events {\n        name\n      }\n    }\n  }\n}\n```\n\n可以转换成这样：\n\n```json\n{\n  me {\n    name\n    friends {\n      ...firendFragment\n    }\n  }\n}\n\nfragment friendFragment on User {\n  name\n  events {\n    name\n  }\n}\n```\n\n上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。\n\n\n\n简单的说，GraphQL 是一种**描述请求数据方法的语法**，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：\n\n- 它允许客户端指定具体所需的数据。\n- 它让从多个数据源汇总取数据变得更简单。\n- 它使用了类型系统来描述数据。\n\n一个 GraphQL API 主要由三个部分组成：**schema（类型）**，**queries（查询）** 以及 **resolvers（解析器）**。\n\n\n\n# Arguments(参数)\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n    }\n  }\n}\n```\n\n当然在字段里我们也可以传参数.\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT//or METER)\n  }\n}\n```\n\n```JavaScript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 5.6430448 // or 1.72\n    }\n  }\n}\n```\n\n# Aliases(别名)\n\n```json\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n```json\n{\n  \"data\": {\n    \"empireHero\": {\n      \"name\": \"Luke Skywalker\"\n    },\n    \"jediHero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n## Variables(变量)\n\n当我们开始使用变量的时候,我们需要做三件事情\n\n> 1. Replace the static value in the query with `$variableName`\n> 2. Declare `$variableName` as one of the variables accepted by the query\n> 3. Pass `variableName: value` in the separate, transport-specific (usually JSON) variables dictionary\n\n1. 用`$` 替换查询中的静态值\n2. 将`$` 声明为查询接受变量之一\n3. 通常传递json.\n\n```javascript\nquery\nHeroNameAndFriends(\n\t$episode: Episode,\n\t){\n\thero(\n\tepisode: $episode\n){\n\tname\n \tfriends{\n  \tname\n \t}\n  }\n}\n\n//variables\n{\n  \"episode\": \"JEDI\"\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n# fields\n\nFields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数\n\n# Root fields & resolvers\n\n```\nQuery: {\n  human(obj, args, context) {\n    return context.db.loadHumanByID(args.id).then(\n      userData => new Human(userData)\n    )\n  }\n}\n```\n\nobj上一个对象，其对于根查询类型的字段通常不被使用\n\nargs提供给GraphQL查询中的字段的参数。\n\ncontext提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。\n\n\n\n","source":"_posts/GraphQL.md","raw":"---\ntitle: GraphQL基本操作\ndate: 2017-07-22 21：16\ncomments: true\nlayout: post\ntags: [GraphQL]\ncategories: GraphQL\n---\n\n# GraphQL()\n\n强类型\n\n也就是说，你可以查询值类型：`Int`, `Float`, `String`, `Boolean`和`ID`\n\nGraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。\n\n你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。\n\n## 操作(operation)\n\n**操作（Operations）**\n\nGraphQL 规范支持两种操作：\n\n- query：仅获取数据（fetch）的只读请求\n- mutation：获取数据后还有写操作的请求\n\n```json\nquery{\n    clent(id:1){\n      id\n      name\n  }\n}\n```\n- client 是查询的operation\n- (id:1)包含了传入给Query的参数\n- 查询包含id和name字段,这些字段也是我们希望查询可以返回的.\n\n<!--more-->\n\nserver会给这个查询返回什么：\n\n```json\n{\n  \"data\": {\n    \"client\": {\n      \"id\": \"1\",\n      \"name\": \"Uncle Charlie\"\n    }\n  }\n}\n```\n\nserver会返回一个JSON串。这个JSON的schema和查询的基本一致。\n\n## 变量(Variable)\n\n```json\nquery($clientId: Int) {\n  client(id: $clientId) {\n    name\n    dob\n  }\n\n  purchases(client_id: $clientId) {\n    date\n    quantity\n    total\n    product {\n      name\n      price\n      product_category {\n        name\n      }\n    }\n    client {\n      name\n      dob\n    }\n  }\n}\n```\n\n```json\n{\n  \"clientId\": 1\n}\n```\n\n# Graphql的schema下\n\n```\nschema{\t\n\n\tquery: Query,\n\n\tmutation: Mutation,\n\n}\n```\n\n## Mutation（修改）\n\n增、删、改一类的operation在GraphQL里统称为**变异（mutation，即修改数据）**\n\nGraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：\n\nmutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：\n\n请求结束时 theNumber 的值会是 2。\n\n- create_client增加\n\n```json\nmutation {\n  create_client (\n    name: \"查理大叔\"\n    dob: \"2017/01/28\"\n  ) {\n    id \n    name\n    dob\n  }\n}\n```\n\n- update_client更新\n\n```json\nmutation {\n  update_client (\n    id: 5\n    dob: \"1990/01/01\"\n  ) {\n    id\n    name\n    dob\n  }\n}\n```\n\n- destroy_client删除\n\n```json\nmutation {\n  destroy_client(id: 5) {\n    name \n    dob\n  }\n}\n```\n\n# 修改数据\n\n就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：\n\n```\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { //!表示必须填写的查询条件  \n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n{\n  \"ep\": \"JEDI\",\n  \"review\": {\n    \"stars\": 5,\n    \"commentary\": \"This is a great movie!\"\n  }\n}\n```\n\n需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。\n\n## 强类型\n\n由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。\n\n## Fragments(组合)\n\nGraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：\n\n```json\n{\n  me {\n    name\n    friends {\n      name\n      events {\n        name\n      }\n    }\n  }\n}\n```\n\n可以转换成这样：\n\n```json\n{\n  me {\n    name\n    friends {\n      ...firendFragment\n    }\n  }\n}\n\nfragment friendFragment on User {\n  name\n  events {\n    name\n  }\n}\n```\n\n上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。\n\n\n\n简单的说，GraphQL 是一种**描述请求数据方法的语法**，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：\n\n- 它允许客户端指定具体所需的数据。\n- 它让从多个数据源汇总取数据变得更简单。\n- 它使用了类型系统来描述数据。\n\n一个 GraphQL API 主要由三个部分组成：**schema（类型）**，**queries（查询）** 以及 **resolvers（解析器）**。\n\n\n\n# Arguments(参数)\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n    }\n  }\n}\n```\n\n当然在字段里我们也可以传参数.\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT//or METER)\n  }\n}\n```\n\n```JavaScript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 5.6430448 // or 1.72\n    }\n  }\n}\n```\n\n# Aliases(别名)\n\n```json\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n```json\n{\n  \"data\": {\n    \"empireHero\": {\n      \"name\": \"Luke Skywalker\"\n    },\n    \"jediHero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n## Variables(变量)\n\n当我们开始使用变量的时候,我们需要做三件事情\n\n> 1. Replace the static value in the query with `$variableName`\n> 2. Declare `$variableName` as one of the variables accepted by the query\n> 3. Pass `variableName: value` in the separate, transport-specific (usually JSON) variables dictionary\n\n1. 用`$` 替换查询中的静态值\n2. 将`$` 声明为查询接受变量之一\n3. 通常传递json.\n\n```javascript\nquery\nHeroNameAndFriends(\n\t$episode: Episode,\n\t){\n\thero(\n\tepisode: $episode\n){\n\tname\n \tfriends{\n  \tname\n \t}\n  }\n}\n\n//variables\n{\n  \"episode\": \"JEDI\"\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n# fields\n\nFields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数\n\n# Root fields & resolvers\n\n```\nQuery: {\n  human(obj, args, context) {\n    return context.db.loadHumanByID(args.id).then(\n      userData => new Human(userData)\n    )\n  }\n}\n```\n\nobj上一个对象，其对于根查询类型的字段通常不被使用\n\nargs提供给GraphQL查询中的字段的参数。\n\ncontext提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。\n\n\n\n","slug":"GraphQL","published":1,"updated":"2017-09-18T02:42:29.000Z","photos":[],"link":"","_id":"cjollnbon001xunfyedzwqv3y","content":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL()\"></a>GraphQL()</h1><p>强类型</p>\n<p>也就是说，你可以查询值类型：<code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>和<code>ID</code></p>\n<p>GraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。</p>\n<p>你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。</p>\n<h2 id=\"操作-operation\"><a href=\"#操作-operation\" class=\"headerlink\" title=\"操作(operation)\"></a>操作(operation)</h2><p><strong>操作（Operations）</strong></p>\n<p>GraphQL 规范支持两种操作：</p>\n<ul>\n<li>query：仅获取数据（fetch）的只读请求</li>\n<li>mutation：获取数据后还有写操作的请求</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query&#123;</span><br><span class=\"line\">    clent(id:1)&#123;</span><br><span class=\"line\">      id</span><br><span class=\"line\">      name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>client 是查询的operation</li>\n<li>(id:1)包含了传入给Query的参数</li>\n<li>查询包含id和name字段,这些字段也是我们希望查询可以返回的.</li>\n</ul>\n<a id=\"more\"></a>\n<p>server会给这个查询返回什么：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"client\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Uncle Charlie\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server会返回一个JSON串。这个JSON的schema和查询的基本一致。</p>\n<h2 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量(Variable)\"></a>变量(Variable)</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query($clientId: Int) &#123;</span><br><span class=\"line\">  client(id: $clientId) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  purchases(client_id: $clientId) &#123;</span><br><span class=\"line\">    date</span><br><span class=\"line\">    quantity</span><br><span class=\"line\">    total</span><br><span class=\"line\">    product &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      price</span><br><span class=\"line\">      product_category &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      dob</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"clientId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Graphql的schema下\"><a href=\"#Graphql的schema下\" class=\"headerlink\" title=\"Graphql的schema下\"></a>Graphql的schema下</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema&#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery: Query,</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutation: Mutation,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mutation（修改）\"><a href=\"#Mutation（修改）\" class=\"headerlink\" title=\"Mutation（修改）\"></a>Mutation（修改）</h2><p>增、删、改一类的operation在GraphQL里统称为<strong>变异（mutation，即修改数据）</strong></p>\n<p>GraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：</p>\n<p>mutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：</p>\n<p>请求结束时 theNumber 的值会是 2。</p>\n<ul>\n<li>create_client增加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  create_client (</span><br><span class=\"line\">    name: \"查理大叔\"</span><br><span class=\"line\">    dob: \"2017/01/28\"</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    id </span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>update_client更新</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  update_client (</span><br><span class=\"line\">    id: 5</span><br><span class=\"line\">    dob: \"1990/01/01\"</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>destroy_client删除</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  destroy_client(id: 5) &#123;</span><br><span class=\"line\">    name </span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123; //!表示必须填写的查询条件  </span><br><span class=\"line\">  createReview(episode: $ep, review: $review) &#123;</span><br><span class=\"line\">    stars</span><br><span class=\"line\">    commentary</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;ep&quot;: &quot;JEDI&quot;,</span><br><span class=\"line\">  &quot;review&quot;: &#123;</span><br><span class=\"line\">    &quot;stars&quot;: 5,</span><br><span class=\"line\">    &quot;commentary&quot;: &quot;This is a great movie!&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。</p>\n<h2 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h2><p>由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。</p>\n<h2 id=\"Fragments-组合\"><a href=\"#Fragments-组合\" class=\"headerlink\" title=\"Fragments(组合)\"></a>Fragments(组合)</h2><p>GraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      events &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以转换成这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      ...firendFragment</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fragment friendFragment on User &#123;</span><br><span class=\"line\">  name</span><br><span class=\"line\">  events &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。</p>\n<p>简单的说，GraphQL 是一种<strong>描述请求数据方法的语法</strong>，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：</p>\n<ul>\n<li>它允许客户端指定具体所需的数据。</li>\n<li>它让从多个数据源汇总取数据变得更简单。</li>\n<li>它使用了类型系统来描述数据。</li>\n</ul>\n<p>一个 GraphQL API 主要由三个部分组成：<strong>schema（类型）</strong>，<strong>queries（查询）</strong> 以及 <strong>resolvers（解析器）</strong>。</p>\n<h1 id=\"Arguments-参数\"><a href=\"#Arguments-参数\" class=\"headerlink\" title=\"Arguments(参数)\"></a>Arguments(参数)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    height</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">1.72</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然在字段里我们也可以传参数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    height(unit: FOOT<span class=\"comment\">//or METER)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">5.6430448</span> <span class=\"comment\">// or 1.72</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Aliases-别名\"><a href=\"#Aliases-别名\" class=\"headerlink\" title=\"Aliases(别名)\"></a>Aliases(别名)</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  empireHero: hero(episode: EMPIRE) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  jediHero: hero(episode: JEDI) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"empireHero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"jediHero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h2><p>当我们开始使用变量的时候,我们需要做三件事情</p>\n<blockquote>\n<ol>\n<li>Replace the static value in the query with <code>$variableName</code></li>\n<li>Declare <code>$variableName</code> as one of the variables accepted by the query</li>\n<li>Pass <code>variableName: value</code> in the separate, transport-specific (usually JSON) variables dictionary</li>\n</ol>\n</blockquote>\n<ol>\n<li>用<code>$</code> 替换查询中的静态值</li>\n<li>将<code>$</code> 声明为查询接受变量之一</li>\n<li>通常传递json.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query</span><br><span class=\"line\">HeroNameAndFriends(</span><br><span class=\"line\">\t$episode: Episode,</span><br><span class=\"line\">\t)&#123;</span><br><span class=\"line\">\thero(</span><br><span class=\"line\">\tepisode: $episode</span><br><span class=\"line\">)&#123;</span><br><span class=\"line\">\tname</span><br><span class=\"line\"> \tfriends&#123;</span><br><span class=\"line\">  \tname</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//variables</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"episode\"</span>: <span class=\"string\">\"JEDI\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"hero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"friends\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Han Solo\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Leia Organa\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"fields\"><a href=\"#fields\" class=\"headerlink\" title=\"fields\"></a>fields</h1><p>Fields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数</p>\n<h1 id=\"Root-fields-amp-resolvers\"><a href=\"#Root-fields-amp-resolvers\" class=\"headerlink\" title=\"Root fields &amp; resolvers\"></a>Root fields &amp; resolvers</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query: &#123;</span><br><span class=\"line\">  human(obj, args, context) &#123;</span><br><span class=\"line\">    return context.db.loadHumanByID(args.id).then(</span><br><span class=\"line\">      userData =&gt; new Human(userData)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>obj上一个对象，其对于根查询类型的字段通常不被使用</p>\n<p>args提供给GraphQL查询中的字段的参数。</p>\n<p>context提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL()\"></a>GraphQL()</h1><p>强类型</p>\n<p>也就是说，你可以查询值类型：<code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>和<code>ID</code></p>\n<p>GraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。</p>\n<p>你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。</p>\n<h2 id=\"操作-operation\"><a href=\"#操作-operation\" class=\"headerlink\" title=\"操作(operation)\"></a>操作(operation)</h2><p><strong>操作（Operations）</strong></p>\n<p>GraphQL 规范支持两种操作：</p>\n<ul>\n<li>query：仅获取数据（fetch）的只读请求</li>\n<li>mutation：获取数据后还有写操作的请求</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query&#123;</span><br><span class=\"line\">    clent(id:1)&#123;</span><br><span class=\"line\">      id</span><br><span class=\"line\">      name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>client 是查询的operation</li>\n<li>(id:1)包含了传入给Query的参数</li>\n<li>查询包含id和name字段,这些字段也是我们希望查询可以返回的.</li>\n</ul>","more":"<p>server会给这个查询返回什么：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"client\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Uncle Charlie\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server会返回一个JSON串。这个JSON的schema和查询的基本一致。</p>\n<h2 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量(Variable)\"></a>变量(Variable)</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query($clientId: Int) &#123;</span><br><span class=\"line\">  client(id: $clientId) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  purchases(client_id: $clientId) &#123;</span><br><span class=\"line\">    date</span><br><span class=\"line\">    quantity</span><br><span class=\"line\">    total</span><br><span class=\"line\">    product &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      price</span><br><span class=\"line\">      product_category &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    client &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      dob</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"clientId\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Graphql的schema下\"><a href=\"#Graphql的schema下\" class=\"headerlink\" title=\"Graphql的schema下\"></a>Graphql的schema下</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">schema&#123;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tquery: Query,</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutation: Mutation,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mutation（修改）\"><a href=\"#Mutation（修改）\" class=\"headerlink\" title=\"Mutation（修改）\"></a>Mutation（修改）</h2><p>增、删、改一类的operation在GraphQL里统称为<strong>变异（mutation，即修改数据）</strong></p>\n<p>GraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：</p>\n<p>mutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：</p>\n<p>请求结束时 theNumber 的值会是 2。</p>\n<ul>\n<li>create_client增加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  create_client (</span><br><span class=\"line\">    name: \"查理大叔\"</span><br><span class=\"line\">    dob: \"2017/01/28\"</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    id </span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>update_client更新</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  update_client (</span><br><span class=\"line\">    id: 5</span><br><span class=\"line\">    dob: \"1990/01/01\"</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>destroy_client删除</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation &#123;</span><br><span class=\"line\">  destroy_client(id: 5) &#123;</span><br><span class=\"line\">    name </span><br><span class=\"line\">    dob</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123; //!表示必须填写的查询条件  </span><br><span class=\"line\">  createReview(episode: $ep, review: $review) &#123;</span><br><span class=\"line\">    stars</span><br><span class=\"line\">    commentary</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;ep&quot;: &quot;JEDI&quot;,</span><br><span class=\"line\">  &quot;review&quot;: &#123;</span><br><span class=\"line\">    &quot;stars&quot;: 5,</span><br><span class=\"line\">    &quot;commentary&quot;: &quot;This is a great movie!&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。</p>\n<h2 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h2><p>由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。</p>\n<h2 id=\"Fragments-组合\"><a href=\"#Fragments-组合\" class=\"headerlink\" title=\"Fragments(组合)\"></a>Fragments(组合)</h2><p>GraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      name</span><br><span class=\"line\">      events &#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以转换成这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  me &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends &#123;</span><br><span class=\"line\">      ...firendFragment</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fragment friendFragment on User &#123;</span><br><span class=\"line\">  name</span><br><span class=\"line\">  events &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。</p>\n<p>简单的说，GraphQL 是一种<strong>描述请求数据方法的语法</strong>，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：</p>\n<ul>\n<li>它允许客户端指定具体所需的数据。</li>\n<li>它让从多个数据源汇总取数据变得更简单。</li>\n<li>它使用了类型系统来描述数据。</li>\n</ul>\n<p>一个 GraphQL API 主要由三个部分组成：<strong>schema（类型）</strong>，<strong>queries（查询）</strong> 以及 <strong>resolvers（解析器）</strong>。</p>\n<h1 id=\"Arguments-参数\"><a href=\"#Arguments-参数\" class=\"headerlink\" title=\"Arguments(参数)\"></a>Arguments(参数)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    height</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">1.72</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然在字段里我们也可以传参数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    height(unit: FOOT<span class=\"comment\">//or METER)</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">5.6430448</span> <span class=\"comment\">// or 1.72</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Aliases-别名\"><a href=\"#Aliases-别名\" class=\"headerlink\" title=\"Aliases(别名)\"></a>Aliases(别名)</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  empireHero: hero(episode: EMPIRE) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  jediHero: hero(episode: JEDI) &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"empireHero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"jediHero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h2><p>当我们开始使用变量的时候,我们需要做三件事情</p>\n<blockquote>\n<ol>\n<li>Replace the static value in the query with <code>$variableName</code></li>\n<li>Declare <code>$variableName</code> as one of the variables accepted by the query</li>\n<li>Pass <code>variableName: value</code> in the separate, transport-specific (usually JSON) variables dictionary</li>\n</ol>\n</blockquote>\n<ol>\n<li>用<code>$</code> 替换查询中的静态值</li>\n<li>将<code>$</code> 声明为查询接受变量之一</li>\n<li>通常传递json.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query</span><br><span class=\"line\">HeroNameAndFriends(</span><br><span class=\"line\">\t$episode: Episode,</span><br><span class=\"line\">\t)&#123;</span><br><span class=\"line\">\thero(</span><br><span class=\"line\">\tepisode: $episode</span><br><span class=\"line\">)&#123;</span><br><span class=\"line\">\tname</span><br><span class=\"line\"> \tfriends&#123;</span><br><span class=\"line\">  \tname</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//variables</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"episode\"</span>: <span class=\"string\">\"JEDI\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"hero\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"friends\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Han Solo\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Leia Organa\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"fields\"><a href=\"#fields\" class=\"headerlink\" title=\"fields\"></a>fields</h1><p>Fields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数</p>\n<h1 id=\"Root-fields-amp-resolvers\"><a href=\"#Root-fields-amp-resolvers\" class=\"headerlink\" title=\"Root fields &amp; resolvers\"></a>Root fields &amp; resolvers</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Query: &#123;</span><br><span class=\"line\">  human(obj, args, context) &#123;</span><br><span class=\"line\">    return context.db.loadHumanByID(args.id).then(</span><br><span class=\"line\">      userData =&gt; new Human(userData)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>obj上一个对象，其对于根查询类型的字段通常不被使用</p>\n<p>args提供给GraphQL查询中的字段的参数。</p>\n<p>context提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。</p>"},{"title":"Hello, World!","date":"2017-03-19T13:10:55.000Z","comments":1,"layout":"post","_content":"## Hello World ##\n\n\n- **Hello World**\n\n> 第一篇就和大家打个招呼！\n\n- 多种语言的`Hello World`\n  <!--more-->\n- C\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, World\");\n    return 0;\n}\n```\n- Java\n```java\n    public class HelloWorld{\n        public static void main(String[] args){\n            System.out.println(\"Hello World!\");\n        }\n    }\n```\n\n- Javascript\n```javascript\nconsole.log(\"Hello, World!\");\n```\n- Python\n```python\n    print(\"Hello, World!\")\n```\n- PHP\n```php\necho 'Hello,World!';\n```\n\n\n- Go\n```go\npackage main\nimport \"fmt\"\nfunc main(){\n    fmt.Print(\"Hello, World!\");\n}\n```\n\n\n\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n \n\n \n\n\n\n\n\n","source":"_posts/Hello World.md","raw":"---\ntitle: Hello, World!\ndate: 2017-03-19 21:10:55\ncomments: true\nlayout: post\ntags: [C,Java,JavaScript,Python,PHP,go]\ncategories: Technology\n---\n## Hello World ##\n\n\n- **Hello World**\n\n> 第一篇就和大家打个招呼！\n\n- 多种语言的`Hello World`\n  <!--more-->\n- C\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, World\");\n    return 0;\n}\n```\n- Java\n```java\n    public class HelloWorld{\n        public static void main(String[] args){\n            System.out.println(\"Hello World!\");\n        }\n    }\n```\n\n- Javascript\n```javascript\nconsole.log(\"Hello, World!\");\n```\n- Python\n```python\n    print(\"Hello, World!\")\n```\n- PHP\n```php\necho 'Hello,World!';\n```\n\n\n- Go\n```go\npackage main\nimport \"fmt\"\nfunc main(){\n    fmt.Print(\"Hello, World!\");\n}\n```\n\n\n\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n \n\n \n\n\n\n\n\n","slug":"Hello World","published":1,"updated":"2017-07-28T12:42:30.000Z","photos":[],"link":"","_id":"cjollnbop0020unfy3jeryop8","content":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li><strong>Hello World</strong></li>\n</ul>\n<blockquote>\n<p>第一篇就和大家打个招呼！</p>\n</blockquote>\n<ul>\n<li>多种语言的<code>Hello World</code><a id=\"more\"></a></li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello,World!'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Print(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li><strong>Hello World</strong></li>\n</ul>\n<blockquote>\n<p>第一篇就和大家打个招呼！</p>\n</blockquote>\n<ul>\n<li>多种语言的<code>Hello World</code>","more":"</li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello,World!'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Print(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>"},{"title":"JSON看这篇就行了","date":"2018-01-05T13:27:00.000Z","comments":1,"layout":"post","_content":"# JSON\n\n最近大量接触`JSON` 所以我特意去[`JSON`标准](https://www.rfc-editor.org/rfc/rfc4627.txt)(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下`JSON`\n\n我们先来看一个`JSON`的组成：\n\n```json\n{\n  \"propertyName\": \"propertyValue\"\n}\n```\n\n1. property(属性/键值对)\n2. propertyName(属性名/键)\n3. propertyValue(属性值)\n\n\nJSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））\n\n<!--more-->\n\n## 书写\n\n### 逗号\n\n最后一个属性后不能有逗号\n\n### 双引号\n\n在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。\n\n### 结构层次\n\n在设计`JSON` 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。\n\n先讲讲我在知乎上看见的问题：\n\n正常情况有一个JSON应为：\n\n```json\n[\n  { \n    \"name\": \"Javascript权威指南\"，\n    \"chapters:\": 500,\n  },\n  {\n    \"name\": \"Javascript高级程序设计\",\n    \"chapters\": 500,\n  },\n  {...},\n  {...}\n]\n```\n\n这样看是很完美，但是有些人会这样设计？\n\n```json\n[\n  {\n    \"Javascript权威指南\"： 500\n  },\n  {\n    \"Javascript高级程序设计\": 500\n  }\n]\n```\n\n那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他们为啥要把**数据内容带入属性名！！**\n\nok！我们知道了一点，不要把**数据内容带入属性名**。\n\n接下来扁平化数据：\n\n```json\n{\n  \"Image\": {\n    \"width\": 800,\n    \"Height\": 600,\n    \"Title\":  \"View from 15th Floor\",\n    \"ThumbnailUrl\": \"http://www.example.com/image/481989943\",\n    \"ThumbnailHeight\": 125,\n    \"ThumbnailWidth\": 100\n  }\n}\n```\n\n结构层次：\n\n```json\n{\n  \"Image\": {\n    \"Width\":  800,\n    \"Height\": 600,\n    \"Title\":  \"View from 15th Floor\",\n    \"Thumbnail\": {\n      \"Url\":    \"http://www.example.com/image/481989943\",\n      \"Height\": 125,\n      \"Width\":  \"100\"\n    },\n  }\n}\n```\n\nJSON中本应该以数据元素扁平化方式呈现。\n\n但是结构层次对我们开发人员更加的友好有意义。\n\n具体情况看自己的选择。\n\n## 下面讲点细的\n\n### 属性名规范\n\n* 属性名应该一看就知道啥用\n* 属性名必须是驼峰，ASCII码字符串\n* 首字符必须是字母，_ （下划线），$(美元符号)\n* 避免使用js中的保留字\n* 数组类型应该是复数，其他属性名都为单数\n\n\n\n### 属性值规范\n\n* 属性值应该为四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））\n* 其他的具体可以看我下面给出的参考资料链接\n\n\n\n## 方法\n\n\n\n* JSON.parse()\n  * 解析一个JSON将他转换成JavaScript值或对象\n* JSON.stringify()\n  * 把一个对象或者值转换成JSON字符串\n\n## 参考\n\n* [JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* [JSON-MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON)","source":"_posts/JSON.md","raw":"---\ntitle: JSON看这篇就行了\ndate: 2018-01-05 21:27\ncomments: true\nlayout: post\ntags: JavaScript\ncategories: Javascript修仙之旅\n---\n# JSON\n\n最近大量接触`JSON` 所以我特意去[`JSON`标准](https://www.rfc-editor.org/rfc/rfc4627.txt)(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下`JSON`\n\n我们先来看一个`JSON`的组成：\n\n```json\n{\n  \"propertyName\": \"propertyValue\"\n}\n```\n\n1. property(属性/键值对)\n2. propertyName(属性名/键)\n3. propertyValue(属性值)\n\n\nJSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））\n\n<!--more-->\n\n## 书写\n\n### 逗号\n\n最后一个属性后不能有逗号\n\n### 双引号\n\n在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。\n\n### 结构层次\n\n在设计`JSON` 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。\n\n先讲讲我在知乎上看见的问题：\n\n正常情况有一个JSON应为：\n\n```json\n[\n  { \n    \"name\": \"Javascript权威指南\"，\n    \"chapters:\": 500,\n  },\n  {\n    \"name\": \"Javascript高级程序设计\",\n    \"chapters\": 500,\n  },\n  {...},\n  {...}\n]\n```\n\n这样看是很完美，但是有些人会这样设计？\n\n```json\n[\n  {\n    \"Javascript权威指南\"： 500\n  },\n  {\n    \"Javascript高级程序设计\": 500\n  }\n]\n```\n\n那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他们为啥要把**数据内容带入属性名！！**\n\nok！我们知道了一点，不要把**数据内容带入属性名**。\n\n接下来扁平化数据：\n\n```json\n{\n  \"Image\": {\n    \"width\": 800,\n    \"Height\": 600,\n    \"Title\":  \"View from 15th Floor\",\n    \"ThumbnailUrl\": \"http://www.example.com/image/481989943\",\n    \"ThumbnailHeight\": 125,\n    \"ThumbnailWidth\": 100\n  }\n}\n```\n\n结构层次：\n\n```json\n{\n  \"Image\": {\n    \"Width\":  800,\n    \"Height\": 600,\n    \"Title\":  \"View from 15th Floor\",\n    \"Thumbnail\": {\n      \"Url\":    \"http://www.example.com/image/481989943\",\n      \"Height\": 125,\n      \"Width\":  \"100\"\n    },\n  }\n}\n```\n\nJSON中本应该以数据元素扁平化方式呈现。\n\n但是结构层次对我们开发人员更加的友好有意义。\n\n具体情况看自己的选择。\n\n## 下面讲点细的\n\n### 属性名规范\n\n* 属性名应该一看就知道啥用\n* 属性名必须是驼峰，ASCII码字符串\n* 首字符必须是字母，_ （下划线），$(美元符号)\n* 避免使用js中的保留字\n* 数组类型应该是复数，其他属性名都为单数\n\n\n\n### 属性值规范\n\n* 属性值应该为四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））\n* 其他的具体可以看我下面给出的参考资料链接\n\n\n\n## 方法\n\n\n\n* JSON.parse()\n  * 解析一个JSON将他转换成JavaScript值或对象\n* JSON.stringify()\n  * 把一个对象或者值转换成JSON字符串\n\n## 参考\n\n* [JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* [JSON-MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON)","slug":"JSON","published":1,"updated":"2018-01-05T13:29:13.991Z","photos":[],"link":"","_id":"cjollnbou0025unfyvdwf084g","content":"<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><p>最近大量接触<code>JSON</code> 所以我特意去<a href=\"https://www.rfc-editor.org/rfc/rfc4627.txt\" target=\"_blank\" rel=\"noopener\"><code>JSON</code>标准</a>(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下<code>JSON</code></p>\n<p>我们先来看一个<code>JSON</code>的组成：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"propertyName\"</span>: <span class=\"string\">\"propertyValue\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>property(属性/键值对)</li>\n<li>propertyName(属性名/键)</li>\n<li>propertyValue(属性值)</li>\n</ol>\n<p>JSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</p>\n<a id=\"more\"></a>\n<h2 id=\"书写\"><a href=\"#书写\" class=\"headerlink\" title=\"书写\"></a>书写</h2><h3 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h3><p>最后一个属性后不能有逗号</p>\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><p>在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。</p>\n<h3 id=\"结构层次\"><a href=\"#结构层次\" class=\"headerlink\" title=\"结构层次\"></a>结构层次</h3><p>在设计<code>JSON</code> 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。</p>\n<p>先讲讲我在知乎上看见的问题：</p>\n<p>正常情况有一个JSON应为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Javascript权威指南\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"chapters:\"</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Javascript高级程序设计\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"chapters\"</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;...&#125;,</span><br><span class=\"line\">  &#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这样看是很完美，但是有些人会这样设计？</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    \"Javascript权威指南\"： 500</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Javascript高级程序设计\"</span>: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他们为啥要把<strong>数据内容带入属性名！！</strong></p>\n<p>ok！我们知道了一点，不要把<strong>数据内容带入属性名</strong>。</p>\n<p>接下来扁平化数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Image\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"width\"</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Height\"</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailUrl\"</span>: <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailHeight\"</span>: <span class=\"number\">125</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailWidth\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构层次：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Image\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Width\"</span>:  <span class=\"number\">800</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Height\"</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Thumbnail\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>:    <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Height\"</span>: <span class=\"number\">125</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Width\"</span>:  <span class=\"string\">\"100\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JSON中本应该以数据元素扁平化方式呈现。</p>\n<p>但是结构层次对我们开发人员更加的友好有意义。</p>\n<p>具体情况看自己的选择。</p>\n<h2 id=\"下面讲点细的\"><a href=\"#下面讲点细的\" class=\"headerlink\" title=\"下面讲点细的\"></a>下面讲点细的</h2><h3 id=\"属性名规范\"><a href=\"#属性名规范\" class=\"headerlink\" title=\"属性名规范\"></a>属性名规范</h3><ul>\n<li>属性名应该一看就知道啥用</li>\n<li>属性名必须是驼峰，ASCII码字符串</li>\n<li>首字符必须是字母，_ （下划线），$(美元符号)</li>\n<li>避免使用js中的保留字</li>\n<li>数组类型应该是复数，其他属性名都为单数</li>\n</ul>\n<h3 id=\"属性值规范\"><a href=\"#属性值规范\" class=\"headerlink\" title=\"属性值规范\"></a>属性值规范</h3><ul>\n<li>属性值应该为四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</li>\n<li>其他的具体可以看我下面给出的参考资料链接</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li>JSON.parse()<ul>\n<li>解析一个JSON将他转换成JavaScript值或对象</li>\n</ul>\n</li>\n<li>JSON.stringify()<ul>\n<li>把一个对象或者值转换成JSON字符串</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"noopener\">JSON风格指南</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\" target=\"_blank\" rel=\"noopener\">JSON-MDN</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h1><p>最近大量接触<code>JSON</code> 所以我特意去<a href=\"https://www.rfc-editor.org/rfc/rfc4627.txt\" target=\"_blank\" rel=\"noopener\"><code>JSON</code>标准</a>(短短的8页，大家也可以看看)看了下，还参阅了许多资料，总结一下<code>JSON</code></p>\n<p>我们先来看一个<code>JSON</code>的组成：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"propertyName\"</span>: <span class=\"string\">\"propertyValue\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>property(属性/键值对)</li>\n<li>propertyName(属性名/键)</li>\n<li>propertyValue(属性值)</li>\n</ol>\n<p>JSON可以表示四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</p>","more":"<h2 id=\"书写\"><a href=\"#书写\" class=\"headerlink\" title=\"书写\"></a>书写</h2><h3 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h3><p>最后一个属性后不能有逗号</p>\n<h3 id=\"双引号\"><a href=\"#双引号\" class=\"headerlink\" title=\"双引号\"></a>双引号</h3><p>在标准中都使用了双引号。因为所有的属性必须在双引号内。但是布尔值或者数字可以不用引号。</p>\n<h3 id=\"结构层次\"><a href=\"#结构层次\" class=\"headerlink\" title=\"结构层次\"></a>结构层次</h3><p>在设计<code>JSON</code> 的时候，我们都能看见可扩展和不可扩展的JSON结构。其中最主要的就2种，一种为扁平化数据，还有结构层次。</p>\n<p>先讲讲我在知乎上看见的问题：</p>\n<p>正常情况有一个JSON应为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Javascript权威指南\"</span>，</span><br><span class=\"line\">    <span class=\"string\">\"chapters:\"</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Javascript高级程序设计\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"chapters\"</span>: <span class=\"number\">500</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;...&#125;,</span><br><span class=\"line\">  &#123;...&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这样看是很完美，但是有些人会这样设计？</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    \"Javascript权威指南\"： 500</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Javascript高级程序设计\"</span>: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>那么我们就可以看出2种设计的问题，第二种无法扩展有木有！！而且。。他们为啥要把<strong>数据内容带入属性名！！</strong></p>\n<p>ok！我们知道了一点，不要把<strong>数据内容带入属性名</strong>。</p>\n<p>接下来扁平化数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Image\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"width\"</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Height\"</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailUrl\"</span>: <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailHeight\"</span>: <span class=\"number\">125</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ThumbnailWidth\"</span>: <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结构层次：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"Image\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"Width\"</span>:  <span class=\"number\">800</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Height\"</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Title\"</span>:  <span class=\"string\">\"View from 15th Floor\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"Thumbnail\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>:    <span class=\"string\">\"http://www.example.com/image/481989943\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Height\"</span>: <span class=\"number\">125</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Width\"</span>:  <span class=\"string\">\"100\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>JSON中本应该以数据元素扁平化方式呈现。</p>\n<p>但是结构层次对我们开发人员更加的友好有意义。</p>\n<p>具体情况看自己的选择。</p>\n<h2 id=\"下面讲点细的\"><a href=\"#下面讲点细的\" class=\"headerlink\" title=\"下面讲点细的\"></a>下面讲点细的</h2><h3 id=\"属性名规范\"><a href=\"#属性名规范\" class=\"headerlink\" title=\"属性名规范\"></a>属性名规范</h3><ul>\n<li>属性名应该一看就知道啥用</li>\n<li>属性名必须是驼峰，ASCII码字符串</li>\n<li>首字符必须是字母，_ （下划线），$(美元符号)</li>\n<li>避免使用js中的保留字</li>\n<li>数组类型应该是复数，其他属性名都为单数</li>\n</ul>\n<h3 id=\"属性值规范\"><a href=\"#属性值规范\" class=\"headerlink\" title=\"属性值规范\"></a>属性值规范</h3><ul>\n<li>属性值应该为四种基本类型（string(字符串)、number(数字）、booleans(布尔值)、null（空））和两个结构化类型（Object(对象)、Arrarys（数组））</li>\n<li>其他的具体可以看我下面给出的参考资料链接</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li>JSON.parse()<ul>\n<li>解析一个JSON将他转换成JavaScript值或对象</li>\n</ul>\n</li>\n<li>JSON.stringify()<ul>\n<li>把一个对象或者值转换成JSON字符串</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\" target=\"_blank\" rel=\"noopener\">JSON风格指南</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON\" target=\"_blank\" rel=\"noopener\">JSON-MDN</a></li>\n</ul>"},{"title":"JavaScript——16道算法题","date":"2017-05-15T05:19:00.000Z","comments":1,"layout":"post","_content":"\n# Let‘s go\n\n#### 1.Reverse a String \n\n翻转字符串\n\n先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\n你的结果必须得是一个字符串\n\n这是一些对你有帮助的资源:\n\n- [Global String Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [Array.reverse()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n\n- [Array.join()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n> `reverseString(\"hello\")` 应该返回 `\"olleh\"`.\n\n```javascript\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nreverseString(\"hello\");\n\n```\n\n<!-- more -->\n\n#### 2.Factorialize a Number\n\n计算一个整数的阶乘\n\n如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。\n\n阶乘通常简写成 `n!`\n\n例如: `5! = 1 * 2 * 3 * 4 * 5 = 120`\n\n这是一些对你有帮助的资源:\n\n- [Arithmetic Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)\n\n> `factorialize(5)` 应该返回 120.\n\n```javascript\nfunction factorialize(num) {\n  if(num<0){\n    return -1; \n  }else if(num ===0||num===1){\n    return 1;\n  }else{\n  return (num*factorialize(num-1));\n  }\n}\nfactorialize(5);\n\n```\n\n#### 3.Check for Palindromes \n\n如果给定的字符串是回文，返回`true`，反之，返回`false`。\n\n如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。\n\n**注意**你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。\n\n函数参数的值可以为`\"racecar\"`，`\"RaceCar\"`和`\"race CAR\"`。\n\n这是一些对你有帮助的资源:\n\n- [String.replace()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n\n- [String.toLowerCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n\n> `palindrome(\"race car\")` 应该返回 true.\n>\n> `palindrome(\"not a palindrome\")` 应该返回 false.\n\n```javascript\nfunction palindrome(str) {\n  // Good luck!\n  var re = /[\\W_]/g;\n  var slo=str.toLowerCase().replace(re,\"\");\n  var slow=slo.split('').reverse().join('');\n  if(slo==slow){\n  return true;}\n  else{\n    return false;\n  }\n}\npalindrome(\"我爱你\");\n\n```\n\n#### 4.Find the Longest Word in a String \n\n找到提供的句子中最长的单词，并计算它的长度。\n\n函数的返回值应该是一个数字。\n\n这是一些对你有帮助的资源:\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [String.length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n\n> `findLongestWord(\"The quick brown fox jumped over the lazy dog\")` 应该返回 6.\n\n```javascript\nfunction findLongestWord(str) {\n  var arr=str.split(' ');\n  var long=0;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i].length>long){\n      long=arr[i].length;\n    }\n  }\n  return long;\n}\n\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\");\n\n```\n\n\n\n#### 5.Title Case a Sentence\n\n确保字符串的每个单词首字母都大写，其余部分小写。\n\n像'the'和'of'这样的连接符同理。\n\n这是一些对你有帮助的资源:\n\n[String.split](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n> `titleCase(\"I'm a little tea pot\")` 应该返回 \"I'm A Little Tea Pot\".\n\n```javascript\nfunction titleCase(str) {\n  var arr=str.toLowerCase().split(' ');\n  var l=[];\n  for(var i=0;i<arr.length;i++){\n    var str1=arr[i].slice(0,1).toUpperCase()+arr[i].slice(1);\n    l.push(str1);\n  }\n  return l.join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n```\n\n- 首先我们需要把这个字符串的每一项都变成小写字母并转换成数组\n- 创建一个保存新的空数组\n- 用遍历数组的长度。之后我们把每一项数组的第一个字母用`slice()`变成大写。\n- 再`push`到空的数组里。\n- 最后用`join()`数组返回字符串。\n\n#### 6.Return Largest Numbers in Arrays\n\n右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。\n\n提示：你可以用for循环来迭代数组，并通过`arr[i]`的方式来访问数组的每个元素。\n\n这是一些对你有帮助的资源:\n\n- [Comparison Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n\n> `largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])` 应该返回 `[27,5,39,1001]`.\n\n**第一种方法**\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n var l=[];\n  for(var i=0;i<arr.length;i++){\n    arr[i].sort(function(a,b){return b-a});\n  }\n  l.push(arr[i][0]);\n}\nreturn l;\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```\n\n**第二种方法**\n\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n  var temp = [];\n  for(var i = 0; i < arr.length; i++){\n    var l = arr[i].reduce(function(prev,cur,index,array){\n      return prev > cur ? prev : cur;\n    });\n    temp.push(l);\n  }\n  return temp;\n}\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```","source":"_posts/JavaScript——16道算法题.md","raw":"---\ntitle: JavaScript——16道算法题\ndate: 2017-05-15 13：07\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# Let‘s go\n\n#### 1.Reverse a String \n\n翻转字符串\n\n先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\n你的结果必须得是一个字符串\n\n这是一些对你有帮助的资源:\n\n- [Global String Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [Array.reverse()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n\n- [Array.join()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n> `reverseString(\"hello\")` 应该返回 `\"olleh\"`.\n\n```javascript\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nreverseString(\"hello\");\n\n```\n\n<!-- more -->\n\n#### 2.Factorialize a Number\n\n计算一个整数的阶乘\n\n如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。\n\n阶乘通常简写成 `n!`\n\n例如: `5! = 1 * 2 * 3 * 4 * 5 = 120`\n\n这是一些对你有帮助的资源:\n\n- [Arithmetic Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)\n\n> `factorialize(5)` 应该返回 120.\n\n```javascript\nfunction factorialize(num) {\n  if(num<0){\n    return -1; \n  }else if(num ===0||num===1){\n    return 1;\n  }else{\n  return (num*factorialize(num-1));\n  }\n}\nfactorialize(5);\n\n```\n\n#### 3.Check for Palindromes \n\n如果给定的字符串是回文，返回`true`，反之，返回`false`。\n\n如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。\n\n**注意**你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。\n\n函数参数的值可以为`\"racecar\"`，`\"RaceCar\"`和`\"race CAR\"`。\n\n这是一些对你有帮助的资源:\n\n- [String.replace()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n\n- [String.toLowerCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n\n> `palindrome(\"race car\")` 应该返回 true.\n>\n> `palindrome(\"not a palindrome\")` 应该返回 false.\n\n```javascript\nfunction palindrome(str) {\n  // Good luck!\n  var re = /[\\W_]/g;\n  var slo=str.toLowerCase().replace(re,\"\");\n  var slow=slo.split('').reverse().join('');\n  if(slo==slow){\n  return true;}\n  else{\n    return false;\n  }\n}\npalindrome(\"我爱你\");\n\n```\n\n#### 4.Find the Longest Word in a String \n\n找到提供的句子中最长的单词，并计算它的长度。\n\n函数的返回值应该是一个数字。\n\n这是一些对你有帮助的资源:\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [String.length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n\n> `findLongestWord(\"The quick brown fox jumped over the lazy dog\")` 应该返回 6.\n\n```javascript\nfunction findLongestWord(str) {\n  var arr=str.split(' ');\n  var long=0;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i].length>long){\n      long=arr[i].length;\n    }\n  }\n  return long;\n}\n\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\");\n\n```\n\n\n\n#### 5.Title Case a Sentence\n\n确保字符串的每个单词首字母都大写，其余部分小写。\n\n像'the'和'of'这样的连接符同理。\n\n这是一些对你有帮助的资源:\n\n[String.split](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n> `titleCase(\"I'm a little tea pot\")` 应该返回 \"I'm A Little Tea Pot\".\n\n```javascript\nfunction titleCase(str) {\n  var arr=str.toLowerCase().split(' ');\n  var l=[];\n  for(var i=0;i<arr.length;i++){\n    var str1=arr[i].slice(0,1).toUpperCase()+arr[i].slice(1);\n    l.push(str1);\n  }\n  return l.join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n```\n\n- 首先我们需要把这个字符串的每一项都变成小写字母并转换成数组\n- 创建一个保存新的空数组\n- 用遍历数组的长度。之后我们把每一项数组的第一个字母用`slice()`变成大写。\n- 再`push`到空的数组里。\n- 最后用`join()`数组返回字符串。\n\n#### 6.Return Largest Numbers in Arrays\n\n右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。\n\n提示：你可以用for循环来迭代数组，并通过`arr[i]`的方式来访问数组的每个元素。\n\n这是一些对你有帮助的资源:\n\n- [Comparison Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n\n> `largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])` 应该返回 `[27,5,39,1001]`.\n\n**第一种方法**\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n var l=[];\n  for(var i=0;i<arr.length;i++){\n    arr[i].sort(function(a,b){return b-a});\n  }\n  l.push(arr[i][0]);\n}\nreturn l;\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```\n\n**第二种方法**\n\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n  var temp = [];\n  for(var i = 0; i < arr.length; i++){\n    var l = arr[i].reduce(function(prev,cur,index,array){\n      return prev > cur ? prev : cur;\n    });\n    temp.push(l);\n  }\n  return temp;\n}\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```","slug":"JavaScript——16道算法题","published":1,"updated":"2017-12-13T13:43:44.884Z","photos":[],"link":"","_id":"cjollnbp00028unfy0uk8w493","content":"<h1 id=\"Let‘s-go\"><a href=\"#Let‘s-go\" class=\"headerlink\" title=\"Let‘s go\"></a>Let‘s go</h1><h4 id=\"1-Reverse-a-String\"><a href=\"#1-Reverse-a-String\" class=\"headerlink\" title=\"1.Reverse a String\"></a>1.Reverse a String</h4><p>翻转字符串</p>\n<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>\n<p>你的结果必须得是一个字符串</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">Global String Object</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\">Array.reverse()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\" rel=\"noopener\">Array.join()</a></li>\n</ul>\n<blockquote>\n<p><code>reverseString(&quot;hello&quot;)</code> 应该返回 <code>&quot;olleh&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"2-Factorialize-a-Number\"><a href=\"#2-Factorialize-a-Number\" class=\"headerlink\" title=\"2.Factorialize a Number\"></a>2.Factorialize a Number</h4><p>计算一个整数的阶乘</p>\n<p>如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。</p>\n<p>阶乘通常简写成 <code>n!</code></p>\n<p>例如: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\" target=\"_blank\" rel=\"noopener\">Arithmetic Operators</a></li>\n</ul>\n<blockquote>\n<p><code>factorialize(5)</code> 应该返回 120.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorialize</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num ===<span class=\"number\">0</span>||num===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (num*factorialize(num<span class=\"number\">-1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorialize(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Check-for-Palindromes\"><a href=\"#3-Check-for-Palindromes\" class=\"headerlink\" title=\"3.Check for Palindromes\"></a>3.Check for Palindromes</h4><p>如果给定的字符串是回文，返回<code>true</code>，反之，返回<code>false</code>。</p>\n<p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p>\n<p><strong>注意</strong>你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。</p>\n<p>函数参数的值可以为<code>&quot;racecar&quot;</code>，<code>&quot;RaceCar&quot;</code>和<code>&quot;race CAR&quot;</code>。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"noopener\">String.replace()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\" target=\"_blank\" rel=\"noopener\">String.toLowerCase()</a></li>\n</ul>\n<blockquote>\n<p><code>palindrome(&quot;race car&quot;)</code> 应该返回 true.</p>\n<p><code>palindrome(&quot;not a palindrome&quot;)</code> 应该返回 false.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Good luck!</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> re = <span class=\"regexp\">/[\\W_]/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slo=str.toLowerCase().replace(re,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slow=slo.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(slo==slow)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">palindrome(<span class=\"string\">\"我爱你\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Find-the-Longest-Word-in-a-String\"><a href=\"#4-Find-the-Longest-Word-in-a-String\" class=\"headerlink\" title=\"4.Find the Longest Word in a String\"></a>4.Find the Longest Word in a String</h4><p>找到提供的句子中最长的单词，并计算它的长度。</p>\n<p>函数的返回值应该是一个数字。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length\" target=\"_blank\" rel=\"noopener\">String.length</a></li>\n</ul>\n<blockquote>\n<p><code>findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;)</code> 应该返回 6.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr=str.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> long=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i].length&gt;long)&#123;</span><br><span class=\"line\">      long=arr[i].length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-Title-Case-a-Sentence\"><a href=\"#5-Title-Case-a-Sentence\" class=\"headerlink\" title=\"5.Title Case a Sentence\"></a>5.Title Case a Sentence</h4><p>确保字符串的每个单词首字母都大写，其余部分小写。</p>\n<p>像’the’和’of’这样的连接符同理。</p>\n<p>这是一些对你有帮助的资源:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split</a></p>\n<blockquote>\n<p><code>titleCase(&quot;I&#39;m a little tea pot&quot;)</code> 应该返回 “I’m A Little Tea Pot”.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr=str.toLowerCase().split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1=arr[i].slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase()+arr[i].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    l.push(str1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先我们需要把这个字符串的每一项都变成小写字母并转换成数组</li>\n<li>创建一个保存新的空数组</li>\n<li>用遍历数组的长度。之后我们把每一项数组的第一个字母用<code>slice()</code>变成大写。</li>\n<li>再<code>push</code>到空的数组里。</li>\n<li>最后用<code>join()</code>数组返回字符串。</li>\n</ul>\n<h4 id=\"6-Return-Largest-Numbers-in-Arrays\"><a href=\"#6-Return-Largest-Numbers-in-Arrays\" class=\"headerlink\" title=\"6.Return Largest Numbers in Arrays\"></a>6.Return Largest Numbers in Arrays</h4><p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</p>\n<p>提示：你可以用for循环来迭代数组，并通过<code>arr[i]</code>的方式来访问数组的每个元素。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"noopener\">Comparison Operators</a></li>\n</ul>\n<blockquote>\n<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27,5,39,1001]</code>.</p>\n</blockquote>\n<p><strong>第一种方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can do this!</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> l=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    arr[i].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b-a&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  l.push(arr[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> l;</span><br><span class=\"line\"></span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二种方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can do this!</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = arr[i].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev,cur,index,array</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    temp.push(l);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Let‘s-go\"><a href=\"#Let‘s-go\" class=\"headerlink\" title=\"Let‘s go\"></a>Let‘s go</h1><h4 id=\"1-Reverse-a-String\"><a href=\"#1-Reverse-a-String\" class=\"headerlink\" title=\"1.Reverse a String\"></a>1.Reverse a String</h4><p>翻转字符串</p>\n<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>\n<p>你的结果必须得是一个字符串</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"noopener\">Global String Object</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener\">Array.reverse()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\" rel=\"noopener\">Array.join()</a></li>\n</ul>\n<blockquote>\n<p><code>reverseString(&quot;hello&quot;)</code> 应该返回 <code>&quot;olleh&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"2-Factorialize-a-Number\"><a href=\"#2-Factorialize-a-Number\" class=\"headerlink\" title=\"2.Factorialize a Number\"></a>2.Factorialize a Number</h4><p>计算一个整数的阶乘</p>\n<p>如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。</p>\n<p>阶乘通常简写成 <code>n!</code></p>\n<p>例如: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\" target=\"_blank\" rel=\"noopener\">Arithmetic Operators</a></li>\n</ul>\n<blockquote>\n<p><code>factorialize(5)</code> 应该返回 120.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorialize</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num ===<span class=\"number\">0</span>||num===<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (num*factorialize(num<span class=\"number\">-1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorialize(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Check-for-Palindromes\"><a href=\"#3-Check-for-Palindromes\" class=\"headerlink\" title=\"3.Check for Palindromes\"></a>3.Check for Palindromes</h4><p>如果给定的字符串是回文，返回<code>true</code>，反之，返回<code>false</code>。</p>\n<p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p>\n<p><strong>注意</strong>你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。</p>\n<p>函数参数的值可以为<code>&quot;racecar&quot;</code>，<code>&quot;RaceCar&quot;</code>和<code>&quot;race CAR&quot;</code>。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"noopener\">String.replace()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\" target=\"_blank\" rel=\"noopener\">String.toLowerCase()</a></li>\n</ul>\n<blockquote>\n<p><code>palindrome(&quot;race car&quot;)</code> 应该返回 true.</p>\n<p><code>palindrome(&quot;not a palindrome&quot;)</code> 应该返回 false.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Good luck!</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> re = <span class=\"regexp\">/[\\W_]/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slo=str.toLowerCase().replace(re,<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slow=slo.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(slo==slow)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">palindrome(<span class=\"string\">\"我爱你\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Find-the-Longest-Word-in-a-String\"><a href=\"#4-Find-the-Longest-Word-in-a-String\" class=\"headerlink\" title=\"4.Find the Longest Word in a String\"></a>4.Find the Longest Word in a String</h4><p>找到提供的句子中最长的单词，并计算它的长度。</p>\n<p>函数的返回值应该是一个数字。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length\" target=\"_blank\" rel=\"noopener\">String.length</a></li>\n</ul>\n<blockquote>\n<p><code>findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;)</code> 应该返回 6.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr=str.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> long=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i].length&gt;long)&#123;</span><br><span class=\"line\">      long=arr[i].length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-Title-Case-a-Sentence\"><a href=\"#5-Title-Case-a-Sentence\" class=\"headerlink\" title=\"5.Title Case a Sentence\"></a>5.Title Case a Sentence</h4><p>确保字符串的每个单词首字母都大写，其余部分小写。</p>\n<p>像’the’和’of’这样的连接符同理。</p>\n<p>这是一些对你有帮助的资源:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener\">String.split</a></p>\n<blockquote>\n<p><code>titleCase(&quot;I&#39;m a little tea pot&quot;)</code> 应该返回 “I’m A Little Tea Pot”.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr=str.toLowerCase().split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1=arr[i].slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase()+arr[i].slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    l.push(str1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先我们需要把这个字符串的每一项都变成小写字母并转换成数组</li>\n<li>创建一个保存新的空数组</li>\n<li>用遍历数组的长度。之后我们把每一项数组的第一个字母用<code>slice()</code>变成大写。</li>\n<li>再<code>push</code>到空的数组里。</li>\n<li>最后用<code>join()</code>数组返回字符串。</li>\n</ul>\n<h4 id=\"6-Return-Largest-Numbers-in-Arrays\"><a href=\"#6-Return-Largest-Numbers-in-Arrays\" class=\"headerlink\" title=\"6.Return Largest Numbers in Arrays\"></a>6.Return Largest Numbers in Arrays</h4><p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</p>\n<p>提示：你可以用for循环来迭代数组，并通过<code>arr[i]</code>的方式来访问数组的每个元素。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"noopener\">Comparison Operators</a></li>\n</ul>\n<blockquote>\n<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27,5,39,1001]</code>.</p>\n</blockquote>\n<p><strong>第一种方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can do this!</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> l=[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    arr[i].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b-a&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  l.push(arr[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> l;</span><br><span class=\"line\"></span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二种方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can do this!</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l = arr[i].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev,cur,index,array</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    temp.push(l);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript作用域与作用域链","date":"2017-05-18T09:37:54.000Z","comments":1,"layout":"post","_content":"\n# Javascript作用域与作用域链\n\n## 作用域\n\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。\n\n### 变量作用域\n\n##### 全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\n\n```javascript\nvar l=\"我是全局变量\";\t\t\t//声明了一个全局变量\nfunction scope(){\t\t\n  var l=\"我是局部变量\";\t\t//声明了一个同名的局部变量\n  return l;\n}\nscope()\t\t\t\t\t//输出“我是局部变量”\n```\n\n##### <!--more -->\n\n在函数内声明变量前不加`var`就是一个全局变量。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n \tl=\"我还是全局变量\";\t\t\t//改变了全局变量\n\tm=\"我是一个新的全局变量\";\t  \t //声明了一个新的全局变量\n\treturn [l,m];\n}\nscope()\t\t\t\t\t\t   //输出\"我是一个新的全局变量\"\nl\nm\n```\n\n##### 在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n  var l=\"我是局部变量\";\n  function scope1(){\n    var l=\"我是一个新的局部变量\";\t\t\t//嵌套作用域内的局部变量\n    return l;\t\t\t\t\t\t  //返回当前作用域内的值\n  }\n  return scope1();\n}\nscope();\t\t\t\t\t\t\t //嵌套作用域\n\n```\n\n### 函数作用域和声明提前\n\n函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。\n\n变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。\n\n```javascript\nfunction func() {\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        func();\n```\n\n再看看下面这个例子：\n\n```javascript\nvar num=2;\nfunction func() {\n            var num;\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        console.log(num);\t\t\t\t//输出2\n        func();\n```\n\n## 作用域链\n\n**用途：**\n\n保证对**执行环境有权访问**的**所有变量和函数的有序访问**。\n\n作用域链上有两个对象。\n\n- 第一个是定义函数参数和局部变量的对象\n- 第二个是全局对象\n\n当定义一个函数时，它实际上保存一个作用域链。\n\n**高程三下这个例子就特别好**\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n  var anotherColor = \"red\";\n  \n  function swapColors(){\n    var tempColor = anotherColor;\n    anotherColor = color;\n    color = tempColor;\n    //能访问 color、anotherColor、tempColor。\n  }\n  swapColors();\t\t\t//能访问color、anotherColor不能访问tempColor。\n}\nchangeColor();\t\t\t//只能访问color\n```\n\n`changeColor()`的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问`swapColor()`的环境。\n\n那么在`swapColors()`的作用域链中又3个对象：`swapColors()`的变量对象、`changeColor()`的变量对象和全局变量对象。","source":"_posts/JavaScript作用域.md","raw":"---\ntitle: JavaScript作用域与作用域链\ndate: 2017-05-18 17：37\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# Javascript作用域与作用域链\n\n## 作用域\n\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。\n\n### 变量作用域\n\n##### 全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\n\n```javascript\nvar l=\"我是全局变量\";\t\t\t//声明了一个全局变量\nfunction scope(){\t\t\n  var l=\"我是局部变量\";\t\t//声明了一个同名的局部变量\n  return l;\n}\nscope()\t\t\t\t\t//输出“我是局部变量”\n```\n\n##### <!--more -->\n\n在函数内声明变量前不加`var`就是一个全局变量。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n \tl=\"我还是全局变量\";\t\t\t//改变了全局变量\n\tm=\"我是一个新的全局变量\";\t  \t //声明了一个新的全局变量\n\treturn [l,m];\n}\nscope()\t\t\t\t\t\t   //输出\"我是一个新的全局变量\"\nl\nm\n```\n\n##### 在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n  var l=\"我是局部变量\";\n  function scope1(){\n    var l=\"我是一个新的局部变量\";\t\t\t//嵌套作用域内的局部变量\n    return l;\t\t\t\t\t\t  //返回当前作用域内的值\n  }\n  return scope1();\n}\nscope();\t\t\t\t\t\t\t //嵌套作用域\n\n```\n\n### 函数作用域和声明提前\n\n函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。\n\n变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。\n\n```javascript\nfunction func() {\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        func();\n```\n\n再看看下面这个例子：\n\n```javascript\nvar num=2;\nfunction func() {\n            var num;\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        console.log(num);\t\t\t\t//输出2\n        func();\n```\n\n## 作用域链\n\n**用途：**\n\n保证对**执行环境有权访问**的**所有变量和函数的有序访问**。\n\n作用域链上有两个对象。\n\n- 第一个是定义函数参数和局部变量的对象\n- 第二个是全局对象\n\n当定义一个函数时，它实际上保存一个作用域链。\n\n**高程三下这个例子就特别好**\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n  var anotherColor = \"red\";\n  \n  function swapColors(){\n    var tempColor = anotherColor;\n    anotherColor = color;\n    color = tempColor;\n    //能访问 color、anotherColor、tempColor。\n  }\n  swapColors();\t\t\t//能访问color、anotherColor不能访问tempColor。\n}\nchangeColor();\t\t\t//只能访问color\n```\n\n`changeColor()`的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问`swapColor()`的环境。\n\n那么在`swapColors()`的作用域链中又3个对象：`swapColors()`的变量对象、`changeColor()`的变量对象和全局变量对象。","slug":"JavaScript作用域","published":1,"updated":"2017-09-22T09:50:26.000Z","photos":[],"link":"","_id":"cjollnbpa002dunfy83pof69i","content":"<h1 id=\"Javascript作用域与作用域链\"><a href=\"#Javascript作用域与作用域链\" class=\"headerlink\" title=\"Javascript作用域与作用域链\"></a>Javascript作用域与作用域链</h1><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><h5 id=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"><a href=\"#全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\" class=\"headerlink\" title=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"></a>全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;\t\t\t<span class=\"comment\">//声明了一个全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;\t\t</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;\t\t<span class=\"comment\">//声明了一个同名的局部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope()\t\t\t\t\t<span class=\"comment\">//输出“我是局部变量”</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h5><p>在函数内声明变量前不加<code>var</code>就是一个全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \tl=<span class=\"string\">\"我还是全局变量\"</span>;\t\t\t<span class=\"comment\">//改变了全局变量</span></span><br><span class=\"line\">\tm=<span class=\"string\">\"我是一个新的全局变量\"</span>;\t  \t <span class=\"comment\">//声明了一个新的全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [l,m];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope()\t\t\t\t\t\t   <span class=\"comment\">//输出\"我是一个新的全局变量\"</span></span><br><span class=\"line\">l</span><br><span class=\"line\">m</span><br></pre></td></tr></table></figure>\n<h5 id=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"><a href=\"#在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\" class=\"headerlink\" title=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"></a>在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是一个新的局部变量\"</span>;\t\t\t<span class=\"comment\">//嵌套作用域内的局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;\t\t\t\t\t\t  <span class=\"comment\">//返回当前作用域内的值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope();\t\t\t\t\t\t\t <span class=\"comment\">//嵌套作用域</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数作用域和声明提前\"><a href=\"#函数作用域和声明提前\" class=\"headerlink\" title=\"函数作用域和声明提前\"></a>函数作用域和声明提前</h3><p>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。</p>\n<p>变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        func();</span><br></pre></td></tr></table></figure>\n<p>再看看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> num;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);\t\t\t\t<span class=\"comment\">//输出2</span></span><br><span class=\"line\">        func();</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>用途：</strong></p>\n<p>保证对<strong>执行环境有权访问</strong>的<strong>所有变量和函数的有序访问</strong>。</p>\n<p>作用域链上有两个对象。</p>\n<ul>\n<li>第一个是定义函数参数和局部变量的对象</li>\n<li>第二个是全局对象</li>\n</ul>\n<p>当定义一个函数时，它实际上保存一个作用域链。</p>\n<p><strong>高程三下这个例子就特别好</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempColor = anotherColor;</span><br><span class=\"line\">    anotherColor = color;</span><br><span class=\"line\">    color = tempColor;</span><br><span class=\"line\">    <span class=\"comment\">//能访问 color、anotherColor、tempColor。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  swapColors();\t\t\t<span class=\"comment\">//能访问color、anotherColor不能访问tempColor。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">changeColor();\t\t\t<span class=\"comment\">//只能访问color</span></span><br></pre></td></tr></table></figure>\n<p><code>changeColor()</code>的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问<code>swapColor()</code>的环境。</p>\n<p>那么在<code>swapColors()</code>的作用域链中又3个对象：<code>swapColors()</code>的变量对象、<code>changeColor()</code>的变量对象和全局变量对象。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Javascript作用域与作用域链\"><a href=\"#Javascript作用域与作用域链\" class=\"headerlink\" title=\"Javascript作用域与作用域链\"></a>Javascript作用域与作用域链</h1><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><h5 id=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"><a href=\"#全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\" class=\"headerlink\" title=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"></a>全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;\t\t\t<span class=\"comment\">//声明了一个全局变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;\t\t</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;\t\t<span class=\"comment\">//声明了一个同名的局部变量</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope()\t\t\t\t\t<span class=\"comment\">//输出“我是局部变量”</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h5><p>在函数内声明变量前不加<code>var</code>就是一个全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> \tl=<span class=\"string\">\"我还是全局变量\"</span>;\t\t\t<span class=\"comment\">//改变了全局变量</span></span><br><span class=\"line\">\tm=<span class=\"string\">\"我是一个新的全局变量\"</span>;\t  \t <span class=\"comment\">//声明了一个新的全局变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [l,m];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope()\t\t\t\t\t\t   <span class=\"comment\">//输出\"我是一个新的全局变量\"</span></span><br><span class=\"line\">l</span><br><span class=\"line\">m</span><br></pre></td></tr></table></figure>\n<h5 id=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"><a href=\"#在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\" class=\"headerlink\" title=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"></a>在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是一个新的局部变量\"</span>;\t\t\t<span class=\"comment\">//嵌套作用域内的局部变量</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;\t\t\t\t\t\t  <span class=\"comment\">//返回当前作用域内的值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope1();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scope();\t\t\t\t\t\t\t <span class=\"comment\">//嵌套作用域</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数作用域和声明提前\"><a href=\"#函数作用域和声明提前\" class=\"headerlink\" title=\"函数作用域和声明提前\"></a>函数作用域和声明提前</h3><p>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。</p>\n<p>变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        func();</span><br></pre></td></tr></table></figure>\n<p>再看看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> num;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(num);\t\t\t\t<span class=\"comment\">//输出2</span></span><br><span class=\"line\">        func();</span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>用途：</strong></p>\n<p>保证对<strong>执行环境有权访问</strong>的<strong>所有变量和函数的有序访问</strong>。</p>\n<p>作用域链上有两个对象。</p>\n<ul>\n<li>第一个是定义函数参数和局部变量的对象</li>\n<li>第二个是全局对象</li>\n</ul>\n<p>当定义一个函数时，它实际上保存一个作用域链。</p>\n<p><strong>高程三下这个例子就特别好</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempColor = anotherColor;</span><br><span class=\"line\">    anotherColor = color;</span><br><span class=\"line\">    color = tempColor;</span><br><span class=\"line\">    <span class=\"comment\">//能访问 color、anotherColor、tempColor。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  swapColors();\t\t\t<span class=\"comment\">//能访问color、anotherColor不能访问tempColor。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">changeColor();\t\t\t<span class=\"comment\">//只能访问color</span></span><br></pre></td></tr></table></figure>\n<p><code>changeColor()</code>的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问<code>swapColor()</code>的环境。</p>\n<p>那么在<code>swapColors()</code>的作用域链中又3个对象：<code>swapColors()</code>的变量对象、<code>changeColor()</code>的变量对象和全局变量对象。</p>"},{"title":"JavaScript函数","date":"2017-08-16T14:45:00.000Z","updated":"2018-04-27T07:19:40.000Z","comments":1,"layout":"post","_content":"\n\n\n在JavaScript中，函数是**一等公民**。函数是**第一型对象**。\n\n所以说，我们可以将其视为其他任意类型的JavaScript对象。\n\n<!--more-->\n\n在JavaScript中函数可以：\n\n- 可以赋值给**变量，数组，或其他对象**的属性\n- 可以通过**字面量**进行创建\n- 将其作为**参数**进行传递\n- 可以作为函数的**返回值**进行返回\n- 可以拥有**动态创建并赋值**的属性\n\n最重要是的，它们还可以被**调用**。这些调用通常是以**异步方式**进行调用。\n\n# 回调\n\n回调函数的术语源于：我们定义一个函数，以便其他一些代码在适当的时机回头再调用他。\n\n```javascript\nfunction useless(callback){\n    return callback();\n}\n```\n\n\n\n```Javascript\nvar text = 'Demo arigato';\nassert(useless(function(){\n    return text;\n}) ===text, \"This useless function works!\" + text);\n//assert是测试函数\n\nfunction assert(value, desc){\n  var li = document.createElement(\"li\");\n  li.className = value ? \"pase\" : \"fail\";\n  li.appendChild(document.createTextNode(desc));\n  document.getElementById(\"results\").appendChild(li);\n};\n```\n\n# 函数字面量\n\n函数字面量由4个部分组成\n\n- function关键字\n- 可选名称。\n- 括号内部，一个以逗号分隔的参数列表。\n- 包含在大括号内的一系列JavaScript语句叫 **函数体**。\n\n注意：\n\n> 所有的函数都有name属性，该属性保存的是他们的名称的字符串。\n>\n> 当然没有名称的函数也有name属性，只是为空字符串。\n\n```javascript\nvar canFly = function() {\n    return true;\n};\n```\n\n这个函数我们可以通过它的引用 **canFly** 进行调用。它与canFly函数几乎一模一样，但是不一样的地方在于它的字符串值为” ”，而不是“canFly”。\n\n```javascript\nwindow.isDeadly = function() {\n  return true;\n};\n```\n\n我们可以（ **window.isDeadly() || isDeadly()** ）去调用这个函数，其实这就跟命名函数几乎一模一样了。\n\n# 函数调用\n\n4个不同的方式可以进行函数调用。\n\n1. 作为一个函数进行调用\n2. 作为一个方法进行调用，在对象是进行调用，支持面向对象编程\n3. 作为构造器进行调用，创建一个新对象\n4. 通过`apply()`或`call()`方法进行调用。\n\n## 函数传递两个隐式参数\n\n**arguments和this**\n\n隐式（limplicit），意味着这些参数不会显示列在函数签名里。但是他们都会默默的传递给函数并存在于函数作用于内。\n\n### arguments\n\n它是传递给函数的所有参数的一个集合，它有一个`length`属性。比如：\n\n`arguments[2]`表示获取第三个参数。\n\n虽然它可以使用数组进行获取，甚至可以用for循环对它进行遍历。但是它确实不是JS数组。\n\n我们只要将它看成一个类数组结构，并且 **只拥有数组** 的某些特性，仅此而已。\n\n### this\n\nthis参数引用了与该函数调用进行隐式关联的一个对象，被称为**函数上下文。**\n\n## 作为函数进行调用\n\n很简单，比如说：\n\n```javascript\nfunction hi(){\n    return hello;\n}\nhi();\n\nvar xzh = function(){\n    return xuzihao;\n}\nxzh();\n```\n\n这就是作为函数调用。这种方法调用函数的上下文就是-------window对象。\n\n## 作为方法进行调用\n\n```javascript\nvar o = {};\no.whatever = function (){};\no.whatever();\n```\n\n那么`o.whatever`的函数上下文为**o**。\n\n## 作为构造器进行调用\n\n```javascript\nfunction creep() {\n    return this;\n}\nnew creep();\n```\n\n### 构造器的超能力\n\n构造器调用时，下面的特殊行为会发生：\n\n- 创建一个新的空对象\n- 传递给构造器的对象是this参数，从而成为构造器的函数上下文。\n- 如果没有显式的返回值，新创建的对象则作为构造器的返回值进行返回。\n\n## 使用apply()和call()方法进行调用\n\n可以显式指定任何一个对象作为其函数上下文。\n\nJavaScript的每个函数都有**apply()** 和 **call()**方法。使用其中一个我们都可以实现这种功能。\n\n```javascript\nfunction juggle(){\n    var result = 0;\n  \tfor(var n = 0; n < arguments.length; n++){\n        result += arguments[n];\n    }\n  \tthis.result = result;\n}\n\nvar ninja1 = {};\nvar ninja2 = {};\n\n//apply() 传入2个参数： 一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。\njuggle.apply(ninja1, [1,2,3,4]);\n//call() 传入两个参数： 一个是作为函数上下文的对象，另外一个是一个参数列表。\njuggle.call(ninja2, 5,6,7,8);\n\n//assert是断言测试用的\nassert(ninja1.result === 10, \"juggled via apply\");\nassert(ninja2.result === 26, \"juggled via call\");\n\n```\n\n## 五种this的工作原理\n\n### 全局\n\n> this;\n\nthis指向全局对象，浏览器：window，js:global\n\n### 函数调用\n\n> foo();\n\nthis也指向全局对象\n\n### 方法调用\n\n> bar.foo();\n\nthis指向被调用的对象。\n\n调用构造函数\n\n> new foo();\n\nthis指向新创建的对像。\n\n### 显式的设置this\n\n> apply, call\n\n当使用 `Function.prototype` 上的 `call` 或者 `apply` 方法时，函数内的 `this` 将会被 **显式设置**为函数调用的第一个参数。\n\n## 总结\n\n- 作为函数进行调用：该上下文是方法的拥有者。\n- 作为全局函数进行调用：该上下文永远是windos。\n- 作为构造器函数进行调用：该上下文对象则是新创建的对象实例。\n- 通过函数的apply（）或call（）方法进行调用时，上下文可以设置成任意值。","source":"_posts/JavaScript函数.md","raw":"---\ntitle: JavaScript函数\ndate: 2017-08-16 22:45\nupdated: 2018-04-27 15:19:40\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n\n\n在JavaScript中，函数是**一等公民**。函数是**第一型对象**。\n\n所以说，我们可以将其视为其他任意类型的JavaScript对象。\n\n<!--more-->\n\n在JavaScript中函数可以：\n\n- 可以赋值给**变量，数组，或其他对象**的属性\n- 可以通过**字面量**进行创建\n- 将其作为**参数**进行传递\n- 可以作为函数的**返回值**进行返回\n- 可以拥有**动态创建并赋值**的属性\n\n最重要是的，它们还可以被**调用**。这些调用通常是以**异步方式**进行调用。\n\n# 回调\n\n回调函数的术语源于：我们定义一个函数，以便其他一些代码在适当的时机回头再调用他。\n\n```javascript\nfunction useless(callback){\n    return callback();\n}\n```\n\n\n\n```Javascript\nvar text = 'Demo arigato';\nassert(useless(function(){\n    return text;\n}) ===text, \"This useless function works!\" + text);\n//assert是测试函数\n\nfunction assert(value, desc){\n  var li = document.createElement(\"li\");\n  li.className = value ? \"pase\" : \"fail\";\n  li.appendChild(document.createTextNode(desc));\n  document.getElementById(\"results\").appendChild(li);\n};\n```\n\n# 函数字面量\n\n函数字面量由4个部分组成\n\n- function关键字\n- 可选名称。\n- 括号内部，一个以逗号分隔的参数列表。\n- 包含在大括号内的一系列JavaScript语句叫 **函数体**。\n\n注意：\n\n> 所有的函数都有name属性，该属性保存的是他们的名称的字符串。\n>\n> 当然没有名称的函数也有name属性，只是为空字符串。\n\n```javascript\nvar canFly = function() {\n    return true;\n};\n```\n\n这个函数我们可以通过它的引用 **canFly** 进行调用。它与canFly函数几乎一模一样，但是不一样的地方在于它的字符串值为” ”，而不是“canFly”。\n\n```javascript\nwindow.isDeadly = function() {\n  return true;\n};\n```\n\n我们可以（ **window.isDeadly() || isDeadly()** ）去调用这个函数，其实这就跟命名函数几乎一模一样了。\n\n# 函数调用\n\n4个不同的方式可以进行函数调用。\n\n1. 作为一个函数进行调用\n2. 作为一个方法进行调用，在对象是进行调用，支持面向对象编程\n3. 作为构造器进行调用，创建一个新对象\n4. 通过`apply()`或`call()`方法进行调用。\n\n## 函数传递两个隐式参数\n\n**arguments和this**\n\n隐式（limplicit），意味着这些参数不会显示列在函数签名里。但是他们都会默默的传递给函数并存在于函数作用于内。\n\n### arguments\n\n它是传递给函数的所有参数的一个集合，它有一个`length`属性。比如：\n\n`arguments[2]`表示获取第三个参数。\n\n虽然它可以使用数组进行获取，甚至可以用for循环对它进行遍历。但是它确实不是JS数组。\n\n我们只要将它看成一个类数组结构，并且 **只拥有数组** 的某些特性，仅此而已。\n\n### this\n\nthis参数引用了与该函数调用进行隐式关联的一个对象，被称为**函数上下文。**\n\n## 作为函数进行调用\n\n很简单，比如说：\n\n```javascript\nfunction hi(){\n    return hello;\n}\nhi();\n\nvar xzh = function(){\n    return xuzihao;\n}\nxzh();\n```\n\n这就是作为函数调用。这种方法调用函数的上下文就是-------window对象。\n\n## 作为方法进行调用\n\n```javascript\nvar o = {};\no.whatever = function (){};\no.whatever();\n```\n\n那么`o.whatever`的函数上下文为**o**。\n\n## 作为构造器进行调用\n\n```javascript\nfunction creep() {\n    return this;\n}\nnew creep();\n```\n\n### 构造器的超能力\n\n构造器调用时，下面的特殊行为会发生：\n\n- 创建一个新的空对象\n- 传递给构造器的对象是this参数，从而成为构造器的函数上下文。\n- 如果没有显式的返回值，新创建的对象则作为构造器的返回值进行返回。\n\n## 使用apply()和call()方法进行调用\n\n可以显式指定任何一个对象作为其函数上下文。\n\nJavaScript的每个函数都有**apply()** 和 **call()**方法。使用其中一个我们都可以实现这种功能。\n\n```javascript\nfunction juggle(){\n    var result = 0;\n  \tfor(var n = 0; n < arguments.length; n++){\n        result += arguments[n];\n    }\n  \tthis.result = result;\n}\n\nvar ninja1 = {};\nvar ninja2 = {};\n\n//apply() 传入2个参数： 一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。\njuggle.apply(ninja1, [1,2,3,4]);\n//call() 传入两个参数： 一个是作为函数上下文的对象，另外一个是一个参数列表。\njuggle.call(ninja2, 5,6,7,8);\n\n//assert是断言测试用的\nassert(ninja1.result === 10, \"juggled via apply\");\nassert(ninja2.result === 26, \"juggled via call\");\n\n```\n\n## 五种this的工作原理\n\n### 全局\n\n> this;\n\nthis指向全局对象，浏览器：window，js:global\n\n### 函数调用\n\n> foo();\n\nthis也指向全局对象\n\n### 方法调用\n\n> bar.foo();\n\nthis指向被调用的对象。\n\n调用构造函数\n\n> new foo();\n\nthis指向新创建的对像。\n\n### 显式的设置this\n\n> apply, call\n\n当使用 `Function.prototype` 上的 `call` 或者 `apply` 方法时，函数内的 `this` 将会被 **显式设置**为函数调用的第一个参数。\n\n## 总结\n\n- 作为函数进行调用：该上下文是方法的拥有者。\n- 作为全局函数进行调用：该上下文永远是windos。\n- 作为构造器函数进行调用：该上下文对象则是新创建的对象实例。\n- 通过函数的apply（）或call（）方法进行调用时，上下文可以设置成任意值。","slug":"JavaScript函数","published":1,"photos":[],"link":"","_id":"cjollnbpj002gunfypo9lpu05","content":"<p>在JavaScript中，函数是<strong>一等公民</strong>。函数是<strong>第一型对象</strong>。</p>\n<p>所以说，我们可以将其视为其他任意类型的JavaScript对象。</p>\n<a id=\"more\"></a>\n<p>在JavaScript中函数可以：</p>\n<ul>\n<li>可以赋值给<strong>变量，数组，或其他对象</strong>的属性</li>\n<li>可以通过<strong>字面量</strong>进行创建</li>\n<li>将其作为<strong>参数</strong>进行传递</li>\n<li>可以作为函数的<strong>返回值</strong>进行返回</li>\n<li>可以拥有<strong>动态创建并赋值</strong>的属性</li>\n</ul>\n<p>最重要是的，它们还可以被<strong>调用</strong>。这些调用通常是以<strong>异步方式</strong>进行调用。</p>\n<h1 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h1><p>回调函数的术语源于：我们定义一个函数，以便其他一些代码在适当的时机回头再调用他。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useless</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'Demo arigato'</span>;</span><br><span class=\"line\">assert(useless(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">&#125;) ===text, <span class=\"string\">\"This useless function works!\"</span> + text);</span><br><span class=\"line\"><span class=\"comment\">//assert是测试函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assert</span>(<span class=\"params\">value, desc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">  li.className = value ? <span class=\"string\">\"pase\"</span> : <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\">  li.appendChild(<span class=\"built_in\">document</span>.createTextNode(desc));</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"results\"</span>).appendChild(li);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数字面量\"><a href=\"#函数字面量\" class=\"headerlink\" title=\"函数字面量\"></a>函数字面量</h1><p>函数字面量由4个部分组成</p>\n<ul>\n<li>function关键字</li>\n<li>可选名称。</li>\n<li>括号内部，一个以逗号分隔的参数列表。</li>\n<li>包含在大括号内的一系列JavaScript语句叫 <strong>函数体</strong>。</li>\n</ul>\n<p>注意：</p>\n<blockquote>\n<p>所有的函数都有name属性，该属性保存的是他们的名称的字符串。</p>\n<p>当然没有名称的函数也有name属性，只是为空字符串。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canFly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数我们可以通过它的引用 <strong>canFly</strong> 进行调用。它与canFly函数几乎一模一样，但是不一样的地方在于它的字符串值为” ”，而不是“canFly”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.isDeadly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们可以（ <strong>window.isDeadly() || isDeadly()</strong> ）去调用这个函数，其实这就跟命名函数几乎一模一样了。</p>\n<h1 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h1><p>4个不同的方式可以进行函数调用。</p>\n<ol>\n<li>作为一个函数进行调用</li>\n<li>作为一个方法进行调用，在对象是进行调用，支持面向对象编程</li>\n<li>作为构造器进行调用，创建一个新对象</li>\n<li>通过<code>apply()</code>或<code>call()</code>方法进行调用。</li>\n</ol>\n<h2 id=\"函数传递两个隐式参数\"><a href=\"#函数传递两个隐式参数\" class=\"headerlink\" title=\"函数传递两个隐式参数\"></a>函数传递两个隐式参数</h2><p><strong>arguments和this</strong></p>\n<p>隐式（limplicit），意味着这些参数不会显示列在函数签名里。但是他们都会默默的传递给函数并存在于函数作用于内。</p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><p>它是传递给函数的所有参数的一个集合，它有一个<code>length</code>属性。比如：</p>\n<p><code>arguments[2]</code>表示获取第三个参数。</p>\n<p>虽然它可以使用数组进行获取，甚至可以用for循环对它进行遍历。但是它确实不是JS数组。</p>\n<p>我们只要将它看成一个类数组结构，并且 <strong>只拥有数组</strong> 的某些特性，仅此而已。</p>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this参数引用了与该函数调用进行隐式关联的一个对象，被称为<strong>函数上下文。</strong></p>\n<h2 id=\"作为函数进行调用\"><a href=\"#作为函数进行调用\" class=\"headerlink\" title=\"作为函数进行调用\"></a>作为函数进行调用</h2><p>很简单，比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hello;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hi();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xzh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xuzihao;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xzh();</span><br></pre></td></tr></table></figure>\n<p>这就是作为函数调用。这种方法调用函数的上下文就是——-window对象。</p>\n<h2 id=\"作为方法进行调用\"><a href=\"#作为方法进行调用\" class=\"headerlink\" title=\"作为方法进行调用\"></a>作为方法进行调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.whatever = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">o.whatever();</span><br></pre></td></tr></table></figure>\n<p>那么<code>o.whatever</code>的函数上下文为<strong>o</strong>。</p>\n<h2 id=\"作为构造器进行调用\"><a href=\"#作为构造器进行调用\" class=\"headerlink\" title=\"作为构造器进行调用\"></a>作为构造器进行调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> creep();</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造器的超能力\"><a href=\"#构造器的超能力\" class=\"headerlink\" title=\"构造器的超能力\"></a>构造器的超能力</h3><p>构造器调用时，下面的特殊行为会发生：</p>\n<ul>\n<li>创建一个新的空对象</li>\n<li>传递给构造器的对象是this参数，从而成为构造器的函数上下文。</li>\n<li>如果没有显式的返回值，新创建的对象则作为构造器的返回值进行返回。</li>\n</ul>\n<h2 id=\"使用apply-和call-方法进行调用\"><a href=\"#使用apply-和call-方法进行调用\" class=\"headerlink\" title=\"使用apply()和call()方法进行调用\"></a>使用apply()和call()方法进行调用</h2><p>可以显式指定任何一个对象作为其函数上下文。</p>\n<p>JavaScript的每个函数都有<strong>apply()</strong> 和 <strong>call()</strong>方法。使用其中一个我们都可以实现这种功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">juggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"built_in\">arguments</span>.length; n++)&#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">arguments</span>[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ninja1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ninja2 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//apply() 传入2个参数： 一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。</span></span><br><span class=\"line\">juggle.apply(ninja1, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"comment\">//call() 传入两个参数： 一个是作为函数上下文的对象，另外一个是一个参数列表。</span></span><br><span class=\"line\">juggle.call(ninja2, <span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//assert是断言测试用的</span></span><br><span class=\"line\">assert(ninja1.result === <span class=\"number\">10</span>, <span class=\"string\">\"juggled via apply\"</span>);</span><br><span class=\"line\">assert(ninja2.result === <span class=\"number\">26</span>, <span class=\"string\">\"juggled via call\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"五种this的工作原理\"><a href=\"#五种this的工作原理\" class=\"headerlink\" title=\"五种this的工作原理\"></a>五种this的工作原理</h2><h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><blockquote>\n<p>this;</p>\n</blockquote>\n<p>this指向全局对象，浏览器：window，js:global</p>\n<h3 id=\"函数调用-1\"><a href=\"#函数调用-1\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><blockquote>\n<p>foo();</p>\n</blockquote>\n<p>this也指向全局对象</p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><blockquote>\n<p>bar.foo();</p>\n</blockquote>\n<p>this指向被调用的对象。</p>\n<p>调用构造函数</p>\n<blockquote>\n<p>new foo();</p>\n</blockquote>\n<p>this指向新创建的对像。</p>\n<h3 id=\"显式的设置this\"><a href=\"#显式的设置this\" class=\"headerlink\" title=\"显式的设置this\"></a>显式的设置this</h3><blockquote>\n<p>apply, call</p>\n</blockquote>\n<p>当使用 <code>Function.prototype</code> 上的 <code>call</code> 或者 <code>apply</code> 方法时，函数内的 <code>this</code> 将会被 <strong>显式设置</strong>为函数调用的第一个参数。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>作为函数进行调用：该上下文是方法的拥有者。</li>\n<li>作为全局函数进行调用：该上下文永远是windos。</li>\n<li>作为构造器函数进行调用：该上下文对象则是新创建的对象实例。</li>\n<li>通过函数的apply（）或call（）方法进行调用时，上下文可以设置成任意值。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在JavaScript中，函数是<strong>一等公民</strong>。函数是<strong>第一型对象</strong>。</p>\n<p>所以说，我们可以将其视为其他任意类型的JavaScript对象。</p>","more":"<p>在JavaScript中函数可以：</p>\n<ul>\n<li>可以赋值给<strong>变量，数组，或其他对象</strong>的属性</li>\n<li>可以通过<strong>字面量</strong>进行创建</li>\n<li>将其作为<strong>参数</strong>进行传递</li>\n<li>可以作为函数的<strong>返回值</strong>进行返回</li>\n<li>可以拥有<strong>动态创建并赋值</strong>的属性</li>\n</ul>\n<p>最重要是的，它们还可以被<strong>调用</strong>。这些调用通常是以<strong>异步方式</strong>进行调用。</p>\n<h1 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h1><p>回调函数的术语源于：我们定义一个函数，以便其他一些代码在适当的时机回头再调用他。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">useless</span>(<span class=\"params\">callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">'Demo arigato'</span>;</span><br><span class=\"line\">assert(useless(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">&#125;) ===text, <span class=\"string\">\"This useless function works!\"</span> + text);</span><br><span class=\"line\"><span class=\"comment\">//assert是测试函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">assert</span>(<span class=\"params\">value, desc</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">  li.className = value ? <span class=\"string\">\"pase\"</span> : <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\">  li.appendChild(<span class=\"built_in\">document</span>.createTextNode(desc));</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"results\"</span>).appendChild(li);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数字面量\"><a href=\"#函数字面量\" class=\"headerlink\" title=\"函数字面量\"></a>函数字面量</h1><p>函数字面量由4个部分组成</p>\n<ul>\n<li>function关键字</li>\n<li>可选名称。</li>\n<li>括号内部，一个以逗号分隔的参数列表。</li>\n<li>包含在大括号内的一系列JavaScript语句叫 <strong>函数体</strong>。</li>\n</ul>\n<p>注意：</p>\n<blockquote>\n<p>所有的函数都有name属性，该属性保存的是他们的名称的字符串。</p>\n<p>当然没有名称的函数也有name属性，只是为空字符串。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> canFly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这个函数我们可以通过它的引用 <strong>canFly</strong> 进行调用。它与canFly函数几乎一模一样，但是不一样的地方在于它的字符串值为” ”，而不是“canFly”。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.isDeadly = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们可以（ <strong>window.isDeadly() || isDeadly()</strong> ）去调用这个函数，其实这就跟命名函数几乎一模一样了。</p>\n<h1 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h1><p>4个不同的方式可以进行函数调用。</p>\n<ol>\n<li>作为一个函数进行调用</li>\n<li>作为一个方法进行调用，在对象是进行调用，支持面向对象编程</li>\n<li>作为构造器进行调用，创建一个新对象</li>\n<li>通过<code>apply()</code>或<code>call()</code>方法进行调用。</li>\n</ol>\n<h2 id=\"函数传递两个隐式参数\"><a href=\"#函数传递两个隐式参数\" class=\"headerlink\" title=\"函数传递两个隐式参数\"></a>函数传递两个隐式参数</h2><p><strong>arguments和this</strong></p>\n<p>隐式（limplicit），意味着这些参数不会显示列在函数签名里。但是他们都会默默的传递给函数并存在于函数作用于内。</p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><p>它是传递给函数的所有参数的一个集合，它有一个<code>length</code>属性。比如：</p>\n<p><code>arguments[2]</code>表示获取第三个参数。</p>\n<p>虽然它可以使用数组进行获取，甚至可以用for循环对它进行遍历。但是它确实不是JS数组。</p>\n<p>我们只要将它看成一个类数组结构，并且 <strong>只拥有数组</strong> 的某些特性，仅此而已。</p>\n<h3 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h3><p>this参数引用了与该函数调用进行隐式关联的一个对象，被称为<strong>函数上下文。</strong></p>\n<h2 id=\"作为函数进行调用\"><a href=\"#作为函数进行调用\" class=\"headerlink\" title=\"作为函数进行调用\"></a>作为函数进行调用</h2><p>很简单，比如说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hello;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hi();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xzh = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> xuzihao;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xzh();</span><br></pre></td></tr></table></figure>\n<p>这就是作为函数调用。这种方法调用函数的上下文就是——-window对象。</p>\n<h2 id=\"作为方法进行调用\"><a href=\"#作为方法进行调用\" class=\"headerlink\" title=\"作为方法进行调用\"></a>作为方法进行调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\">o.whatever = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">o.whatever();</span><br></pre></td></tr></table></figure>\n<p>那么<code>o.whatever</code>的函数上下文为<strong>o</strong>。</p>\n<h2 id=\"作为构造器进行调用\"><a href=\"#作为构造器进行调用\" class=\"headerlink\" title=\"作为构造器进行调用\"></a>作为构造器进行调用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">creep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> creep();</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造器的超能力\"><a href=\"#构造器的超能力\" class=\"headerlink\" title=\"构造器的超能力\"></a>构造器的超能力</h3><p>构造器调用时，下面的特殊行为会发生：</p>\n<ul>\n<li>创建一个新的空对象</li>\n<li>传递给构造器的对象是this参数，从而成为构造器的函数上下文。</li>\n<li>如果没有显式的返回值，新创建的对象则作为构造器的返回值进行返回。</li>\n</ul>\n<h2 id=\"使用apply-和call-方法进行调用\"><a href=\"#使用apply-和call-方法进行调用\" class=\"headerlink\" title=\"使用apply()和call()方法进行调用\"></a>使用apply()和call()方法进行调用</h2><p>可以显式指定任何一个对象作为其函数上下文。</p>\n<p>JavaScript的每个函数都有<strong>apply()</strong> 和 <strong>call()</strong>方法。使用其中一个我们都可以实现这种功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">juggle</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"built_in\">arguments</span>.length; n++)&#123;</span><br><span class=\"line\">        result += <span class=\"built_in\">arguments</span>[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ninja1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ninja2 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//apply() 传入2个参数： 一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。</span></span><br><span class=\"line\">juggle.apply(ninja1, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"comment\">//call() 传入两个参数： 一个是作为函数上下文的对象，另外一个是一个参数列表。</span></span><br><span class=\"line\">juggle.call(ninja2, <span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//assert是断言测试用的</span></span><br><span class=\"line\">assert(ninja1.result === <span class=\"number\">10</span>, <span class=\"string\">\"juggled via apply\"</span>);</span><br><span class=\"line\">assert(ninja2.result === <span class=\"number\">26</span>, <span class=\"string\">\"juggled via call\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"五种this的工作原理\"><a href=\"#五种this的工作原理\" class=\"headerlink\" title=\"五种this的工作原理\"></a>五种this的工作原理</h2><h3 id=\"全局\"><a href=\"#全局\" class=\"headerlink\" title=\"全局\"></a>全局</h3><blockquote>\n<p>this;</p>\n</blockquote>\n<p>this指向全局对象，浏览器：window，js:global</p>\n<h3 id=\"函数调用-1\"><a href=\"#函数调用-1\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><blockquote>\n<p>foo();</p>\n</blockquote>\n<p>this也指向全局对象</p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><blockquote>\n<p>bar.foo();</p>\n</blockquote>\n<p>this指向被调用的对象。</p>\n<p>调用构造函数</p>\n<blockquote>\n<p>new foo();</p>\n</blockquote>\n<p>this指向新创建的对像。</p>\n<h3 id=\"显式的设置this\"><a href=\"#显式的设置this\" class=\"headerlink\" title=\"显式的设置this\"></a>显式的设置this</h3><blockquote>\n<p>apply, call</p>\n</blockquote>\n<p>当使用 <code>Function.prototype</code> 上的 <code>call</code> 或者 <code>apply</code> 方法时，函数内的 <code>this</code> 将会被 <strong>显式设置</strong>为函数调用的第一个参数。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>作为函数进行调用：该上下文是方法的拥有者。</li>\n<li>作为全局函数进行调用：该上下文永远是windos。</li>\n<li>作为构造器函数进行调用：该上下文对象则是新创建的对象实例。</li>\n<li>通过函数的apply（）或call（）方法进行调用时，上下文可以设置成任意值。</li>\n</ul>"},{"title":"JavaScript变量+方法","date":"2017-04-24T05:55:00.000Z","comments":1,"layout":"post","_content":"\n# JavaScript变量+方法\n\nECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。\n\n**基本类型值**指的是简单的数据段，而**引用类型值**指那些可能有多个值构成的**对象**。\n\n## 传递参数\n\n```javascript\nfunction addTen(num){\n  num +=10;\n  return num;\n}\nvar count =20;\nvar result = addTen(count);\nalert(count); \t\t//20,没变化\nalert(result);\t\t//30\n```\n\n在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行`alert(count);`时`count`只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。\n\n<!--more-->\n\n## 方法\n\n- **split()**\n\n方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。\n\n## 重排序方法\n\n- **reverse()和sort()**\n\n**reverse()**方法会反转数组项的顺序。\n\n```javascript\nvar values = [1,2,3,4,5];\nvalues.reverse();\nalert(values); \t\t\t//5,4,3,2,1\n```\n\n而 **sort()**方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且`sort()`方法会调用每个数组项的`toString()`转型方法，然后去比较得到的字符串。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort();\nalert(values); \t\t//0,1,10,15,5\n```\n\n在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释\n\n```javascript\nfunction compare (value1,value2){\n  if(value1 <value2){\n    return -1; \t\t\t//return 1;\n  }else if(value1 >value2){\n    return 1;\t\t\t//return -1;\n  }else{\n    return 0;\n  }\n}\n```\n\n然后我们再把这个参数传给`sort()`方法即可。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nalert(values); \t\t//0,1,5,10,15\n```\n\n","source":"_posts/JavaScript变量.md","raw":"---\ntitle: JavaScript变量+方法\ndate: 2017-04-24 13:55\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# JavaScript变量+方法\n\nECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。\n\n**基本类型值**指的是简单的数据段，而**引用类型值**指那些可能有多个值构成的**对象**。\n\n## 传递参数\n\n```javascript\nfunction addTen(num){\n  num +=10;\n  return num;\n}\nvar count =20;\nvar result = addTen(count);\nalert(count); \t\t//20,没变化\nalert(result);\t\t//30\n```\n\n在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行`alert(count);`时`count`只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。\n\n<!--more-->\n\n## 方法\n\n- **split()**\n\n方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。\n\n## 重排序方法\n\n- **reverse()和sort()**\n\n**reverse()**方法会反转数组项的顺序。\n\n```javascript\nvar values = [1,2,3,4,5];\nvalues.reverse();\nalert(values); \t\t\t//5,4,3,2,1\n```\n\n而 **sort()**方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且`sort()`方法会调用每个数组项的`toString()`转型方法，然后去比较得到的字符串。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort();\nalert(values); \t\t//0,1,10,15,5\n```\n\n在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释\n\n```javascript\nfunction compare (value1,value2){\n  if(value1 <value2){\n    return -1; \t\t\t//return 1;\n  }else if(value1 >value2){\n    return 1;\t\t\t//return -1;\n  }else{\n    return 0;\n  }\n}\n```\n\n然后我们再把这个参数传给`sort()`方法即可。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nalert(values); \t\t//0,1,5,10,15\n```\n\n","slug":"JavaScript变量","published":1,"updated":"2017-09-22T09:50:05.000Z","photos":[],"link":"","_id":"cjollnbpm002lunfyqd5fu0qk","content":"<h1 id=\"JavaScript变量-方法\"><a href=\"#JavaScript变量-方法\" class=\"headerlink\" title=\"JavaScript变量+方法\"></a>JavaScript变量+方法</h1><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。</p>\n<p><strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型值</strong>指那些可能有多个值构成的<strong>对象</strong>。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTen</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  num +=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = addTen(count);</span><br><span class=\"line\">alert(count); \t\t<span class=\"comment\">//20,没变化</span></span><br><span class=\"line\">alert(result);\t\t<span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure>\n<p>在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行<code>alert(count);</code>时<code>count</code>只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。</p>\n<a id=\"more\"></a>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li><strong>split()</strong></li>\n</ul>\n<p>方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。</p>\n<h2 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h2><ul>\n<li><strong>reverse()和sort()</strong></li>\n</ul>\n<p><strong>reverse()</strong>方法会反转数组项的顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">values.reverse();</span><br><span class=\"line\">alert(values); \t\t\t<span class=\"comment\">//5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n<p>而 <strong>sort()</strong>方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且<code>sort()</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后去比较得到的字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort();</span><br><span class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,10,15,5</span></span><br></pre></td></tr></table></figure>\n<p>在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span> (<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1 &lt;value2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; \t\t\t<span class=\"comment\">//return 1;</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt;value2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//return -1;</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们再把这个参数传给<code>sort()</code>方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(compare);</span><br><span class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,5,10,15</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript变量-方法\"><a href=\"#JavaScript变量-方法\" class=\"headerlink\" title=\"JavaScript变量+方法\"></a>JavaScript变量+方法</h1><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。</p>\n<p><strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型值</strong>指那些可能有多个值构成的<strong>对象</strong>。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTen</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">  num +=<span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = addTen(count);</span><br><span class=\"line\">alert(count); \t\t<span class=\"comment\">//20,没变化</span></span><br><span class=\"line\">alert(result);\t\t<span class=\"comment\">//30</span></span><br></pre></td></tr></table></figure>\n<p>在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行<code>alert(count);</code>时<code>count</code>只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。</p>","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li><strong>split()</strong></li>\n</ul>\n<p>方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。</p>\n<h2 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h2><ul>\n<li><strong>reverse()和sort()</strong></li>\n</ul>\n<p><strong>reverse()</strong>方法会反转数组项的顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">values.reverse();</span><br><span class=\"line\">alert(values); \t\t\t<span class=\"comment\">//5,4,3,2,1</span></span><br></pre></td></tr></table></figure>\n<p>而 <strong>sort()</strong>方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且<code>sort()</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后去比较得到的字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort();</span><br><span class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,10,15,5</span></span><br></pre></td></tr></table></figure>\n<p>在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span> (<span class=\"params\">value1,value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(value1 &lt;value2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; \t\t\t<span class=\"comment\">//return 1;</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt;value2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//return -1;</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们再把这个参数传给<code>sort()</code>方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</span><br><span class=\"line\">values.sort(compare);</span><br><span class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,5,10,15</span></span><br></pre></td></tr></table></figure>"},{"title":"JavaScript基本概念（高程3）","date":"2017-04-11T02:49:00.000Z","comments":1,"layout":"post","_content":"\n# JavaScript基本概念（高程3）\n\n\n\n## 数据类型\n\n### typeof操作符\n\n\"undefined\"——如果这个值未定义;\n\n\"boolean\"——如果这个值是布尔值;\n\n\"string\"——如果这个值是字符串;\n\n\"number\"——如果这个值是数值;\n\n\"object\"——如果这个值是对象或null;\n\n\"function\"——如果这个值是函数;\n<!--more-->\n### Undefined类型\n\n- Undefined类型只有一个值，即特殊的undefined。\n\n### Null类型\n\n- Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回\"object\"的原因。\n\n### Boolean类型\n\n- Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，**因此true不一定等于1，而false也不一定等于0.**\n\n### Number类型\n\n整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。\n\n十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。\n\n- 浮点数值\n\n永远不要测试某个特定的浮点数值。\n\n如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。\n\n- 数值范围\n\n```javascript\nvar result= Number.MAX_VALUE +Number.MAX_VALUE;\nalert(isFinite(result));\t\t\t//false\n```\n\n\n\n- NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。\n\n它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，\n\n```javascript\nalert(NaN == NaN);  \t\t //false\n```\n\n- 数值转换\n\n  ```javascript\n  var num1 = Number(\"Hello world\");\t\t//NaN\n  var num2 = Number(\" \");\t\t\t\t\t//0\n  var num3 = Number(\"000011\");\t\t\t//11\n  var num4 = Number(\"true\");\t\t\t\t//1\n  ```\n\n  ### String类型\n\n- 字符字面量-也叫转义序列\n\n- 字符串的特定\n\n字符串一旦创建，它们的值就不能改变。\n\n- 转换为字符串\n\n要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。\n\n### Object类型\n\n- constructor:保存着用于创建当前对象的函数。\n\n- hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(\"name\")）。\n\n- isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。\n\n- toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。\n\n- toString():返回对象的字符串表示。\n\n- valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n  ## 操作符\n\n  ## 一元操作符\n\n  - 递增和递减操作符\n\n  ​     递增和递减操作符直接借鉴C。\n\n  - 位操作符\n\n  符号位的值决定了其他为数值的格式。\n\n  **负数同样以二进制码存储，但使用的格式是二进制补码**\n\n\n\n- 按位非（NOT）\n\n按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。\n\n```javascript\nvar num1 = 25;//二进制00000000000000000000000000011001\n//二进制11111111111111111111111111100110\nvar num2 = ~num1;\nalert(num2);//-26\n```\n\n- 按位与（AND）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  0   |\n|    0    |    1    |  0   |\n|    0    |    0    |  0   |\n\n简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.\n\n- 按位或（OR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.\n\n- 按位异或（XOR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  0   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.\n\n- 左移\n\n左移操作符由两个小于号（<<）表示。\n\n```javascript\nvar oldValue = 2;\t\t\t\t\t//等于二进制的10\nvar newValue = oldValue << 5;//等于二进制的1000000,十进制的64\n```\n\n\n\n- 有符号的右移\n\n有符号的右移操作符由两个大于号（>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue = oldValue >> 5;//等于二进制的10，即十进制的2\n```\n\n- 无符号右移\n\n无符号右移操作符由3个大于号（>>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue =oldValue >>> 5;//等于二进制的10，即十进制的2\n```\n\n无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。\n\n```javascript\nvar oldValue = -64;//等于二进制的11111111111111111111111111000000\nvar newValue = oldValue >>>5;//等于十进制的134217726\n```\n\n## 布尔操作符\n\n- 逻辑非（！）\n\n```javascript\nalert(!false);\t//true\nalert(!\"blue\");\t//false\nalert(!0);\t\t//true\nalert(!NaN);\t//true\nalert(!\"\");\t\t//true\nalert(!12345);\t//false\n```\n\n- 逻辑与（&&）\n\n| 第一个操作数 | 第二个操作数 |  结果   |\n| :----: | :----: | :---: |\n|  true  |  true  | true  |\n|  true  | false  | false |\n| false  |  true  | false |\n| false  | false  | false |\n\n在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。\n\n- 逻辑或\n\n|  true  |  true  | true  |\n| :----: | :----: | :---: |\n|  true  | false  | true  |\n| false  |  true  | true  |\n| false  | false  | false |\n| 第一个操作数 | 第二个操作数 |  结果   |\n\n与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，\n","source":"_posts/JavaScript基本概念copy.md","raw":"---\ntitle: JavaScript基本概念（高程3）\ndate: 2017-04-11 10:49\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# JavaScript基本概念（高程3）\n\n\n\n## 数据类型\n\n### typeof操作符\n\n\"undefined\"——如果这个值未定义;\n\n\"boolean\"——如果这个值是布尔值;\n\n\"string\"——如果这个值是字符串;\n\n\"number\"——如果这个值是数值;\n\n\"object\"——如果这个值是对象或null;\n\n\"function\"——如果这个值是函数;\n<!--more-->\n### Undefined类型\n\n- Undefined类型只有一个值，即特殊的undefined。\n\n### Null类型\n\n- Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回\"object\"的原因。\n\n### Boolean类型\n\n- Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，**因此true不一定等于1，而false也不一定等于0.**\n\n### Number类型\n\n整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。\n\n十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。\n\n- 浮点数值\n\n永远不要测试某个特定的浮点数值。\n\n如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。\n\n- 数值范围\n\n```javascript\nvar result= Number.MAX_VALUE +Number.MAX_VALUE;\nalert(isFinite(result));\t\t\t//false\n```\n\n\n\n- NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。\n\n它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，\n\n```javascript\nalert(NaN == NaN);  \t\t //false\n```\n\n- 数值转换\n\n  ```javascript\n  var num1 = Number(\"Hello world\");\t\t//NaN\n  var num2 = Number(\" \");\t\t\t\t\t//0\n  var num3 = Number(\"000011\");\t\t\t//11\n  var num4 = Number(\"true\");\t\t\t\t//1\n  ```\n\n  ### String类型\n\n- 字符字面量-也叫转义序列\n\n- 字符串的特定\n\n字符串一旦创建，它们的值就不能改变。\n\n- 转换为字符串\n\n要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。\n\n### Object类型\n\n- constructor:保存着用于创建当前对象的函数。\n\n- hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(\"name\")）。\n\n- isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。\n\n- toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。\n\n- toString():返回对象的字符串表示。\n\n- valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n  ## 操作符\n\n  ## 一元操作符\n\n  - 递增和递减操作符\n\n  ​     递增和递减操作符直接借鉴C。\n\n  - 位操作符\n\n  符号位的值决定了其他为数值的格式。\n\n  **负数同样以二进制码存储，但使用的格式是二进制补码**\n\n\n\n- 按位非（NOT）\n\n按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。\n\n```javascript\nvar num1 = 25;//二进制00000000000000000000000000011001\n//二进制11111111111111111111111111100110\nvar num2 = ~num1;\nalert(num2);//-26\n```\n\n- 按位与（AND）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  0   |\n|    0    |    1    |  0   |\n|    0    |    0    |  0   |\n\n简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.\n\n- 按位或（OR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.\n\n- 按位异或（XOR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  0   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.\n\n- 左移\n\n左移操作符由两个小于号（<<）表示。\n\n```javascript\nvar oldValue = 2;\t\t\t\t\t//等于二进制的10\nvar newValue = oldValue << 5;//等于二进制的1000000,十进制的64\n```\n\n\n\n- 有符号的右移\n\n有符号的右移操作符由两个大于号（>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue = oldValue >> 5;//等于二进制的10，即十进制的2\n```\n\n- 无符号右移\n\n无符号右移操作符由3个大于号（>>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue =oldValue >>> 5;//等于二进制的10，即十进制的2\n```\n\n无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。\n\n```javascript\nvar oldValue = -64;//等于二进制的11111111111111111111111111000000\nvar newValue = oldValue >>>5;//等于十进制的134217726\n```\n\n## 布尔操作符\n\n- 逻辑非（！）\n\n```javascript\nalert(!false);\t//true\nalert(!\"blue\");\t//false\nalert(!0);\t\t//true\nalert(!NaN);\t//true\nalert(!\"\");\t\t//true\nalert(!12345);\t//false\n```\n\n- 逻辑与（&&）\n\n| 第一个操作数 | 第二个操作数 |  结果   |\n| :----: | :----: | :---: |\n|  true  |  true  | true  |\n|  true  | false  | false |\n| false  |  true  | false |\n| false  | false  | false |\n\n在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。\n\n- 逻辑或\n\n|  true  |  true  | true  |\n| :----: | :----: | :---: |\n|  true  | false  | true  |\n| false  |  true  | true  |\n| false  | false  | false |\n| 第一个操作数 | 第二个操作数 |  结果   |\n\n与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，\n","slug":"JavaScript基本概念copy","published":1,"updated":"2017-09-22T09:50:18.000Z","photos":[],"link":"","_id":"cjollnbpo002ounfyia15w09d","content":"<h1 id=\"JavaScript基本概念（高程3）\"><a href=\"#JavaScript基本概念（高程3）\" class=\"headerlink\" title=\"JavaScript基本概念（高程3）\"></a>JavaScript基本概念（高程3）</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>“undefined”——如果这个值未定义;</p>\n<p>“boolean”——如果这个值是布尔值;</p>\n<p>“string”——如果这个值是字符串;</p>\n<p>“number”——如果这个值是数值;</p>\n<p>“object”——如果这个值是对象或null;</p>\n<p>“function”——如果这个值是函数;<br><a id=\"more\"></a></p>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><ul>\n<li>Undefined类型只有一个值，即特殊的undefined。</li>\n</ul>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><ul>\n<li>Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回”object”的原因。</li>\n</ul>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，<strong>因此true不一定等于1，而false也不一定等于0.</strong></li>\n</ul>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。</p>\n<p>十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。</p>\n<ul>\n<li>浮点数值</li>\n</ul>\n<p>永远不要测试某个特定的浮点数值。</p>\n<p>如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。</p>\n<ul>\n<li>数值范围</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"built_in\">Number</span>.MAX_VALUE +<span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));\t\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>NaN</li>\n</ul>\n<p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。</p>\n<p>它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>);  \t\t <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>数值转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"Hello world\"</span>);\t\t<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">Number</span>(<span class=\"string\">\" \"</span>);\t\t\t\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"000011\"</span>);\t\t\t<span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num4 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"true\"</span>);\t\t\t\t<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></li>\n<li><p>字符字面量-也叫转义序列</p>\n</li>\n<li><p>字符串的特定</p>\n</li>\n</ul>\n<p>字符串一旦创建，它们的值就不能改变。</p>\n<ul>\n<li>转换为字符串</li>\n</ul>\n<p>要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。</p>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><ul>\n<li><p>constructor:保存着用于创建当前对象的函数。</p>\n</li>\n<li><p>hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</p>\n</li>\n<li><p>isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。</p>\n</li>\n<li><p>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。</p>\n</li>\n<li><p>toString():返回对象的字符串表示。</p>\n</li>\n<li><p>valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h2 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h2><ul>\n<li>递增和递减操作符</li>\n</ul>\n<p>​     递增和递减操作符直接借鉴C。</p>\n<ul>\n<li>位操作符</li>\n</ul>\n<p>符号位的值决定了其他为数值的格式。</p>\n<p><strong>负数同样以二进制码存储，但使用的格式是二进制补码</strong></p>\n</li>\n</ul>\n<ul>\n<li>按位非（NOT）</li>\n</ul>\n<p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">25</span>;<span class=\"comment\">//二进制00000000000000000000000000011001</span></span><br><span class=\"line\"><span class=\"comment\">//二进制11111111111111111111111111100110</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = ~num1;</span><br><span class=\"line\">alert(num2);<span class=\"comment\">//-26</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>按位与（AND）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.</p>\n<ul>\n<li>按位或（OR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.</p>\n<ul>\n<li>按位异或（XOR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.</p>\n<ul>\n<li>左移</li>\n</ul>\n<p>左移操作符由两个小于号（&lt;&lt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">2</span>;\t\t\t\t\t<span class=\"comment\">//等于二进制的10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &lt;&lt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的1000000,十进制的64</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>有符号的右移</li>\n</ul>\n<p>有符号的右移操作符由两个大于号（&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>无符号右移</li>\n</ul>\n<p>无符号右移操作符由3个大于号（&gt;&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue =oldValue &gt;&gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></span><br></pre></td></tr></table></figure>\n<p>无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">-64</span>;<span class=\"comment\">//等于二进制的11111111111111111111111111000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt;&gt;<span class=\"number\">5</span>;<span class=\"comment\">//等于十进制的134217726</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h2><ul>\n<li>逻辑非（！）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(!<span class=\"literal\">false</span>);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"string\">\"blue\"</span>);\t<span class=\"comment\">//false</span></span><br><span class=\"line\">alert(!<span class=\"number\">0</span>);\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"literal\">NaN</span>);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"string\">\"\"</span>);\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"number\">12345</span>);\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑与（&amp;&amp;）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个操作数</th>\n<th style=\"text-align:center\">第二个操作数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。</p>\n<ul>\n<li>逻辑或</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第一个操作数</td>\n<td style=\"text-align:center\">第二个操作数</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n<p>与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript基本概念（高程3）\"><a href=\"#JavaScript基本概念（高程3）\" class=\"headerlink\" title=\"JavaScript基本概念（高程3）\"></a>JavaScript基本概念（高程3）</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>“undefined”——如果这个值未定义;</p>\n<p>“boolean”——如果这个值是布尔值;</p>\n<p>“string”——如果这个值是字符串;</p>\n<p>“number”——如果这个值是数值;</p>\n<p>“object”——如果这个值是对象或null;</p>\n<p>“function”——如果这个值是函数;<br>","more":"</p>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><ul>\n<li>Undefined类型只有一个值，即特殊的undefined。</li>\n</ul>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><ul>\n<li>Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回”object”的原因。</li>\n</ul>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，<strong>因此true不一定等于1，而false也不一定等于0.</strong></li>\n</ul>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。</p>\n<p>十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。</p>\n<ul>\n<li>浮点数值</li>\n</ul>\n<p>永远不要测试某个特定的浮点数值。</p>\n<p>如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。</p>\n<ul>\n<li>数值范围</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"built_in\">Number</span>.MAX_VALUE +<span class=\"built_in\">Number</span>.MAX_VALUE;</span><br><span class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));\t\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>NaN</li>\n</ul>\n<p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。</p>\n<p>它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>);  \t\t <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>数值转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"Hello world\"</span>);\t\t<span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">Number</span>(<span class=\"string\">\" \"</span>);\t\t\t\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"000011\"</span>);\t\t\t<span class=\"comment\">//11</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num4 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"true\"</span>);\t\t\t\t<span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></li>\n<li><p>字符字面量-也叫转义序列</p>\n</li>\n<li><p>字符串的特定</p>\n</li>\n</ul>\n<p>字符串一旦创建，它们的值就不能改变。</p>\n<ul>\n<li>转换为字符串</li>\n</ul>\n<p>要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。</p>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><ul>\n<li><p>constructor:保存着用于创建当前对象的函数。</p>\n</li>\n<li><p>hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</p>\n</li>\n<li><p>isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。</p>\n</li>\n<li><p>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。</p>\n</li>\n<li><p>toString():返回对象的字符串表示。</p>\n</li>\n<li><p>valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h2 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h2><ul>\n<li>递增和递减操作符</li>\n</ul>\n<p>​     递增和递减操作符直接借鉴C。</p>\n<ul>\n<li>位操作符</li>\n</ul>\n<p>符号位的值决定了其他为数值的格式。</p>\n<p><strong>负数同样以二进制码存储，但使用的格式是二进制补码</strong></p>\n</li>\n</ul>\n<ul>\n<li>按位非（NOT）</li>\n</ul>\n<p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">25</span>;<span class=\"comment\">//二进制00000000000000000000000000011001</span></span><br><span class=\"line\"><span class=\"comment\">//二进制11111111111111111111111111100110</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = ~num1;</span><br><span class=\"line\">alert(num2);<span class=\"comment\">//-26</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>按位与（AND）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.</p>\n<ul>\n<li>按位或（OR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.</p>\n<ul>\n<li>按位异或（XOR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.</p>\n<ul>\n<li>左移</li>\n</ul>\n<p>左移操作符由两个小于号（&lt;&lt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">2</span>;\t\t\t\t\t<span class=\"comment\">//等于二进制的10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &lt;&lt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的1000000,十进制的64</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>有符号的右移</li>\n</ul>\n<p>有符号的右移操作符由两个大于号（&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>无符号右移</li>\n</ul>\n<p>无符号右移操作符由3个大于号（&gt;&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue =oldValue &gt;&gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></span><br></pre></td></tr></table></figure>\n<p>无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">-64</span>;<span class=\"comment\">//等于二进制的11111111111111111111111111000000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt;&gt;<span class=\"number\">5</span>;<span class=\"comment\">//等于十进制的134217726</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h2><ul>\n<li>逻辑非（！）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(!<span class=\"literal\">false</span>);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"string\">\"blue\"</span>);\t<span class=\"comment\">//false</span></span><br><span class=\"line\">alert(!<span class=\"number\">0</span>);\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"literal\">NaN</span>);\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"string\">\"\"</span>);\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">alert(!<span class=\"number\">12345</span>);\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>逻辑与（&amp;&amp;）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个操作数</th>\n<th style=\"text-align:center\">第二个操作数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。</p>\n<ul>\n<li>逻辑或</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第一个操作数</td>\n<td style=\"text-align:center\">第二个操作数</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n<p>与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，</p>"},{"title":"JavaScript闭包","date":"2017-05-22T05:44:44.000Z","updated":"2018-04-04T13:35:00.000Z","comments":1,"layout":"post","_content":"\n# 闭包/bibao/Closures\n\n## 什么是闭包\n\nMDN对闭包的定义为：\n\n> 闭包是指那些能够访问自由变量的函数。\n\n阮老师对闭包的定义为：\n\n>  闭包就是能够读取其他函数内部变量的函数。\n>\n>  可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n红宝书对闭包的定义为：\n\n> 　闭包是指有权访问另一个函数作用域中的变量的函数\n\n那么圣经犀牛书对闭包定义为：\n\n> 函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”\n\n<!--more-->\n\n**我个人比较认同红宝书的定义。**\n\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a); // 2\n    }\n    bar();\n}\nfoo();\n```\n\n我们来做一个数组求和\n\n```javascript\nfunction sum(arr){\n  return arr.reduce(function(x,y){\n    return x+y;\n  });\n}\nsum([3,4,5,6]);\t\t\t//18\n```\n\n但是我们想要返回函数\n\n```javascript\nfunction smallsum(arr){\n  var sum = function(){\n    return arr.reduce(function(x,y){\n      return x+y;\n    });\n  }\n  return sum;\n}\n```\n\n当我们想要用`smallsum`的时候返回的却是个函数。\n\n```javascript\nvar result = smallsum([3,4,5,6]);\t\t//function sum()\n```\n\n直到我们调用`result`\n\n```javascript\nresult();\t\t\t//18\n```\n\n在这个例子中，我发现内部函数`sum`可以调用外部函数`smallsum`的参数和局部变量。\n\n当我们调用`smallsum`的时候，每次调用都会产生一个新的函数。即使你传入的值相同。\n\n```JavaScript\nvar result1 = smallsum([3,4,5,6]);\nvar result2 = smallsum([3,4,5,6]);\nresult1 === result2; \t\t\t//false\n```\n\n## 假如\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push(function(){\n      return i;\n    });\n  }\n  return arr;\n}\n```\n\n```javascript\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t//4\nf2();\t//4\nf3();\t//4\n```\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push((function(n){\n      return function(){\n      return n;\n      }\n    })(i));\n  }\n  return arr;\n}\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t\t//0\nf2();\t\t//1\nf3();\t\t//2\n```\n\n注意这里用了一个“**创建一个匿名函数并立刻执行**”的语法：\n\n```javascript\n(function (n) {\n    return n;\n})(1); //1\n```\n## 总结\n\n可能上面的例子都不够很清晰\n\n```javascript\nfunction a() {\n    var b = 1;\n    function c(){\n        console.log(b++);\n    }\n    return c;\n}\n\nvar d1 = a();\nvar d2 = a();\n\nd1();\t\t//1\nd1();\t\t//2\n\nd2();\t\t//1\nd2();\t\t//2\n```\n\n也就是说他们都会去创建一个属于自己的执行环境！ok一切明了。","source":"_posts/JavaScript闭包.md","raw":"---\ntitle: JavaScript闭包\ndate: 2017-05-26 17：47\nupdated: 2018-04-04 21:35\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# 闭包/bibao/Closures\n\n## 什么是闭包\n\nMDN对闭包的定义为：\n\n> 闭包是指那些能够访问自由变量的函数。\n\n阮老师对闭包的定义为：\n\n>  闭包就是能够读取其他函数内部变量的函数。\n>\n>  可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n红宝书对闭包的定义为：\n\n> 　闭包是指有权访问另一个函数作用域中的变量的函数\n\n那么圣经犀牛书对闭包定义为：\n\n> 函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”\n\n<!--more-->\n\n**我个人比较认同红宝书的定义。**\n\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a); // 2\n    }\n    bar();\n}\nfoo();\n```\n\n我们来做一个数组求和\n\n```javascript\nfunction sum(arr){\n  return arr.reduce(function(x,y){\n    return x+y;\n  });\n}\nsum([3,4,5,6]);\t\t\t//18\n```\n\n但是我们想要返回函数\n\n```javascript\nfunction smallsum(arr){\n  var sum = function(){\n    return arr.reduce(function(x,y){\n      return x+y;\n    });\n  }\n  return sum;\n}\n```\n\n当我们想要用`smallsum`的时候返回的却是个函数。\n\n```javascript\nvar result = smallsum([3,4,5,6]);\t\t//function sum()\n```\n\n直到我们调用`result`\n\n```javascript\nresult();\t\t\t//18\n```\n\n在这个例子中，我发现内部函数`sum`可以调用外部函数`smallsum`的参数和局部变量。\n\n当我们调用`smallsum`的时候，每次调用都会产生一个新的函数。即使你传入的值相同。\n\n```JavaScript\nvar result1 = smallsum([3,4,5,6]);\nvar result2 = smallsum([3,4,5,6]);\nresult1 === result2; \t\t\t//false\n```\n\n## 假如\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push(function(){\n      return i;\n    });\n  }\n  return arr;\n}\n```\n\n```javascript\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t//4\nf2();\t//4\nf3();\t//4\n```\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push((function(n){\n      return function(){\n      return n;\n      }\n    })(i));\n  }\n  return arr;\n}\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t\t//0\nf2();\t\t//1\nf3();\t\t//2\n```\n\n注意这里用了一个“**创建一个匿名函数并立刻执行**”的语法：\n\n```javascript\n(function (n) {\n    return n;\n})(1); //1\n```\n## 总结\n\n可能上面的例子都不够很清晰\n\n```javascript\nfunction a() {\n    var b = 1;\n    function c(){\n        console.log(b++);\n    }\n    return c;\n}\n\nvar d1 = a();\nvar d2 = a();\n\nd1();\t\t//1\nd1();\t\t//2\n\nd2();\t\t//1\nd2();\t\t//2\n```\n\n也就是说他们都会去创建一个属于自己的执行环境！ok一切明了。","slug":"JavaScript闭包","published":1,"photos":[],"link":"","_id":"cjollnbps002tunfyz14u3yna","content":"<h1 id=\"闭包-bibao-Closures\"><a href=\"#闭包-bibao-Closures\" class=\"headerlink\" title=\"闭包/bibao/Closures\"></a>闭包/bibao/Closures</h1><h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>MDN对闭包的定义为：</p>\n<blockquote>\n<p>闭包是指那些能够访问自由变量的函数。</p>\n</blockquote>\n<p>阮老师对闭包的定义为：</p>\n<blockquote>\n<p> 闭包就是能够读取其他函数内部变量的函数。</p>\n<p> 可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n</blockquote>\n<p>红宝书对闭包的定义为：</p>\n<blockquote>\n<p>　闭包是指有权访问另一个函数作用域中的变量的函数</p>\n</blockquote>\n<p>那么圣经犀牛书对闭包定义为：</p>\n<blockquote>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>我个人比较认同红宝书的定义。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<p>我们来做一个数组求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t\t<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n<p>但是我们想要返回函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smallsum</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想要用<code>smallsum</code>的时候返回的却是个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t<span class=\"comment\">//function sum()</span></span><br></pre></td></tr></table></figure>\n<p>直到我们调用<code>result</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result();\t\t\t<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我发现内部函数<code>sum</code>可以调用外部函数<code>smallsum</code>的参数和局部变量。</p>\n<p>当我们调用<code>smallsum</code>的时候，每次调用都会产生一个新的函数。即使你传入的值相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</span><br><span class=\"line\">result1 === result2; \t\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"假如\"><a href=\"#假如\" class=\"headerlink\" title=\"假如\"></a>假如</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr= [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    arr.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a= l();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">f1();\t<span class=\"comment\">//4</span></span><br><span class=\"line\">f2();\t<span class=\"comment\">//4</span></span><br><span class=\"line\">f3();\t<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr= [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    arr.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a= l();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">f1();\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\">f2();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">f3();\t\t<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>注意这里用了一个“<strong>创建一个匿名函数并立刻执行</strong>”的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可能上面的例子都不够很清晰</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d1 = a();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d2 = a();</span><br><span class=\"line\"></span><br><span class=\"line\">d1();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">d1();\t\t<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">d2();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">d2();\t\t<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>也就是说他们都会去创建一个属于自己的执行环境！ok一切明了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"闭包-bibao-Closures\"><a href=\"#闭包-bibao-Closures\" class=\"headerlink\" title=\"闭包/bibao/Closures\"></a>闭包/bibao/Closures</h1><h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>MDN对闭包的定义为：</p>\n<blockquote>\n<p>闭包是指那些能够访问自由变量的函数。</p>\n</blockquote>\n<p>阮老师对闭包的定义为：</p>\n<blockquote>\n<p> 闭包就是能够读取其他函数内部变量的函数。</p>\n<p> 可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n</blockquote>\n<p>红宝书对闭包的定义为：</p>\n<blockquote>\n<p>　闭包是指有权访问另一个函数作用域中的变量的函数</p>\n</blockquote>\n<p>那么圣经犀牛书对闭包定义为：</p>\n<blockquote>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”</p>\n</blockquote>","more":"<p><strong>我个人比较认同红宝书的定义。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo();</span><br></pre></td></tr></table></figure>\n<p>我们来做一个数组求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t\t<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n<p>但是我们想要返回函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smallsum</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们想要用<code>smallsum</code>的时候返回的却是个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t<span class=\"comment\">//function sum()</span></span><br></pre></td></tr></table></figure>\n<p>直到我们调用<code>result</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result();\t\t\t<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我发现内部函数<code>sum</code>可以调用外部函数<code>smallsum</code>的参数和局部变量。</p>\n<p>当我们调用<code>smallsum</code>的时候，每次调用都会产生一个新的函数。即使你传入的值相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result1 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result2 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</span><br><span class=\"line\">result1 === result2; \t\t\t<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"假如\"><a href=\"#假如\" class=\"headerlink\" title=\"假如\"></a>假如</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr= [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    arr.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a= l();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">f1();\t<span class=\"comment\">//4</span></span><br><span class=\"line\">f2();\t<span class=\"comment\">//4</span></span><br><span class=\"line\">f3();\t<span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr= [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    arr.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a= l();</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">f1();\t\t<span class=\"comment\">//0</span></span><br><span class=\"line\">f2();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">f3();\t\t<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>注意这里用了一个“<strong>创建一个匿名函数并立刻执行</strong>”的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>可能上面的例子都不够很清晰</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(b++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> d1 = a();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d2 = a();</span><br><span class=\"line\"></span><br><span class=\"line\">d1();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">d1();\t\t<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">d2();\t\t<span class=\"comment\">//1</span></span><br><span class=\"line\">d2();\t\t<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>也就是说他们都会去创建一个属于自己的执行环境！ok一切明了。</p>"},{"title":"Javascript DOM编程艺术学习笔记一（第三章兼高程三）","date":"2017-03-26T12:01:14.000Z","comments":1,"layout":"post","_content":"\n1.Dom基础\n==\n\nElement\n--\n\n- 三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取\n- getElementById  \n\n>  根据Id获取元素节点\n\n- getElementByTagName  \n\n> 根据Html获取元素节点\n\n- getElementByClassName  \n\n> 根据ClassName（class）获取元素节点\n\n<!--more-->\n\n\n高程三中学到\n------\n\nHtml元素\n\n-  id，元素在文档中的唯一标识 -\n- title，有关元素的附加说明信息，一般通过工具提示条显示出来 \n- lang，元素内容的语言比如中文zh-hans \n- dir，语言的方向，值为\"ltr\"（left-to-right，从左至右）或\"rtl\"（right-to-left，从右至左），很少使用\n- className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。\n\n    ```html\n    <div id=\"myDiv\" class=\"bd\" title=\"Body text\" lang=\"en\" dir=\"ltr\">Some text</div>\n    ```\n    可以获得元素中指定的所有信息。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            alert(div.id);         //\"myDiv\"\n            alert(div.className);  //\"bd\"\n            alert(div.title);      //\"Body text\"\n            alert(div.lang);       //\"en\"\n            alert(div.dir);        //\"ltr\"\n    ```\n    还可以为每个属性赋予新的值。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            div.id = \"someOtherId\";\n            div.className = \"ft\";\n            div.title = \"Some other text\";\n            div.lang = \"fr\";\n            div.dir =\"rtl\";   \n    ```\n\n获取和设置属性\n==\n\n- getAttribute\n\n> getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：\n```javascript\nobject.getAttribute(attribute);\n```\n- setAttribute\n> 它允许我们对属性节点的值做出修改。\n```javascroipt\nobject.setAttribute(\"attribute\",value);\n```\n\n","source":"_posts/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.md","raw":"---\ntitle: Javascript DOM编程艺术学习笔记一（第三章兼高程三）\ndate: 2017-03-26 20:01:14\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n1.Dom基础\n==\n\nElement\n--\n\n- 三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取\n- getElementById  \n\n>  根据Id获取元素节点\n\n- getElementByTagName  \n\n> 根据Html获取元素节点\n\n- getElementByClassName  \n\n> 根据ClassName（class）获取元素节点\n\n<!--more-->\n\n\n高程三中学到\n------\n\nHtml元素\n\n-  id，元素在文档中的唯一标识 -\n- title，有关元素的附加说明信息，一般通过工具提示条显示出来 \n- lang，元素内容的语言比如中文zh-hans \n- dir，语言的方向，值为\"ltr\"（left-to-right，从左至右）或\"rtl\"（right-to-left，从右至左），很少使用\n- className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。\n\n    ```html\n    <div id=\"myDiv\" class=\"bd\" title=\"Body text\" lang=\"en\" dir=\"ltr\">Some text</div>\n    ```\n    可以获得元素中指定的所有信息。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            alert(div.id);         //\"myDiv\"\n            alert(div.className);  //\"bd\"\n            alert(div.title);      //\"Body text\"\n            alert(div.lang);       //\"en\"\n            alert(div.dir);        //\"ltr\"\n    ```\n    还可以为每个属性赋予新的值。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            div.id = \"someOtherId\";\n            div.className = \"ft\";\n            div.title = \"Some other text\";\n            div.lang = \"fr\";\n            div.dir =\"rtl\";   \n    ```\n\n获取和设置属性\n==\n\n- getAttribute\n\n> getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：\n```javascript\nobject.getAttribute(attribute);\n```\n- setAttribute\n> 它允许我们对属性节点的值做出修改。\n```javascroipt\nobject.setAttribute(\"attribute\",value);\n```\n\n","slug":"Javascript Dom编程艺术学习笔记一（第三章兼高程三）","published":1,"updated":"2017-12-13T13:43:38.760Z","photos":[],"link":"","_id":"cjollnbpw002wunfyzz9s72e3","content":"<h1 id=\"1-Dom基础\"><a href=\"#1-Dom基础\" class=\"headerlink\" title=\"1.Dom基础\"></a>1.Dom基础</h1><h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><ul>\n<li>三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取</li>\n<li>getElementById  </li>\n</ul>\n<blockquote>\n<p> 根据Id获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByTagName  </li>\n</ul>\n<blockquote>\n<p>根据Html获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByClassName  </li>\n</ul>\n<blockquote>\n<p>根据ClassName（class）获取元素节点</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"高程三中学到\"><a href=\"#高程三中学到\" class=\"headerlink\" title=\"高程三中学到\"></a>高程三中学到</h2><p>Html元素</p>\n<ul>\n<li>id，元素在文档中的唯一标识 -</li>\n<li>title，有关元素的附加说明信息，一般通过工具提示条显示出来 </li>\n<li>lang，元素内容的语言比如中文zh-hans </li>\n<li>dir，语言的方向，值为”ltr”（left-to-right，从左至右）或”rtl”（right-to-left，从右至左），很少使用</li>\n<li><p>className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Body text\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span>Some text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>  可以获得元素中指定的所有信息。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">       alert(div.id);         <span class=\"comment\">//\"myDiv\"</span></span><br><span class=\"line\">       alert(div.className);  <span class=\"comment\">//\"bd\"</span></span><br><span class=\"line\">       alert(div.title);      <span class=\"comment\">//\"Body text\"</span></span><br><span class=\"line\">       alert(div.lang);       <span class=\"comment\">//\"en\"</span></span><br><span class=\"line\">       alert(div.dir);        <span class=\"comment\">//\"ltr\"</span></span><br></pre></td></tr></table></figure>\n<p>  还可以为每个属性赋予新的值。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">       div.id = <span class=\"string\">\"someOtherId\"</span>;</span><br><span class=\"line\">       div.className = <span class=\"string\">\"ft\"</span>;</span><br><span class=\"line\">       div.title = <span class=\"string\">\"Some other text\"</span>;</span><br><span class=\"line\">       div.lang = <span class=\"string\">\"fr\"</span>;</span><br><span class=\"line\">       div.dir =<span class=\"string\">\"rtl\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h1><ul>\n<li>getAttribute</li>\n</ul>\n<blockquote>\n<p>getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.getAttribute(attribute);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>setAttribute<blockquote>\n<p>它允许我们对属性节点的值做出修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.setAttribute(&quot;attribute&quot;,value);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-Dom基础\"><a href=\"#1-Dom基础\" class=\"headerlink\" title=\"1.Dom基础\"></a>1.Dom基础</h1><h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><ul>\n<li>三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取</li>\n<li>getElementById  </li>\n</ul>\n<blockquote>\n<p> 根据Id获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByTagName  </li>\n</ul>\n<blockquote>\n<p>根据Html获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByClassName  </li>\n</ul>\n<blockquote>\n<p>根据ClassName（class）获取元素节点</p>\n</blockquote>","more":"<h2 id=\"高程三中学到\"><a href=\"#高程三中学到\" class=\"headerlink\" title=\"高程三中学到\"></a>高程三中学到</h2><p>Html元素</p>\n<ul>\n<li>id，元素在文档中的唯一标识 -</li>\n<li>title，有关元素的附加说明信息，一般通过工具提示条显示出来 </li>\n<li>lang，元素内容的语言比如中文zh-hans </li>\n<li>dir，语言的方向，值为”ltr”（left-to-right，从左至右）或”rtl”（right-to-left，从右至左），很少使用</li>\n<li><p>className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Body text\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span>Some text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>  可以获得元素中指定的所有信息。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">       alert(div.id);         <span class=\"comment\">//\"myDiv\"</span></span><br><span class=\"line\">       alert(div.className);  <span class=\"comment\">//\"bd\"</span></span><br><span class=\"line\">       alert(div.title);      <span class=\"comment\">//\"Body text\"</span></span><br><span class=\"line\">       alert(div.lang);       <span class=\"comment\">//\"en\"</span></span><br><span class=\"line\">       alert(div.dir);        <span class=\"comment\">//\"ltr\"</span></span><br></pre></td></tr></table></figure>\n<p>  还可以为每个属性赋予新的值。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</span><br><span class=\"line\">       div.id = <span class=\"string\">\"someOtherId\"</span>;</span><br><span class=\"line\">       div.className = <span class=\"string\">\"ft\"</span>;</span><br><span class=\"line\">       div.title = <span class=\"string\">\"Some other text\"</span>;</span><br><span class=\"line\">       div.lang = <span class=\"string\">\"fr\"</span>;</span><br><span class=\"line\">       div.dir =<span class=\"string\">\"rtl\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h1><ul>\n<li>getAttribute</li>\n</ul>\n<blockquote>\n<p>getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.getAttribute(attribute);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>setAttribute<blockquote>\n<p>它允许我们对属性节点的值做出修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">object.setAttribute(&quot;attribute&quot;,value);</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>"},{"title":"JavaScript对象","date":"2017-08-02T14:30:44.000Z","comments":1,"layout":"post","_content":"\n# Javascript对象\n\nJavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式\n\n```javascript\n//声明形式\nvar object = {\n  a:1\n};\n//构造形式\nvar b = new Object();\nb.key = 1;\t//给b添加个属性\n\n```\n<!--more-->\n通过这两种形式我发现一个大问题！\n\n用构造函数去创建对象我们只能通过`.`去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。\n\n\n\n那么我想要得到`b`中`key`的值呢？？\n\n```javascript\nconsole.log(b.key,'.');\nconsole.log(b[\"key\"],'[]');\n```\n\n我们有两种方法可以做到哦！\n\n1. 用`.`操作符通常被我们叫做“属性访问”；\n2. 用`[]`操作符通常被我们叫做“键访问”；\n\n但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！\n\n哦对啦！在ES6中还有个好玩的方法！\n\n```javascript\nvar prev = \"foo\";\n\nvar myObject = {\n  [prev + \"Hello\"] : \"Hello\",\n  [prev + \"World\"] : \"World\",\n}\n\nconsole.log(myObject[\"prevHello\"]); -> Hello\nconsole.log(myObject[\"prevWorld\"]); -> World\n```\n\n这是不是很神奇！我们可以通过`+`号实现了可计算的属性名。\n\n多亏了ES6的`Symbol`,它是一种新的类型，在这我就不多说啦，贴上[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n## 属性描述符\n\n![getOwnPropertyDescriptor](http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png)\n\n> writable：可写的\n>\n> enumerable: 可枚举的\n>\n> configurable: 可配置的\n\n那么如果我做以下操作呢？\n\n```javascript\nObject.defineProperty(myObject, \"a\",{\n  value:2,\n  writable:false,\n  configurable:false,\n  enumerable:false\n})\n```\n\n![defineProperty](http://ozar6ogjb.bkt.clouddn.com/defineProperty.png)\n\n也就是这个`myObject`对象变成了不可写、不可枚举、不可配置啦。\n\n那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！\n\n```javascript\nvar zoo = {};\nObject.defineProperty(myObject, \"cat\",{\n  cat: \"cat\",\n  writable:false,\n  configurable:false,\n})\n```\n\n但是我只想要我的动物园(`zoo`)里只有猫不想要别的小动物了！我只能用`Object.preventExtensions()`来禁止别的小动物进入我的动物园，而且还保留了猫。\n\n```javascript\nvar zoo = {\n  cat: \"cat\"\n};\nObject.Object.preventExtensions(zoo);\n\nzoo.dog = \"dog\";\nzoo.dog; ->//undefined\n```\n\n还有2种方法可以做到不可变(不详细讲解，附上mdn)8：\n\n1. [Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n2. [Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n\n\n在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。\n\n- JavaScript中的对象是无类型的。\n- 对象是属性的容器，其中每个属性都拥有名字和值。\n- JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。\n\n一张简略图\n![简略](http://ozar6ogjb.bkt.clouddn.com/yuanxin.png)\n![\\__proto__与prototype](http://ozar6ogjb.bkt.clouddn.com/_proto_.jpg)\n\n<!--more-->\n\n- 对象最常见的用法\n  - 创建（create）\n  - 设置（set）\n  - 查找（query）\n  - 删除（delete）\n  - 检测（test）\n  - 枚举（enumerate）\n- 每个属性还有一些与之相关的值，称为**属性特性**\n  - 可写\n  - 可枚举\n  - 可配置\n- 除了包含属性之外，每个对象还拥有三个相关的对象特性\n  - 对象的原型(prototype)\n  - 对象的类(class)\n  - 对象的扩展标记\n- 内置对象，如**数组，函数，日期，和正则表达式都是内置对象**\n- 宿主对象，简单的理解就是BOM、DOM和自己定义的对象\n- 自定义对象，就是我们自己创建的对象\n- 自有属性，直接在对象中定义的属性\n- 继承属性，在对象原型对象中定义的属性。\n\n## new创建对象\n`new` 运算符创建并初始化一个新对象。关键字new后跟随一个**函数**调用。\n这个**函数**称做**构造函数**。\n\n## 对象字面量\n\n```JavaScript\nvar empty_project = {};\nvar stooge = {\t\t\t\t//对象字面量\n  \"first-name\": \"Jerome\",\n  \"last-name\": \"Howard\"\n};\n```\n\n一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。\n\n```javascript\nvar flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2014-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival:{\n    IATA: \"LAX\",\n    time: \"2004-09-23 10:42\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。\n\n\n\n## 属性的查询\n\n```javascript\nstooge[\"first-name\"] //Jerome\nflight.departure.IATA //SYD\n```\n\n需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。\n\n但是最好用`.`表示法。因为它可读性好。\n\n我们去检索不存在的：\n\n```JavaScript\nstooge[\"middle-name\"]  //undefined\nflight.status          //undefined\n```\n\n||运算符可以用来填充默认值：\n\n```javascript\nvar middle = stooge[\"middle-name\"] || \"(none)\";\nvar status = flight.status || \"unkown\";\n```\n\n如果我们从undefined的成员属性中取值会导致`TypeError`异常。这时候我们可以通过 `&&` 运算符来避免错误。\n\n```Javascript\nflight.equipment \t\t\t\t\t//undefined\nflight.equipment.model\t\t\t\t//throw \"TypeError\"\nflight.equipment && flight.equipment.model \t//undefined\n```\n\n## 属性的设置\n\n对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。\n\n```JavaScript\nstooge['first-name'] = 'Jerome';\n```\n\n\n\n```javascript\nstooge['middle-name'] = 'Lester';\nstooge.nickname = 'Curly';\nflight.equipment = {\n  model: 'Boeing 777'\n};\nflight.status = 'overdue';\n```\n\n那么这些属性全部会扩充到对象中。\n\n## 关联数组的对象\n`object[\"property\"]`，这个看起来更像数组，但是这个数组元素是通过字符串索引。这种数组就是**关联数组**，别名“散列”，“映射”，“字典”。**JavaScript对象都是关联数组**。\n\n## 引用\n\n对象通过引用来传递，他们永远不会被**复制**\n\n```javascript\nvar x = hi;\nx.hello = 'what';\nvar how = hi.hello;\n\t// how为what。\n//因为x和hi是指向同一个对象的引用。\n\nvar a = {},b = {},c = {};\n//a,b,c每个都引用一个不同的对象\na = b = c = {};\n//a,b,c都是引用同一个空对象\n```\n\n## 原型\n\n每个对象都连接着另一个对象相关联，这个对象就是原型。而且每一个对象都可以从原型继承属性。\n\n所有通过对象字面量创建的对象都连接到`Object.prototype`，它是JavaScript中的标配对象。\n\n那么由new Date()创建的Date对象的属性同时继承自`Date.prototype`和`Object.prototype`。这一系列链接在一起的原型对象，就是我们所说的**原型链**。\n\n```javascript\nif (typeof Object.beget !== 'function'){\n  Object.create = function (o){\n    var F = function (){};\n    F.prototype = o;\n    return new F();\n  };\n}\nvar another_stooge = Object.create(stooge);\n```\n\nObject增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。\n\n### 原型连接在更新时是不起作用的\n\n```javascript\nanother_stooge['first-name'] = 'Harry';\nanother_stooge['middle-name'] = 'Moses';\nanother_stooge.nickname = 'Moe';\n```\n\n> 原型连接只有在检索值得时候才被用到。\n>\n> 如果我们尝试去获取对象的某个属性值，但对象没有此属性名。\n>\n> JavaScript会从原型对象中获取属性值  ——> 原型对象中没，就回去它原型中寻找 ——>直到最后到达终点Object.prototype。\n>\n> 假如想要的属性不存在于原型链，那么结果就只能是undefined。\n>\n> 以上的过程为委托。\n\n### 原型关系\n\n我们添加一个新的属性到**原型**中，该属性会立即对**所有**基于该原型创建的对象可见。\n\n```javascript\nstooge.profession = 'actor';\nanother_stooge.profession  //'actor\n```\n\n## 反射\n\ntypeof操作符对确定属性的类型很有帮助。\n\n```javascript\ntypeof flight.number\t//number\ntypeof flight.status \t//string\ntypeof flight.arrival \t//object\ntypeof flight.manifest \t//undefined\n```\n\n\n\n原型链中的任何值都会产生值\n\n```javascript\ntypeof flight.toString\t\t//function\ntypeof flight.constructor \t//function\n```\n\n\n\n有两种方法去处理掉这些不需要的属性。\n\n- 第一个是让你的程序做检查并丢弃为函数的属性。\n- 另一个方法是`hasOwnProperty` 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链\n\n```JavaScript\nflight.hasOwnProperty('number')\t\t\t//true\nflight.hasOwnProperty('constructor')\t//true\n```\n\n##属性的特性\n\n数据属性的4个特性：\n\n- 它的值\n- 可写性\n- 可枚举性\n- 可配置性\n\n存取器属性的4个特性：\n\n- 读取\n- 写入\n- 可枚举性\n- 可配置性\n\n为了实现属性特性的查询和设置，我们就有了一个名为 **”属性描述符（property descriptor）”**。这个对象代表了那4个**特性**。\n\n数据属性的描述符对象的属性有`value（它的值）`, `writable（可写性）`, `enumerable（可枚举性）`, `configurable（可配置性）`。\n\n存取器属性的描述符对象的属性有`get属性`, `set属性`代替 `value（它的值）`, `writable（可写性）`, `enumerable（可枚举性）`,\t`configurable（可配置性）`。\n\n而且[`writable（可写性）`，`enumerable（可枚举性）`,`configurable（可配置性）`这仨都是布尔值]。\n\n而且get属性和set属性是函数值。\n\n我们通过调用`Object.getOwnPropertyDescriptor()`可以获得某个对象特定属性的属性描述符。\n\n```javascript\nObject.getOwnPropertyDescriptor({x:1},\"x\");\n//返回{ value: 1, writable: true, enumerable: true, configurable: ture }\n```\n\n要想获得继承属性的特性，需要遍历原型链，`Object.getProtorypeOf()`\n\n要想设置属性的特性，需要调用`Object.definePeoperty()`：\n\n```javascript\nvar o = {};\n//添加一个不可枚举的数据熟悉\nObject.definePeoperty(o, \"x\", {\n  value:1,\n  writable:true,\n  enumerable:false,\n  configurable:true,\n});\n//属性是存在的，但是不可枚举\no.x; \t\t\t\t\t\t// => 1\nObject.keys(o);\t\t\t\t// => []\n\n//对属性x做修改，让它变为只读\nObject.defineProperty(o, \"x\",{writable: flase});\n\n//试图去改\no.x = 2;\t\t\t\t//操作失败，但是不报错，在严格模式下会抛出类型错误异常\no.x;\t\t\t\t\t// => 1\n\nObject.definePropetry(o, \"x\", {value:2});\no.x;\t\t\t\t\t// => 2\n\nObject.definePropetry(o, \"x\", {get: function(){return 0;}});\no.x;\t\t\t\t\t// => 0\n```\n\n## 类属性\n\n对象的类属性是一个**字符串**。\n\n##序列化对象\n\n对象序列化是指将对象的状态转换为字符串，也可将字符串还原为对象。\n\n`JSON.stringify()`,`JSON.parse()`用来序列化和还原JavaScript对象。\n\n## 对象方法\n\n### toString()\n\n```javascript\nvar s = {x:1, y:1}.toString();\n\n// => [object, Object]\n```\n\n### toLocaleString()\n\n这个方法返回一个表示这个对象的本地化字符串.\n\n### toJSON()\n\nObject.prototype实际上是没有定义toJSON()方法的，JSON.stringify()方法会调用toJSON()方法。\n\n### valueOf()\n\n这个方法和`toString()`非常类似。\n\n当JavaScript需要将对象转换为某种原始值而非字符串的时候才会调用它，尤其是转换为数字的时候。\n\n## 减少全局变量污染\n\n最小化使用全局变量的方法之一是为你的应用只创建一个**唯一**的全局变量！！\n\n```javascript\nvar MYAPP = {}; \t\t//该变量此时变成你的应用的容器\n\nMYAPP.stooge = {\n  \"first-name\": \"Joe\",\n  \"last-name\": \"Howard\"\n};\nMYAPP.flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2004-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival: {\n    IATA: \"LAX\",\n    time: \"2004-09-23 21:59\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n只要把全局性的资源都纳入一个名称空间之下，你的**程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。**\n\n因为`MYAPP.stooge`指向的是顶层结构。","source":"_posts/Javascript对象.md","raw":"---\ntitle: JavaScript对象\ndate: 2017-11-30 23：23\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# Javascript对象\n\nJavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式\n\n```javascript\n//声明形式\nvar object = {\n  a:1\n};\n//构造形式\nvar b = new Object();\nb.key = 1;\t//给b添加个属性\n\n```\n<!--more-->\n通过这两种形式我发现一个大问题！\n\n用构造函数去创建对象我们只能通过`.`去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。\n\n\n\n那么我想要得到`b`中`key`的值呢？？\n\n```javascript\nconsole.log(b.key,'.');\nconsole.log(b[\"key\"],'[]');\n```\n\n我们有两种方法可以做到哦！\n\n1. 用`.`操作符通常被我们叫做“属性访问”；\n2. 用`[]`操作符通常被我们叫做“键访问”；\n\n但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！\n\n哦对啦！在ES6中还有个好玩的方法！\n\n```javascript\nvar prev = \"foo\";\n\nvar myObject = {\n  [prev + \"Hello\"] : \"Hello\",\n  [prev + \"World\"] : \"World\",\n}\n\nconsole.log(myObject[\"prevHello\"]); -> Hello\nconsole.log(myObject[\"prevWorld\"]); -> World\n```\n\n这是不是很神奇！我们可以通过`+`号实现了可计算的属性名。\n\n多亏了ES6的`Symbol`,它是一种新的类型，在这我就不多说啦，贴上[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n## 属性描述符\n\n![getOwnPropertyDescriptor](http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png)\n\n> writable：可写的\n>\n> enumerable: 可枚举的\n>\n> configurable: 可配置的\n\n那么如果我做以下操作呢？\n\n```javascript\nObject.defineProperty(myObject, \"a\",{\n  value:2,\n  writable:false,\n  configurable:false,\n  enumerable:false\n})\n```\n\n![defineProperty](http://ozar6ogjb.bkt.clouddn.com/defineProperty.png)\n\n也就是这个`myObject`对象变成了不可写、不可枚举、不可配置啦。\n\n那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！\n\n```javascript\nvar zoo = {};\nObject.defineProperty(myObject, \"cat\",{\n  cat: \"cat\",\n  writable:false,\n  configurable:false,\n})\n```\n\n但是我只想要我的动物园(`zoo`)里只有猫不想要别的小动物了！我只能用`Object.preventExtensions()`来禁止别的小动物进入我的动物园，而且还保留了猫。\n\n```javascript\nvar zoo = {\n  cat: \"cat\"\n};\nObject.Object.preventExtensions(zoo);\n\nzoo.dog = \"dog\";\nzoo.dog; ->//undefined\n```\n\n还有2种方法可以做到不可变(不详细讲解，附上mdn)8：\n\n1. [Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n2. [Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n\n\n在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。\n\n- JavaScript中的对象是无类型的。\n- 对象是属性的容器，其中每个属性都拥有名字和值。\n- JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。\n\n一张简略图\n![简略](http://ozar6ogjb.bkt.clouddn.com/yuanxin.png)\n![\\__proto__与prototype](http://ozar6ogjb.bkt.clouddn.com/_proto_.jpg)\n\n<!--more-->\n\n- 对象最常见的用法\n  - 创建（create）\n  - 设置（set）\n  - 查找（query）\n  - 删除（delete）\n  - 检测（test）\n  - 枚举（enumerate）\n- 每个属性还有一些与之相关的值，称为**属性特性**\n  - 可写\n  - 可枚举\n  - 可配置\n- 除了包含属性之外，每个对象还拥有三个相关的对象特性\n  - 对象的原型(prototype)\n  - 对象的类(class)\n  - 对象的扩展标记\n- 内置对象，如**数组，函数，日期，和正则表达式都是内置对象**\n- 宿主对象，简单的理解就是BOM、DOM和自己定义的对象\n- 自定义对象，就是我们自己创建的对象\n- 自有属性，直接在对象中定义的属性\n- 继承属性，在对象原型对象中定义的属性。\n\n## new创建对象\n`new` 运算符创建并初始化一个新对象。关键字new后跟随一个**函数**调用。\n这个**函数**称做**构造函数**。\n\n## 对象字面量\n\n```JavaScript\nvar empty_project = {};\nvar stooge = {\t\t\t\t//对象字面量\n  \"first-name\": \"Jerome\",\n  \"last-name\": \"Howard\"\n};\n```\n\n一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。\n\n```javascript\nvar flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2014-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival:{\n    IATA: \"LAX\",\n    time: \"2004-09-23 10:42\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。\n\n\n\n## 属性的查询\n\n```javascript\nstooge[\"first-name\"] //Jerome\nflight.departure.IATA //SYD\n```\n\n需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。\n\n但是最好用`.`表示法。因为它可读性好。\n\n我们去检索不存在的：\n\n```JavaScript\nstooge[\"middle-name\"]  //undefined\nflight.status          //undefined\n```\n\n||运算符可以用来填充默认值：\n\n```javascript\nvar middle = stooge[\"middle-name\"] || \"(none)\";\nvar status = flight.status || \"unkown\";\n```\n\n如果我们从undefined的成员属性中取值会导致`TypeError`异常。这时候我们可以通过 `&&` 运算符来避免错误。\n\n```Javascript\nflight.equipment \t\t\t\t\t//undefined\nflight.equipment.model\t\t\t\t//throw \"TypeError\"\nflight.equipment && flight.equipment.model \t//undefined\n```\n\n## 属性的设置\n\n对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。\n\n```JavaScript\nstooge['first-name'] = 'Jerome';\n```\n\n\n\n```javascript\nstooge['middle-name'] = 'Lester';\nstooge.nickname = 'Curly';\nflight.equipment = {\n  model: 'Boeing 777'\n};\nflight.status = 'overdue';\n```\n\n那么这些属性全部会扩充到对象中。\n\n## 关联数组的对象\n`object[\"property\"]`，这个看起来更像数组，但是这个数组元素是通过字符串索引。这种数组就是**关联数组**，别名“散列”，“映射”，“字典”。**JavaScript对象都是关联数组**。\n\n## 引用\n\n对象通过引用来传递，他们永远不会被**复制**\n\n```javascript\nvar x = hi;\nx.hello = 'what';\nvar how = hi.hello;\n\t// how为what。\n//因为x和hi是指向同一个对象的引用。\n\nvar a = {},b = {},c = {};\n//a,b,c每个都引用一个不同的对象\na = b = c = {};\n//a,b,c都是引用同一个空对象\n```\n\n## 原型\n\n每个对象都连接着另一个对象相关联，这个对象就是原型。而且每一个对象都可以从原型继承属性。\n\n所有通过对象字面量创建的对象都连接到`Object.prototype`，它是JavaScript中的标配对象。\n\n那么由new Date()创建的Date对象的属性同时继承自`Date.prototype`和`Object.prototype`。这一系列链接在一起的原型对象，就是我们所说的**原型链**。\n\n```javascript\nif (typeof Object.beget !== 'function'){\n  Object.create = function (o){\n    var F = function (){};\n    F.prototype = o;\n    return new F();\n  };\n}\nvar another_stooge = Object.create(stooge);\n```\n\nObject增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。\n\n### 原型连接在更新时是不起作用的\n\n```javascript\nanother_stooge['first-name'] = 'Harry';\nanother_stooge['middle-name'] = 'Moses';\nanother_stooge.nickname = 'Moe';\n```\n\n> 原型连接只有在检索值得时候才被用到。\n>\n> 如果我们尝试去获取对象的某个属性值，但对象没有此属性名。\n>\n> JavaScript会从原型对象中获取属性值  ——> 原型对象中没，就回去它原型中寻找 ——>直到最后到达终点Object.prototype。\n>\n> 假如想要的属性不存在于原型链，那么结果就只能是undefined。\n>\n> 以上的过程为委托。\n\n### 原型关系\n\n我们添加一个新的属性到**原型**中，该属性会立即对**所有**基于该原型创建的对象可见。\n\n```javascript\nstooge.profession = 'actor';\nanother_stooge.profession  //'actor\n```\n\n## 反射\n\ntypeof操作符对确定属性的类型很有帮助。\n\n```javascript\ntypeof flight.number\t//number\ntypeof flight.status \t//string\ntypeof flight.arrival \t//object\ntypeof flight.manifest \t//undefined\n```\n\n\n\n原型链中的任何值都会产生值\n\n```javascript\ntypeof flight.toString\t\t//function\ntypeof flight.constructor \t//function\n```\n\n\n\n有两种方法去处理掉这些不需要的属性。\n\n- 第一个是让你的程序做检查并丢弃为函数的属性。\n- 另一个方法是`hasOwnProperty` 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链\n\n```JavaScript\nflight.hasOwnProperty('number')\t\t\t//true\nflight.hasOwnProperty('constructor')\t//true\n```\n\n##属性的特性\n\n数据属性的4个特性：\n\n- 它的值\n- 可写性\n- 可枚举性\n- 可配置性\n\n存取器属性的4个特性：\n\n- 读取\n- 写入\n- 可枚举性\n- 可配置性\n\n为了实现属性特性的查询和设置，我们就有了一个名为 **”属性描述符（property descriptor）”**。这个对象代表了那4个**特性**。\n\n数据属性的描述符对象的属性有`value（它的值）`, `writable（可写性）`, `enumerable（可枚举性）`, `configurable（可配置性）`。\n\n存取器属性的描述符对象的属性有`get属性`, `set属性`代替 `value（它的值）`, `writable（可写性）`, `enumerable（可枚举性）`,\t`configurable（可配置性）`。\n\n而且[`writable（可写性）`，`enumerable（可枚举性）`,`configurable（可配置性）`这仨都是布尔值]。\n\n而且get属性和set属性是函数值。\n\n我们通过调用`Object.getOwnPropertyDescriptor()`可以获得某个对象特定属性的属性描述符。\n\n```javascript\nObject.getOwnPropertyDescriptor({x:1},\"x\");\n//返回{ value: 1, writable: true, enumerable: true, configurable: ture }\n```\n\n要想获得继承属性的特性，需要遍历原型链，`Object.getProtorypeOf()`\n\n要想设置属性的特性，需要调用`Object.definePeoperty()`：\n\n```javascript\nvar o = {};\n//添加一个不可枚举的数据熟悉\nObject.definePeoperty(o, \"x\", {\n  value:1,\n  writable:true,\n  enumerable:false,\n  configurable:true,\n});\n//属性是存在的，但是不可枚举\no.x; \t\t\t\t\t\t// => 1\nObject.keys(o);\t\t\t\t// => []\n\n//对属性x做修改，让它变为只读\nObject.defineProperty(o, \"x\",{writable: flase});\n\n//试图去改\no.x = 2;\t\t\t\t//操作失败，但是不报错，在严格模式下会抛出类型错误异常\no.x;\t\t\t\t\t// => 1\n\nObject.definePropetry(o, \"x\", {value:2});\no.x;\t\t\t\t\t// => 2\n\nObject.definePropetry(o, \"x\", {get: function(){return 0;}});\no.x;\t\t\t\t\t// => 0\n```\n\n## 类属性\n\n对象的类属性是一个**字符串**。\n\n##序列化对象\n\n对象序列化是指将对象的状态转换为字符串，也可将字符串还原为对象。\n\n`JSON.stringify()`,`JSON.parse()`用来序列化和还原JavaScript对象。\n\n## 对象方法\n\n### toString()\n\n```javascript\nvar s = {x:1, y:1}.toString();\n\n// => [object, Object]\n```\n\n### toLocaleString()\n\n这个方法返回一个表示这个对象的本地化字符串.\n\n### toJSON()\n\nObject.prototype实际上是没有定义toJSON()方法的，JSON.stringify()方法会调用toJSON()方法。\n\n### valueOf()\n\n这个方法和`toString()`非常类似。\n\n当JavaScript需要将对象转换为某种原始值而非字符串的时候才会调用它，尤其是转换为数字的时候。\n\n## 减少全局变量污染\n\n最小化使用全局变量的方法之一是为你的应用只创建一个**唯一**的全局变量！！\n\n```javascript\nvar MYAPP = {}; \t\t//该变量此时变成你的应用的容器\n\nMYAPP.stooge = {\n  \"first-name\": \"Joe\",\n  \"last-name\": \"Howard\"\n};\nMYAPP.flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2004-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival: {\n    IATA: \"LAX\",\n    time: \"2004-09-23 21:59\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n只要把全局性的资源都纳入一个名称空间之下，你的**程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。**\n\n因为`MYAPP.stooge`指向的是顶层结构。","slug":"Javascript对象","published":1,"updated":"2018-03-19T08:24:47.244Z","photos":[],"link":"","_id":"cjollnbpy0030unfyzwy4zup0","content":"<h1 id=\"Javascript对象\"><a href=\"#Javascript对象\" class=\"headerlink\" title=\"Javascript对象\"></a>Javascript对象</h1><p>JavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//构造形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">b.key = <span class=\"number\">1</span>;\t<span class=\"comment\">//给b添加个属性</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>通过这两种形式我发现一个大问题！</p>\n<p>用构造函数去创建对象我们只能通过<code>.</code>去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。</p>\n<p>那么我想要得到<code>b</code>中<code>key</code>的值呢？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.key,<span class=\"string\">'.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"string\">\"key\"</span>],<span class=\"string\">'[]'</span>);</span><br></pre></td></tr></table></figure>\n<p>我们有两种方法可以做到哦！</p>\n<ol>\n<li>用<code>.</code>操作符通常被我们叫做“属性访问”；</li>\n<li>用<code>[]</code>操作符通常被我们叫做“键访问”；</li>\n</ol>\n<p>但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！</p>\n<p>哦对啦！在ES6中还有个好玩的方法！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prev = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  [prev + <span class=\"string\">\"Hello\"</span>] : <span class=\"string\">\"Hello\"</span>,</span><br><span class=\"line\">  [prev + <span class=\"string\">\"World\"</span>] : <span class=\"string\">\"World\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevHello\"</span>]); -&gt; Hello</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevWorld\"</span>]); -&gt; World</span><br></pre></td></tr></table></figure>\n<p>这是不是很神奇！我们可以通过<code>+</code>号实现了可计算的属性名。</p>\n<p>多亏了ES6的<code>Symbol</code>,它是一种新的类型，在这我就不多说啦，贴上<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png\" alt=\"getOwnPropertyDescriptor\"></p>\n<blockquote>\n<p>writable：可写的</p>\n<p>enumerable: 可枚举的</p>\n<p>configurable: 可配置的</p>\n</blockquote>\n<p>那么如果我做以下操作呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"a\"</span>,&#123;</span><br><span class=\"line\">  value:<span class=\"number\">2</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/defineProperty.png\" alt=\"defineProperty\"></p>\n<p>也就是这个<code>myObject</code>对象变成了不可写、不可枚举、不可配置啦。</p>\n<p>那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"cat\"</span>,&#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是我只想要我的动物园(<code>zoo</code>)里只有猫不想要别的小动物了！我只能用<code>Object.preventExtensions()</code>来禁止别的小动物进入我的动物园，而且还保留了猫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.Object.preventExtensions(zoo);</span><br><span class=\"line\"></span><br><span class=\"line\">zoo.dog = <span class=\"string\">\"dog\"</span>;</span><br><span class=\"line\">zoo.dog; -&gt;<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>还有2种方法可以做到不可变(不详细讲解，附上mdn)8：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\">Object.seal()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze()</a></li>\n</ol>\n<p>在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。</p>\n<ul>\n<li>JavaScript中的对象是无类型的。</li>\n<li>对象是属性的容器，其中每个属性都拥有名字和值。</li>\n<li>JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。</li>\n</ul>\n<p>一张简略图<br><img src=\"http://ozar6ogjb.bkt.clouddn.com/yuanxin.png\" alt=\"简略\"><br><img src=\"http://ozar6ogjb.bkt.clouddn.com/_proto_.jpg\" alt=\"\\__proto__与prototype\"></p>\n<!--more-->\n<ul>\n<li>对象最常见的用法<ul>\n<li>创建（create）</li>\n<li>设置（set）</li>\n<li>查找（query）</li>\n<li>删除（delete）</li>\n<li>检测（test）</li>\n<li>枚举（enumerate）</li>\n</ul>\n</li>\n<li>每个属性还有一些与之相关的值，称为<strong>属性特性</strong><ul>\n<li>可写</li>\n<li>可枚举</li>\n<li>可配置</li>\n</ul>\n</li>\n<li>除了包含属性之外，每个对象还拥有三个相关的对象特性<ul>\n<li>对象的原型(prototype)</li>\n<li>对象的类(class)</li>\n<li>对象的扩展标记</li>\n</ul>\n</li>\n<li>内置对象，如<strong>数组，函数，日期，和正则表达式都是内置对象</strong></li>\n<li>宿主对象，简单的理解就是BOM、DOM和自己定义的对象</li>\n<li>自定义对象，就是我们自己创建的对象</li>\n<li>自有属性，直接在对象中定义的属性</li>\n<li>继承属性，在对象原型对象中定义的属性。</li>\n</ul>\n<h2 id=\"new创建对象\"><a href=\"#new创建对象\" class=\"headerlink\" title=\"new创建对象\"></a>new创建对象</h2><p><code>new</code> 运算符创建并初始化一个新对象。关键字new后跟随一个<strong>函数</strong>调用。<br>这个<strong>函数</strong>称做<strong>构造函数</strong>。</p>\n<h2 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty_project = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stooge = &#123;\t\t\t\t<span class=\"comment\">//对象字面量</span></span><br><span class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Jerome\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flight = &#123;</span><br><span class=\"line\">  airline: <span class=\"string\">\"Oceanic\"</span>,</span><br><span class=\"line\">  number: <span class=\"number\">815</span>,</span><br><span class=\"line\">  departure: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"SYD\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2014-09-22 14:55\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Sydney\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  arrival:&#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"LAX\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-23 10:42\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Los Angeles\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。</p>\n<h2 id=\"属性的查询\"><a href=\"#属性的查询\" class=\"headerlink\" title=\"属性的查询\"></a>属性的查询</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">\"first-name\"</span>] <span class=\"comment\">//Jerome</span></span><br><span class=\"line\">flight.departure.IATA <span class=\"comment\">//SYD</span></span><br></pre></td></tr></table></figure>\n<p>需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。</p>\n<p>但是最好用<code>.</code>表示法。因为它可读性好。</p>\n<p>我们去检索不存在的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">\"middle-name\"</span>]  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">flight.status          <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>||运算符可以用来填充默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middle = stooge[<span class=\"string\">\"middle-name\"</span>] || <span class=\"string\">\"(none)\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> status = flight.status || <span class=\"string\">\"unkown\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果我们从undefined的成员属性中取值会导致<code>TypeError</code>异常。这时候我们可以通过 <code>&amp;&amp;</code> 运算符来避免错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flight.equipment \t\t\t\t\t<span class=\"comment\">//undefined</span></span><br><span class=\"line\">flight.equipment.model\t\t\t\t<span class=\"comment\">//throw \"TypeError\"</span></span><br><span class=\"line\">flight.equipment &amp;&amp; flight.equipment.model \t<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性的设置\"><a href=\"#属性的设置\" class=\"headerlink\" title=\"属性的设置\"></a>属性的设置</h2><p>对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Jerome'</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Lester'</span>;</span><br><span class=\"line\">stooge.nickname = <span class=\"string\">'Curly'</span>;</span><br><span class=\"line\">flight.equipment = &#123;</span><br><span class=\"line\">  model: <span class=\"string\">'Boeing 777'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">flight.status = <span class=\"string\">'overdue'</span>;</span><br></pre></td></tr></table></figure>\n<p>那么这些属性全部会扩充到对象中。</p>\n<h2 id=\"关联数组的对象\"><a href=\"#关联数组的对象\" class=\"headerlink\" title=\"关联数组的对象\"></a>关联数组的对象</h2><p><code>object[&quot;property&quot;]</code>，这个看起来更像数组，但是这个数组元素是通过字符串索引。这种数组就是<strong>关联数组</strong>，别名“散列”，“映射”，“字典”。<strong>JavaScript对象都是关联数组</strong>。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>对象通过引用来传递，他们永远不会被<strong>复制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = hi;</span><br><span class=\"line\">x.hello = <span class=\"string\">'what'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> how = hi.hello;</span><br><span class=\"line\">\t<span class=\"comment\">// how为what。</span></span><br><span class=\"line\"><span class=\"comment\">//因为x和hi是指向同一个对象的引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;,b = &#123;&#125;,c = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a,b,c每个都引用一个不同的对象</span></span><br><span class=\"line\">a = b = c = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a,b,c都是引用同一个空对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>每个对象都连接着另一个对象相关联，这个对象就是原型。而且每一个对象都可以从原型继承属性。</p>\n<p>所有通过对象字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p>\n<p>那么由new Date()创建的Date对象的属性同时继承自<code>Date.prototype</code>和<code>Object.prototype</code>。这一系列链接在一起的原型对象，就是我们所说的<strong>原型链</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.beget !== <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> another_stooge = <span class=\"built_in\">Object</span>.create(stooge);</span><br></pre></td></tr></table></figure>\n<p>Object增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。</p>\n<h3 id=\"原型连接在更新时是不起作用的\"><a href=\"#原型连接在更新时是不起作用的\" class=\"headerlink\" title=\"原型连接在更新时是不起作用的\"></a>原型连接在更新时是不起作用的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">another_stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Harry'</span>;</span><br><span class=\"line\">another_stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Moses'</span>;</span><br><span class=\"line\">another_stooge.nickname = <span class=\"string\">'Moe'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原型连接只有在检索值得时候才被用到。</p>\n<p>如果我们尝试去获取对象的某个属性值，但对象没有此属性名。</p>\n<p>JavaScript会从原型对象中获取属性值  ——&gt; 原型对象中没，就回去它原型中寻找 ——&gt;直到最后到达终点Object.prototype。</p>\n<p>假如想要的属性不存在于原型链，那么结果就只能是undefined。</p>\n<p>以上的过程为委托。</p>\n</blockquote>\n<h3 id=\"原型关系\"><a href=\"#原型关系\" class=\"headerlink\" title=\"原型关系\"></a>原型关系</h3><p>我们添加一个新的属性到<strong>原型</strong>中，该属性会立即对<strong>所有</strong>基于该原型创建的对象可见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge.profession = <span class=\"string\">'actor'</span>;</span><br><span class=\"line\">another_stooge.profession  <span class=\"comment\">//'actor</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>typeof操作符对确定属性的类型很有帮助。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> flight.number\t<span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.status \t<span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.arrival \t<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.manifest \t<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>原型链中的任何值都会产生值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> flight.toString\t\t<span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.constructor \t<span class=\"comment\">//function</span></span><br></pre></td></tr></table></figure>\n<p>有两种方法去处理掉这些不需要的属性。</p>\n<ul>\n<li>第一个是让你的程序做检查并丢弃为函数的属性。</li>\n<li>另一个方法是<code>hasOwnProperty</code> 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flight.hasOwnProperty(<span class=\"string\">'number'</span>)\t\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">flight.hasOwnProperty(<span class=\"string\">'constructor'</span>)\t<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>##属性的特性</p>\n<p>数据属性的4个特性：</p>\n<ul>\n<li>它的值</li>\n<li>可写性</li>\n<li>可枚举性</li>\n<li>可配置性</li>\n</ul>\n<p>存取器属性的4个特性：</p>\n<ul>\n<li>读取</li>\n<li>写入</li>\n<li>可枚举性</li>\n<li>可配置性</li>\n</ul>\n<p>为了实现属性特性的查询和设置，我们就有了一个名为 <strong>”属性描述符（property descriptor）”</strong>。这个对象代表了那4个<strong>特性</strong>。</p>\n<p>数据属性的描述符对象的属性有<code>value（它的值）</code>, <code>writable（可写性）</code>, <code>enumerable（可枚举性）</code>, <code>configurable（可配置性）</code>。</p>\n<p>存取器属性的描述符对象的属性有<code>get属性</code>, <code>set属性</code>代替 <code>value（它的值）</code>, <code>writable（可写性）</code>, <code>enumerable（可枚举性）</code>,    <code>configurable（可配置性）</code>。</p>\n<p>而且[<code>writable（可写性）</code>，<code>enumerable（可枚举性）</code>,<code>configurable（可配置性）</code>这仨都是布尔值]。</p>\n<p>而且get属性和set属性是函数值。</p>\n<p>我们通过调用<code>Object.getOwnPropertyDescriptor()</code>可以获得某个对象特定属性的属性描述符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,<span class=\"string\">\"x\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回&#123; value: 1, writable: true, enumerable: true, configurable: ture &#125;</span></span><br></pre></td></tr></table></figure>\n<p>要想获得继承属性的特性，需要遍历原型链，<code>Object.getProtorypeOf()</code></p>\n<p>要想设置属性的特性，需要调用<code>Object.definePeoperty()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//添加一个不可枚举的数据熟悉</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePeoperty(o, <span class=\"string\">\"x\"</span>, &#123;</span><br><span class=\"line\">  value:<span class=\"number\">1</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//属性是存在的，但是不可枚举</span></span><br><span class=\"line\">o.x; \t\t\t\t\t\t<span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(o);\t\t\t\t<span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对属性x做修改，让它变为只读</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o, <span class=\"string\">\"x\"</span>,&#123;<span class=\"attr\">writable</span>: flase&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//试图去改</span></span><br><span class=\"line\">o.x = <span class=\"number\">2</span>;\t\t\t\t<span class=\"comment\">//操作失败，但是不报错，在严格模式下会抛出类型错误异常</span></span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePropetry(o, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">value</span>:<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePropetry(o, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;&#125;);</span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h2><p>对象的类属性是一个<strong>字符串</strong>。</p>\n<p>##序列化对象</p>\n<p>对象序列化是指将对象的状态转换为字符串，也可将字符串还原为对象。</p>\n<p><code>JSON.stringify()</code>,<code>JSON.parse()</code>用来序列化和还原JavaScript对象。</p>\n<h2 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h2><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">1</span>&#125;.toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [object, Object]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"toLocaleString-NaN\"><a href=\"#toLocaleString-NaN\" class=\"headerlink\" title=\"toLocaleString()\"></a>toLocaleString()</h3><p>这个方法返回一个表示这个对象的本地化字符串.</p>\n<h3 id=\"toJSON\"><a href=\"#toJSON\" class=\"headerlink\" title=\"toJSON()\"></a>toJSON()</h3><p>Object.prototype实际上是没有定义toJSON()方法的，JSON.stringify()方法会调用toJSON()方法。</p>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><p>这个方法和<code>toString()</code>非常类似。</p>\n<p>当JavaScript需要将对象转换为某种原始值而非字符串的时候才会调用它，尤其是转换为数字的时候。</p>\n<h2 id=\"减少全局变量污染\"><a href=\"#减少全局变量污染\" class=\"headerlink\" title=\"减少全局变量污染\"></a>减少全局变量污染</h2><p>最小化使用全局变量的方法之一是为你的应用只创建一个<strong>唯一</strong>的全局变量！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;; \t\t<span class=\"comment\">//该变量此时变成你的应用的容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP.stooge = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Joe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MYAPP.flight = &#123;</span><br><span class=\"line\">  airline: <span class=\"string\">\"Oceanic\"</span>,</span><br><span class=\"line\">  number: <span class=\"number\">815</span>,</span><br><span class=\"line\">  departure: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"SYD\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-22 14:55\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Sydney\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  arrival: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"LAX\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-23 21:59\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Los Angeles\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>只要把全局性的资源都纳入一个名称空间之下，你的<strong>程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。</strong></p>\n<p>因为<code>MYAPP.stooge</code>指向的是顶层结构。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Javascript对象\"><a href=\"#Javascript对象\" class=\"headerlink\" title=\"Javascript对象\"></a>Javascript对象</h1><p>JavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//构造形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">b.key = <span class=\"number\">1</span>;\t<span class=\"comment\">//给b添加个属性</span></span><br></pre></td></tr></table></figure>","more":"<p>通过这两种形式我发现一个大问题！</p>\n<p>用构造函数去创建对象我们只能通过<code>.</code>去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。</p>\n<p>那么我想要得到<code>b</code>中<code>key</code>的值呢？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.key,<span class=\"string\">'.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"string\">\"key\"</span>],<span class=\"string\">'[]'</span>);</span><br></pre></td></tr></table></figure>\n<p>我们有两种方法可以做到哦！</p>\n<ol>\n<li>用<code>.</code>操作符通常被我们叫做“属性访问”；</li>\n<li>用<code>[]</code>操作符通常被我们叫做“键访问”；</li>\n</ol>\n<p>但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！</p>\n<p>哦对啦！在ES6中还有个好玩的方法！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prev = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  [prev + <span class=\"string\">\"Hello\"</span>] : <span class=\"string\">\"Hello\"</span>,</span><br><span class=\"line\">  [prev + <span class=\"string\">\"World\"</span>] : <span class=\"string\">\"World\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevHello\"</span>]); -&gt; Hello</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevWorld\"</span>]); -&gt; World</span><br></pre></td></tr></table></figure>\n<p>这是不是很神奇！我们可以通过<code>+</code>号实现了可计算的属性名。</p>\n<p>多亏了ES6的<code>Symbol</code>,它是一种新的类型，在这我就不多说啦，贴上<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png\" alt=\"getOwnPropertyDescriptor\"></p>\n<blockquote>\n<p>writable：可写的</p>\n<p>enumerable: 可枚举的</p>\n<p>configurable: 可配置的</p>\n</blockquote>\n<p>那么如果我做以下操作呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"a\"</span>,&#123;</span><br><span class=\"line\">  value:<span class=\"number\">2</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/defineProperty.png\" alt=\"defineProperty\"></p>\n<p>也就是这个<code>myObject</code>对象变成了不可写、不可枚举、不可配置啦。</p>\n<p>那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"cat\"</span>,&#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是我只想要我的动物园(<code>zoo</code>)里只有猫不想要别的小动物了！我只能用<code>Object.preventExtensions()</code>来禁止别的小动物进入我的动物园，而且还保留了猫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.Object.preventExtensions(zoo);</span><br><span class=\"line\"></span><br><span class=\"line\">zoo.dog = <span class=\"string\">\"dog\"</span>;</span><br><span class=\"line\">zoo.dog; -&gt;<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>还有2种方法可以做到不可变(不详细讲解，附上mdn)8：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\">Object.seal()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze()</a></li>\n</ol>\n<p>在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。</p>\n<ul>\n<li>JavaScript中的对象是无类型的。</li>\n<li>对象是属性的容器，其中每个属性都拥有名字和值。</li>\n<li>JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。</li>\n</ul>\n<p>一张简略图<br><img src=\"http://ozar6ogjb.bkt.clouddn.com/yuanxin.png\" alt=\"简略\"><br><img src=\"http://ozar6ogjb.bkt.clouddn.com/_proto_.jpg\" alt=\"\\__proto__与prototype\"></p>\n<!--more-->\n<ul>\n<li>对象最常见的用法<ul>\n<li>创建（create）</li>\n<li>设置（set）</li>\n<li>查找（query）</li>\n<li>删除（delete）</li>\n<li>检测（test）</li>\n<li>枚举（enumerate）</li>\n</ul>\n</li>\n<li>每个属性还有一些与之相关的值，称为<strong>属性特性</strong><ul>\n<li>可写</li>\n<li>可枚举</li>\n<li>可配置</li>\n</ul>\n</li>\n<li>除了包含属性之外，每个对象还拥有三个相关的对象特性<ul>\n<li>对象的原型(prototype)</li>\n<li>对象的类(class)</li>\n<li>对象的扩展标记</li>\n</ul>\n</li>\n<li>内置对象，如<strong>数组，函数，日期，和正则表达式都是内置对象</strong></li>\n<li>宿主对象，简单的理解就是BOM、DOM和自己定义的对象</li>\n<li>自定义对象，就是我们自己创建的对象</li>\n<li>自有属性，直接在对象中定义的属性</li>\n<li>继承属性，在对象原型对象中定义的属性。</li>\n</ul>\n<h2 id=\"new创建对象\"><a href=\"#new创建对象\" class=\"headerlink\" title=\"new创建对象\"></a>new创建对象</h2><p><code>new</code> 运算符创建并初始化一个新对象。关键字new后跟随一个<strong>函数</strong>调用。<br>这个<strong>函数</strong>称做<strong>构造函数</strong>。</p>\n<h2 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> empty_project = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stooge = &#123;\t\t\t\t<span class=\"comment\">//对象字面量</span></span><br><span class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Jerome\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flight = &#123;</span><br><span class=\"line\">  airline: <span class=\"string\">\"Oceanic\"</span>,</span><br><span class=\"line\">  number: <span class=\"number\">815</span>,</span><br><span class=\"line\">  departure: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"SYD\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2014-09-22 14:55\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Sydney\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  arrival:&#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"LAX\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-23 10:42\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Los Angeles\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。</p>\n<h2 id=\"属性的查询\"><a href=\"#属性的查询\" class=\"headerlink\" title=\"属性的查询\"></a>属性的查询</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">\"first-name\"</span>] <span class=\"comment\">//Jerome</span></span><br><span class=\"line\">flight.departure.IATA <span class=\"comment\">//SYD</span></span><br></pre></td></tr></table></figure>\n<p>需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。</p>\n<p>但是最好用<code>.</code>表示法。因为它可读性好。</p>\n<p>我们去检索不存在的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">\"middle-name\"</span>]  <span class=\"comment\">//undefined</span></span><br><span class=\"line\">flight.status          <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>||运算符可以用来填充默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> middle = stooge[<span class=\"string\">\"middle-name\"</span>] || <span class=\"string\">\"(none)\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> status = flight.status || <span class=\"string\">\"unkown\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果我们从undefined的成员属性中取值会导致<code>TypeError</code>异常。这时候我们可以通过 <code>&amp;&amp;</code> 运算符来避免错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flight.equipment \t\t\t\t\t<span class=\"comment\">//undefined</span></span><br><span class=\"line\">flight.equipment.model\t\t\t\t<span class=\"comment\">//throw \"TypeError\"</span></span><br><span class=\"line\">flight.equipment &amp;&amp; flight.equipment.model \t<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性的设置\"><a href=\"#属性的设置\" class=\"headerlink\" title=\"属性的设置\"></a>属性的设置</h2><p>对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Jerome'</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Lester'</span>;</span><br><span class=\"line\">stooge.nickname = <span class=\"string\">'Curly'</span>;</span><br><span class=\"line\">flight.equipment = &#123;</span><br><span class=\"line\">  model: <span class=\"string\">'Boeing 777'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">flight.status = <span class=\"string\">'overdue'</span>;</span><br></pre></td></tr></table></figure>\n<p>那么这些属性全部会扩充到对象中。</p>\n<h2 id=\"关联数组的对象\"><a href=\"#关联数组的对象\" class=\"headerlink\" title=\"关联数组的对象\"></a>关联数组的对象</h2><p><code>object[&quot;property&quot;]</code>，这个看起来更像数组，但是这个数组元素是通过字符串索引。这种数组就是<strong>关联数组</strong>，别名“散列”，“映射”，“字典”。<strong>JavaScript对象都是关联数组</strong>。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>对象通过引用来传递，他们永远不会被<strong>复制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = hi;</span><br><span class=\"line\">x.hello = <span class=\"string\">'what'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> how = hi.hello;</span><br><span class=\"line\">\t<span class=\"comment\">// how为what。</span></span><br><span class=\"line\"><span class=\"comment\">//因为x和hi是指向同一个对象的引用。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;,b = &#123;&#125;,c = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a,b,c每个都引用一个不同的对象</span></span><br><span class=\"line\">a = b = c = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//a,b,c都是引用同一个空对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h2><p>每个对象都连接着另一个对象相关联，这个对象就是原型。而且每一个对象都可以从原型继承属性。</p>\n<p>所有通过对象字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p>\n<p>那么由new Date()创建的Date对象的属性同时继承自<code>Date.prototype</code>和<code>Object.prototype</code>。这一系列链接在一起的原型对象，就是我们所说的<strong>原型链</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.beget !== <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> another_stooge = <span class=\"built_in\">Object</span>.create(stooge);</span><br></pre></td></tr></table></figure>\n<p>Object增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。</p>\n<h3 id=\"原型连接在更新时是不起作用的\"><a href=\"#原型连接在更新时是不起作用的\" class=\"headerlink\" title=\"原型连接在更新时是不起作用的\"></a>原型连接在更新时是不起作用的</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">another_stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Harry'</span>;</span><br><span class=\"line\">another_stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Moses'</span>;</span><br><span class=\"line\">another_stooge.nickname = <span class=\"string\">'Moe'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原型连接只有在检索值得时候才被用到。</p>\n<p>如果我们尝试去获取对象的某个属性值，但对象没有此属性名。</p>\n<p>JavaScript会从原型对象中获取属性值  ——&gt; 原型对象中没，就回去它原型中寻找 ——&gt;直到最后到达终点Object.prototype。</p>\n<p>假如想要的属性不存在于原型链，那么结果就只能是undefined。</p>\n<p>以上的过程为委托。</p>\n</blockquote>\n<h3 id=\"原型关系\"><a href=\"#原型关系\" class=\"headerlink\" title=\"原型关系\"></a>原型关系</h3><p>我们添加一个新的属性到<strong>原型</strong>中，该属性会立即对<strong>所有</strong>基于该原型创建的对象可见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stooge.profession = <span class=\"string\">'actor'</span>;</span><br><span class=\"line\">another_stooge.profession  <span class=\"comment\">//'actor</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><p>typeof操作符对确定属性的类型很有帮助。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> flight.number\t<span class=\"comment\">//number</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.status \t<span class=\"comment\">//string</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.arrival \t<span class=\"comment\">//object</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.manifest \t<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>原型链中的任何值都会产生值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> flight.toString\t\t<span class=\"comment\">//function</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> flight.constructor \t<span class=\"comment\">//function</span></span><br></pre></td></tr></table></figure>\n<p>有两种方法去处理掉这些不需要的属性。</p>\n<ul>\n<li>第一个是让你的程序做检查并丢弃为函数的属性。</li>\n<li>另一个方法是<code>hasOwnProperty</code> 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flight.hasOwnProperty(<span class=\"string\">'number'</span>)\t\t\t<span class=\"comment\">//true</span></span><br><span class=\"line\">flight.hasOwnProperty(<span class=\"string\">'constructor'</span>)\t<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>##属性的特性</p>\n<p>数据属性的4个特性：</p>\n<ul>\n<li>它的值</li>\n<li>可写性</li>\n<li>可枚举性</li>\n<li>可配置性</li>\n</ul>\n<p>存取器属性的4个特性：</p>\n<ul>\n<li>读取</li>\n<li>写入</li>\n<li>可枚举性</li>\n<li>可配置性</li>\n</ul>\n<p>为了实现属性特性的查询和设置，我们就有了一个名为 <strong>”属性描述符（property descriptor）”</strong>。这个对象代表了那4个<strong>特性</strong>。</p>\n<p>数据属性的描述符对象的属性有<code>value（它的值）</code>, <code>writable（可写性）</code>, <code>enumerable（可枚举性）</code>, <code>configurable（可配置性）</code>。</p>\n<p>存取器属性的描述符对象的属性有<code>get属性</code>, <code>set属性</code>代替 <code>value（它的值）</code>, <code>writable（可写性）</code>, <code>enumerable（可枚举性）</code>,    <code>configurable（可配置性）</code>。</p>\n<p>而且[<code>writable（可写性）</code>，<code>enumerable（可枚举性）</code>,<code>configurable（可配置性）</code>这仨都是布尔值]。</p>\n<p>而且get属性和set属性是函数值。</p>\n<p>我们通过调用<code>Object.getOwnPropertyDescriptor()</code>可以获得某个对象特定属性的属性描述符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,<span class=\"string\">\"x\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回&#123; value: 1, writable: true, enumerable: true, configurable: ture &#125;</span></span><br></pre></td></tr></table></figure>\n<p>要想获得继承属性的特性，需要遍历原型链，<code>Object.getProtorypeOf()</code></p>\n<p>要想设置属性的特性，需要调用<code>Object.definePeoperty()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//添加一个不可枚举的数据熟悉</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePeoperty(o, <span class=\"string\">\"x\"</span>, &#123;</span><br><span class=\"line\">  value:<span class=\"number\">1</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//属性是存在的，但是不可枚举</span></span><br><span class=\"line\">o.x; \t\t\t\t\t\t<span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(o);\t\t\t\t<span class=\"comment\">// =&gt; []</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对属性x做修改，让它变为只读</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(o, <span class=\"string\">\"x\"</span>,&#123;<span class=\"attr\">writable</span>: flase&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//试图去改</span></span><br><span class=\"line\">o.x = <span class=\"number\">2</span>;\t\t\t\t<span class=\"comment\">//操作失败，但是不报错，在严格模式下会抛出类型错误异常</span></span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePropetry(o, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">value</span>:<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.definePropetry(o, <span class=\"string\">\"x\"</span>, &#123;<span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;&#125;);</span><br><span class=\"line\">o.x;\t\t\t\t\t<span class=\"comment\">// =&gt; 0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类属性\"><a href=\"#类属性\" class=\"headerlink\" title=\"类属性\"></a>类属性</h2><p>对象的类属性是一个<strong>字符串</strong>。</p>\n<p>##序列化对象</p>\n<p>对象序列化是指将对象的状态转换为字符串，也可将字符串还原为对象。</p>\n<p><code>JSON.stringify()</code>,<code>JSON.parse()</code>用来序列化和还原JavaScript对象。</p>\n<h2 id=\"对象方法\"><a href=\"#对象方法\" class=\"headerlink\" title=\"对象方法\"></a>对象方法</h2><h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">1</span>&#125;.toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// =&gt; [object, Object]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"toLocaleString-NaN\"><a href=\"#toLocaleString-NaN\" class=\"headerlink\" title=\"toLocaleString()\"></a>toLocaleString()</h3><p>这个方法返回一个表示这个对象的本地化字符串.</p>\n<h3 id=\"toJSON\"><a href=\"#toJSON\" class=\"headerlink\" title=\"toJSON()\"></a>toJSON()</h3><p>Object.prototype实际上是没有定义toJSON()方法的，JSON.stringify()方法会调用toJSON()方法。</p>\n<h3 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h3><p>这个方法和<code>toString()</code>非常类似。</p>\n<p>当JavaScript需要将对象转换为某种原始值而非字符串的时候才会调用它，尤其是转换为数字的时候。</p>\n<h2 id=\"减少全局变量污染\"><a href=\"#减少全局变量污染\" class=\"headerlink\" title=\"减少全局变量污染\"></a>减少全局变量污染</h2><p>最小化使用全局变量的方法之一是为你的应用只创建一个<strong>唯一</strong>的全局变量！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;; \t\t<span class=\"comment\">//该变量此时变成你的应用的容器</span></span><br><span class=\"line\"></span><br><span class=\"line\">MYAPP.stooge = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Joe\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MYAPP.flight = &#123;</span><br><span class=\"line\">  airline: <span class=\"string\">\"Oceanic\"</span>,</span><br><span class=\"line\">  number: <span class=\"number\">815</span>,</span><br><span class=\"line\">  departure: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"SYD\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-22 14:55\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Sydney\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  arrival: &#123;</span><br><span class=\"line\">    IATA: <span class=\"string\">\"LAX\"</span>,</span><br><span class=\"line\">    time: <span class=\"string\">\"2004-09-23 21:59\"</span>,</span><br><span class=\"line\">    city: <span class=\"string\">\"Los Angeles\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>只要把全局性的资源都纳入一个名称空间之下，你的<strong>程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。</strong></p>\n<p>因为<code>MYAPP.stooge</code>指向的是顶层结构。</p>"},{"title":"Mongoose小试牛刀","date":"2018-05-07T11:32:51.537Z","updated":"2018-05-08T13:49:29.000Z","comments":1,"layout":"post","_content":"# Mongoose小试牛刀\n\n## 认识下Mongodb：\n* 文档(document) \n  ![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png)\n* 集合（Collection）\n  * document存于collection\n* 数据库（database）\n  * 里面有很多collection\n\n<!--more-->\n## 在mongoose中：\n* Schema -> collection，不具备数据库的操作能力\n* Model -> 由Schema生成的模型，能操作数据库\n* Entity -> 由Model创建的实例，也能操作数据库\n\n## 创建schema\n```typescript\nimport * as mongoose from 'mongoose';\n\nexport interface UserType extends mongoose.Document {\n  name: String\n}\nexport let userSchema = new mongoose.Schema({\n  name: String,\n}, {collection: 'user'})\n\nlet User = mongoose.model<UserType>('User', userSchema)\n\nexport default User;\n```\n在这里我们会遇到一个问题，如果我们不添加`collections: 'user'`之后会发现会创建一个名为 `users` 的 `collection` 的表名。\n还有个方法自定义 `collection` 名：\n```typescript\nlet User = mongoose.model<UserType>('User', userSchema, 'user')\n```\n二选一！\n## 创建model\n1. \n```typescript\nimport User, { UserType } from '../schemas/User';\n\nlet UserModel = new User({name: \"xzh\"});\nUserModel.save(((err: any, product: UserType )=> {\n  if(err) return console.error(err);\n  console.log(product, '结果');\n}))\n\nexport default UserModel;\n```\n这有个小插曲，我们也可以不定义一个 `UserModel` 去向数据库写入数据：\n2. \n```typescript\nimport User, { UserType } from '../schemas/User';\n\nexport default User.create({name: \"xzh\"}, (err: any, res: any) => {\n  if(err) return console.error(err);\n  console.log(res, '结果')\n})\n```\n\n因为前面也提到了在 `mongoose` 中还有个 `Entity` 的存在。\n第1种是 `entity` 保存方法。\n第2种是 `model` 保存方法。","source":"_posts/Mongoose小试牛刀.md","raw":"---\ntitle: Mongoose小试牛刀\ndate: 2018-05-07 19：33\nupdated: 2018-05-08 21:49:29\ncomments: true\nlayout: post\ntags: [Mongodb,数据库]\ncategories: [数据库]\n---\n# Mongoose小试牛刀\n\n## 认识下Mongodb：\n* 文档(document) \n  ![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png)\n* 集合（Collection）\n  * document存于collection\n* 数据库（database）\n  * 里面有很多collection\n\n<!--more-->\n## 在mongoose中：\n* Schema -> collection，不具备数据库的操作能力\n* Model -> 由Schema生成的模型，能操作数据库\n* Entity -> 由Model创建的实例，也能操作数据库\n\n## 创建schema\n```typescript\nimport * as mongoose from 'mongoose';\n\nexport interface UserType extends mongoose.Document {\n  name: String\n}\nexport let userSchema = new mongoose.Schema({\n  name: String,\n}, {collection: 'user'})\n\nlet User = mongoose.model<UserType>('User', userSchema)\n\nexport default User;\n```\n在这里我们会遇到一个问题，如果我们不添加`collections: 'user'`之后会发现会创建一个名为 `users` 的 `collection` 的表名。\n还有个方法自定义 `collection` 名：\n```typescript\nlet User = mongoose.model<UserType>('User', userSchema, 'user')\n```\n二选一！\n## 创建model\n1. \n```typescript\nimport User, { UserType } from '../schemas/User';\n\nlet UserModel = new User({name: \"xzh\"});\nUserModel.save(((err: any, product: UserType )=> {\n  if(err) return console.error(err);\n  console.log(product, '结果');\n}))\n\nexport default UserModel;\n```\n这有个小插曲，我们也可以不定义一个 `UserModel` 去向数据库写入数据：\n2. \n```typescript\nimport User, { UserType } from '../schemas/User';\n\nexport default User.create({name: \"xzh\"}, (err: any, res: any) => {\n  if(err) return console.error(err);\n  console.log(res, '结果')\n})\n```\n\n因为前面也提到了在 `mongoose` 中还有个 `Entity` 的存在。\n第1种是 `entity` 保存方法。\n第2种是 `model` 保存方法。","slug":"Mongoose小试牛刀","published":1,"photos":[],"link":"","_id":"cjollnbq50034unfybvqdmpkw","content":"<h1 id=\"Mongoose小试牛刀\"><a href=\"#Mongoose小试牛刀\" class=\"headerlink\" title=\"Mongoose小试牛刀\"></a>Mongoose小试牛刀</h1><h2 id=\"认识下Mongodb：\"><a href=\"#认识下Mongodb：\" class=\"headerlink\" title=\"认识下Mongodb：\"></a>认识下Mongodb：</h2><ul>\n<li>文档(document)<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png\" alt=\"\"></li>\n<li>集合（Collection）<ul>\n<li>document存于collection</li>\n</ul>\n</li>\n<li>数据库（database）<ul>\n<li>里面有很多collection</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"在mongoose中：\"><a href=\"#在mongoose中：\" class=\"headerlink\" title=\"在mongoose中：\"></a>在mongoose中：</h2><ul>\n<li>Schema -&gt; collection，不具备数据库的操作能力</li>\n<li>Model -&gt; 由Schema生成的模型，能操作数据库</li>\n<li>Entity -&gt; 由Model创建的实例，也能操作数据库</li>\n</ul>\n<h2 id=\"创建schema\"><a href=\"#创建schema\" class=\"headerlink\" title=\"创建schema\"></a>创建schema</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> UserType <span class=\"keyword\">extends</span> mongoose.Document &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;, &#123;collection: <span class=\"string\">'user'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> User = mongoose.model&lt;UserType&gt;(<span class=\"string\">'User'</span>, userSchema)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> User;</span><br></pre></td></tr></table></figure>\n<p>在这里我们会遇到一个问题，如果我们不添加<code>collections: &#39;user&#39;</code>之后会发现会创建一个名为 <code>users</code> 的 <code>collection</code> 的表名。<br>还有个方法自定义 <code>collection</code> 名：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> User = mongoose.model&lt;UserType&gt;(<span class=\"string\">'User'</span>, userSchema, <span class=\"string\">'user'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>二选一！</p>\n<h2 id=\"创建model\"><a href=\"#创建model\" class=\"headerlink\" title=\"创建model\"></a>创建model</h2><ol>\n<li><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> User, &#123; UserType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/User'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> UserModel = <span class=\"keyword\">new</span> User(&#123;name: <span class=\"string\">\"xzh\"</span>&#125;);</span><br><span class=\"line\">UserModel.save(<span class=\"function\">(<span class=\"params\">(<span class=\"params\">err: <span class=\"built_in\">any</span>, product: UserType </span>)=&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">if</span>(<span class=\"params\">err</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"params\">err</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">console</span>.log(<span class=\"params\">product, '结果'</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">export</span> <span class=\"params\">default</span> <span class=\"params\">UserModel</span>;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这有个小插曲，我们也可以不定义一个 <code>UserModel</code> 去向数据库写入数据：</p>\n<ol start=\"2\">\n<li><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> User, &#123; UserType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/User'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> User.create(&#123;name: <span class=\"string\">\"xzh\"</span>&#125;, <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">any</span>, res: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"string\">'结果'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为前面也提到了在 <code>mongoose</code> 中还有个 <code>Entity</code> 的存在。<br>第1种是 <code>entity</code> 保存方法。<br>第2种是 <code>model</code> 保存方法。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mongoose小试牛刀\"><a href=\"#Mongoose小试牛刀\" class=\"headerlink\" title=\"Mongoose小试牛刀\"></a>Mongoose小试牛刀</h1><h2 id=\"认识下Mongodb：\"><a href=\"#认识下Mongodb：\" class=\"headerlink\" title=\"认识下Mongodb：\"></a>认识下Mongodb：</h2><ul>\n<li>文档(document)<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/mongodb-Document.png\" alt=\"\"></li>\n<li>集合（Collection）<ul>\n<li>document存于collection</li>\n</ul>\n</li>\n<li>数据库（database）<ul>\n<li>里面有很多collection</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"在mongoose中：\"><a href=\"#在mongoose中：\" class=\"headerlink\" title=\"在mongoose中：\"></a>在mongoose中：</h2><ul>\n<li>Schema -&gt; collection，不具备数据库的操作能力</li>\n<li>Model -&gt; 由Schema生成的模型，能操作数据库</li>\n<li>Entity -&gt; 由Model创建的实例，也能操作数据库</li>\n</ul>\n<h2 id=\"创建schema\"><a href=\"#创建schema\" class=\"headerlink\" title=\"创建schema\"></a>创建schema</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> mongoose <span class=\"keyword\">from</span> <span class=\"string\">'mongoose'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> UserType <span class=\"keyword\">extends</span> mongoose.Document &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> userSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;, &#123;collection: <span class=\"string\">'user'</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> User = mongoose.model&lt;UserType&gt;(<span class=\"string\">'User'</span>, userSchema)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> User;</span><br></pre></td></tr></table></figure>\n<p>在这里我们会遇到一个问题，如果我们不添加<code>collections: &#39;user&#39;</code>之后会发现会创建一个名为 <code>users</code> 的 <code>collection</code> 的表名。<br>还有个方法自定义 <code>collection</code> 名：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> User = mongoose.model&lt;UserType&gt;(<span class=\"string\">'User'</span>, userSchema, <span class=\"string\">'user'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>二选一！</p>\n<h2 id=\"创建model\"><a href=\"#创建model\" class=\"headerlink\" title=\"创建model\"></a>创建model</h2><ol>\n<li><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> User, &#123; UserType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/User'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> UserModel = <span class=\"keyword\">new</span> User(&#123;name: <span class=\"string\">\"xzh\"</span>&#125;);</span><br><span class=\"line\">UserModel.save(<span class=\"function\">(<span class=\"params\">(<span class=\"params\">err: <span class=\"built_in\">any</span>, product: UserType </span>)=&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"keyword\">if</span>(<span class=\"params\">err</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"params\">err</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  <span class=\"built_in\">console</span>.log(<span class=\"params\">product, '结果'</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;</span>))</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">export</span> <span class=\"params\">default</span> <span class=\"params\">UserModel</span>;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这有个小插曲，我们也可以不定义一个 <code>UserModel</code> 去向数据库写入数据：</p>\n<ol start=\"2\">\n<li><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> User, &#123; UserType &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../schemas/User'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> User.create(&#123;name: <span class=\"string\">\"xzh\"</span>&#125;, <span class=\"function\">(<span class=\"params\">err: <span class=\"built_in\">any</span>, res: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res, <span class=\"string\">'结果'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为前面也提到了在 <code>mongoose</code> 中还有个 <code>Entity</code> 的存在。<br>第1种是 <code>entity</code> 保存方法。<br>第2种是 <code>model</code> 保存方法。</p>"},{"title":"Node.js+hexo部署博客","date":"2017-03-20T08:10:14.000Z","comments":1,"layout":"post","_content":"\n初衷\n==\n\n想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。\nNode.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。\n现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。\n<!--more-->\n----------\n\n什么是 Hexo？\n---------\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n安装Node\n======\n\n下载安装Node注意事项\n------------\n\n[Node.js](https://nodejs.org)根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。\n\n环境配置\n----\n\n各种都要配置环境，Node也不例外。如果你的文件路径为`D:\\node`也就是你`Node.exe`所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量`在Path`项中加入`D:\\node`这个路径。之后我们win+R打入cmd命令行去执行`npm`命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。\n\n配置国内镜像\n------\n\n在国内可以用[淘宝NPM镜像](http://npm.taobao.org/)，这样各种安装和使用npm快很多而且还可以代替`npm`。你只要运行下面的命令\n```shell\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n同样测试有没有安装好，这次打`cnpm`就行拉，结果显示与上述相同。\n那么以后我们只要执行跟`npm`的命令时我们只要把`npm`替换成`cnpm`就行了！\n\n安装Git\n=====\n\n下载Git程序包\n--------\n\n作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。\n\n- windows下安装[Git SCM](https://git-for-windows.github.io/) \n- Mac下安装[GitSCM](https://git-scm.com/download/mac) \n- Linux and Unix下安装[GitSCM](https://git-scm.com/download/linux)\n- 附上[git使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n环境配置\n----\n\n同样Git也需要环境配置，与Node配置一致。你Git的路径`C:\\Git\\bin`那么在`Path`中就可以这样写`C:\\Git\\bin`。下面要进入重点了！\n\n安装Hexo\n======\n\n[Hexo中文文档](https://hexo.io/zh-cn/docs/)，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。\n```shell\n$ npm install -g hexo-cli\n```\n有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了[淘宝NPM镜像](http://npm.taobao.org/)我们直接使用以下命令：\n```shell\n$ cnpm install -g hexo-cli\n```\nWindows Mac Linux Unix系统编译时遇到的问题则可以去[Hexo中文文档](https://hexo.io/zh-cn/docs/)里面寻找解决办法。\n\n使用Hexo建站\n--------\n\nHexo建站后产生的文件如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。\n\n创建站点\n----\n\n找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。\n```shell\n$ hexo init site\n```\n然后我们再右键`site`文件夹执行以下命令：\n```shell\n$ hexo generate\n```\n这时，我们点开`site`会发现里面有个`public`的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。\n\n自动化部署\n-----\n\nHexo自动Git部署需要安装`hexo-deployer-git`，执行下列命令\n```shell\ncnpm install hexo-deployer-git --save\n```\n然后修改系统配置文件`_config.yml`（不是`themes`子目录下的主题配置文件）。修改`deploy`这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。*注意缩进，*yml中使用缩进表示从属关系，用`-`表示一个序列（可以同时部署到多个仓库）。*这里减号后有一个空格*。以我的项目为例，配置内容如下：\n```yaml\ndeploy:\n- type: git\n  repo: git@git.coding.net:Adherent/Adherent.git\n  branch: coding-pages\n```\n`type`值不用修改，因为这里使用的是git的pages服务，类型就是git。\n`repo`为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考[生成并部署SSH key](http://git.mydoc.io/?t=154712)。\n`branch`为开启pages服务的分支名称。一般的，码云为`osc-pages`，Coding为`coding-pages`，GitHub为`gh-pages`。\n配置好部署信息后，即可用Hexo把静态页面部署到git上了。\n```shell\nhexo deploy\n```\n部署完成后，通过域名，应该就能访问到这些页面了。\n\n部署SSH key\n---------\n\n则可以看我的部署SSH key的文章\n\nPages服务的选择\n==========\n\n都说做编程必须有[GitHub](https://github.com/)而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的[码云](https://git.oschina.net/)或者[Coding](https://coding.net/)以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用[Coding](https://coding.net/help/doc/pages/index.html)。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启\n以我的网站为例，项目地址为[https://coding.net/u/Adherent/p/Adherent/git](https://coding.net/u/Adherent/p/Adherent/git)，开启pages服务的分支名称为`coding-pages`。项目初始化时并没有`codingc-pages`分支，可以等Hexo部署静态文件后再开启pages服务。\n\n添加新文章\n=====\n\n博客建成，那么我们就可以写自己的博文了！执行下列命令：\n```shell\n$ hexo n 文章题目\n```\n以上命令就可以在`source/_posts/目录中生成一个文件名为`文章题目`后缀名为`.md`的文件。\n剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见[Markdown 语法说明 (简体中文版)](http://www.appinn.com/markdown/)\n我推荐一款[Cmd Markdown](https://www.zybuluo.com/cmd/)个人感觉用的还是很舒服的。\n[这是Cmd Markdown的简明语法手册。](https://www.zybuluo.com/chanvee/note/10789)\n然后执行以下命令即可生成新的页面，部署到git。\n```shell\nhexo g -d\n```\n同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。\n```shell\ngit add *\ngit commit -m \"新的文章\"\ngit push\n```\n到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考[文档|Hexo](https://hexo.io/zh-cn/docs/)即可。\n\n参考文章\n====\n\n- [淘宝NPM镜像](http://npm.taobao.org/)\n- [git使用简易指南](http://www.bootcss.com/p/git-guide/)\n- [文档|Hexo](https://hexo.io/zh-cn/docs/)\n- [Cmd Markdown](https://www.zybuluo.com/cmd/)\n- [启蒙](http://www.maoxuner.cn/)\n  `\n\n\n","source":"_posts/Node.js+hexo部署博客.md","raw":"---\ntitle: Node.js+hexo部署博客\ndate: 2017-03-20 16:10:14\ncomments: true\nlayout: post\ntags: [hexo,git,node.js,JavaScript]\ncategories: Technology\n---\n\n初衷\n==\n\n想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。\nNode.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。\n现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。\n<!--more-->\n----------\n\n什么是 Hexo？\n---------\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n安装Node\n======\n\n下载安装Node注意事项\n------------\n\n[Node.js](https://nodejs.org)根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。\n\n环境配置\n----\n\n各种都要配置环境，Node也不例外。如果你的文件路径为`D:\\node`也就是你`Node.exe`所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量`在Path`项中加入`D:\\node`这个路径。之后我们win+R打入cmd命令行去执行`npm`命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。\n\n配置国内镜像\n------\n\n在国内可以用[淘宝NPM镜像](http://npm.taobao.org/)，这样各种安装和使用npm快很多而且还可以代替`npm`。你只要运行下面的命令\n```shell\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n同样测试有没有安装好，这次打`cnpm`就行拉，结果显示与上述相同。\n那么以后我们只要执行跟`npm`的命令时我们只要把`npm`替换成`cnpm`就行了！\n\n安装Git\n=====\n\n下载Git程序包\n--------\n\n作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。\n\n- windows下安装[Git SCM](https://git-for-windows.github.io/) \n- Mac下安装[GitSCM](https://git-scm.com/download/mac) \n- Linux and Unix下安装[GitSCM](https://git-scm.com/download/linux)\n- 附上[git使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n环境配置\n----\n\n同样Git也需要环境配置，与Node配置一致。你Git的路径`C:\\Git\\bin`那么在`Path`中就可以这样写`C:\\Git\\bin`。下面要进入重点了！\n\n安装Hexo\n======\n\n[Hexo中文文档](https://hexo.io/zh-cn/docs/)，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。\n```shell\n$ npm install -g hexo-cli\n```\n有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了[淘宝NPM镜像](http://npm.taobao.org/)我们直接使用以下命令：\n```shell\n$ cnpm install -g hexo-cli\n```\nWindows Mac Linux Unix系统编译时遇到的问题则可以去[Hexo中文文档](https://hexo.io/zh-cn/docs/)里面寻找解决办法。\n\n使用Hexo建站\n--------\n\nHexo建站后产生的文件如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。\n\n创建站点\n----\n\n找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。\n```shell\n$ hexo init site\n```\n然后我们再右键`site`文件夹执行以下命令：\n```shell\n$ hexo generate\n```\n这时，我们点开`site`会发现里面有个`public`的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。\n\n自动化部署\n-----\n\nHexo自动Git部署需要安装`hexo-deployer-git`，执行下列命令\n```shell\ncnpm install hexo-deployer-git --save\n```\n然后修改系统配置文件`_config.yml`（不是`themes`子目录下的主题配置文件）。修改`deploy`这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。*注意缩进，*yml中使用缩进表示从属关系，用`-`表示一个序列（可以同时部署到多个仓库）。*这里减号后有一个空格*。以我的项目为例，配置内容如下：\n```yaml\ndeploy:\n- type: git\n  repo: git@git.coding.net:Adherent/Adherent.git\n  branch: coding-pages\n```\n`type`值不用修改，因为这里使用的是git的pages服务，类型就是git。\n`repo`为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考[生成并部署SSH key](http://git.mydoc.io/?t=154712)。\n`branch`为开启pages服务的分支名称。一般的，码云为`osc-pages`，Coding为`coding-pages`，GitHub为`gh-pages`。\n配置好部署信息后，即可用Hexo把静态页面部署到git上了。\n```shell\nhexo deploy\n```\n部署完成后，通过域名，应该就能访问到这些页面了。\n\n部署SSH key\n---------\n\n则可以看我的部署SSH key的文章\n\nPages服务的选择\n==========\n\n都说做编程必须有[GitHub](https://github.com/)而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的[码云](https://git.oschina.net/)或者[Coding](https://coding.net/)以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用[Coding](https://coding.net/help/doc/pages/index.html)。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启\n以我的网站为例，项目地址为[https://coding.net/u/Adherent/p/Adherent/git](https://coding.net/u/Adherent/p/Adherent/git)，开启pages服务的分支名称为`coding-pages`。项目初始化时并没有`codingc-pages`分支，可以等Hexo部署静态文件后再开启pages服务。\n\n添加新文章\n=====\n\n博客建成，那么我们就可以写自己的博文了！执行下列命令：\n```shell\n$ hexo n 文章题目\n```\n以上命令就可以在`source/_posts/目录中生成一个文件名为`文章题目`后缀名为`.md`的文件。\n剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见[Markdown 语法说明 (简体中文版)](http://www.appinn.com/markdown/)\n我推荐一款[Cmd Markdown](https://www.zybuluo.com/cmd/)个人感觉用的还是很舒服的。\n[这是Cmd Markdown的简明语法手册。](https://www.zybuluo.com/chanvee/note/10789)\n然后执行以下命令即可生成新的页面，部署到git。\n```shell\nhexo g -d\n```\n同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。\n```shell\ngit add *\ngit commit -m \"新的文章\"\ngit push\n```\n到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考[文档|Hexo](https://hexo.io/zh-cn/docs/)即可。\n\n参考文章\n====\n\n- [淘宝NPM镜像](http://npm.taobao.org/)\n- [git使用简易指南](http://www.bootcss.com/p/git-guide/)\n- [文档|Hexo](https://hexo.io/zh-cn/docs/)\n- [Cmd Markdown](https://www.zybuluo.com/cmd/)\n- [启蒙](http://www.maoxuner.cn/)\n  `\n\n\n","slug":"Node.js+hexo部署博客","published":1,"updated":"2017-09-22T09:50:49.000Z","photos":[],"link":"","_id":"cjollnbq80037unfybfdgnsyx","content":"<h1 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h1><p>想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。<br>Node.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。<br>现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h1 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h1><h2 id=\"下载安装Node注意事项\"><a href=\"#下载安装Node注意事项\" class=\"headerlink\" title=\"下载安装Node注意事项\"></a>下载安装Node注意事项</h2><p><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js</a>根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>各种都要配置环境，Node也不例外。如果你的文件路径为<code>D:\\node</code>也就是你<code>Node.exe</code>所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量<code>在Path</code>项中加入<code>D:\\node</code>这个路径。之后我们win+R打入cmd命令行去执行<code>npm</code>命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。</p>\n<h2 id=\"配置国内镜像\"><a href=\"#配置国内镜像\" class=\"headerlink\" title=\"配置国内镜像\"></a>配置国内镜像</h2><p>在国内可以用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a>，这样各种安装和使用npm快很多而且还可以代替<code>npm</code>。你只要运行下面的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>同样测试有没有安装好，这次打<code>cnpm</code>就行拉，结果显示与上述相同。<br>那么以后我们只要执行跟<code>npm</code>的命令时我们只要把<code>npm</code>替换成<code>cnpm</code>就行了！</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"下载Git程序包\"><a href=\"#下载Git程序包\" class=\"headerlink\" title=\"下载Git程序包\"></a>下载Git程序包</h2><p>作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。</p>\n<ul>\n<li>windows下安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">Git SCM</a> </li>\n<li>Mac下安装<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">GitSCM</a> </li>\n<li>Linux and Unix下安装<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">GitSCM</a></li>\n<li>附上<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git使用简易指南</a></li>\n</ul>\n<h2 id=\"环境配置-1\"><a href=\"#环境配置-1\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>同样Git也需要环境配置，与Node配置一致。你Git的路径<code>C:\\Git\\bin</code>那么在<code>Path</code>中就可以这样写<code>C:\\Git\\bin</code>。下面要进入重点了！</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文文档</a>，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a>我们直接使用以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>Windows Mac Linux Unix系统编译时遇到的问题则可以去<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文文档</a>里面寻找解决办法。</p>\n<h2 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h2><p>Hexo建站后产生的文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure></p>\n<p>其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init site</span><br></pre></td></tr></table></figure></p>\n<p>然后我们再右键<code>site</code>文件夹执行以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>这时，我们点开<code>site</code>会发现里面有个<code>public</code>的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。</p>\n<h2 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h2><p>Hexo自动Git部署需要安装<code>hexo-deployer-git</code>，执行下列命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>然后修改系统配置文件<code>_config.yml</code>（不是<code>themes</code>子目录下的主题配置文件）。修改<code>deploy</code>这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。<em>注意缩进，</em>yml中使用缩进表示从属关系，用<code>-</code>表示一个序列（可以同时部署到多个仓库）。<em>这里减号后有一个空格</em>。以我的项目为例，配置内容如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@git.coding.net:Adherent/Adherent.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<p><code>type</code>值不用修改，因为这里使用的是git的pages服务，类型就是git。<br><code>repo</code>为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考<a href=\"http://git.mydoc.io/?t=154712\" target=\"_blank\" rel=\"noopener\">生成并部署SSH key</a>。<br><code>branch</code>为开启pages服务的分支名称。一般的，码云为<code>osc-pages</code>，Coding为<code>coding-pages</code>，GitHub为<code>gh-pages</code>。<br>配置好部署信息后，即可用Hexo把静态页面部署到git上了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>部署完成后，通过域名，应该就能访问到这些页面了。</p>\n<h2 id=\"部署SSH-key\"><a href=\"#部署SSH-key\" class=\"headerlink\" title=\"部署SSH key\"></a>部署SSH key</h2><p>则可以看我的部署SSH key的文章</p>\n<h1 id=\"Pages服务的选择\"><a href=\"#Pages服务的选择\" class=\"headerlink\" title=\"Pages服务的选择\"></a>Pages服务的选择</h1><p>都说做编程必须有<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的<a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">码云</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"noopener\">Coding</a>。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启<br>以我的网站为例，项目地址为<a href=\"https://coding.net/u/Adherent/p/Adherent/git\" target=\"_blank\" rel=\"noopener\">https://coding.net/u/Adherent/p/Adherent/git</a>，开启pages服务的分支名称为<code>coding-pages</code>。项目初始化时并没有<code>codingc-pages</code>分支，可以等Hexo部署静态文件后再开启pages服务。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>博客建成，那么我们就可以写自己的博文了！执行下列命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n 文章题目</span><br></pre></td></tr></table></figure></p>\n<p>以上命令就可以在<code>source/_posts/目录中生成一个文件名为</code>文章题目<code>后缀名为</code>.md`的文件。<br>剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a><br>我推荐一款<a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a>个人感觉用的还是很舒服的。<br><a href=\"https://www.zybuluo.com/chanvee/note/10789\" target=\"_blank\" rel=\"noopener\">这是Cmd Markdown的简明语法手册。</a><br>然后执行以下命令即可生成新的页面，部署到git。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></p>\n<p>同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m \"新的文章\"</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档|Hexo</a>即可。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a></li>\n<li><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git使用简易指南</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档|Hexo</a></li>\n<li><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a></li>\n<li><a href=\"http://www.maoxuner.cn/\" target=\"_blank\" rel=\"noopener\">启蒙</a><br>`</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h1><p>想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。<br>Node.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。<br>现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。</p>","more":"<hr>\n<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h1 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h1><h2 id=\"下载安装Node注意事项\"><a href=\"#下载安装Node注意事项\" class=\"headerlink\" title=\"下载安装Node注意事项\"></a>下载安装Node注意事项</h2><p><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js</a>根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>各种都要配置环境，Node也不例外。如果你的文件路径为<code>D:\\node</code>也就是你<code>Node.exe</code>所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量<code>在Path</code>项中加入<code>D:\\node</code>这个路径。之后我们win+R打入cmd命令行去执行<code>npm</code>命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。</p>\n<h2 id=\"配置国内镜像\"><a href=\"#配置国内镜像\" class=\"headerlink\" title=\"配置国内镜像\"></a>配置国内镜像</h2><p>在国内可以用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a>，这样各种安装和使用npm快很多而且还可以代替<code>npm</code>。你只要运行下面的命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>同样测试有没有安装好，这次打<code>cnpm</code>就行拉，结果显示与上述相同。<br>那么以后我们只要执行跟<code>npm</code>的命令时我们只要把<code>npm</code>替换成<code>cnpm</code>就行了！</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"下载Git程序包\"><a href=\"#下载Git程序包\" class=\"headerlink\" title=\"下载Git程序包\"></a>下载Git程序包</h2><p>作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。</p>\n<ul>\n<li>windows下安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"noopener\">Git SCM</a> </li>\n<li>Mac下安装<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"noopener\">GitSCM</a> </li>\n<li>Linux and Unix下安装<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"noopener\">GitSCM</a></li>\n<li>附上<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git使用简易指南</a></li>\n</ul>\n<h2 id=\"环境配置-1\"><a href=\"#环境配置-1\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>同样Git也需要环境配置，与Node配置一致。你Git的路径<code>C:\\Git\\bin</code>那么在<code>Path</code>中就可以这样写<code>C:\\Git\\bin</code>。下面要进入重点了！</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文文档</a>，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a>我们直接使用以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>\n<p>Windows Mac Linux Unix系统编译时遇到的问题则可以去<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文文档</a>里面寻找解决办法。</p>\n<h2 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h2><p>Hexo建站后产生的文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure></p>\n<p>其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo init site</span><br></pre></td></tr></table></figure></p>\n<p>然后我们再右键<code>site</code>文件夹执行以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>这时，我们点开<code>site</code>会发现里面有个<code>public</code>的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。</p>\n<h2 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h2><p>Hexo自动Git部署需要安装<code>hexo-deployer-git</code>，执行下列命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>然后修改系统配置文件<code>_config.yml</code>（不是<code>themes</code>子目录下的主题配置文件）。修改<code>deploy</code>这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。<em>注意缩进，</em>yml中使用缩进表示从属关系，用<code>-</code>表示一个序列（可以同时部署到多个仓库）。<em>这里减号后有一个空格</em>。以我的项目为例，配置内容如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@git.coding.net:Adherent/Adherent.git</span></span><br><span class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">coding-pages</span></span><br></pre></td></tr></table></figure></p>\n<p><code>type</code>值不用修改，因为这里使用的是git的pages服务，类型就是git。<br><code>repo</code>为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考<a href=\"http://git.mydoc.io/?t=154712\" target=\"_blank\" rel=\"noopener\">生成并部署SSH key</a>。<br><code>branch</code>为开启pages服务的分支名称。一般的，码云为<code>osc-pages</code>，Coding为<code>coding-pages</code>，GitHub为<code>gh-pages</code>。<br>配置好部署信息后，即可用Hexo把静态页面部署到git上了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>部署完成后，通过域名，应该就能访问到这些页面了。</p>\n<h2 id=\"部署SSH-key\"><a href=\"#部署SSH-key\" class=\"headerlink\" title=\"部署SSH key\"></a>部署SSH key</h2><p>则可以看我的部署SSH key的文章</p>\n<h1 id=\"Pages服务的选择\"><a href=\"#Pages服务的选择\" class=\"headerlink\" title=\"Pages服务的选择\"></a>Pages服务的选择</h1><p>都说做编程必须有<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的<a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"noopener\">码云</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"noopener\">Coding</a>以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"noopener\">Coding</a>。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启<br>以我的网站为例，项目地址为<a href=\"https://coding.net/u/Adherent/p/Adherent/git\" target=\"_blank\" rel=\"noopener\">https://coding.net/u/Adherent/p/Adherent/git</a>，开启pages服务的分支名称为<code>coding-pages</code>。项目初始化时并没有<code>codingc-pages</code>分支，可以等Hexo部署静态文件后再开启pages服务。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>博客建成，那么我们就可以写自己的博文了！执行下列命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> hexo n 文章题目</span><br></pre></td></tr></table></figure></p>\n<p>以上命令就可以在<code>source/_posts/目录中生成一个文件名为</code>文章题目<code>后缀名为</code>.md`的文件。<br>剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法说明 (简体中文版)</a><br>我推荐一款<a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a>个人感觉用的还是很舒服的。<br><a href=\"https://www.zybuluo.com/chanvee/note/10789\" target=\"_blank\" rel=\"noopener\">这是Cmd Markdown的简明语法手册。</a><br>然后执行以下命令即可生成新的页面，部署到git。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure></p>\n<p>同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m \"新的文章\"</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure></p>\n<p>到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档|Hexo</a>即可。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝NPM镜像</a></li>\n<li><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git使用简易指南</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档|Hexo</a></li>\n<li><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a></li>\n<li><a href=\"http://www.maoxuner.cn/\" target=\"_blank\" rel=\"noopener\">启蒙</a><br>`</li>\n</ul>"},{"title":"Kubectl常用命令","date":"2018-11-17T14:34:00.000Z","comments":1,"layout":"post","_content":"\n## get\nget命令用于获取集群的一个或一些resource信息.\n`kubectl get`可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。\n\n### 获取deployment\n```\nzihao@zihao-desktop:~ $ kubectl get deployment\nNAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\ncurl    1         1         1            1           43m\nnginx   2         2         2            2           107m\n```\n\n<!--more-->\n\n### 获取所有运行的pod信息\n\n```\nzihao@zihao-desktop:~ $ kubectl get pods\nNAME                     READY   STATUS    RESTARTS   AGE\ncurl-5cc7b478b6-4x7pl    1/1     Running   1          44m\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          108m\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          107m\n```\n\n### 列出Pod以及运行Pod节点信息\n```\nzihao@zihao-desktop:~ $ kubectl get pods -o wide \nNAME                     READY   STATUS    RESTARTS   AGE    IP            NODE    NOMINATED NODE\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          159m   192.168.1.2   zihao   <none>\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          158m   192.168.1.3   zihao   <none>\n```\n\n### 查看集群中所有的node\n```\nzihao@zihao-desktop:~ $ kubectl get nodes\nNAME            STATUS   ROLES    AGE     VERSION\nzihao           Ready    <none>   4h15m   v1.12.2\nzihao-desktop   Ready    master   21h     v1.12.2\n```\n\n### 查看某个Node的详细信息\n```\nzihao@zihao-desktop:~ $ kubectl describe node zihao\nName:               zihao\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/hostname=zihao\nAnnotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock\n                    node.alpha.kubernetes.io/ttl: 0\n                    projectcalico.org/IPv4Address: 172.16.187.132/24\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\n....\n```\n\n## delete\n### 删除pod\n这样删除pods后，你会发现可以看到刚刚生成的`curl-5cc7b478b6-4x7pl`的status为`Terminating`，随后又一个新的`curl-xxxxxx`正在创建，这正是确保`replicas`为1的动作\n```\nzihao@zihao-desktop:~ $ kubectl delete pods curl-5cc7b478b6-4x7pl\npod \"curl-5cc7b478b6-4x7pl\" deleted\n```\n\n### 删除deployment\n直接删除pod触发了replicas的确保机制，我们需要删除deployment\n```\nzihao@zihao-desktop:~ $ kubectl delete deployment curl\ndeployment.extensions \"curl\" deleted\n```\n\n### 强制删除pod\n```\nzihao@zihao-desktop:~ $ kubectl delete pod curl-5cc7b478b6-4x7pl --grace-period=0 --force\nwarning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\npod \"curl-5cc7b478b6-4x7pl\" force deleted\n```\n","source":"_posts/Kubectl常用命令.md","raw":"---\ntitle: Kubectl常用命令\ndate: 2018-11-17 22:34:00\ncomments: true\nlayout: post\ntags: [docker, Kubernetes]\ncategories: docker\n---\n\n## get\nget命令用于获取集群的一个或一些resource信息.\n`kubectl get`可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。\n\n### 获取deployment\n```\nzihao@zihao-desktop:~ $ kubectl get deployment\nNAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\ncurl    1         1         1            1           43m\nnginx   2         2         2            2           107m\n```\n\n<!--more-->\n\n### 获取所有运行的pod信息\n\n```\nzihao@zihao-desktop:~ $ kubectl get pods\nNAME                     READY   STATUS    RESTARTS   AGE\ncurl-5cc7b478b6-4x7pl    1/1     Running   1          44m\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          108m\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          107m\n```\n\n### 列出Pod以及运行Pod节点信息\n```\nzihao@zihao-desktop:~ $ kubectl get pods -o wide \nNAME                     READY   STATUS    RESTARTS   AGE    IP            NODE    NOMINATED NODE\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          159m   192.168.1.2   zihao   <none>\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          158m   192.168.1.3   zihao   <none>\n```\n\n### 查看集群中所有的node\n```\nzihao@zihao-desktop:~ $ kubectl get nodes\nNAME            STATUS   ROLES    AGE     VERSION\nzihao           Ready    <none>   4h15m   v1.12.2\nzihao-desktop   Ready    master   21h     v1.12.2\n```\n\n### 查看某个Node的详细信息\n```\nzihao@zihao-desktop:~ $ kubectl describe node zihao\nName:               zihao\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/hostname=zihao\nAnnotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock\n                    node.alpha.kubernetes.io/ttl: 0\n                    projectcalico.org/IPv4Address: 172.16.187.132/24\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\n....\n```\n\n## delete\n### 删除pod\n这样删除pods后，你会发现可以看到刚刚生成的`curl-5cc7b478b6-4x7pl`的status为`Terminating`，随后又一个新的`curl-xxxxxx`正在创建，这正是确保`replicas`为1的动作\n```\nzihao@zihao-desktop:~ $ kubectl delete pods curl-5cc7b478b6-4x7pl\npod \"curl-5cc7b478b6-4x7pl\" deleted\n```\n\n### 删除deployment\n直接删除pod触发了replicas的确保机制，我们需要删除deployment\n```\nzihao@zihao-desktop:~ $ kubectl delete deployment curl\ndeployment.extensions \"curl\" deleted\n```\n\n### 强制删除pod\n```\nzihao@zihao-desktop:~ $ kubectl delete pod curl-5cc7b478b6-4x7pl --grace-period=0 --force\nwarning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\npod \"curl-5cc7b478b6-4x7pl\" force deleted\n```\n","slug":"Kubectl常用命令","published":1,"updated":"2018-11-17T14:40:22.112Z","photos":[],"link":"","_id":"cjollnbqd003cunfyxv8rmk4i","content":"<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>get命令用于获取集群的一个或一些resource信息.<br><code>kubectl get</code>可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。</p>\n<h3 id=\"获取deployment\"><a href=\"#获取deployment\" class=\"headerlink\" title=\"获取deployment\"></a>获取deployment</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get deployment</span><br><span class=\"line\">NAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">curl    1         1         1            1           43m</span><br><span class=\"line\">nginx   2         2         2            2           107m</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"获取所有运行的pod信息\"><a href=\"#获取所有运行的pod信息\" class=\"headerlink\" title=\"获取所有运行的pod信息\"></a>获取所有运行的pod信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get pods</span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">curl-5cc7b478b6-4x7pl    1/1     Running   1          44m</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          108m</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          107m</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出Pod以及运行Pod节点信息\"><a href=\"#列出Pod以及运行Pod节点信息\" class=\"headerlink\" title=\"列出Pod以及运行Pod节点信息\"></a>列出Pod以及运行Pod节点信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get pods -o wide </span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE    NOMINATED NODE</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          159m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          158m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看集群中所有的node\"><a href=\"#查看集群中所有的node\" class=\"headerlink\" title=\"查看集群中所有的node\"></a>查看集群中所有的node</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get nodes</span><br><span class=\"line\">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">zihao           Ready    &lt;none&gt;   4h15m   v1.12.2</span><br><span class=\"line\">zihao-desktop   Ready    master   21h     v1.12.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看某个Node的详细信息\"><a href=\"#查看某个Node的详细信息\" class=\"headerlink\" title=\"查看某个Node的详细信息\"></a>查看某个Node的详细信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl describe node zihao</span><br><span class=\"line\">Name:               zihao</span><br><span class=\"line\">Roles:              &lt;none&gt;</span><br><span class=\"line\">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class=\"line\">                    beta.kubernetes.io/os=linux</span><br><span class=\"line\">                    kubernetes.io/hostname=zihao</span><br><span class=\"line\">Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class=\"line\">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class=\"line\">                    projectcalico.org/IPv4Address: 172.16.187.132/24</span><br><span class=\"line\">                    volumes.kubernetes.io/controller-managed-attach-detach: true</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><h3 id=\"删除pod\"><a href=\"#删除pod\" class=\"headerlink\" title=\"删除pod\"></a>删除pod</h3><p>这样删除pods后，你会发现可以看到刚刚生成的<code>curl-5cc7b478b6-4x7pl</code>的status为<code>Terminating</code>，随后又一个新的<code>curl-xxxxxx</code>正在创建，这正是确保<code>replicas</code>为1的动作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete pods curl-5cc7b478b6-4x7pl</span><br><span class=\"line\">pod &quot;curl-5cc7b478b6-4x7pl&quot; deleted</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除deployment\"><a href=\"#删除deployment\" class=\"headerlink\" title=\"删除deployment\"></a>删除deployment</h3><p>直接删除pod触发了replicas的确保机制，我们需要删除deployment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete deployment curl</span><br><span class=\"line\">deployment.extensions &quot;curl&quot; deleted</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制删除pod\"><a href=\"#强制删除pod\" class=\"headerlink\" title=\"强制删除pod\"></a>强制删除pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete pod curl-5cc7b478b6-4x7pl --grace-period=0 --force</span><br><span class=\"line\">warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.</span><br><span class=\"line\">pod &quot;curl-5cc7b478b6-4x7pl&quot; force deleted</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h2><p>get命令用于获取集群的一个或一些resource信息.<br><code>kubectl get</code>可以列出集群所有resource的详细。resource包括集群节点、运行的pod，ReplicationController，service等。</p>\n<h3 id=\"获取deployment\"><a href=\"#获取deployment\" class=\"headerlink\" title=\"获取deployment\"></a>获取deployment</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get deployment</span><br><span class=\"line\">NAME    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class=\"line\">curl    1         1         1            1           43m</span><br><span class=\"line\">nginx   2         2         2            2           107m</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"获取所有运行的pod信息\"><a href=\"#获取所有运行的pod信息\" class=\"headerlink\" title=\"获取所有运行的pod信息\"></a>获取所有运行的pod信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get pods</span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">curl-5cc7b478b6-4x7pl    1/1     Running   1          44m</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          108m</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          107m</span><br></pre></td></tr></table></figure>\n<h3 id=\"列出Pod以及运行Pod节点信息\"><a href=\"#列出Pod以及运行Pod节点信息\" class=\"headerlink\" title=\"列出Pod以及运行Pod节点信息\"></a>列出Pod以及运行Pod节点信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get pods -o wide </span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE    IP            NODE    NOMINATED NODE</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          159m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          158m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看集群中所有的node\"><a href=\"#查看集群中所有的node\" class=\"headerlink\" title=\"查看集群中所有的node\"></a>查看集群中所有的node</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl get nodes</span><br><span class=\"line\">NAME            STATUS   ROLES    AGE     VERSION</span><br><span class=\"line\">zihao           Ready    &lt;none&gt;   4h15m   v1.12.2</span><br><span class=\"line\">zihao-desktop   Ready    master   21h     v1.12.2</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看某个Node的详细信息\"><a href=\"#查看某个Node的详细信息\" class=\"headerlink\" title=\"查看某个Node的详细信息\"></a>查看某个Node的详细信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl describe node zihao</span><br><span class=\"line\">Name:               zihao</span><br><span class=\"line\">Roles:              &lt;none&gt;</span><br><span class=\"line\">Labels:             beta.kubernetes.io/arch=amd64</span><br><span class=\"line\">                    beta.kubernetes.io/os=linux</span><br><span class=\"line\">                    kubernetes.io/hostname=zihao</span><br><span class=\"line\">Annotations:        kubeadm.alpha.kubernetes.io/cri-socket: /var/run/dockershim.sock</span><br><span class=\"line\">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class=\"line\">                    projectcalico.org/IPv4Address: 172.16.187.132/24</span><br><span class=\"line\">                    volumes.kubernetes.io/controller-managed-attach-detach: true</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h2><h3 id=\"删除pod\"><a href=\"#删除pod\" class=\"headerlink\" title=\"删除pod\"></a>删除pod</h3><p>这样删除pods后，你会发现可以看到刚刚生成的<code>curl-5cc7b478b6-4x7pl</code>的status为<code>Terminating</code>，随后又一个新的<code>curl-xxxxxx</code>正在创建，这正是确保<code>replicas</code>为1的动作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete pods curl-5cc7b478b6-4x7pl</span><br><span class=\"line\">pod &quot;curl-5cc7b478b6-4x7pl&quot; deleted</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"删除deployment\"><a href=\"#删除deployment\" class=\"headerlink\" title=\"删除deployment\"></a>删除deployment</h3><p>直接删除pod触发了replicas的确保机制，我们需要删除deployment<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete deployment curl</span><br><span class=\"line\">deployment.extensions &quot;curl&quot; deleted</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制删除pod\"><a href=\"#强制删除pod\" class=\"headerlink\" title=\"强制删除pod\"></a>强制删除pod</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zihao@zihao-desktop:~ $ kubectl delete pod curl-5cc7b478b6-4x7pl --grace-period=0 --force</span><br><span class=\"line\">warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.</span><br><span class=\"line\">pod &quot;curl-5cc7b478b6-4x7pl&quot; force deleted</span><br></pre></td></tr></table></figure>"},{"title":"Koa2—Https","date":"2018-08-27T08:27:00.000Z","comments":1,"layout":"post","_content":"# Koa2—Https\n现在信息安全越来越重要，以往的`http`已经满足不了我们的需求，并且如果你的网站还是`http`协议的话，`chrome`还能给你报个错。\n\n所以我们需要让自己的服务器上`https`。\n\n## ssl证书\nSsl证书我是通过阿里云给配的，1年免费。\n\n## 集成\n我们需要区分开发环境和生产环境，我们只要开发环境用`http`，生产环境用`https`就ok了。所以我就直接上`code`了：\n```typescript\n// 基础的配置\nimport * as Koa from 'koa';\nconst app = new Koa();\n```\n<!--more-->\n```typescript\nimport * as fs from 'fs';\nimport * as https from 'https';\nimport * as http from 'http';\n\nconst port: number = 4000;\nconst sslPort: number = 443;\n\nconst environment = process.env.NODE_ENV || 'production';\n\nif (environment === 'production') {\n\tconst sslFile = {\n\t\tkey: fs.readFileSync('./ssl/domain.key', 'utf8'),\n\t\tcert: fs.readFileSync('./ssl/chained.pem', 'utf8'),\n\t};\n\thttps.createServer(sslFile, app.callback()).listen(sslPort, () => {\n\t\tconsole.log(`🚀 Https Server ready at ${sslPort}`);\n\t});\n} else {\n\thttp.createServer(app.callback()).listen(port, () => {\n\t\tconsole.log(`🚀 Server ready at localhots:${port}`);\n\t});\n}\n\n```\n## 设置NODE_ENV\n最简单的方法我们需要`npm install cross-env`\n到`package.json`配置一下.\n```typescript\n\"scripts\": {\n    \"start\": \"cross-env NODE_ENV=development nodemon\",\n    \"build\": \"cross-env NODE_ENV=production nodemon\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n```\n## 第三方库\n\n还有一个叫`koa-sslify`的库，他能帮助我们做到任何访问都走`https`","source":"_posts/Koa2—Https.md","raw":"---\ntitle: Koa2—Https\ndate: 2018-08-27 16:27\ncomments: true\nlayout: post\ntags: [Koa2]\ncategories: Koa2\n---\n# Koa2—Https\n现在信息安全越来越重要，以往的`http`已经满足不了我们的需求，并且如果你的网站还是`http`协议的话，`chrome`还能给你报个错。\n\n所以我们需要让自己的服务器上`https`。\n\n## ssl证书\nSsl证书我是通过阿里云给配的，1年免费。\n\n## 集成\n我们需要区分开发环境和生产环境，我们只要开发环境用`http`，生产环境用`https`就ok了。所以我就直接上`code`了：\n```typescript\n// 基础的配置\nimport * as Koa from 'koa';\nconst app = new Koa();\n```\n<!--more-->\n```typescript\nimport * as fs from 'fs';\nimport * as https from 'https';\nimport * as http from 'http';\n\nconst port: number = 4000;\nconst sslPort: number = 443;\n\nconst environment = process.env.NODE_ENV || 'production';\n\nif (environment === 'production') {\n\tconst sslFile = {\n\t\tkey: fs.readFileSync('./ssl/domain.key', 'utf8'),\n\t\tcert: fs.readFileSync('./ssl/chained.pem', 'utf8'),\n\t};\n\thttps.createServer(sslFile, app.callback()).listen(sslPort, () => {\n\t\tconsole.log(`🚀 Https Server ready at ${sslPort}`);\n\t});\n} else {\n\thttp.createServer(app.callback()).listen(port, () => {\n\t\tconsole.log(`🚀 Server ready at localhots:${port}`);\n\t});\n}\n\n```\n## 设置NODE_ENV\n最简单的方法我们需要`npm install cross-env`\n到`package.json`配置一下.\n```typescript\n\"scripts\": {\n    \"start\": \"cross-env NODE_ENV=development nodemon\",\n    \"build\": \"cross-env NODE_ENV=production nodemon\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  }\n```\n## 第三方库\n\n还有一个叫`koa-sslify`的库，他能帮助我们做到任何访问都走`https`","slug":"Koa2—Https","published":1,"updated":"2018-08-27T12:44:34.897Z","photos":[],"link":"","_id":"cjollnbqf003funfyb8kuanl4","content":"<h1 id=\"Koa2—Https\"><a href=\"#Koa2—Https\" class=\"headerlink\" title=\"Koa2—Https\"></a>Koa2—Https</h1><p>现在信息安全越来越重要，以往的<code>http</code>已经满足不了我们的需求，并且如果你的网站还是<code>http</code>协议的话，<code>chrome</code>还能给你报个错。</p>\n<p>所以我们需要让自己的服务器上<code>https</code>。</p>\n<h2 id=\"ssl证书\"><a href=\"#ssl证书\" class=\"headerlink\" title=\"ssl证书\"></a>ssl证书</h2><p>Ssl证书我是通过阿里云给配的，1年免费。</p>\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>我们需要区分开发环境和生产环境，我们只要开发环境用<code>http</code>，生产环境用<code>https</code>就ok了。所以我就直接上<code>code</code>了：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础的配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> https <span class=\"keyword\">from</span> <span class=\"string\">'https'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">'http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port: <span class=\"built_in\">number</span> = <span class=\"number\">4000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sslPort: <span class=\"built_in\">number</span> = <span class=\"number\">443</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> environment = process.env.NODE_ENV || <span class=\"string\">'production'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> sslFile = &#123;</span><br><span class=\"line\">\t\tkey: fs.readFileSync(<span class=\"string\">'./ssl/domain.key'</span>, <span class=\"string\">'utf8'</span>),</span><br><span class=\"line\">\t\tcert: fs.readFileSync(<span class=\"string\">'./ssl/chained.pem'</span>, <span class=\"string\">'utf8'</span>),</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\thttps.createServer(sslFile, app.callback()).listen(sslPort, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`🚀 Https Server ready at <span class=\"subst\">$&#123;sslPort&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\thttp.createServer(app.callback()).listen(port, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`🚀 Server ready at localhots:<span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置NODE-ENV\"><a href=\"#设置NODE-ENV\" class=\"headerlink\" title=\"设置NODE_ENV\"></a>设置NODE_ENV</h2><p>最简单的方法我们需要<code>npm install cross-env</code><br>到<code>package.json</code>配置一下.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development nodemon\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production nodemon\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p>还有一个叫<code>koa-sslify</code>的库，他能帮助我们做到任何访问都走<code>https</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Koa2—Https\"><a href=\"#Koa2—Https\" class=\"headerlink\" title=\"Koa2—Https\"></a>Koa2—Https</h1><p>现在信息安全越来越重要，以往的<code>http</code>已经满足不了我们的需求，并且如果你的网站还是<code>http</code>协议的话，<code>chrome</code>还能给你报个错。</p>\n<p>所以我们需要让自己的服务器上<code>https</code>。</p>\n<h2 id=\"ssl证书\"><a href=\"#ssl证书\" class=\"headerlink\" title=\"ssl证书\"></a>ssl证书</h2><p>Ssl证书我是通过阿里云给配的，1年免费。</p>\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>我们需要区分开发环境和生产环境，我们只要开发环境用<code>http</code>，生产环境用<code>https</code>就ok了。所以我就直接上<code>code</code>了：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础的配置</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> Koa <span class=\"keyword\">from</span> <span class=\"string\">'koa'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> https <span class=\"keyword\">from</span> <span class=\"string\">'https'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> http <span class=\"keyword\">from</span> <span class=\"string\">'http'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> port: <span class=\"built_in\">number</span> = <span class=\"number\">4000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> sslPort: <span class=\"built_in\">number</span> = <span class=\"number\">443</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> environment = process.env.NODE_ENV || <span class=\"string\">'production'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (environment === <span class=\"string\">'production'</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> sslFile = &#123;</span><br><span class=\"line\">\t\tkey: fs.readFileSync(<span class=\"string\">'./ssl/domain.key'</span>, <span class=\"string\">'utf8'</span>),</span><br><span class=\"line\">\t\tcert: fs.readFileSync(<span class=\"string\">'./ssl/chained.pem'</span>, <span class=\"string\">'utf8'</span>),</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\thttps.createServer(sslFile, app.callback()).listen(sslPort, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`🚀 Https Server ready at <span class=\"subst\">$&#123;sslPort&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\thttp.createServer(app.callback()).listen(port, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`🚀 Server ready at localhots:<span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置NODE-ENV\"><a href=\"#设置NODE-ENV\" class=\"headerlink\" title=\"设置NODE_ENV\"></a>设置NODE_ENV</h2><p>最简单的方法我们需要<code>npm install cross-env</code><br>到<code>package.json</code>配置一下.<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development nodemon\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production nodemon\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三方库\"><a href=\"#第三方库\" class=\"headerlink\" title=\"第三方库\"></a>第三方库</h2><p>还有一个叫<code>koa-sslify</code>的库，他能帮助我们做到任何访问都走<code>https</code></p>"},{"title":"K8s基本概念","date":"2018-07-15T14:24:00.000Z","comments":1,"layout":"post","_content":"# K8s基本概念\n\n基本概念\n以下都可以看作一种资源对象\n- Node\n- Pod\n- Replication Controller\n- Service\n以上通过k8s提高的 `kubectl` 或者 `Api` 调用进行操作，并保存在 `etcd` 中。\n\nk8s集群由两类节点组成：**Master** 和 **Node**。\n在`Master`上运行`etcd`、`API Server`、`Controller Manager`和`Scheduler`四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。\n\n在每个`Node` 上运行`kubelet`、`Proxy`和`Docker Daemon`三个组件。\n它们负责对本节点上的`Pod`的生命周期进行管理，以及实现服务代理的功能。\n另外在所有节点上都可以运行`Kubectl`命令行工具，它提供了k8s的集群管理工具集。","source":"_posts/K8s基本概念.md","raw":"---\ntitle: K8s基本概念\ndate: 2018-07-15 22:24\ncomments: true\nlayout: post\ntags: docker\ncategories: docker\n---\n# K8s基本概念\n\n基本概念\n以下都可以看作一种资源对象\n- Node\n- Pod\n- Replication Controller\n- Service\n以上通过k8s提高的 `kubectl` 或者 `Api` 调用进行操作，并保存在 `etcd` 中。\n\nk8s集群由两类节点组成：**Master** 和 **Node**。\n在`Master`上运行`etcd`、`API Server`、`Controller Manager`和`Scheduler`四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。\n\n在每个`Node` 上运行`kubelet`、`Proxy`和`Docker Daemon`三个组件。\n它们负责对本节点上的`Pod`的生命周期进行管理，以及实现服务代理的功能。\n另外在所有节点上都可以运行`Kubectl`命令行工具，它提供了k8s的集群管理工具集。","slug":"K8s基本概念","published":1,"updated":"2018-07-15T14:44:54.375Z","photos":[],"link":"","_id":"cjollnbql003kunfyhwhkebdo","content":"<h1 id=\"K8s基本概念\"><a href=\"#K8s基本概念\" class=\"headerlink\" title=\"K8s基本概念\"></a>K8s基本概念</h1><p>基本概念<br>以下都可以看作一种资源对象</p>\n<ul>\n<li>Node</li>\n<li>Pod</li>\n<li>Replication Controller</li>\n<li>Service<br>以上通过k8s提高的 <code>kubectl</code> 或者 <code>Api</code> 调用进行操作，并保存在 <code>etcd</code> 中。</li>\n</ul>\n<p>k8s集群由两类节点组成：<strong>Master</strong> 和 <strong>Node</strong>。<br>在<code>Master</code>上运行<code>etcd</code>、<code>API Server</code>、<code>Controller Manager</code>和<code>Scheduler</code>四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。</p>\n<p>在每个<code>Node</code> 上运行<code>kubelet</code>、<code>Proxy</code>和<code>Docker Daemon</code>三个组件。<br>它们负责对本节点上的<code>Pod</code>的生命周期进行管理，以及实现服务代理的功能。<br>另外在所有节点上都可以运行<code>Kubectl</code>命令行工具，它提供了k8s的集群管理工具集。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"K8s基本概念\"><a href=\"#K8s基本概念\" class=\"headerlink\" title=\"K8s基本概念\"></a>K8s基本概念</h1><p>基本概念<br>以下都可以看作一种资源对象</p>\n<ul>\n<li>Node</li>\n<li>Pod</li>\n<li>Replication Controller</li>\n<li>Service<br>以上通过k8s提高的 <code>kubectl</code> 或者 <code>Api</code> 调用进行操作，并保存在 <code>etcd</code> 中。</li>\n</ul>\n<p>k8s集群由两类节点组成：<strong>Master</strong> 和 <strong>Node</strong>。<br>在<code>Master</code>上运行<code>etcd</code>、<code>API Server</code>、<code>Controller Manager</code>和<code>Scheduler</code>四个组件。其中后面三个组件构成了k8s的总控中心，负责对集群中所有资源进行管理和调度。</p>\n<p>在每个<code>Node</code> 上运行<code>kubelet</code>、<code>Proxy</code>和<code>Docker Daemon</code>三个组件。<br>它们负责对本节点上的<code>Pod</code>的生命周期进行管理，以及实现服务代理的功能。<br>另外在所有节点上都可以运行<code>Kubectl</code>命令行工具，它提供了k8s的集群管理工具集。</p>\n"},{"title":"学Node日志(一)","date":"2017-07-26T12:53:08.000Z","comments":1,"layout":"post","_content":"\n# 学Node日志(一)\n\n## node实例\n\n```javascript\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 9000;\n\nconst server = http.createServer((req,res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type','text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port,hostname, () => {\n    console.log('服务器运行在 http://${hostname}:${port}/');\n});\n```\n\n<!--more-->\n\n- `response.statusCode()`控制响应头刷新时将被发送到客户端的状态码\n\n  - `res.statusCode = 200`\n\n  > 状态码\n\n  ```\n  1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。\n  ```\n\n  ​\n\n\n- `response.setHeader()` 响应头如果存在,则值会被覆盖\n\n  > 如果要发送多个名称相同的响应头,则使用字符串数组\n\n  - `res.setHeader('Content-Type','text/plain')`\n\n  > Content-Type表明信息类型,缺省值为\" text/plain\".它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用\"/\"分割.\n\n  ```\n  text/plain：纯文本，文件扩展名.txt\n  text/html：HTML文本，文件扩展名.htm和.html\n  image/jpeg：jpeg格式的图片，文件扩展名.jpg\n  image/gif：GIF格式的图片，文件扩展名.gif\n  audio/x-wave：WAVE格式的音频，文件扩展名.wav\n  audio/mpeg：MP3格式的音频，文件扩展名.mp3\n  video/mpeg：MPEG格式的视频，文件扩展名.mpg\n  application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip\n  ```\n\n  ​\n\n- `response.end()` 每次响应都必须调用 `response.end()` 方法.\n\n  > 该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成\n\n  -  `res.end('Hello World\\n')`\n\n  > Hello World已经被发送.\n\n- `server.listen(port,hostname)`开始在指定的 `port` 和 `hostname` 上接受连接\n\n## 端口\n\n- 端口号是一个 16位的 uint, 所以其范围为 **1 to 65535** \n\n\n\n## URL\n\n- 定义的url格式笼统版本`<scheme>:<scheme-specific-part>`\n\n  > scheme有我们很熟悉的`http`、`https`、`ftp`，以及著名的`ed2k`，`thunder`\n\n- 通常我们熟悉的url定义成这个样子\n\n  ```\n  <scheme>://<user>:<password>@<host>:<port>/<url-path>\n  ```\n\n- 用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:\n\n  ```\n  <scheme>://<host>:<port>/<url-path>\n  ```\n\n  > 在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.\n\n  ​","source":"_posts/Node.md","raw":"---\ntitle: 学Node日志(一)\ndate: 2017-07-26 20：55\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Node.js\n---\n\n# 学Node日志(一)\n\n## node实例\n\n```javascript\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 9000;\n\nconst server = http.createServer((req,res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type','text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port,hostname, () => {\n    console.log('服务器运行在 http://${hostname}:${port}/');\n});\n```\n\n<!--more-->\n\n- `response.statusCode()`控制响应头刷新时将被发送到客户端的状态码\n\n  - `res.statusCode = 200`\n\n  > 状态码\n\n  ```\n  1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。\n  ```\n\n  ​\n\n\n- `response.setHeader()` 响应头如果存在,则值会被覆盖\n\n  > 如果要发送多个名称相同的响应头,则使用字符串数组\n\n  - `res.setHeader('Content-Type','text/plain')`\n\n  > Content-Type表明信息类型,缺省值为\" text/plain\".它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用\"/\"分割.\n\n  ```\n  text/plain：纯文本，文件扩展名.txt\n  text/html：HTML文本，文件扩展名.htm和.html\n  image/jpeg：jpeg格式的图片，文件扩展名.jpg\n  image/gif：GIF格式的图片，文件扩展名.gif\n  audio/x-wave：WAVE格式的音频，文件扩展名.wav\n  audio/mpeg：MP3格式的音频，文件扩展名.mp3\n  video/mpeg：MPEG格式的视频，文件扩展名.mpg\n  application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip\n  ```\n\n  ​\n\n- `response.end()` 每次响应都必须调用 `response.end()` 方法.\n\n  > 该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成\n\n  -  `res.end('Hello World\\n')`\n\n  > Hello World已经被发送.\n\n- `server.listen(port,hostname)`开始在指定的 `port` 和 `hostname` 上接受连接\n\n## 端口\n\n- 端口号是一个 16位的 uint, 所以其范围为 **1 to 65535** \n\n\n\n## URL\n\n- 定义的url格式笼统版本`<scheme>:<scheme-specific-part>`\n\n  > scheme有我们很熟悉的`http`、`https`、`ftp`，以及著名的`ed2k`，`thunder`\n\n- 通常我们熟悉的url定义成这个样子\n\n  ```\n  <scheme>://<user>:<password>@<host>:<port>/<url-path>\n  ```\n\n- 用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:\n\n  ```\n  <scheme>://<host>:<port>/<url-path>\n  ```\n\n  > 在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.\n\n  ​","slug":"Node","published":1,"updated":"2017-07-28T12:40:40.000Z","photos":[],"link":"","_id":"cjollnbqp003nunfyfhqyr86o","content":"<h1 id=\"学Node日志-一\"><a href=\"#学Node日志-一\" class=\"headerlink\" title=\"学Node日志(一)\"></a>学Node日志(一)</h1><h2 id=\"node实例\"><a href=\"#node实例\" class=\"headerlink\" title=\"node实例\"></a>node实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hostname = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">9000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>);</span><br><span class=\"line\">    res.end(<span class=\"string\">'Hello World\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,hostname, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器运行在 http://$&#123;hostname&#125;:$&#123;port&#125;/'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p><code>response.statusCode()</code>控制响应头刷新时将被发送到客户端的状态码</p>\n<ul>\n<li><code>res.statusCode = 200</code></li>\n</ul>\n<blockquote>\n<p>状态码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p><code>response.setHeader()</code> 响应头如果存在,则值会被覆盖</p>\n<blockquote>\n<p>如果要发送多个名称相同的响应头,则使用字符串数组</p>\n</blockquote>\n<ul>\n<li><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Content-Type表明信息类型,缺省值为” text/plain”.它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text/plain：纯文本，文件扩展名.txt</span><br><span class=\"line\">text/html：HTML文本，文件扩展名.htm和.html</span><br><span class=\"line\">image/jpeg：jpeg格式的图片，文件扩展名.jpg</span><br><span class=\"line\">image/gif：GIF格式的图片，文件扩展名.gif</span><br><span class=\"line\">audio/x-wave：WAVE格式的音频，文件扩展名.wav</span><br><span class=\"line\">audio/mpeg：MP3格式的音频，文件扩展名.mp3</span><br><span class=\"line\">video/mpeg：MPEG格式的视频，文件扩展名.mpg</span><br><span class=\"line\">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p><code>response.end()</code> 每次响应都必须调用 <code>response.end()</code> 方法.</p>\n<blockquote>\n<p>该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成</p>\n</blockquote>\n<ul>\n<li><code>res.end(&#39;Hello World\\n&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Hello World已经被发送.</p>\n</blockquote>\n</li>\n<li><p><code>server.listen(port,hostname)</code>开始在指定的 <code>port</code> 和 <code>hostname</code> 上接受连接</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><ul>\n<li>端口号是一个 16位的 uint, 所以其范围为 <strong>1 to 65535</strong> </li>\n</ul>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><ul>\n<li><p>定义的url格式笼统版本<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code></p>\n<blockquote>\n<p>scheme有我们很熟悉的<code>http</code>、<code>https</code>、<code>ftp</code>，以及著名的<code>ed2k</code>，<code>thunder</code></p>\n</blockquote>\n</li>\n<li><p>通常我们熟悉的url定义成这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"学Node日志-一\"><a href=\"#学Node日志-一\" class=\"headerlink\" title=\"学Node日志(一)\"></a>学Node日志(一)</h1><h2 id=\"node实例\"><a href=\"#node实例\" class=\"headerlink\" title=\"node实例\"></a>node实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hostname = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">9000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>);</span><br><span class=\"line\">    res.end(<span class=\"string\">'Hello World\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(port,hostname, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器运行在 http://$&#123;hostname&#125;:$&#123;port&#125;/'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li><p><code>response.statusCode()</code>控制响应头刷新时将被发送到客户端的状态码</p>\n<ul>\n<li><code>res.statusCode = 200</code></li>\n</ul>\n<blockquote>\n<p>状态码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p><code>response.setHeader()</code> 响应头如果存在,则值会被覆盖</p>\n<blockquote>\n<p>如果要发送多个名称相同的响应头,则使用字符串数组</p>\n</blockquote>\n<ul>\n<li><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Content-Type表明信息类型,缺省值为” text/plain”.它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">text/plain：纯文本，文件扩展名.txt</span><br><span class=\"line\">text/html：HTML文本，文件扩展名.htm和.html</span><br><span class=\"line\">image/jpeg：jpeg格式的图片，文件扩展名.jpg</span><br><span class=\"line\">image/gif：GIF格式的图片，文件扩展名.gif</span><br><span class=\"line\">audio/x-wave：WAVE格式的音频，文件扩展名.wav</span><br><span class=\"line\">audio/mpeg：MP3格式的音频，文件扩展名.mp3</span><br><span class=\"line\">video/mpeg：MPEG格式的视频，文件扩展名.mpg</span><br><span class=\"line\">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</span><br></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p><code>response.end()</code> 每次响应都必须调用 <code>response.end()</code> 方法.</p>\n<blockquote>\n<p>该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成</p>\n</blockquote>\n<ul>\n<li><code>res.end(&#39;Hello World\\n&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Hello World已经被发送.</p>\n</blockquote>\n</li>\n<li><p><code>server.listen(port,hostname)</code>开始在指定的 <code>port</code> 和 <code>hostname</code> 上接受连接</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><ul>\n<li>端口号是一个 16位的 uint, 所以其范围为 <strong>1 to 65535</strong> </li>\n</ul>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><ul>\n<li><p>定义的url格式笼统版本<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code></p>\n<blockquote>\n<p>scheme有我们很熟悉的<code>http</code>、<code>https</code>、<code>ftp</code>，以及著名的<code>ed2k</code>，<code>thunder</code></p>\n</blockquote>\n</li>\n<li><p>通常我们熟悉的url定义成这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>"},{"title":"Promise","date":"2017-07-28T09:37:12.000Z","comments":1,"layout":"post","_content":"\n# Promise\n\n```javascript\nnew Promise(\n/* executor */\n   function(resolve,reject){...}\n)\n```\n\n> executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。\n\n一个 `Promise`有以下几种状态:\n\n- *pending*: 初始状态，不是成功或失败状态。\n- *fulfilled*: 意味着操作成功完成。\n- *rejected*: 意味着操作失败。\n\n\n<!--more-->\n\n# Promise对象\n\n- Promise是一个构造函数\n\n\n- 对象的状态不受外界影响\n\n- 一旦状态改变就不会再变,任何时候都可以得到这个结果.\n\n  > 状态改变只有两种可能:从`Pending` 变为`Resolved`(''未完成''变为''成功''将异步操作**成功**的结果作为参数传递出去)\n  >\n  > 从`Pending`变为`Rejected`(\"未完成\"变为\"失败\"将异步操作报出**错误**的结果作为参数传递出去).\n\n\n# Promise原型\n\n## then()方法\n\n### MDN的例子\n\n```javascript\nlet p1 = new Promise(function(resolve, reject) {\n  resolve(\"Success!\");\n  // or\n  // reject (\"Error!\");\n});\n\np1.then(function(value) {\n  console.log(value); // Success!\n}, function(reason) {\n  console.log(reason); // Error!\n});\n```\n\n![promise1](/images/promise1.png)\n\n当我把`reject`去掉注释\n\n![promise2](/images/promise2.png)\n\n![promise3](/images/promise3.png)\n\n说明`p1`已经被声明过了,而且状态改变过了就不会在改变了.\n\n我只能把`p1` 改成别的才能得到`Error`.\n\n## 链式\n\n例子来自<ES6标准入门>\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post){\n  return getJSON(post.commentURL);\n}).then(function funcA(comments){\n  consloe.log(\"Resolved:\",comments);\n},function funcB(err){\n  consloe.log(\"Rejected:\",err);\n});\n```\n\n第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的`funcA`或者`funcB`函数.\n\n## catch()方法\n\n例子来自<ES6标准入门>\n\n**catch()** 方法返回一个[Promise](https://developer.mozilla.org/zh-CN/docs/Web/API/Promise)，只处理拒绝的情况。它的行为与调用**then()**相同。\n\n其实是 **.then(null,rejection)** 的别名.\n\n```JavaScript\np.then((val) => console.log(\"fulfilled:\", val))\n\t.catch((err) => console.log(\"rejected:\", err));\n\n//等同于\n\np.then((val) => console.log(\"fulfilled\", val))\n\t.then(null,(err) => console.log(\"rejected:\", val));\n```\n\n- Promise对象的错误具有\"冒泡\"性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.\n\n# Promise方法\n\n## Promise.all()\n\n**Promise.all(iterable)** 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。\n\n```javascript\nPromise.all(iterable);\n```\n\n> iterable\n>\n> 一个可迭代对象，例如 [`Array`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array)。参见 [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable).\n\n来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)的例子\n\n```javascript\nvar p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n  console.log(values); // [3, 1337, \"foo\"] \n});\n```\n\n## [Promise.resolve(value)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\n\n## [Promise.reject(reason)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)\n\n## [Promise.race(iterable)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\n# 回调函数\n\n一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2017-07-28 20：37\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之旅\n---\n\n# Promise\n\n```javascript\nnew Promise(\n/* executor */\n   function(resolve,reject){...}\n)\n```\n\n> executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。\n\n一个 `Promise`有以下几种状态:\n\n- *pending*: 初始状态，不是成功或失败状态。\n- *fulfilled*: 意味着操作成功完成。\n- *rejected*: 意味着操作失败。\n\n\n<!--more-->\n\n# Promise对象\n\n- Promise是一个构造函数\n\n\n- 对象的状态不受外界影响\n\n- 一旦状态改变就不会再变,任何时候都可以得到这个结果.\n\n  > 状态改变只有两种可能:从`Pending` 变为`Resolved`(''未完成''变为''成功''将异步操作**成功**的结果作为参数传递出去)\n  >\n  > 从`Pending`变为`Rejected`(\"未完成\"变为\"失败\"将异步操作报出**错误**的结果作为参数传递出去).\n\n\n# Promise原型\n\n## then()方法\n\n### MDN的例子\n\n```javascript\nlet p1 = new Promise(function(resolve, reject) {\n  resolve(\"Success!\");\n  // or\n  // reject (\"Error!\");\n});\n\np1.then(function(value) {\n  console.log(value); // Success!\n}, function(reason) {\n  console.log(reason); // Error!\n});\n```\n\n![promise1](/images/promise1.png)\n\n当我把`reject`去掉注释\n\n![promise2](/images/promise2.png)\n\n![promise3](/images/promise3.png)\n\n说明`p1`已经被声明过了,而且状态改变过了就不会在改变了.\n\n我只能把`p1` 改成别的才能得到`Error`.\n\n## 链式\n\n例子来自<ES6标准入门>\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post){\n  return getJSON(post.commentURL);\n}).then(function funcA(comments){\n  consloe.log(\"Resolved:\",comments);\n},function funcB(err){\n  consloe.log(\"Rejected:\",err);\n});\n```\n\n第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的`funcA`或者`funcB`函数.\n\n## catch()方法\n\n例子来自<ES6标准入门>\n\n**catch()** 方法返回一个[Promise](https://developer.mozilla.org/zh-CN/docs/Web/API/Promise)，只处理拒绝的情况。它的行为与调用**then()**相同。\n\n其实是 **.then(null,rejection)** 的别名.\n\n```JavaScript\np.then((val) => console.log(\"fulfilled:\", val))\n\t.catch((err) => console.log(\"rejected:\", err));\n\n//等同于\n\np.then((val) => console.log(\"fulfilled\", val))\n\t.then(null,(err) => console.log(\"rejected:\", val));\n```\n\n- Promise对象的错误具有\"冒泡\"性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.\n\n# Promise方法\n\n## Promise.all()\n\n**Promise.all(iterable)** 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。\n\n```javascript\nPromise.all(iterable);\n```\n\n> iterable\n>\n> 一个可迭代对象，例如 [`Array`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array)。参见 [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable).\n\n来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)的例子\n\n```javascript\nvar p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n  console.log(values); // [3, 1337, \"foo\"] \n});\n```\n\n## [Promise.resolve(value)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\n\n## [Promise.reject(reason)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)\n\n## [Promise.race(iterable)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\n# 回调函数\n\n一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"Promise","published":1,"updated":"2017-12-13T13:44:10.501Z","photos":[],"link":"","_id":"cjollnbqu003sunfyuh3nj9ui","content":"<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</span><br><span class=\"line\"><span class=\"comment\">/* executor */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;...&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n</blockquote>\n<p>一个 <code>Promise</code>有以下几种状态:</p>\n<ul>\n<li><em>pending</em>: 初始状态，不是成功或失败状态。</li>\n<li><em>fulfilled</em>: 意味着操作成功完成。</li>\n<li><em>rejected</em>: 意味着操作失败。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h1><ul>\n<li>Promise是一个构造函数</li>\n</ul>\n<ul>\n<li><p>对象的状态不受外界影响</p>\n</li>\n<li><p>一旦状态改变就不会再变,任何时候都可以得到这个结果.</p>\n<blockquote>\n<p>状态改变只有两种可能:从<code>Pending</code> 变为<code>Resolved</code>(‘’未完成’’变为’’成功’’将异步操作<strong>成功</strong>的结果作为参数传递出去)</p>\n<p>从<code>Pending</code>变为<code>Rejected</code>(“未完成”变为”失败”将异步操作报出<strong>错误</strong>的结果作为参数传递出去).</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"Promise原型\"><a href=\"#Promise原型\" class=\"headerlink\" title=\"Promise原型\"></a>Promise原型</h1><h2 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then()方法\"></a>then()方法</h2><h3 id=\"MDN的例子\"><a href=\"#MDN的例子\" class=\"headerlink\" title=\"MDN的例子\"></a>MDN的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">\"Success!\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// or</span></span><br><span class=\"line\">  <span class=\"comment\">// reject (\"Error!\");</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// Success!</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// Error!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/promise1.png\" alt=\"promise1\"></p>\n<p>当我把<code>reject</code>去掉注释</p>\n<p><img src=\"/images/promise2.png\" alt=\"promise2\"></p>\n<p><img src=\"/images/promise3.png\" alt=\"promise3\"></p>\n<p>说明<code>p1</code>已经被声明过了,而且状态改变过了就不会在改变了.</p>\n<p>我只能把<code>p1</code> 改成别的才能得到<code>Error</code>.</p>\n<h2 id=\"链式\"><a href=\"#链式\" class=\"headerlink\" title=\"链式\"></a>链式</h2><p>例子来自&lt;ES6标准入门&gt;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>)</span>&#123;</span><br><span class=\"line\">  consloe.log(<span class=\"string\">\"Resolved:\"</span>,comments);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  consloe.log(<span class=\"string\">\"Rejected:\"</span>,err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的<code>funcA</code>或者<code>funcB</code>函数.</p>\n<h2 id=\"catch-方法\"><a href=\"#catch-方法\" class=\"headerlink\" title=\"catch()方法\"></a>catch()方法</h2><p>例子来自&lt;ES6标准入门&gt;</p>\n<p><strong>catch()</strong> 方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Promise\" target=\"_blank\" rel=\"noopener\">Promise</a>，只处理拒绝的情况。它的行为与调用<strong>then()</strong>相同。</p>\n<p>其实是 <strong>.then(null,rejection)</strong> 的别名.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled:\"</span>, val))</span><br><span class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled\"</span>, val))</span><br><span class=\"line\">\t.then(<span class=\"literal\">null</span>,(err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, val));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Promise对象的错误具有”冒泡”性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.</li>\n</ul>\n<h1 id=\"Promise方法\"><a href=\"#Promise方法\" class=\"headerlink\" title=\"Promise方法\"></a>Promise方法</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p><strong>Promise.all(iterable)</strong> 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>iterable</p>\n<p>一个可迭代对象，例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array\" target=\"_blank\" rel=\"noopener\"><code>Array</code></a>。参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable\" target=\"_blank\" rel=\"noopener\">iterable</a>.</p>\n</blockquote>\n<p>来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">MDN</a>的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\" target=\"_blank\" rel=\"noopener\">Promise.resolve(value)</a></h2><h2 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\" target=\"_blank\" rel=\"noopener\">Promise.reject(reason)</a></h2><h2 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\" target=\"_blank\" rel=\"noopener\">Promise.race(iterable)</a></h2><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.</p>\n<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 </p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</span><br><span class=\"line\"><span class=\"comment\">/* executor */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;...&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n</blockquote>\n<p>一个 <code>Promise</code>有以下几种状态:</p>\n<ul>\n<li><em>pending</em>: 初始状态，不是成功或失败状态。</li>\n<li><em>fulfilled</em>: 意味着操作成功完成。</li>\n<li><em>rejected</em>: 意味着操作失败。</li>\n</ul>","more":"<h1 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h1><ul>\n<li>Promise是一个构造函数</li>\n</ul>\n<ul>\n<li><p>对象的状态不受外界影响</p>\n</li>\n<li><p>一旦状态改变就不会再变,任何时候都可以得到这个结果.</p>\n<blockquote>\n<p>状态改变只有两种可能:从<code>Pending</code> 变为<code>Resolved</code>(‘’未完成’’变为’’成功’’将异步操作<strong>成功</strong>的结果作为参数传递出去)</p>\n<p>从<code>Pending</code>变为<code>Rejected</code>(“未完成”变为”失败”将异步操作报出<strong>错误</strong>的结果作为参数传递出去).</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"Promise原型\"><a href=\"#Promise原型\" class=\"headerlink\" title=\"Promise原型\"></a>Promise原型</h1><h2 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then()方法\"></a>then()方法</h2><h3 id=\"MDN的例子\"><a href=\"#MDN的例子\" class=\"headerlink\" title=\"MDN的例子\"></a>MDN的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">\"Success!\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">// or</span></span><br><span class=\"line\">  <span class=\"comment\">// reject (\"Error!\");</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// Success!</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// Error!</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/promise1.png\" alt=\"promise1\"></p>\n<p>当我把<code>reject</code>去掉注释</p>\n<p><img src=\"/images/promise2.png\" alt=\"promise2\"></p>\n<p><img src=\"/images/promise3.png\" alt=\"promise3\"></p>\n<p>说明<code>p1</code>已经被声明过了,而且状态改变过了就不会在改变了.</p>\n<p>我只能把<code>p1</code> 改成别的才能得到<code>Error</code>.</p>\n<h2 id=\"链式\"><a href=\"#链式\" class=\"headerlink\" title=\"链式\"></a>链式</h2><p>例子来自&lt;ES6标准入门&gt;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>)</span>&#123;</span><br><span class=\"line\">  consloe.log(<span class=\"string\">\"Resolved:\"</span>,comments);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  consloe.log(<span class=\"string\">\"Rejected:\"</span>,err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的<code>funcA</code>或者<code>funcB</code>函数.</p>\n<h2 id=\"catch-方法\"><a href=\"#catch-方法\" class=\"headerlink\" title=\"catch()方法\"></a>catch()方法</h2><p>例子来自&lt;ES6标准入门&gt;</p>\n<p><strong>catch()</strong> 方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Promise\" target=\"_blank\" rel=\"noopener\">Promise</a>，只处理拒绝的情况。它的行为与调用<strong>then()</strong>相同。</p>\n<p>其实是 <strong>.then(null,rejection)</strong> 的别名.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled:\"</span>, val))</span><br><span class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled\"</span>, val))</span><br><span class=\"line\">\t.then(<span class=\"literal\">null</span>,(err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, val));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Promise对象的错误具有”冒泡”性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.</li>\n</ul>\n<h1 id=\"Promise方法\"><a href=\"#Promise方法\" class=\"headerlink\" title=\"Promise方法\"></a>Promise方法</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p><strong>Promise.all(iterable)</strong> 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>iterable</p>\n<p>一个可迭代对象，例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array\" target=\"_blank\" rel=\"noopener\"><code>Array</code></a>。参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable\" target=\"_blank\" rel=\"noopener\">iterable</a>.</p>\n</blockquote>\n<p>来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"noopener\">MDN</a>的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\" target=\"_blank\" rel=\"noopener\">Promise.resolve(value)</a></h2><h2 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\" target=\"_blank\" rel=\"noopener\">Promise.reject(reason)</a></h2><h2 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\" target=\"_blank\" rel=\"noopener\">Promise.race(iterable)</a></h2><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.</p>\n<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 </p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>"},{"title":"React Native iOS/android环境配置","date":"2017-08-14T04:32:53.000Z","comments":1,"layout":"post","_content":"\n# React Native环境配置\n\n# Ios开发环境\n\n因为我是在mac下搭建环境的。所以比较方便。\n\n- Xcode时**必须**的！\n\n- brew install node        //电脑需要有**node**\n\n- brew install watchman    //这是用来监视文件系统中的更改的工具\n\n- npm install -g react-native-cli\n\n  然后我们打开 **Xcode**\n\n  ![xcode](/images/xcode.png)\n\n  <!--more-->\n\n接下来我们需要执行命令\n\n**react-native init AwesomeProject**\n\nThen：我们需要在Xcode里打开\n\n![xcode文件](/images/xcode文件.png)\n\n```\n接着在终端里\ncd AwesomeProject\nthen：\nreact-native run-ios\n```\n\n接下来我们等就好了\n\n![iphonex](/images/iphonex.png)\n\n这就是成功界面\n\n恭喜🎉！\n\n# Android环境\n\n第一步与ios一样\n\n- brew install node      \n- brew install watchman   \n\n我们就不做了。\n\n接下来\n\n## 我们需要安装`Java`的环境。\n\n[Download and install JDK 8 or newer](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n## 安装`Android`环境\n\n1. 安装 **[Android studio](https://developer.android.com/studio/index.html)** \n2. ![custon](/images/custon.png)\n3. 勾选`Performance`和`Android Virtual Device`![sdk](/images/sdk.png)\n4. 安装完成后，在Android Studio的启动欢迎界面中选择`Configure | SDK Manager`。![config](/images/config.png)\n5. 在`SDK Platforms`窗口中，选择`Show Package Details`\n\n![palt](/images/palt.png)\n\n然后tools里\n\n![sdttool](/images/sdttool.png)\n\n![sdktools](/images/sdktools.png)\n\n![sdksuppt](/images/sdksuppt.png)\n\n#### ANDROID_HOME环境变量\n\n确保`ANDROID_HOME`环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到`~/.bash_profile`文件中：(**译注**：~表示用户目录，即`/Users/你的用户名/`，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用`vi ~/.bash_profile`命令创建或编辑。如不熟悉vi操作，请点击[这里](http://www.eepw.com.cn/article/48018.htm)学习）\n\n```\n# 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。\nexport ANDROID_HOME=~/Library/Android/sdk\n\n```\n\n然后使用下列命令使其立即生效（否则重启后才生效）：\n\n```\nsource ~/.bash_profile\n\n```\n\n可以使用`echo $ANDROID_HOME`检查此变量是否已正确设置。\n\n## 最后\n\n同样我们需要在`Android studio`中打开创建的文件夹下Android文件\n\n然后去build\n\n![studio](/images/studio.png)\n\n圆圈是选手机机型。\n\n我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：\n\n```\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run-android\n```\n\n下面就是成功画面！恭喜🎉！![Android](/images/Android.png)\n\n# 在搭建环境下踩得坑\n\n## Android下\n\n![安卓bug](/images/安卓bug.png)\n\n这是我运行安卓的时候遇到的问题。我们需要在 **Android studio**先启动一个手机模拟器再去终端里输入指令：`react-native run-android` 就可以了\n\n\n\n\n\n![android tools](/images/android tools.png)\n\n这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0\n\n但是我升级过后还不行。发现是配置文件里的问题。\n\n![gaibuild](/images/gaibuild.png)\n\n这样就行啦！\n\n\n\n## Ios下\n\n具体出错问题描述找不到了，但是情况还是记得的。\n\n就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。\n\n这时候google到答案。。\n\n![ios解决问题1](/images/ios解决问题1.png)\n\n需要开一个终端，然后去在你的项目下`npm install` 就是这样。。具体情况我也不知道发生了什么哈哈哈","source":"_posts/React Native环境配置.md","raw":"---\ntitle: React Native iOS/android环境配置\ndate: 2017-08-14 14：54\ncomments: true\nlayout: post\ntags: [React Native]\ncategories: React Native\n---\n\n# React Native环境配置\n\n# Ios开发环境\n\n因为我是在mac下搭建环境的。所以比较方便。\n\n- Xcode时**必须**的！\n\n- brew install node        //电脑需要有**node**\n\n- brew install watchman    //这是用来监视文件系统中的更改的工具\n\n- npm install -g react-native-cli\n\n  然后我们打开 **Xcode**\n\n  ![xcode](/images/xcode.png)\n\n  <!--more-->\n\n接下来我们需要执行命令\n\n**react-native init AwesomeProject**\n\nThen：我们需要在Xcode里打开\n\n![xcode文件](/images/xcode文件.png)\n\n```\n接着在终端里\ncd AwesomeProject\nthen：\nreact-native run-ios\n```\n\n接下来我们等就好了\n\n![iphonex](/images/iphonex.png)\n\n这就是成功界面\n\n恭喜🎉！\n\n# Android环境\n\n第一步与ios一样\n\n- brew install node      \n- brew install watchman   \n\n我们就不做了。\n\n接下来\n\n## 我们需要安装`Java`的环境。\n\n[Download and install JDK 8 or newer](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n## 安装`Android`环境\n\n1. 安装 **[Android studio](https://developer.android.com/studio/index.html)** \n2. ![custon](/images/custon.png)\n3. 勾选`Performance`和`Android Virtual Device`![sdk](/images/sdk.png)\n4. 安装完成后，在Android Studio的启动欢迎界面中选择`Configure | SDK Manager`。![config](/images/config.png)\n5. 在`SDK Platforms`窗口中，选择`Show Package Details`\n\n![palt](/images/palt.png)\n\n然后tools里\n\n![sdttool](/images/sdttool.png)\n\n![sdktools](/images/sdktools.png)\n\n![sdksuppt](/images/sdksuppt.png)\n\n#### ANDROID_HOME环境变量\n\n确保`ANDROID_HOME`环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到`~/.bash_profile`文件中：(**译注**：~表示用户目录，即`/Users/你的用户名/`，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用`vi ~/.bash_profile`命令创建或编辑。如不熟悉vi操作，请点击[这里](http://www.eepw.com.cn/article/48018.htm)学习）\n\n```\n# 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。\nexport ANDROID_HOME=~/Library/Android/sdk\n\n```\n\n然后使用下列命令使其立即生效（否则重启后才生效）：\n\n```\nsource ~/.bash_profile\n\n```\n\n可以使用`echo $ANDROID_HOME`检查此变量是否已正确设置。\n\n## 最后\n\n同样我们需要在`Android studio`中打开创建的文件夹下Android文件\n\n然后去build\n\n![studio](/images/studio.png)\n\n圆圈是选手机机型。\n\n我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：\n\n```\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run-android\n```\n\n下面就是成功画面！恭喜🎉！![Android](/images/Android.png)\n\n# 在搭建环境下踩得坑\n\n## Android下\n\n![安卓bug](/images/安卓bug.png)\n\n这是我运行安卓的时候遇到的问题。我们需要在 **Android studio**先启动一个手机模拟器再去终端里输入指令：`react-native run-android` 就可以了\n\n\n\n\n\n![android tools](/images/android tools.png)\n\n这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0\n\n但是我升级过后还不行。发现是配置文件里的问题。\n\n![gaibuild](/images/gaibuild.png)\n\n这样就行啦！\n\n\n\n## Ios下\n\n具体出错问题描述找不到了，但是情况还是记得的。\n\n就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。\n\n这时候google到答案。。\n\n![ios解决问题1](/images/ios解决问题1.png)\n\n需要开一个终端，然后去在你的项目下`npm install` 就是这样。。具体情况我也不知道发生了什么哈哈哈","slug":"React Native环境配置","published":1,"updated":"2018-01-30T13:46:14.008Z","photos":[],"link":"","_id":"cjollnbqz003vunfyqlxjclc1","content":"<h1 id=\"React-Native环境配置\"><a href=\"#React-Native环境配置\" class=\"headerlink\" title=\"React Native环境配置\"></a>React Native环境配置</h1><h1 id=\"Ios开发环境\"><a href=\"#Ios开发环境\" class=\"headerlink\" title=\"Ios开发环境\"></a>Ios开发环境</h1><p>因为我是在mac下搭建环境的。所以比较方便。</p>\n<ul>\n<li><p>Xcode时<strong>必须</strong>的！</p>\n</li>\n<li><p>brew install node        //电脑需要有<strong>node</strong></p>\n</li>\n<li><p>brew install watchman    //这是用来监视文件系统中的更改的工具</p>\n</li>\n<li><p>npm install -g react-native-cli</p>\n<p>然后我们打开 <strong>Xcode</strong></p>\n<p><img src=\"/images/xcode.png\" alt=\"xcode\"></p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<p>接下来我们需要执行命令</p>\n<p><strong>react-native init AwesomeProject</strong></p>\n<p>Then：我们需要在Xcode里打开</p>\n<p><img src=\"/images/xcode文件.png\" alt=\"xcode文件\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着在终端里</span><br><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">then：</span><br><span class=\"line\">react-native run-ios</span><br></pre></td></tr></table></figure>\n<p>接下来我们等就好了</p>\n<p><img src=\"/images/iphonex.png\" alt=\"iphonex\"></p>\n<p>这就是成功界面</p>\n<p>恭喜🎉！</p>\n<h1 id=\"Android环境\"><a href=\"#Android环境\" class=\"headerlink\" title=\"Android环境\"></a>Android环境</h1><p>第一步与ios一样</p>\n<ul>\n<li>brew install node      </li>\n<li>brew install watchman   </li>\n</ul>\n<p>我们就不做了。</p>\n<p>接下来</p>\n<h2 id=\"我们需要安装Java的环境。\"><a href=\"#我们需要安装Java的环境。\" class=\"headerlink\" title=\"我们需要安装Java的环境。\"></a>我们需要安装<code>Java</code>的环境。</h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">Download and install JDK 8 or newer</a></p>\n<h2 id=\"安装Android环境\"><a href=\"#安装Android环境\" class=\"headerlink\" title=\"安装Android环境\"></a>安装<code>Android</code>环境</h2><ol>\n<li>安装 <strong><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"noopener\">Android studio</a></strong> </li>\n<li><img src=\"/images/custon.png\" alt=\"custon\"></li>\n<li>勾选<code>Performance</code>和<code>Android Virtual Device</code><img src=\"/images/sdk.png\" alt=\"sdk\"></li>\n<li>安装完成后，在Android Studio的启动欢迎界面中选择<code>Configure | SDK Manager</code>。<img src=\"/images/config.png\" alt=\"config\"></li>\n<li>在<code>SDK Platforms</code>窗口中，选择<code>Show Package Details</code></li>\n</ol>\n<p><img src=\"/images/palt.png\" alt=\"palt\"></p>\n<p>然后tools里</p>\n<p><img src=\"/images/sdttool.png\" alt=\"sdttool\"></p>\n<p><img src=\"/images/sdktools.png\" alt=\"sdktools\"></p>\n<p><img src=\"/images/sdksuppt.png\" alt=\"sdksuppt\"></p>\n<h4 id=\"ANDROID-HOME环境变量\"><a href=\"#ANDROID-HOME环境变量\" class=\"headerlink\" title=\"ANDROID_HOME环境变量\"></a>ANDROID_HOME环境变量</h4><p>确保<code>ANDROID_HOME</code>环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到<code>~/.bash_profile</code>文件中：(<strong>译注</strong>：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑。如不熟悉vi操作，请点击<a href=\"http://www.eepw.com.cn/article/48018.htm\" target=\"_blank\" rel=\"noopener\">这里</a>学习）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</span><br><span class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</span><br></pre></td></tr></table></figure>\n<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>echo $ANDROID_HOME</code>检查此变量是否已正确设置。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>同样我们需要在<code>Android studio</code>中打开创建的文件夹下Android文件</p>\n<p>然后去build</p>\n<p><img src=\"/images/studio.png\" alt=\"studio\"></p>\n<p>圆圈是选手机机型。</p>\n<p>我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init AwesomeProject</span><br><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">react-native run-android</span><br></pre></td></tr></table></figure>\n<p>下面就是成功画面！恭喜🎉！<img src=\"/images/Android.png\" alt=\"Android\"></p>\n<h1 id=\"在搭建环境下踩得坑\"><a href=\"#在搭建环境下踩得坑\" class=\"headerlink\" title=\"在搭建环境下踩得坑\"></a>在搭建环境下踩得坑</h1><h2 id=\"Android下\"><a href=\"#Android下\" class=\"headerlink\" title=\"Android下\"></a>Android下</h2><p><img src=\"/images/安卓bug.png\" alt=\"安卓bug\"></p>\n<p>这是我运行安卓的时候遇到的问题。我们需要在 <strong>Android studio</strong>先启动一个手机模拟器再去终端里输入指令：<code>react-native run-android</code> 就可以了</p>\n<p><img src=\"/images/android tools.png\" alt=\"android tools\"></p>\n<p>这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0</p>\n<p>但是我升级过后还不行。发现是配置文件里的问题。</p>\n<p><img src=\"/images/gaibuild.png\" alt=\"gaibuild\"></p>\n<p>这样就行啦！</p>\n<h2 id=\"Ios下\"><a href=\"#Ios下\" class=\"headerlink\" title=\"Ios下\"></a>Ios下</h2><p>具体出错问题描述找不到了，但是情况还是记得的。</p>\n<p>就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。</p>\n<p>这时候google到答案。。</p>\n<p><img src=\"/images/ios解决问题1.png\" alt=\"ios解决问题1\"></p>\n<p>需要开一个终端，然后去在你的项目下<code>npm install</code> 就是这样。。具体情况我也不知道发生了什么哈哈哈</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"React-Native环境配置\"><a href=\"#React-Native环境配置\" class=\"headerlink\" title=\"React Native环境配置\"></a>React Native环境配置</h1><h1 id=\"Ios开发环境\"><a href=\"#Ios开发环境\" class=\"headerlink\" title=\"Ios开发环境\"></a>Ios开发环境</h1><p>因为我是在mac下搭建环境的。所以比较方便。</p>\n<ul>\n<li><p>Xcode时<strong>必须</strong>的！</p>\n</li>\n<li><p>brew install node        //电脑需要有<strong>node</strong></p>\n</li>\n<li><p>brew install watchman    //这是用来监视文件系统中的更改的工具</p>\n</li>\n<li><p>npm install -g react-native-cli</p>\n<p>然后我们打开 <strong>Xcode</strong></p>\n<p><img src=\"/images/xcode.png\" alt=\"xcode\"></p>","more":"</li>\n</ul>\n<p>接下来我们需要执行命令</p>\n<p><strong>react-native init AwesomeProject</strong></p>\n<p>Then：我们需要在Xcode里打开</p>\n<p><img src=\"/images/xcode文件.png\" alt=\"xcode文件\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接着在终端里</span><br><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">then：</span><br><span class=\"line\">react-native run-ios</span><br></pre></td></tr></table></figure>\n<p>接下来我们等就好了</p>\n<p><img src=\"/images/iphonex.png\" alt=\"iphonex\"></p>\n<p>这就是成功界面</p>\n<p>恭喜🎉！</p>\n<h1 id=\"Android环境\"><a href=\"#Android环境\" class=\"headerlink\" title=\"Android环境\"></a>Android环境</h1><p>第一步与ios一样</p>\n<ul>\n<li>brew install node      </li>\n<li>brew install watchman   </li>\n</ul>\n<p>我们就不做了。</p>\n<p>接下来</p>\n<h2 id=\"我们需要安装Java的环境。\"><a href=\"#我们需要安装Java的环境。\" class=\"headerlink\" title=\"我们需要安装Java的环境。\"></a>我们需要安装<code>Java</code>的环境。</h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">Download and install JDK 8 or newer</a></p>\n<h2 id=\"安装Android环境\"><a href=\"#安装Android环境\" class=\"headerlink\" title=\"安装Android环境\"></a>安装<code>Android</code>环境</h2><ol>\n<li>安装 <strong><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"noopener\">Android studio</a></strong> </li>\n<li><img src=\"/images/custon.png\" alt=\"custon\"></li>\n<li>勾选<code>Performance</code>和<code>Android Virtual Device</code><img src=\"/images/sdk.png\" alt=\"sdk\"></li>\n<li>安装完成后，在Android Studio的启动欢迎界面中选择<code>Configure | SDK Manager</code>。<img src=\"/images/config.png\" alt=\"config\"></li>\n<li>在<code>SDK Platforms</code>窗口中，选择<code>Show Package Details</code></li>\n</ol>\n<p><img src=\"/images/palt.png\" alt=\"palt\"></p>\n<p>然后tools里</p>\n<p><img src=\"/images/sdttool.png\" alt=\"sdttool\"></p>\n<p><img src=\"/images/sdktools.png\" alt=\"sdktools\"></p>\n<p><img src=\"/images/sdksuppt.png\" alt=\"sdksuppt\"></p>\n<h4 id=\"ANDROID-HOME环境变量\"><a href=\"#ANDROID-HOME环境变量\" class=\"headerlink\" title=\"ANDROID_HOME环境变量\"></a>ANDROID_HOME环境变量</h4><p>确保<code>ANDROID_HOME</code>环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到<code>~/.bash_profile</code>文件中：(<strong>译注</strong>：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑。如不熟悉vi操作，请点击<a href=\"http://www.eepw.com.cn/article/48018.htm\" target=\"_blank\" rel=\"noopener\">这里</a>学习）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</span><br><span class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</span><br></pre></td></tr></table></figure>\n<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>可以使用<code>echo $ANDROID_HOME</code>检查此变量是否已正确设置。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>同样我们需要在<code>Android studio</code>中打开创建的文件夹下Android文件</p>\n<p>然后去build</p>\n<p><img src=\"/images/studio.png\" alt=\"studio\"></p>\n<p>圆圈是选手机机型。</p>\n<p>我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init AwesomeProject</span><br><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">react-native run-android</span><br></pre></td></tr></table></figure>\n<p>下面就是成功画面！恭喜🎉！<img src=\"/images/Android.png\" alt=\"Android\"></p>\n<h1 id=\"在搭建环境下踩得坑\"><a href=\"#在搭建环境下踩得坑\" class=\"headerlink\" title=\"在搭建环境下踩得坑\"></a>在搭建环境下踩得坑</h1><h2 id=\"Android下\"><a href=\"#Android下\" class=\"headerlink\" title=\"Android下\"></a>Android下</h2><p><img src=\"/images/安卓bug.png\" alt=\"安卓bug\"></p>\n<p>这是我运行安卓的时候遇到的问题。我们需要在 <strong>Android studio</strong>先启动一个手机模拟器再去终端里输入指令：<code>react-native run-android</code> 就可以了</p>\n<p><img src=\"/images/android tools.png\" alt=\"android tools\"></p>\n<p>这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0</p>\n<p>但是我升级过后还不行。发现是配置文件里的问题。</p>\n<p><img src=\"/images/gaibuild.png\" alt=\"gaibuild\"></p>\n<p>这样就行啦！</p>\n<h2 id=\"Ios下\"><a href=\"#Ios下\" class=\"headerlink\" title=\"Ios下\"></a>Ios下</h2><p>具体出错问题描述找不到了，但是情况还是记得的。</p>\n<p>就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。</p>\n<p>这时候google到答案。。</p>\n<p><img src=\"/images/ios解决问题1.png\" alt=\"ios解决问题1\"></p>\n<p>需要开一个终端，然后去在你的项目下<code>npm install</code> 就是这样。。具体情况我也不知道发生了什么哈哈哈</p>"},{"title":"Prettier Option","date":"2018-02-09T09:50:00.000Z","comments":1,"layout":"post","_content":"\n# Prettier Option\n\n.Prettierrc\n\nCli是在终端使用，\n\nApi是在`.Prettierrc`中设置使用\n<!--more-->\n## printWidth\n\n打印宽度指定打印将换行的行长。\n\n| Default |    Cli Override     |   Api Override    |\n| ------- | :-----------------: | :---------------: |\n| 80      | --print-width <int> | printWidth: <int> |\n\n## Tab Width\n\n指定每个缩进的空格数。\n\n| Default |   Cli Override    |  Api Override   |\n| :-----: | :---------------: | :-------------: |\n|    2    | --tab-width <int> | tabWidth: <int> |\n\n## Tabs\n\n用`Tab`缩进而不是空格\n\n| Default |   Cli Override   |  Api Override   |\n| :-----: | :--------------: | :-------------: |\n|  false  | --use-tabs <int> | useTabs: <bool> |\n\n## Semicolons\n\n在语句的末尾打印分号。\n\n有效的选项：\n\n* true  - 在每个语句的末尾添加一个分号。\n* false - 只在可能引入ASI故障的行的开头添加分号。\n\n| Default |  Cli Override   | Api Override |\n| :-----: | :-------------: | :----------: |\n|  true   | --no-semi <int> | semi: <bool> |\n\n## Quotes\n\n使用单引号而不是双引号。\n\n| Default |  Cli Override  |    Api Override     |\n| :-----: | :------------: | :-----------------: |\n|  false  | --single-quote | singleQuote: <bool> |\n\n## Trailing Commas\n\n多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）\n\n有效选项：\n\n* none - 没有尾随逗号。\n* es5 - 在ES5中有效的尾随逗号（object，arrays等）\n* all - 尽可能尾随逗号（包括函数参数）。\n\n| Default |           Cli Override            |           Api Override            |\n| :-----: | :-------------------------------: | :-------------------------------: |\n|  None   | --trailing-comma <none\\|es5\\|all> | trailingComma: \"<none\\|es5\\|all>\" |\n\n## Bracket Spacing\n\n在对象文字中的括号之间打印空格。\n\n选项：\n\n* true - Example { foo: bar }\n* flase - Example {foo: bar}\n\n| Default | Cli Override         | Api Override           |\n| :-----: | -------------------- | ---------------------- |\n|  true   | --no-bracket-spacing | bracketSpacing: <bool> |\n\n## JSX Brackets\n\n将多行JSX元素的 `>` 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。\n\n| Default |      Cli Override       |        Api Override        |\n| :-----: | :---------------------: | :------------------------: |\n|  false  | --jsx-bracket-same-line | jsxBracketSameLine: <bool> |\n\n## Arrow Function Parentheses\n\n围绕一个唯一的箭头函数参数包括括号。\n\n选项：\n\n* avoid - 尽可能省略括号 Example： x => x\n* always - 总是包括括号 Example： (x) => x\n\n| Default |          Cli Override          |          Api Override          |\n| :-----: | :----------------------------: | :----------------------------: |\n|  avoid  | --arrow-parens <avoid\\|always> | arrowParens: \"<avoid\\|always>\" |\n\n## Range\n\n只格式化文件的一部分。\n\n这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:\n\n* 返回到包含选定语句的第一行的开头。 \n* 转到选定语句的末尾。\n\n这些选项不能与cursorOffset一起使用。\n\n| Default  |    Cli Override     |   Api Override    |\n| :------: | :-----------------: | :---------------: |\n|    0     | --range-start <int> | rangeStart: <int> |\n| Infinity |  --range-end <int>  |  rangeEnd: <int>  |\n\n## Parser\n\n指定使用哪个分析器。\n\nBabylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。\n\nBuilt-in parsers:\n\n- [`babylon`](https://github.com/babel/babel/tree/master/packages/babylon)\n- [`flow`](https://github.com/facebook/flow/tree/master/src/parser)\n- [`typescript`](https://github.com/eslint/typescript-eslint-parser) *Since v1.4.0*\n- [`postcss`](https://github.com/postcss/postcss) *Since v1.4.0*\n- [`json`](https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options) *Since v1.5.0*\n- [`graphql`](https://github.com/graphql/graphql-js/tree/master/src/language) *Since v1.5.0*\n- [`markdown`](https://github.com/wooorm/remark/tree/master/packages/remark-parse) *Since v1.8.0*\n\n| Default | Cli Override                                | Api Override                                           |\n| :-----: | :------------------------------------------ | :----------------------------------------------------- |\n| babylon | --parser <string><br />--parser ./my-parser | parser: \"<string>\"<br />parser: require(\"./my-parser\") |\n\n## FilePath\n\n指定输入文件路径。这将被用来做解析器推理。\n\n例如，以下将使用postcss解析器：\n\n> cat foo | prettier --stdin-filepath foo.css\n\n| Default | Cli Override              | Api Override         |\n| ------- | ------------------------- | -------------------- |\n| None    | --stdin-filepath <string> | filepath: \"<string>\" |\n\n## Require pragma\n\nPrettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。\n\n例如，当提供--require-pragma时，将会格式化具有以下第一个注释的文件：\n\n```\n/**\n * @prettier\n */\n```\n\nor\n\n```\n/**\n * @format\n */\n```\n\n| Default |   Cli Override   |     Api Override      |\n| :-----: | :--------------: | :-------------------: |\n|  false  | --require-pragma | requirePragma: <bool> |\n\n## Insert Pragma\n\nPrettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。\n\n| Default |  Cli Override   |     Api Override     |\n| :-----: | :-------------: | :------------------: |\n|  false  | --insert-pragma | insertPragma: <bool> |\n\n## Prose Wrap\n\n默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。\n\n选项：\n\n- `\"always\"` - 如果超出了打印宽度，请将散的包好。\n- `\"never\"` - 不包散的。\n- `\"preserve\"` - 按原样包散的。\n\n|  Default   |              Cli Override              |              Api Override              |\n| :--------: | :------------------------------------: | :------------------------------------: |\n| \"preserve\" | --prose-wrap <always\\|never\\|preserve> | proseWrap: \"<always\\|never\\|preserve>\" |\n\n","source":"_posts/Prettier-Options.md","raw":"---\ntitle: Prettier Option\ndate: 2018-02-09 17:50\ncomments: true\nlayout: post\ntags: [前端工具]\ncategories: 前端工具\n---\n\n# Prettier Option\n\n.Prettierrc\n\nCli是在终端使用，\n\nApi是在`.Prettierrc`中设置使用\n<!--more-->\n## printWidth\n\n打印宽度指定打印将换行的行长。\n\n| Default |    Cli Override     |   Api Override    |\n| ------- | :-----------------: | :---------------: |\n| 80      | --print-width <int> | printWidth: <int> |\n\n## Tab Width\n\n指定每个缩进的空格数。\n\n| Default |   Cli Override    |  Api Override   |\n| :-----: | :---------------: | :-------------: |\n|    2    | --tab-width <int> | tabWidth: <int> |\n\n## Tabs\n\n用`Tab`缩进而不是空格\n\n| Default |   Cli Override   |  Api Override   |\n| :-----: | :--------------: | :-------------: |\n|  false  | --use-tabs <int> | useTabs: <bool> |\n\n## Semicolons\n\n在语句的末尾打印分号。\n\n有效的选项：\n\n* true  - 在每个语句的末尾添加一个分号。\n* false - 只在可能引入ASI故障的行的开头添加分号。\n\n| Default |  Cli Override   | Api Override |\n| :-----: | :-------------: | :----------: |\n|  true   | --no-semi <int> | semi: <bool> |\n\n## Quotes\n\n使用单引号而不是双引号。\n\n| Default |  Cli Override  |    Api Override     |\n| :-----: | :------------: | :-----------------: |\n|  false  | --single-quote | singleQuote: <bool> |\n\n## Trailing Commas\n\n多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）\n\n有效选项：\n\n* none - 没有尾随逗号。\n* es5 - 在ES5中有效的尾随逗号（object，arrays等）\n* all - 尽可能尾随逗号（包括函数参数）。\n\n| Default |           Cli Override            |           Api Override            |\n| :-----: | :-------------------------------: | :-------------------------------: |\n|  None   | --trailing-comma <none\\|es5\\|all> | trailingComma: \"<none\\|es5\\|all>\" |\n\n## Bracket Spacing\n\n在对象文字中的括号之间打印空格。\n\n选项：\n\n* true - Example { foo: bar }\n* flase - Example {foo: bar}\n\n| Default | Cli Override         | Api Override           |\n| :-----: | -------------------- | ---------------------- |\n|  true   | --no-bracket-spacing | bracketSpacing: <bool> |\n\n## JSX Brackets\n\n将多行JSX元素的 `>` 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。\n\n| Default |      Cli Override       |        Api Override        |\n| :-----: | :---------------------: | :------------------------: |\n|  false  | --jsx-bracket-same-line | jsxBracketSameLine: <bool> |\n\n## Arrow Function Parentheses\n\n围绕一个唯一的箭头函数参数包括括号。\n\n选项：\n\n* avoid - 尽可能省略括号 Example： x => x\n* always - 总是包括括号 Example： (x) => x\n\n| Default |          Cli Override          |          Api Override          |\n| :-----: | :----------------------------: | :----------------------------: |\n|  avoid  | --arrow-parens <avoid\\|always> | arrowParens: \"<avoid\\|always>\" |\n\n## Range\n\n只格式化文件的一部分。\n\n这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:\n\n* 返回到包含选定语句的第一行的开头。 \n* 转到选定语句的末尾。\n\n这些选项不能与cursorOffset一起使用。\n\n| Default  |    Cli Override     |   Api Override    |\n| :------: | :-----------------: | :---------------: |\n|    0     | --range-start <int> | rangeStart: <int> |\n| Infinity |  --range-end <int>  |  rangeEnd: <int>  |\n\n## Parser\n\n指定使用哪个分析器。\n\nBabylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。\n\nBuilt-in parsers:\n\n- [`babylon`](https://github.com/babel/babel/tree/master/packages/babylon)\n- [`flow`](https://github.com/facebook/flow/tree/master/src/parser)\n- [`typescript`](https://github.com/eslint/typescript-eslint-parser) *Since v1.4.0*\n- [`postcss`](https://github.com/postcss/postcss) *Since v1.4.0*\n- [`json`](https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options) *Since v1.5.0*\n- [`graphql`](https://github.com/graphql/graphql-js/tree/master/src/language) *Since v1.5.0*\n- [`markdown`](https://github.com/wooorm/remark/tree/master/packages/remark-parse) *Since v1.8.0*\n\n| Default | Cli Override                                | Api Override                                           |\n| :-----: | :------------------------------------------ | :----------------------------------------------------- |\n| babylon | --parser <string><br />--parser ./my-parser | parser: \"<string>\"<br />parser: require(\"./my-parser\") |\n\n## FilePath\n\n指定输入文件路径。这将被用来做解析器推理。\n\n例如，以下将使用postcss解析器：\n\n> cat foo | prettier --stdin-filepath foo.css\n\n| Default | Cli Override              | Api Override         |\n| ------- | ------------------------- | -------------------- |\n| None    | --stdin-filepath <string> | filepath: \"<string>\" |\n\n## Require pragma\n\nPrettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。\n\n例如，当提供--require-pragma时，将会格式化具有以下第一个注释的文件：\n\n```\n/**\n * @prettier\n */\n```\n\nor\n\n```\n/**\n * @format\n */\n```\n\n| Default |   Cli Override   |     Api Override      |\n| :-----: | :--------------: | :-------------------: |\n|  false  | --require-pragma | requirePragma: <bool> |\n\n## Insert Pragma\n\nPrettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。\n\n| Default |  Cli Override   |     Api Override     |\n| :-----: | :-------------: | :------------------: |\n|  false  | --insert-pragma | insertPragma: <bool> |\n\n## Prose Wrap\n\n默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。\n\n选项：\n\n- `\"always\"` - 如果超出了打印宽度，请将散的包好。\n- `\"never\"` - 不包散的。\n- `\"preserve\"` - 按原样包散的。\n\n|  Default   |              Cli Override              |              Api Override              |\n| :--------: | :------------------------------------: | :------------------------------------: |\n| \"preserve\" | --prose-wrap <always\\|never\\|preserve> | proseWrap: \"<always\\|never\\|preserve>\" |\n\n","slug":"Prettier-Options","published":1,"updated":"2018-03-05T07:27:16.739Z","photos":[],"link":"","_id":"cjollnbr80040unfytt4muytb","content":"<h1 id=\"Prettier-Option\"><a href=\"#Prettier-Option\" class=\"headerlink\" title=\"Prettier Option\"></a>Prettier Option</h1><p>.Prettierrc</p>\n<p>Cli是在终端使用，</p>\n<p>Api是在<code>.Prettierrc</code>中设置使用<br><a id=\"more\"></a></p>\n<h2 id=\"printWidth\"><a href=\"#printWidth\" class=\"headerlink\" title=\"printWidth\"></a>printWidth</h2><p>打印宽度指定打印将换行的行长。</p>\n<table>\n<thead>\n<tr>\n<th>Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>80</td>\n<td style=\"text-align:center\">–print-width <int></int></td>\n<td style=\"text-align:center\">printWidth: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Tab-Width\"><a href=\"#Tab-Width\" class=\"headerlink\" title=\"Tab Width\"></a>Tab Width</h2><p>指定每个缩进的空格数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">–tab-width <int></int></td>\n<td style=\"text-align:center\">tabWidth: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h2><p>用<code>Tab</code>缩进而不是空格</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–use-tabs <int></int></td>\n<td style=\"text-align:center\">useTabs: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Semicolons\"><a href=\"#Semicolons\" class=\"headerlink\" title=\"Semicolons\"></a>Semicolons</h2><p>在语句的末尾打印分号。</p>\n<p>有效的选项：</p>\n<ul>\n<li>true  - 在每个语句的末尾添加一个分号。</li>\n<li>false - 只在可能引入ASI故障的行的开头添加分号。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">–no-semi <int></int></td>\n<td style=\"text-align:center\">semi: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Quotes\"><a href=\"#Quotes\" class=\"headerlink\" title=\"Quotes\"></a>Quotes</h2><p>使用单引号而不是双引号。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–single-quote</td>\n<td style=\"text-align:center\">singleQuote: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Trailing-Commas\"><a href=\"#Trailing-Commas\" class=\"headerlink\" title=\"Trailing Commas\"></a>Trailing Commas</h2><p>多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）</p>\n<p>有效选项：</p>\n<ul>\n<li>none - 没有尾随逗号。</li>\n<li>es5 - 在ES5中有效的尾随逗号（object，arrays等）</li>\n<li>all - 尽可能尾随逗号（包括函数参数）。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">–trailing-comma &lt;none\\</td>\n<td style=\"text-align:center\">es5\\</td>\n<td>all&gt;</td>\n<td>trailingComma: “&lt;none\\</td>\n<td>es5\\</td>\n<td>all&gt;”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Bracket-Spacing\"><a href=\"#Bracket-Spacing\" class=\"headerlink\" title=\"Bracket Spacing\"></a>Bracket Spacing</h2><p>在对象文字中的括号之间打印空格。</p>\n<p>选项：</p>\n<ul>\n<li>true - Example { foo: bar }</li>\n<li>flase - Example {foo: bar}</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th>Cli Override</th>\n<th>Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td>–no-bracket-spacing</td>\n<td>bracketSpacing: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JSX-Brackets\"><a href=\"#JSX-Brackets\" class=\"headerlink\" title=\"JSX Brackets\"></a>JSX Brackets</h2><p>将多行JSX元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–jsx-bracket-same-line</td>\n<td style=\"text-align:center\">jsxBracketSameLine: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Arrow-Function-Parentheses\"><a href=\"#Arrow-Function-Parentheses\" class=\"headerlink\" title=\"Arrow Function Parentheses\"></a>Arrow Function Parentheses</h2><p>围绕一个唯一的箭头函数参数包括括号。</p>\n<p>选项：</p>\n<ul>\n<li>avoid - 尽可能省略括号 Example： x =&gt; x</li>\n<li>always - 总是包括括号 Example： (x) =&gt; x</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">avoid</td>\n<td style=\"text-align:center\">–arrow-parens &lt;avoid\\</td>\n<td style=\"text-align:center\">always&gt;</td>\n<td>arrowParens: “&lt;avoid\\</td>\n<td>always&gt;”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h2><p>只格式化文件的一部分。</p>\n<p>这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:</p>\n<ul>\n<li>返回到包含选定语句的第一行的开头。 </li>\n<li>转到选定语句的末尾。</li>\n</ul>\n<p>这些选项不能与cursorOffset一起使用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">–range-start <int></int></td>\n<td style=\"text-align:center\">rangeStart: <int></int></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Infinity</td>\n<td style=\"text-align:center\">–range-end <int></int></td>\n<td style=\"text-align:center\">rangeEnd: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>指定使用哪个分析器。</p>\n<p>Babylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。</p>\n<p>Built-in parsers:</p>\n<ul>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babylon\" target=\"_blank\" rel=\"noopener\"><code>babylon</code></a></li>\n<li><a href=\"https://github.com/facebook/flow/tree/master/src/parser\" target=\"_blank\" rel=\"noopener\"><code>flow</code></a></li>\n<li><a href=\"https://github.com/eslint/typescript-eslint-parser\" target=\"_blank\" rel=\"noopener\"><code>typescript</code></a> <em>Since v1.4.0</em></li>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"noopener\"><code>postcss</code></a> <em>Since v1.4.0</em></li>\n<li><a href=\"https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options\" target=\"_blank\" rel=\"noopener\"><code>json</code></a> <em>Since v1.5.0</em></li>\n<li><a href=\"https://github.com/graphql/graphql-js/tree/master/src/language\" target=\"_blank\" rel=\"noopener\"><code>graphql</code></a> <em>Since v1.5.0</em></li>\n<li><a href=\"https://github.com/wooorm/remark/tree/master/packages/remark-parse\" target=\"_blank\" rel=\"noopener\"><code>markdown</code></a> <em>Since v1.8.0</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:left\">Cli Override</th>\n<th style=\"text-align:left\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">babylon</td>\n<td style=\"text-align:left\">–parser <string><br>–parser ./my-parser</string></td>\n<td style=\"text-align:left\">parser: “<string>“<br>parser: require(“./my-parser”)</string></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"FilePath\"><a href=\"#FilePath\" class=\"headerlink\" title=\"FilePath\"></a>FilePath</h2><p>指定输入文件路径。这将被用来做解析器推理。</p>\n<p>例如，以下将使用postcss解析器：</p>\n<blockquote>\n<p>cat foo | prettier –stdin-filepath foo.css</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Default</th>\n<th>Cli Override</th>\n<th>Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>None</td>\n<td>–stdin-filepath <string></string></td>\n<td>filepath: “<string>“</string></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Require-pragma\"><a href=\"#Require-pragma\" class=\"headerlink\" title=\"Require pragma\"></a>Require pragma</h2><p>Prettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。</p>\n<p>例如，当提供–require-pragma时，将会格式化具有以下第一个注释的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @prettier</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @format</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–require-pragma</td>\n<td style=\"text-align:center\">requirePragma: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Insert-Pragma\"><a href=\"#Insert-Pragma\" class=\"headerlink\" title=\"Insert Pragma\"></a>Insert Pragma</h2><p>Prettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–insert-pragma</td>\n<td style=\"text-align:center\">insertPragma: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Prose-Wrap\"><a href=\"#Prose-Wrap\" class=\"headerlink\" title=\"Prose Wrap\"></a>Prose Wrap</h2><p>默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。</p>\n<p>选项：</p>\n<ul>\n<li><code>&quot;always&quot;</code> - 如果超出了打印宽度，请将散的包好。</li>\n<li><code>&quot;never&quot;</code> - 不包散的。</li>\n<li><code>&quot;preserve&quot;</code> - 按原样包散的。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“preserve”</td>\n<td style=\"text-align:center\">–prose-wrap &lt;always\\</td>\n<td style=\"text-align:center\">never\\</td>\n<td>preserve&gt;</td>\n<td>proseWrap: “&lt;always\\</td>\n<td>never\\</td>\n<td>preserve&gt;”</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h1 id=\"Prettier-Option\"><a href=\"#Prettier-Option\" class=\"headerlink\" title=\"Prettier Option\"></a>Prettier Option</h1><p>.Prettierrc</p>\n<p>Cli是在终端使用，</p>\n<p>Api是在<code>.Prettierrc</code>中设置使用<br>","more":"</p>\n<h2 id=\"printWidth\"><a href=\"#printWidth\" class=\"headerlink\" title=\"printWidth\"></a>printWidth</h2><p>打印宽度指定打印将换行的行长。</p>\n<table>\n<thead>\n<tr>\n<th>Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>80</td>\n<td style=\"text-align:center\">–print-width <int></int></td>\n<td style=\"text-align:center\">printWidth: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Tab-Width\"><a href=\"#Tab-Width\" class=\"headerlink\" title=\"Tab Width\"></a>Tab Width</h2><p>指定每个缩进的空格数。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">–tab-width <int></int></td>\n<td style=\"text-align:center\">tabWidth: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Tabs\"><a href=\"#Tabs\" class=\"headerlink\" title=\"Tabs\"></a>Tabs</h2><p>用<code>Tab</code>缩进而不是空格</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–use-tabs <int></int></td>\n<td style=\"text-align:center\">useTabs: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Semicolons\"><a href=\"#Semicolons\" class=\"headerlink\" title=\"Semicolons\"></a>Semicolons</h2><p>在语句的末尾打印分号。</p>\n<p>有效的选项：</p>\n<ul>\n<li>true  - 在每个语句的末尾添加一个分号。</li>\n<li>false - 只在可能引入ASI故障的行的开头添加分号。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">–no-semi <int></int></td>\n<td style=\"text-align:center\">semi: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Quotes\"><a href=\"#Quotes\" class=\"headerlink\" title=\"Quotes\"></a>Quotes</h2><p>使用单引号而不是双引号。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–single-quote</td>\n<td style=\"text-align:center\">singleQuote: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Trailing-Commas\"><a href=\"#Trailing-Commas\" class=\"headerlink\" title=\"Trailing Commas\"></a>Trailing Commas</h2><p>多行时，尽可能打印尾随逗号。 （例如，一个单行数组永远不会得到尾随的逗号。）</p>\n<p>有效选项：</p>\n<ul>\n<li>none - 没有尾随逗号。</li>\n<li>es5 - 在ES5中有效的尾随逗号（object，arrays等）</li>\n<li>all - 尽可能尾随逗号（包括函数参数）。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">–trailing-comma &lt;none\\</td>\n<td style=\"text-align:center\">es5\\</td>\n<td>all&gt;</td>\n<td>trailingComma: “&lt;none\\</td>\n<td>es5\\</td>\n<td>all&gt;”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Bracket-Spacing\"><a href=\"#Bracket-Spacing\" class=\"headerlink\" title=\"Bracket Spacing\"></a>Bracket Spacing</h2><p>在对象文字中的括号之间打印空格。</p>\n<p>选项：</p>\n<ul>\n<li>true - Example { foo: bar }</li>\n<li>flase - Example {foo: bar}</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th>Cli Override</th>\n<th>Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td>–no-bracket-spacing</td>\n<td>bracketSpacing: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"JSX-Brackets\"><a href=\"#JSX-Brackets\" class=\"headerlink\" title=\"JSX Brackets\"></a>JSX Brackets</h2><p>将多行JSX元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–jsx-bracket-same-line</td>\n<td style=\"text-align:center\">jsxBracketSameLine: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Arrow-Function-Parentheses\"><a href=\"#Arrow-Function-Parentheses\" class=\"headerlink\" title=\"Arrow Function Parentheses\"></a>Arrow Function Parentheses</h2><p>围绕一个唯一的箭头函数参数包括括号。</p>\n<p>选项：</p>\n<ul>\n<li>avoid - 尽可能省略括号 Example： x =&gt; x</li>\n<li>always - 总是包括括号 Example： (x) =&gt; x</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">avoid</td>\n<td style=\"text-align:center\">–arrow-parens &lt;avoid\\</td>\n<td style=\"text-align:center\">always&gt;</td>\n<td>arrowParens: “&lt;avoid\\</td>\n<td>always&gt;”</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Range\"><a href=\"#Range\" class=\"headerlink\" title=\"Range\"></a>Range</h2><p>只格式化文件的一部分。</p>\n<p>这两个选项可用于格式化以给定字符偏移（分别包含和排除）开始和结束的代码。范围将延伸:</p>\n<ul>\n<li>返回到包含选定语句的第一行的开头。 </li>\n<li>转到选定语句的末尾。</li>\n</ul>\n<p>这些选项不能与cursorOffset一起使用。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">–range-start <int></int></td>\n<td style=\"text-align:center\">rangeStart: <int></int></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Infinity</td>\n<td style=\"text-align:center\">–range-end <int></int></td>\n<td style=\"text-align:center\">rangeEnd: <int></int></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Parser\"><a href=\"#Parser\" class=\"headerlink\" title=\"Parser\"></a>Parser</h2><p>指定使用哪个分析器。</p>\n<p>Babylon和流解析器都支持相同的JavaScript特性（包括Flow）。Prettier会自动从输入文件路径中推断解析器，所以你不需要改变这个设置。</p>\n<p>Built-in parsers:</p>\n<ul>\n<li><a href=\"https://github.com/babel/babel/tree/master/packages/babylon\" target=\"_blank\" rel=\"noopener\"><code>babylon</code></a></li>\n<li><a href=\"https://github.com/facebook/flow/tree/master/src/parser\" target=\"_blank\" rel=\"noopener\"><code>flow</code></a></li>\n<li><a href=\"https://github.com/eslint/typescript-eslint-parser\" target=\"_blank\" rel=\"noopener\"><code>typescript</code></a> <em>Since v1.4.0</em></li>\n<li><a href=\"https://github.com/postcss/postcss\" target=\"_blank\" rel=\"noopener\"><code>postcss</code></a> <em>Since v1.4.0</em></li>\n<li><a href=\"https://github.com/babel/babylon/tree/f09eb3200f57ea94d51c2a5b1facf2149fb406bf#babylonparseexpressioncode-options\" target=\"_blank\" rel=\"noopener\"><code>json</code></a> <em>Since v1.5.0</em></li>\n<li><a href=\"https://github.com/graphql/graphql-js/tree/master/src/language\" target=\"_blank\" rel=\"noopener\"><code>graphql</code></a> <em>Since v1.5.0</em></li>\n<li><a href=\"https://github.com/wooorm/remark/tree/master/packages/remark-parse\" target=\"_blank\" rel=\"noopener\"><code>markdown</code></a> <em>Since v1.8.0</em></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:left\">Cli Override</th>\n<th style=\"text-align:left\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">babylon</td>\n<td style=\"text-align:left\">–parser <string><br>–parser ./my-parser</string></td>\n<td style=\"text-align:left\">parser: “<string>“<br>parser: require(“./my-parser”)</string></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"FilePath\"><a href=\"#FilePath\" class=\"headerlink\" title=\"FilePath\"></a>FilePath</h2><p>指定输入文件路径。这将被用来做解析器推理。</p>\n<p>例如，以下将使用postcss解析器：</p>\n<blockquote>\n<p>cat foo | prettier –stdin-filepath foo.css</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Default</th>\n<th>Cli Override</th>\n<th>Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>None</td>\n<td>–stdin-filepath <string></string></td>\n<td>filepath: “<string>“</string></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Require-pragma\"><a href=\"#Require-pragma\" class=\"headerlink\" title=\"Require pragma\"></a>Require pragma</h2><p>Prettier可以限制自己只能格式化文件顶部包含特殊注释的文件，称为杂注。逐渐将大型，无格式的代码库转换为漂亮的代码库时，这非常有用。</p>\n<p>例如，当提供–require-pragma时，将会格式化具有以下第一个注释的文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @prettier</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<p>or</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @format</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–require-pragma</td>\n<td style=\"text-align:center\">requirePragma: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Insert-Pragma\"><a href=\"#Insert-Pragma\" class=\"headerlink\" title=\"Insert Pragma\"></a>Insert Pragma</h2><p>Prettier的可以在文件的顶部插入一个特殊的@format标记，指定文件已被格式化为Prettier。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">–insert-pragma</td>\n<td style=\"text-align:center\">insertPragma: <bool></bool></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Prose-Wrap\"><a href=\"#Prose-Wrap\" class=\"headerlink\" title=\"Prose Wrap\"></a>Prose Wrap</h2><p>默认情况下，由于某些服务使用了对换行符敏感的呈现器，因此Prettier会按原样包装降价文本。</p>\n<p>选项：</p>\n<ul>\n<li><code>&quot;always&quot;</code> - 如果超出了打印宽度，请将散的包好。</li>\n<li><code>&quot;never&quot;</code> - 不包散的。</li>\n<li><code>&quot;preserve&quot;</code> - 按原样包散的。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Default</th>\n<th style=\"text-align:center\">Cli Override</th>\n<th style=\"text-align:center\">Api Override</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“preserve”</td>\n<td style=\"text-align:center\">–prose-wrap &lt;always\\</td>\n<td style=\"text-align:center\">never\\</td>\n<td>preserve&gt;</td>\n<td>proseWrap: “&lt;always\\</td>\n<td>never\\</td>\n<td>preserve&gt;”</td>\n</tr>\n</tbody>\n</table>"},{"title":"React-Router v3","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# React-Router3\n\n\n\n### 路径语法\n\n路由路径是匹配一个（或一部分）URL 的 [一个字符串模式](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern)。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：\n\n- `:paramName` – 匹配一段位于 `/`、`?` 或 `#` 之后的 URL。 命中的部分将被作为一个[参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n- `()` – 在它内部的内容被认为是可选的\n- `*` – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 `splat` [参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n\n<!--more-->\n\n```react\n//匹配 /hello/michael 和 /hello/ryan\n<Route path=\"/hello/:name\">         \n  \n  \n//匹配 /hello, /hello/02 和 /hello/01\n<Route path=\"/hello(/:id)\">   \n\n\n//匹配 /files/hello.jpg和/files/path/to/hello.jpg\n<Route path=\"/files/*.*\">       \n```\n\n## Histories\n\n常用的 **history** 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。\n\n- [`browserHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory) (推荐)\n- [`hashHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory)\n- [`createMemoryHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory)\n\n```react\n<Router history={browserHistory}>\n```\n\n### `browserHistory`\n\nBrowser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 [History](https://developer.mozilla.org/en-US/docs/Web/API/History) API 用于处理 URL，创建一个像`example.com/some/path`这样真实的 URL 。\n\n\n\n\n\n## 在组件外部使用导航\n\n虽然在组件内部可以使用 `this.context.router` 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。","source":"_posts/React-Router.md","raw":"---\ntitle: React-Router v3\ndate: 2017-07-20 23：47\ncomments: true\nlayout: post\ntags: [JavaScript,React]\ncategories: React\n---\n\n# React-Router3\n\n\n\n### 路径语法\n\n路由路径是匹配一个（或一部分）URL 的 [一个字符串模式](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern)。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：\n\n- `:paramName` – 匹配一段位于 `/`、`?` 或 `#` 之后的 URL。 命中的部分将被作为一个[参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n- `()` – 在它内部的内容被认为是可选的\n- `*` – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 `splat` [参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n\n<!--more-->\n\n```react\n//匹配 /hello/michael 和 /hello/ryan\n<Route path=\"/hello/:name\">         \n  \n  \n//匹配 /hello, /hello/02 和 /hello/01\n<Route path=\"/hello(/:id)\">   \n\n\n//匹配 /files/hello.jpg和/files/path/to/hello.jpg\n<Route path=\"/files/*.*\">       \n```\n\n## Histories\n\n常用的 **history** 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。\n\n- [`browserHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory) (推荐)\n- [`hashHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory)\n- [`createMemoryHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory)\n\n```react\n<Router history={browserHistory}>\n```\n\n### `browserHistory`\n\nBrowser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 [History](https://developer.mozilla.org/en-US/docs/Web/API/History) API 用于处理 URL，创建一个像`example.com/some/path`这样真实的 URL 。\n\n\n\n\n\n## 在组件外部使用导航\n\n虽然在组件内部可以使用 `this.context.router` 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。","slug":"React-Router","published":1,"updated":"2017-08-31T06:51:06.000Z","photos":[],"link":"","_id":"cjollnbrd0043unfycrboatlv","content":"<h1 id=\"React-Router3\"><a href=\"#React-Router3\" class=\"headerlink\" title=\"React-Router3\"></a>React-Router3</h1><h3 id=\"路径语法\"><a href=\"#路径语法\" class=\"headerlink\" title=\"路径语法\"></a>路径语法</h3><p>路由路径是匹配一个（或一部分）URL 的 <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern\" target=\"_blank\" rel=\"noopener\">一个字符串模式</a>。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：</p>\n<ul>\n<li><code>:paramName</code> – 匹配一段位于 <code>/</code>、<code>?</code> 或 <code>#</code> 之后的 URL。 命中的部分将被作为一个<a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"noopener\">参数</a></li>\n<li><code>()</code> – 在它内部的内容被认为是可选的</li>\n<li><code>*</code> – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 <code>splat</code> <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"noopener\">参数</a></li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//匹配 /hello/michael 和 /hello/ryan</span><br><span class=\"line\">&lt;Route path=&quot;/hello/:name&quot;&gt;         </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">//匹配 /hello, /hello/02 和 /hello/01</span><br><span class=\"line\">&lt;Route path=&quot;/hello(/:id)&quot;&gt;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//匹配 /files/hello.jpg和/files/path/to/hello.jpg</span><br><span class=\"line\">&lt;Route path=&quot;/files/*.*&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h2><p>常用的 <strong>history</strong> 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p>\n<ul>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory\" target=\"_blank\" rel=\"noopener\"><code>browserHistory</code></a> (推荐)</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory\" target=\"_blank\" rel=\"noopener\"><code>hashHistory</code></a></li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory\" target=\"_blank\" rel=\"noopener\"><code>createMemoryHistory</code></a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a><code>browserHistory</code></h3><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\" target=\"_blank\" rel=\"noopener\">History</a> API 用于处理 URL，创建一个像<code>example.com/some/path</code>这样真实的 URL 。</p>\n<h2 id=\"在组件外部使用导航\"><a href=\"#在组件外部使用导航\" class=\"headerlink\" title=\"在组件外部使用导航\"></a>在组件外部使用导航</h2><p>虽然在组件内部可以使用 <code>this.context.router</code> 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"React-Router3\"><a href=\"#React-Router3\" class=\"headerlink\" title=\"React-Router3\"></a>React-Router3</h1><h3 id=\"路径语法\"><a href=\"#路径语法\" class=\"headerlink\" title=\"路径语法\"></a>路径语法</h3><p>路由路径是匹配一个（或一部分）URL 的 <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern\" target=\"_blank\" rel=\"noopener\">一个字符串模式</a>。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：</p>\n<ul>\n<li><code>:paramName</code> – 匹配一段位于 <code>/</code>、<code>?</code> 或 <code>#</code> 之后的 URL。 命中的部分将被作为一个<a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"noopener\">参数</a></li>\n<li><code>()</code> – 在它内部的内容被认为是可选的</li>\n<li><code>*</code> – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 <code>splat</code> <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"noopener\">参数</a></li>\n</ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//匹配 /hello/michael 和 /hello/ryan</span><br><span class=\"line\">&lt;Route path=&quot;/hello/:name&quot;&gt;         </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">//匹配 /hello, /hello/02 和 /hello/01</span><br><span class=\"line\">&lt;Route path=&quot;/hello(/:id)&quot;&gt;   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//匹配 /files/hello.jpg和/files/path/to/hello.jpg</span><br><span class=\"line\">&lt;Route path=&quot;/files/*.*&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h2><p>常用的 <strong>history</strong> 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p>\n<ul>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory\" target=\"_blank\" rel=\"noopener\"><code>browserHistory</code></a> (推荐)</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory\" target=\"_blank\" rel=\"noopener\"><code>hashHistory</code></a></li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory\" target=\"_blank\" rel=\"noopener\"><code>createMemoryHistory</code></a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a><code>browserHistory</code></h3><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\" target=\"_blank\" rel=\"noopener\">History</a> API 用于处理 URL，创建一个像<code>example.com/some/path</code>这样真实的 URL 。</p>\n<h2 id=\"在组件外部使用导航\"><a href=\"#在组件外部使用导航\" class=\"headerlink\" title=\"在组件外部使用导航\"></a>在组件外部使用导航</h2><p>虽然在组件内部可以使用 <code>this.context.router</code> 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。</p>"},{"title":"Parcel-typescript-react初尝试","date":"2017-12-16T12:12:19.187Z","comments":1,"layout":"post","_content":"\n## Parcel是啥？\n\n平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。\n\n那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？\n![parcel](http://ozar6ogjb.bkt.clouddn.com/parcel.png)\n这是官网的介绍，网址如下：[Parcel](http://www.css88.com/doc/parcel/)\n\n<!--more-->\n\n## 进入正题\n现在很多人用**React**，并且还用上了**Typescript**！配置Webpack用`tsc`可太麻烦了。我们来看看Parcel是怎么做到的。\n\n1. mkdir parcel-typescript-react-example\n2. yarn init\n3. mkdir src\n4. tsc --init\n\n接着我们需要`yarn add` 一些玩意儿:\n* yarn add parcel-bundler react react-dom typescript babel-preset-react @types/react @types/react-dom\n\n接下来我们在根目录下创建`index.html`:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>parcel-typescript-react-example</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./src/styles.css\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"./src/index.tsx\"></script>\n</body>\n</html>\n```\n在`src`文件中我们创建 `index.tsc` 和 `styes.css`:\n```javascript\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nclass App extends React.Component{\n  render(){\n    return <div>Hello World!</div>;\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n```\n\nCSS文件\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: red;\n  font-size: 18;\n}\n```\n\n我们的`package.json`如下：\n```json\n{\n  \"name\": \"parcel-react\",\n  \"version\": \"1.0.0\",\n  \"main\": \"src/index.tsx\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"parcel index.html\"\n  },\n  \"dependencies\": {\n    \"@types/react\": \"^16.0.30\",\n    \"@types/react-dom\": \"^16.0.3\",\n    \"react\": \"^16.2.0\",\n    \"react-dom\": \"^16.2.0\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-react\": \"^6.24.1\",\n    \"parcel-bundler\": \"^1.0.3\",\n    \"typescript\": \"^2.6.2\"\n  }\n}\n```\n\n这样我们就可以打开终端-> cd parcel-typescript-react-example -> yarn start\n\n静候佳音，然后`locahost://1234`就能看见火红的Hello World！啦\n\n大家也可以到我的[github-parcel-typescript-react-example\n](https://github.com/Adherentman/parcel-typescript-react-example)去 clone 代码。\n\n欢迎start、issues~\n\n也可以看看我github中的其他玩意儿！\n\n以下是我的博客：\n* [github](https://github.com/Adherentman)\n* [blog](http://xuzihao.fun/)","source":"_posts/Parcel.md","raw":"---\ntitle: Parcel-typescript-react初尝试\ndate: 2017-12-16 20：11\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n## Parcel是啥？\n\n平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。\n\n那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？\n![parcel](http://ozar6ogjb.bkt.clouddn.com/parcel.png)\n这是官网的介绍，网址如下：[Parcel](http://www.css88.com/doc/parcel/)\n\n<!--more-->\n\n## 进入正题\n现在很多人用**React**，并且还用上了**Typescript**！配置Webpack用`tsc`可太麻烦了。我们来看看Parcel是怎么做到的。\n\n1. mkdir parcel-typescript-react-example\n2. yarn init\n3. mkdir src\n4. tsc --init\n\n接着我们需要`yarn add` 一些玩意儿:\n* yarn add parcel-bundler react react-dom typescript babel-preset-react @types/react @types/react-dom\n\n接下来我们在根目录下创建`index.html`:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>parcel-typescript-react-example</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./src/styles.css\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"./src/index.tsx\"></script>\n</body>\n</html>\n```\n在`src`文件中我们创建 `index.tsc` 和 `styes.css`:\n```javascript\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nclass App extends React.Component{\n  render(){\n    return <div>Hello World!</div>;\n  }\n}\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n```\n\nCSS文件\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: red;\n  font-size: 18;\n}\n```\n\n我们的`package.json`如下：\n```json\n{\n  \"name\": \"parcel-react\",\n  \"version\": \"1.0.0\",\n  \"main\": \"src/index.tsx\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"parcel index.html\"\n  },\n  \"dependencies\": {\n    \"@types/react\": \"^16.0.30\",\n    \"@types/react-dom\": \"^16.0.3\",\n    \"react\": \"^16.2.0\",\n    \"react-dom\": \"^16.2.0\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-react\": \"^6.24.1\",\n    \"parcel-bundler\": \"^1.0.3\",\n    \"typescript\": \"^2.6.2\"\n  }\n}\n```\n\n这样我们就可以打开终端-> cd parcel-typescript-react-example -> yarn start\n\n静候佳音，然后`locahost://1234`就能看见火红的Hello World！啦\n\n大家也可以到我的[github-parcel-typescript-react-example\n](https://github.com/Adherentman/parcel-typescript-react-example)去 clone 代码。\n\n欢迎start、issues~\n\n也可以看看我github中的其他玩意儿！\n\n以下是我的博客：\n* [github](https://github.com/Adherentman)\n* [blog](http://xuzihao.fun/)","slug":"Parcel","published":1,"updated":"2017-12-16T12:17:07.171Z","photos":[],"link":"","_id":"cjollnbrw0048unfykh7xnlra","content":"<h2 id=\"Parcel是啥？\"><a href=\"#Parcel是啥？\" class=\"headerlink\" title=\"Parcel是啥？\"></a>Parcel是啥？</h2><p>平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。</p>\n<p>那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？<br><img src=\"http://ozar6ogjb.bkt.clouddn.com/parcel.png\" alt=\"parcel\"><br>这是官网的介绍，网址如下：<a href=\"http://www.css88.com/doc/parcel/\" target=\"_blank\" rel=\"noopener\">Parcel</a></p>\n<a id=\"more\"></a>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><p>现在很多人用<strong>React</strong>，并且还用上了<strong>Typescript</strong>！配置Webpack用<code>tsc</code>可太麻烦了。我们来看看Parcel是怎么做到的。</p>\n<ol>\n<li>mkdir parcel-typescript-react-example</li>\n<li>yarn init</li>\n<li>mkdir src</li>\n<li>tsc –init</li>\n</ol>\n<p>接着我们需要<code>yarn add</code> 一些玩意儿:</p>\n<ul>\n<li>yarn add parcel-bundler react react-dom typescript babel-preset-react @types/react @types/react-dom</li>\n</ul>\n<p>接下来我们在根目录下创建<code>index.html</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>parcel-typescript-react-example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./src/styles.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./src/index.tsx\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在<code>src</code>文件中我们创建 <code>index.tsc</code> 和 <code>styes.css</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"root\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>CSS文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们的<code>package.json</code>如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"parcel-react\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"src/index.tsx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"parcel index.html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@types/react\"</span>: <span class=\"string\">\"^16.0.30\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"@types/react-dom\"</span>: <span class=\"string\">\"^16.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parcel-bundler\"</span>: <span class=\"string\">\"^1.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"typescript\"</span>: <span class=\"string\">\"^2.6.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以打开终端-&gt; cd parcel-typescript-react-example -&gt; yarn start</p>\n<p>静候佳音，然后<code>locahost://1234</code>就能看见火红的Hello World！啦</p>\n<p>大家也可以到我的<a href=\"https://github.com/Adherentman/parcel-typescript-react-example\" target=\"_blank\" rel=\"noopener\">github-parcel-typescript-react-example\n</a>去 clone 代码。</p>\n<p>欢迎start、issues~</p>\n<p>也可以看看我github中的其他玩意儿！</p>\n<p>以下是我的博客：</p>\n<ul>\n<li><a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">github</a></li>\n<li><a href=\"http://xuzihao.fun/\" target=\"_blank\" rel=\"noopener\">blog</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Parcel是啥？\"><a href=\"#Parcel是啥？\" class=\"headerlink\" title=\"Parcel是啥？\"></a>Parcel是啥？</h2><p>平常打包工具我们会去选择Webpack，但是我们都发现去使用webpack要么就去社区里找配置好的或者自己去看文档去配一大堆插件啊等等，但是我们在开发中还会遇到很多问题。有一句话说得好，配好了的Webpack就别动了。。因为下一步你继续配的话，你也不知道会发生什么。</p>\n<p>那么现在有一个真正的0配置打包工具，拿来就用岂不是美滋滋？<br><img src=\"http://ozar6ogjb.bkt.clouddn.com/parcel.png\" alt=\"parcel\"><br>这是官网的介绍，网址如下：<a href=\"http://www.css88.com/doc/parcel/\" target=\"_blank\" rel=\"noopener\">Parcel</a></p>","more":"<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><p>现在很多人用<strong>React</strong>，并且还用上了<strong>Typescript</strong>！配置Webpack用<code>tsc</code>可太麻烦了。我们来看看Parcel是怎么做到的。</p>\n<ol>\n<li>mkdir parcel-typescript-react-example</li>\n<li>yarn init</li>\n<li>mkdir src</li>\n<li>tsc –init</li>\n</ol>\n<p>接着我们需要<code>yarn add</code> 一些玩意儿:</p>\n<ul>\n<li>yarn add parcel-bundler react react-dom typescript babel-preset-react @types/react @types/react-dom</li>\n</ul>\n<p>接下来我们在根目录下创建<code>index.html</code>:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>parcel-typescript-react-example<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./src/styles.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./src/index.tsx\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在<code>src</code>文件中我们创建 <code>index.tsc</code> 和 <code>styes.css</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"root\"</span>));</span><br></pre></td></tr></table></figure></p>\n<p>CSS文件<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">18</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们的<code>package.json</code>如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"parcel-react\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"src/index.tsx\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"parcel index.html\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"@types/react\"</span>: <span class=\"string\">\"^16.0.30\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"@types/react-dom\"</span>: <span class=\"string\">\"^16.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.2.0\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"parcel-bundler\"</span>: <span class=\"string\">\"^1.0.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"typescript\"</span>: <span class=\"string\">\"^2.6.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样我们就可以打开终端-&gt; cd parcel-typescript-react-example -&gt; yarn start</p>\n<p>静候佳音，然后<code>locahost://1234</code>就能看见火红的Hello World！啦</p>\n<p>大家也可以到我的<a href=\"https://github.com/Adherentman/parcel-typescript-react-example\" target=\"_blank\" rel=\"noopener\">github-parcel-typescript-react-example\n</a>去 clone 代码。</p>\n<p>欢迎start、issues~</p>\n<p>也可以看看我github中的其他玩意儿！</p>\n<p>以下是我的博客：</p>\n<ul>\n<li><a href=\"https://github.com/Adherentman\" target=\"_blank\" rel=\"noopener\">github</a></li>\n<li><a href=\"http://xuzihao.fun/\" target=\"_blank\" rel=\"noopener\">blog</a></li>\n</ul>"},{"title":"PostgreSQL基础","date":"2018-08-26T14:09:00.000Z","updated":"2018-09-16T07:18:20.000Z","comments":1,"layout":"post","_content":"\n# PostgreSQL基础\n\n创建新表：\n\n```sql\nCREATE TABLE xxx (\n\txxx\t\tint,\t# 普通的整数类型\n\txxx\t\tvarchar(80), # 一个可以存储最长 80 个字符的任意字符串的数据类型\n\txxx\t\treal,\t\t# 一种用于存储单精度浮点数的类型\n\txxx\t\tdate\t\t# 时间\n)\n```\n\n删表：\n```sql\nDROP TABLE tablename;\n```\n\n在表中增加行：\n```sql\nINSERT INTO tablename (xx, xx, xx)\n\t\tVALUES(xx, xx, xx)\n```\n<!--more-->\n## 查询一个表:\n```sql\n# * 代表所有列的缩写\nSELECT * FROM tablename\n# 或者单个查\nSELECT xxx, xxx, xxx FROM tablename\n# 带函数的\nSELECT xx, (mobile+number)/2 AS temp_avg, date FROM xx;\n# 指定需要哪些行\n# WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）\nSELECT * FROM weather\n    WHERE city = 'San Francisco' AND prcp > 0.0;\n# 查询结果排好序\nSELECT * FROM weather\n    ORDER BY city;\n# 消除重复行\nSELECT DISTINCT city\n    FROM weather;\n# 组合使用DISTINCT和ORDER BY来保证获取一致的结果\nSELECT DISTINCT city\n    FROM weather\n    ORDER BY city;\n```\n\n## 连表查询：\n假如我们有一个表t1：\n```\n num | name\n-----+------\n   1 | a\n   2 | b\n   3 | c\n```\nt2：\n```\n num | value\n-----+-------\n   1 | xxx\n   3 | yyy\n   5 | zzz\n```\n\n### 如果两个表分别有 N 和 M 行，连接表将有 N * M 行。\n\n`FROM T1 CROSS JOIN T2`等效于`FROM T1 INNER JOIN T2 ON TRUE`（见下文）。它也等效于`FROM T1,T2`\n```sql\nSELECT * FROM t1 CROSS JOIN t2;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   1 | a    |   3 | yyy\n   1 | a    |   5 | zzz\n   2 | b    |   1 | xxx\n   2 | b    |   3 | yyy\n   2 | b    |   5 | zzz\n   3 | c    |   1 | xxx\n   3 | c    |   3 | yyy\n   3 | c    |   5 | zzz\n(9 rows)\n```\n\nT1表的 num 和T2表的num 相等的数据：\n```sql\nSELECT * FROM t1 INNER JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   3 | c    |   3 | yyy\n(2 rows)\n```\n\n是上面的简写，并且`JOIN USING`的输出会**废除冗余列**:\n```sql\nSELECT * FROM t1 INNER JOIN t2 USING (num);\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   3 | c    | yyy\n(2 rows)\n```\n\n`NATURAL`是`USING`的缩写形式:\n该列表由那些在两个表里都出现了的列名组成\n```sql\nSELECT * FROM t1 NATURAL INNER JOIN t2;\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   3 | c    | yyy\n(2 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |   3 | yyy\n(3 rows)\n```\n\n生成的连接表里为来自 T1 的每一行都至少包含一行。\n```sql\nSELECT * FROM t1 LEFT JOIN t2 USING (num);\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   2 | b    |\n   3 | c    | yyy\n(3 rows)\n```\n\n因此，生成的连接表里为来自 T2 的每一行都至少包含一行。\n```sql\nSELECT * FROM t1 RIGHT JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   3 | c    |   3 | yyy\n     |      |   5 | zzz\n(3 rows)\n```\n\n为 T2 中每一个无法在连接条件上匹配 T1 里任何一行的行返回一个连接行，该连接行中 T1 的列用空值补齐。\n```sql\nSELECT * FROM t1 FULL JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |   3 | yyy\n     |      |   5 | zzz\n(4 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num AND t2.value = 'xxx';\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |     |\n(3 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num WHERE t2.value = 'xxx';\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n(1 row)\n```\n## 更新数据\n```sql\nUPDATE products SET xx = 10 WHERE xx = 5;\n```","source":"_posts/PostgreSQL基础.md","raw":"---\ntitle: PostgreSQL基础\ndate: 2018-08-26 22:09\nupdated: 2018-09-16 15:18:20\ncomments: true\nlayout: post\ntags: [数据库, PostgreSQL]\ncategories: [数据库, PostgreSQL]\n---\n\n# PostgreSQL基础\n\n创建新表：\n\n```sql\nCREATE TABLE xxx (\n\txxx\t\tint,\t# 普通的整数类型\n\txxx\t\tvarchar(80), # 一个可以存储最长 80 个字符的任意字符串的数据类型\n\txxx\t\treal,\t\t# 一种用于存储单精度浮点数的类型\n\txxx\t\tdate\t\t# 时间\n)\n```\n\n删表：\n```sql\nDROP TABLE tablename;\n```\n\n在表中增加行：\n```sql\nINSERT INTO tablename (xx, xx, xx)\n\t\tVALUES(xx, xx, xx)\n```\n<!--more-->\n## 查询一个表:\n```sql\n# * 代表所有列的缩写\nSELECT * FROM tablename\n# 或者单个查\nSELECT xxx, xxx, xxx FROM tablename\n# 带函数的\nSELECT xx, (mobile+number)/2 AS temp_avg, date FROM xx;\n# 指定需要哪些行\n# WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）\nSELECT * FROM weather\n    WHERE city = 'San Francisco' AND prcp > 0.0;\n# 查询结果排好序\nSELECT * FROM weather\n    ORDER BY city;\n# 消除重复行\nSELECT DISTINCT city\n    FROM weather;\n# 组合使用DISTINCT和ORDER BY来保证获取一致的结果\nSELECT DISTINCT city\n    FROM weather\n    ORDER BY city;\n```\n\n## 连表查询：\n假如我们有一个表t1：\n```\n num | name\n-----+------\n   1 | a\n   2 | b\n   3 | c\n```\nt2：\n```\n num | value\n-----+-------\n   1 | xxx\n   3 | yyy\n   5 | zzz\n```\n\n### 如果两个表分别有 N 和 M 行，连接表将有 N * M 行。\n\n`FROM T1 CROSS JOIN T2`等效于`FROM T1 INNER JOIN T2 ON TRUE`（见下文）。它也等效于`FROM T1,T2`\n```sql\nSELECT * FROM t1 CROSS JOIN t2;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   1 | a    |   3 | yyy\n   1 | a    |   5 | zzz\n   2 | b    |   1 | xxx\n   2 | b    |   3 | yyy\n   2 | b    |   5 | zzz\n   3 | c    |   1 | xxx\n   3 | c    |   3 | yyy\n   3 | c    |   5 | zzz\n(9 rows)\n```\n\nT1表的 num 和T2表的num 相等的数据：\n```sql\nSELECT * FROM t1 INNER JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   3 | c    |   3 | yyy\n(2 rows)\n```\n\n是上面的简写，并且`JOIN USING`的输出会**废除冗余列**:\n```sql\nSELECT * FROM t1 INNER JOIN t2 USING (num);\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   3 | c    | yyy\n(2 rows)\n```\n\n`NATURAL`是`USING`的缩写形式:\n该列表由那些在两个表里都出现了的列名组成\n```sql\nSELECT * FROM t1 NATURAL INNER JOIN t2;\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   3 | c    | yyy\n(2 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |   3 | yyy\n(3 rows)\n```\n\n生成的连接表里为来自 T1 的每一行都至少包含一行。\n```sql\nSELECT * FROM t1 LEFT JOIN t2 USING (num);\n num | name | value\n-----+------+-------\n   1 | a    | xxx\n   2 | b    |\n   3 | c    | yyy\n(3 rows)\n```\n\n因此，生成的连接表里为来自 T2 的每一行都至少包含一行。\n```sql\nSELECT * FROM t1 RIGHT JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   3 | c    |   3 | yyy\n     |      |   5 | zzz\n(3 rows)\n```\n\n为 T2 中每一个无法在连接条件上匹配 T1 里任何一行的行返回一个连接行，该连接行中 T1 的列用空值补齐。\n```sql\nSELECT * FROM t1 FULL JOIN t2 ON t1.num = t2.num;\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |   3 | yyy\n     |      |   5 | zzz\n(4 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num AND t2.value = 'xxx';\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n   2 | b    |     |\n   3 | c    |     |\n(3 rows)\n```\n\n```sql\nSELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num WHERE t2.value = 'xxx';\n num | name | num | value\n-----+------+-----+-------\n   1 | a    |   1 | xxx\n(1 row)\n```\n## 更新数据\n```sql\nUPDATE products SET xx = 10 WHERE xx = 5;\n```","slug":"PostgreSQL基础","published":1,"photos":[],"link":"","_id":"cjollnbs1004bunfy6n7f1h3w","content":"<h1 id=\"PostgreSQL基础\"><a href=\"#PostgreSQL基础\" class=\"headerlink\" title=\"PostgreSQL基础\"></a>PostgreSQL基础</h1><p>创建新表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> xxx (</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">int</span>,\t# 普通的整数类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">varchar</span>(<span class=\"number\">80</span>), # 一个可以存储最长 <span class=\"number\">80</span> 个字符的任意字符串的数据类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">real</span>,\t\t# 一种用于存储单精度浮点数的类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">date</span>\t\t# 时间</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>删表：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> tablename;</span><br></pre></td></tr></table></figure></p>\n<p>在表中增加行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> tablename (xx, xx, xx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">VALUES</span>(xx, xx, xx)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"查询一个表\"><a href=\"#查询一个表\" class=\"headerlink\" title=\"查询一个表:\"></a>查询一个表:</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># * 代表所有列的缩写</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tablename</span><br><span class=\"line\"># 或者单个查</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xxx, xxx, xxx <span class=\"keyword\">FROM</span> tablename</span><br><span class=\"line\"># 带函数的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xx, (mobile+<span class=\"built_in\">number</span>)/<span class=\"number\">2</span> <span class=\"keyword\">AS</span> temp_avg, <span class=\"built_in\">date</span> <span class=\"keyword\">FROM</span> xx;</span><br><span class=\"line\"># 指定需要哪些行</span><br><span class=\"line\"># WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> city = <span class=\"string\">'San Francisco'</span> <span class=\"keyword\">AND</span> prcp &gt; <span class=\"number\">0.0</span>;</span><br><span class=\"line\"># 查询结果排好序</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> city;</span><br><span class=\"line\"># 消除重复行</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> city</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> weather;</span><br><span class=\"line\"># 组合使用DISTINCT和ORDER BY来保证获取一致的结果</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> city</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> city;</span><br></pre></td></tr></table></figure>\n<h2 id=\"连表查询：\"><a href=\"#连表查询：\" class=\"headerlink\" title=\"连表查询：\"></a>连表查询：</h2><p>假如我们有一个表t1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> num | name</span><br><span class=\"line\">-----+------</span><br><span class=\"line\">   1 | a</span><br><span class=\"line\">   2 | b</span><br><span class=\"line\">   3 | c</span><br></pre></td></tr></table></figure></p>\n<p>t2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> num | value</span><br><span class=\"line\">-----+-------</span><br><span class=\"line\">   1 | xxx</span><br><span class=\"line\">   3 | yyy</span><br><span class=\"line\">   5 | zzz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果两个表分别有-N-和-M-行，连接表将有-N-M-行。\"><a href=\"#如果两个表分别有-N-和-M-行，连接表将有-N-M-行。\" class=\"headerlink\" title=\"如果两个表分别有 N 和 M 行，连接表将有 N * M 行。\"></a>如果两个表分别有 N 和 M 行，连接表将有 N * M 行。</h3><p><code>FROM T1 CROSS JOIN T2</code>等效于<code>FROM T1 INNER JOIN T2 ON TRUE</code>（见下文）。它也等效于<code>FROM T1,T2</code><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">CROSS</span> <span class=\"keyword\">JOIN</span> t2;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   1 | a    |   3 | yyy</span><br><span class=\"line\">   1 | a    |   5 | zzz</span><br><span class=\"line\">   2 | b    |   1 | xxx</span><br><span class=\"line\">   2 | b    |   3 | yyy</span><br><span class=\"line\">   2 | b    |   5 | zzz</span><br><span class=\"line\">   3 | c    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">   3 | c    |   5 | zzz</span><br><span class=\"line\">(9 rows)</span><br></pre></td></tr></table></figure></p>\n<p>T1表的 num 和T2表的num 相等的数据：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<p>是上面的简写，并且<code>JOIN USING</code>的输出会<strong>废除冗余列</strong>:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">USING</span> (<span class=\"keyword\">num</span>);</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<p><code>NATURAL</code>是<code>USING</code>的缩写形式:<br>该列表由那些在两个表里都出现了的列名组成<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">NATURAL</span> <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2;</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>生成的连接表里为来自 T1 的每一行都至少包含一行。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">USING</span> (<span class=\"keyword\">num</span>);</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   2 | b    |</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure></p>\n<p>因此，生成的连接表里为来自 T2 的每一行都至少包含一行。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">     |      |   5 | zzz</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure></p>\n<p>为 T2 中每一个无法在连接条件上匹配 T1 里任何一行的行返回一个连接行，该连接行中 T1 的列用空值补齐。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">FULL</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">     |      |   5 | zzz</span><br><span class=\"line\">(4 rows)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num <span class=\"keyword\">AND</span> t2.value = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |     |</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num <span class=\"keyword\">WHERE</span> t2.value = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> products <span class=\"keyword\">SET</span> xx = <span class=\"number\">10</span> <span class=\"keyword\">WHERE</span> xx = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"PostgreSQL基础\"><a href=\"#PostgreSQL基础\" class=\"headerlink\" title=\"PostgreSQL基础\"></a>PostgreSQL基础</h1><p>创建新表：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> xxx (</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">int</span>,\t# 普通的整数类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">varchar</span>(<span class=\"number\">80</span>), # 一个可以存储最长 <span class=\"number\">80</span> 个字符的任意字符串的数据类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">real</span>,\t\t# 一种用于存储单精度浮点数的类型</span><br><span class=\"line\">\txxx\t\t<span class=\"built_in\">date</span>\t\t# 时间</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>删表：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> tablename;</span><br></pre></td></tr></table></figure></p>\n<p>在表中增加行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> tablename (xx, xx, xx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">VALUES</span>(xx, xx, xx)</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"查询一个表\"><a href=\"#查询一个表\" class=\"headerlink\" title=\"查询一个表:\"></a>查询一个表:</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># * 代表所有列的缩写</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tablename</span><br><span class=\"line\"># 或者单个查</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xxx, xxx, xxx <span class=\"keyword\">FROM</span> tablename</span><br><span class=\"line\"># 带函数的</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> xx, (mobile+<span class=\"built_in\">number</span>)/<span class=\"number\">2</span> <span class=\"keyword\">AS</span> temp_avg, <span class=\"built_in\">date</span> <span class=\"keyword\">FROM</span> xx;</span><br><span class=\"line\"># 指定需要哪些行</span><br><span class=\"line\"># WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回 在条件中可以使用常用的布尔操作符（AND、OR和NOT）</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> city = <span class=\"string\">'San Francisco'</span> <span class=\"keyword\">AND</span> prcp &gt; <span class=\"number\">0.0</span>;</span><br><span class=\"line\"># 查询结果排好序</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> city;</span><br><span class=\"line\"># 消除重复行</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> city</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> weather;</span><br><span class=\"line\"># 组合使用DISTINCT和ORDER BY来保证获取一致的结果</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> city</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> weather</span><br><span class=\"line\">    <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> city;</span><br></pre></td></tr></table></figure>\n<h2 id=\"连表查询：\"><a href=\"#连表查询：\" class=\"headerlink\" title=\"连表查询：\"></a>连表查询：</h2><p>假如我们有一个表t1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> num | name</span><br><span class=\"line\">-----+------</span><br><span class=\"line\">   1 | a</span><br><span class=\"line\">   2 | b</span><br><span class=\"line\">   3 | c</span><br></pre></td></tr></table></figure></p>\n<p>t2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> num | value</span><br><span class=\"line\">-----+-------</span><br><span class=\"line\">   1 | xxx</span><br><span class=\"line\">   3 | yyy</span><br><span class=\"line\">   5 | zzz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果两个表分别有-N-和-M-行，连接表将有-N-M-行。\"><a href=\"#如果两个表分别有-N-和-M-行，连接表将有-N-M-行。\" class=\"headerlink\" title=\"如果两个表分别有 N 和 M 行，连接表将有 N * M 行。\"></a>如果两个表分别有 N 和 M 行，连接表将有 N * M 行。</h3><p><code>FROM T1 CROSS JOIN T2</code>等效于<code>FROM T1 INNER JOIN T2 ON TRUE</code>（见下文）。它也等效于<code>FROM T1,T2</code><br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">CROSS</span> <span class=\"keyword\">JOIN</span> t2;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   1 | a    |   3 | yyy</span><br><span class=\"line\">   1 | a    |   5 | zzz</span><br><span class=\"line\">   2 | b    |   1 | xxx</span><br><span class=\"line\">   2 | b    |   3 | yyy</span><br><span class=\"line\">   2 | b    |   5 | zzz</span><br><span class=\"line\">   3 | c    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">   3 | c    |   5 | zzz</span><br><span class=\"line\">(9 rows)</span><br></pre></td></tr></table></figure></p>\n<p>T1表的 num 和T2表的num 相等的数据：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<p>是上面的简写，并且<code>JOIN USING</code>的输出会<strong>废除冗余列</strong>:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">USING</span> (<span class=\"keyword\">num</span>);</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<p><code>NATURAL</code>是<code>USING</code>的缩写形式:<br>该列表由那些在两个表里都出现了的列名组成<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">NATURAL</span> <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> t2;</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(2 rows)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<p>生成的连接表里为来自 T1 的每一行都至少包含一行。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">USING</span> (<span class=\"keyword\">num</span>);</span><br><span class=\"line\"> num | name | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-------</span></span><br><span class=\"line\">   1 | a    | xxx</span><br><span class=\"line\">   2 | b    |</span><br><span class=\"line\">   3 | c    | yyy</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure></p>\n<p>因此，生成的连接表里为来自 T2 的每一行都至少包含一行。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">RIGHT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">     |      |   5 | zzz</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure></p>\n<p>为 T2 中每一个无法在连接条件上匹配 T1 里任何一行的行返回一个连接行，该连接行中 T1 的列用空值补齐。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">FULL</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |   3 | yyy</span><br><span class=\"line\">     |      |   5 | zzz</span><br><span class=\"line\">(4 rows)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num <span class=\"keyword\">AND</span> t2.value = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">   2 | b    |     |</span><br><span class=\"line\">   3 | c    |     |</span><br><span class=\"line\">(3 rows)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t1 <span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">ON</span> t1.num = t2.num <span class=\"keyword\">WHERE</span> t2.value = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"> num | name | num | value</span><br><span class=\"line\"><span class=\"comment\">-----+------+-----+-------</span></span><br><span class=\"line\">   1 | a    |   1 | xxx</span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> products <span class=\"keyword\">SET</span> xx = <span class=\"number\">10</span> <span class=\"keyword\">WHERE</span> xx = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>"},{"title":"React State与Props的小心思","date":"2017-06-30T04:10:00.000Z","comments":1,"layout":"post","_content":"\n忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。\n\n# Props与State很容易让我经常弄混\n\n## 先来说说Props\n\n- 官方解释\n\n组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为**props。**\n\n- 个人理解\n\n**props**是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。\n\n<!--more-->\n\n### props父子传递\n\n```javascript\nfunction Uesr(props){\n  return(\n  <div className={'abc'+ props.color}>\n    {props.children}\n  </div>\n  );\n}\n------------------------------------------------------------------------\n  \nfunction My(){\n  return(\n  <User color=\"red\">\n    <h1>nihao</h1>\n  </User>\n  );\n}\n```\n\n在JSX标签内的任何内容都将通过`children`属性传入`User`。因为`User`在一个`div`内渲染了`{props.children}`，所以被传递的所有元素都会出现在最终输出中。\n\n其实，我们也可以不用children。借用React官方文档的例子：\n\n```javascript\nfunction Contacts() {\n  return <div className=\"Contacts\" />;\n}\n\nfunction Chat() {\n  return <div className=\"Chat\" />;\n}\n\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n\n```\n\n## 接下来State\n\n### state怎么工作？\n\n通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。\n\n### 什么时候组件需要state呢？\n\n一般来说，大部分的组件应该从`props`属性中获取数据然后渲染。那么在！\n\n**用户输入，服务器交互，这些情况下会用到State**。在官方上说，**尽可能的保持你的组件无状态化。**\n\n通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。\n\n- setState:更新组件状态。\n- setState会触发diff算法：判断state和页面结果的区别，是否需要更新。\n\n\n\n### 状态(state)和属性(props)对比\n\n- 状态和属性都会触发render更新，都是纯JS对象\n- 状态：是和自己相关的，既不受父组件也不受子组件影响\n- 属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性\n- 根本的区别：组件在运行时需要去修改维护的就是状态","source":"_posts/React-State与Props的小心思.md","raw":"---\ntitle: React State与Props的小心思\ndate: 2017-06-30 12:10\ncomments: true\nlayout: post\ntags: [JavaScript,React,Webpack]\ncategories: React\n---\n\n忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。\n\n# Props与State很容易让我经常弄混\n\n## 先来说说Props\n\n- 官方解释\n\n组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为**props。**\n\n- 个人理解\n\n**props**是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。\n\n<!--more-->\n\n### props父子传递\n\n```javascript\nfunction Uesr(props){\n  return(\n  <div className={'abc'+ props.color}>\n    {props.children}\n  </div>\n  );\n}\n------------------------------------------------------------------------\n  \nfunction My(){\n  return(\n  <User color=\"red\">\n    <h1>nihao</h1>\n  </User>\n  );\n}\n```\n\n在JSX标签内的任何内容都将通过`children`属性传入`User`。因为`User`在一个`div`内渲染了`{props.children}`，所以被传递的所有元素都会出现在最终输出中。\n\n其实，我们也可以不用children。借用React官方文档的例子：\n\n```javascript\nfunction Contacts() {\n  return <div className=\"Contacts\" />;\n}\n\nfunction Chat() {\n  return <div className=\"Chat\" />;\n}\n\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n\n```\n\n## 接下来State\n\n### state怎么工作？\n\n通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。\n\n### 什么时候组件需要state呢？\n\n一般来说，大部分的组件应该从`props`属性中获取数据然后渲染。那么在！\n\n**用户输入，服务器交互，这些情况下会用到State**。在官方上说，**尽可能的保持你的组件无状态化。**\n\n通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。\n\n- setState:更新组件状态。\n- setState会触发diff算法：判断state和页面结果的区别，是否需要更新。\n\n\n\n### 状态(state)和属性(props)对比\n\n- 状态和属性都会触发render更新，都是纯JS对象\n- 状态：是和自己相关的，既不受父组件也不受子组件影响\n- 属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性\n- 根本的区别：组件在运行时需要去修改维护的就是状态","slug":"React-State与Props的小心思","published":1,"updated":"2017-07-24T14:37:44.000Z","photos":[],"link":"","_id":"cjollnbs4004gunfya4mns08d","content":"<p>忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。</p>\n<h1 id=\"Props与State很容易让我经常弄混\"><a href=\"#Props与State很容易让我经常弄混\" class=\"headerlink\" title=\"Props与State很容易让我经常弄混\"></a>Props与State很容易让我经常弄混</h1><h2 id=\"先来说说Props\"><a href=\"#先来说说Props\" class=\"headerlink\" title=\"先来说说Props\"></a>先来说说Props</h2><ul>\n<li>官方解释</li>\n</ul>\n<p>组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为<strong>props。</strong></p>\n<ul>\n<li>个人理解</li>\n</ul>\n<p><strong>props</strong>是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。</p>\n<a id=\"more\"></a>\n<h3 id=\"props父子传递\"><a href=\"#props父子传递\" class=\"headerlink\" title=\"props父子传递\"></a>props父子传递</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Uesr</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">  &lt;div className=&#123;<span class=\"string\">'abc'</span>+ props.color&#125;&gt;</span><br><span class=\"line\">    &#123;props.children&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"regexp\">  </span></span><br><span class=\"line\"><span class=\"regexp\">function My()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;User color=\"red\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h1&gt;nihao&lt;/</span>h1&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/User&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在JSX标签内的任何内容都将通过<code>children</code>属性传入<code>User</code>。因为<code>User</code>在一个<code>div</code>内渲染了<code>{props.children}</code>，所以被传递的所有元素都会出现在最终输出中。</p>\n<p>其实，我们也可以不用children。借用React官方文档的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Contacts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"Contacts\"</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">function Chat() &#123;</span></span><br><span class=\"line\">  return &lt;div className=\"Chat\" /&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function SplitPane(props) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className=\"SplitPane\"&gt;</span><br><span class=\"line\">      &lt;div className=\"SplitPane-left\"&gt;</span><br><span class=\"line\">        &#123;props.left&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div className=\"SplitPane-right\"&gt;</span><br><span class=\"line\">        &#123;props.right&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;SplitPane</span><br><span class=\"line\">      left=&#123;</span><br><span class=\"line\">        &lt;Contacts /&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right=&#123;</span><br><span class=\"line\">        &lt;Chat /&gt;</span><br><span class=\"line\">      &#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接下来State\"><a href=\"#接下来State\" class=\"headerlink\" title=\"接下来State\"></a>接下来State</h2><h3 id=\"state怎么工作？\"><a href=\"#state怎么工作？\" class=\"headerlink\" title=\"state怎么工作？\"></a>state怎么工作？</h3><p>通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。</p>\n<h3 id=\"什么时候组件需要state呢？\"><a href=\"#什么时候组件需要state呢？\" class=\"headerlink\" title=\"什么时候组件需要state呢？\"></a>什么时候组件需要state呢？</h3><p>一般来说，大部分的组件应该从<code>props</code>属性中获取数据然后渲染。那么在！</p>\n<p><strong>用户输入，服务器交互，这些情况下会用到State</strong>。在官方上说，<strong>尽可能的保持你的组件无状态化。</strong></p>\n<p>通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。</p>\n<ul>\n<li>setState:更新组件状态。</li>\n<li>setState会触发diff算法：判断state和页面结果的区别，是否需要更新。</li>\n</ul>\n<h3 id=\"状态-state-和属性-props-对比\"><a href=\"#状态-state-和属性-props-对比\" class=\"headerlink\" title=\"状态(state)和属性(props)对比\"></a>状态(state)和属性(props)对比</h3><ul>\n<li>状态和属性都会触发render更新，都是纯JS对象</li>\n<li>状态：是和自己相关的，既不受父组件也不受子组件影响</li>\n<li>属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性</li>\n<li>根本的区别：组件在运行时需要去修改维护的就是状态</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。</p>\n<h1 id=\"Props与State很容易让我经常弄混\"><a href=\"#Props与State很容易让我经常弄混\" class=\"headerlink\" title=\"Props与State很容易让我经常弄混\"></a>Props与State很容易让我经常弄混</h1><h2 id=\"先来说说Props\"><a href=\"#先来说说Props\" class=\"headerlink\" title=\"先来说说Props\"></a>先来说说Props</h2><ul>\n<li>官方解释</li>\n</ul>\n<p>组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为<strong>props。</strong></p>\n<ul>\n<li>个人理解</li>\n</ul>\n<p><strong>props</strong>是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。</p>","more":"<h3 id=\"props父子传递\"><a href=\"#props父子传递\" class=\"headerlink\" title=\"props父子传递\"></a>props父子传递</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Uesr</span>(<span class=\"params\">props</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">  &lt;div className=&#123;<span class=\"string\">'abc'</span>+ props.color&#125;&gt;</span><br><span class=\"line\">    &#123;props.children&#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"regexp\">  </span></span><br><span class=\"line\"><span class=\"regexp\">function My()&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return(</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;User color=\"red\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;h1&gt;nihao&lt;/</span>h1&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/User&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在JSX标签内的任何内容都将通过<code>children</code>属性传入<code>User</code>。因为<code>User</code>在一个<code>div</code>内渲染了<code>{props.children}</code>，所以被传递的所有元素都会出现在最终输出中。</p>\n<p>其实，我们也可以不用children。借用React官方文档的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Contacts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"Contacts\"</span> /&gt;</span>;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">function Chat() &#123;</span></span><br><span class=\"line\">  return &lt;div className=\"Chat\" /&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function SplitPane(props) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className=\"SplitPane\"&gt;</span><br><span class=\"line\">      &lt;div className=\"SplitPane-left\"&gt;</span><br><span class=\"line\">        &#123;props.left&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div className=\"SplitPane-right\"&gt;</span><br><span class=\"line\">        &#123;props.right&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;SplitPane</span><br><span class=\"line\">      left=&#123;</span><br><span class=\"line\">        &lt;Contacts /&gt;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right=&#123;</span><br><span class=\"line\">        &lt;Chat /&gt;</span><br><span class=\"line\">      &#125; /&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接下来State\"><a href=\"#接下来State\" class=\"headerlink\" title=\"接下来State\"></a>接下来State</h2><h3 id=\"state怎么工作？\"><a href=\"#state怎么工作？\" class=\"headerlink\" title=\"state怎么工作？\"></a>state怎么工作？</h3><p>通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。</p>\n<h3 id=\"什么时候组件需要state呢？\"><a href=\"#什么时候组件需要state呢？\" class=\"headerlink\" title=\"什么时候组件需要state呢？\"></a>什么时候组件需要state呢？</h3><p>一般来说，大部分的组件应该从<code>props</code>属性中获取数据然后渲染。那么在！</p>\n<p><strong>用户输入，服务器交互，这些情况下会用到State</strong>。在官方上说，<strong>尽可能的保持你的组件无状态化。</strong></p>\n<p>通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。</p>\n<ul>\n<li>setState:更新组件状态。</li>\n<li>setState会触发diff算法：判断state和页面结果的区别，是否需要更新。</li>\n</ul>\n<h3 id=\"状态-state-和属性-props-对比\"><a href=\"#状态-state-和属性-props-对比\" class=\"headerlink\" title=\"状态(state)和属性(props)对比\"></a>状态(state)和属性(props)对比</h3><ul>\n<li>状态和属性都会触发render更新，都是纯JS对象</li>\n<li>状态：是和自己相关的，既不受父组件也不受子组件影响</li>\n<li>属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性</li>\n<li>根本的区别：组件在运行时需要去修改维护的就是状态</li>\n</ul>"},{"title":"React-Native踩得坑持续更新","date":"2018-01-30T13:46:59.212Z","updated":"2018-04-02T15:12:00.000Z","comments":1,"layout":"post","_content":"\n## 用nativebase遇到的fontFamily的问题\n\n![选区_022](http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png)\n\n<!--more-->\nhttps://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13\n\n###  在RN中CSS、display不能为none\n\n![选区_027](http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png)\n\n​\t\n\n​\t{display: 'none'} cause this bug\n\n## Unrecognized Font Family on React Native\n![Unrecognized Font Family on React Native](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/Unrecognized%20Font%20FamilyonReactNative.png)\n\n* react-native link\n* `react-native run-ios` or `react-native run-android`\n\n","source":"_posts/React-Native踩坑.md","raw":"---\ntitle: React-Native踩得坑持续更新\ndate: 2018-01-30 21：48\nupdated: 2018-04-02 23:12\ncomments: true\nlayout: post\ntags: [React Native]\ncategories: React Native\n---\n\n## 用nativebase遇到的fontFamily的问题\n\n![选区_022](http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png)\n\n<!--more-->\nhttps://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13\n\n###  在RN中CSS、display不能为none\n\n![选区_027](http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png)\n\n​\t\n\n​\t{display: 'none'} cause this bug\n\n## Unrecognized Font Family on React Native\n![Unrecognized Font Family on React Native](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/Unrecognized%20Font%20FamilyonReactNative.png)\n\n* react-native link\n* `react-native run-ios` or `react-native run-android`\n\n","slug":"React-Native踩坑","published":1,"photos":[],"link":"","_id":"cjollnbs8004junfybx8m3rqp","content":"<h2 id=\"用nativebase遇到的fontFamily的问题\"><a href=\"#用nativebase遇到的fontFamily的问题\" class=\"headerlink\" title=\"用nativebase遇到的fontFamily的问题\"></a>用nativebase遇到的fontFamily的问题</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png\" alt=\"选区_022\"></p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13\" target=\"_blank\" rel=\"noopener\">https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13</a></p>\n<h3 id=\"在RN中CSS、display不能为none\"><a href=\"#在RN中CSS、display不能为none\" class=\"headerlink\" title=\"在RN中CSS、display不能为none\"></a>在RN中CSS、display不能为none</h3><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png\" alt=\"选区_027\"></p>\n<p>​    </p>\n<p>​    {display: ‘none’} cause this bug</p>\n<h2 id=\"Unrecognized-Font-Family-on-React-Native\"><a href=\"#Unrecognized-Font-Family-on-React-Native\" class=\"headerlink\" title=\"Unrecognized Font Family on React Native\"></a>Unrecognized Font Family on React Native</h2><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/Unrecognized%20Font%20FamilyonReactNative.png\" alt=\"Unrecognized Font Family on React Native\"></p>\n<ul>\n<li>react-native link</li>\n<li><code>react-native run-ios</code> or <code>react-native run-android</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"用nativebase遇到的fontFamily的问题\"><a href=\"#用nativebase遇到的fontFamily的问题\" class=\"headerlink\" title=\"用nativebase遇到的fontFamily的问题\"></a>用nativebase遇到的fontFamily的问题</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/expo-font-family.png\" alt=\"选区_022\"></p>","more":"<p><a href=\"https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13\" target=\"_blank\" rel=\"noopener\">https://github.com/GeekyAnts/NativeBase-KitchenSink/blob/CRNA/App.js#L13</a></p>\n<h3 id=\"在RN中CSS、display不能为none\"><a href=\"#在RN中CSS、display不能为none\" class=\"headerlink\" title=\"在RN中CSS、display不能为none\"></a>在RN中CSS、display不能为none</h3><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/rn-timed-out.png\" alt=\"选区_027\"></p>\n<p>​    </p>\n<p>​    {display: ‘none’} cause this bug</p>\n<h2 id=\"Unrecognized-Font-Family-on-React-Native\"><a href=\"#Unrecognized-Font-Family-on-React-Native\" class=\"headerlink\" title=\"Unrecognized Font Family on React Native\"></a>Unrecognized Font Family on React Native</h2><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/Unrecognized%20Font%20FamilyonReactNative.png\" alt=\"Unrecognized Font Family on React Native\"></p>\n<ul>\n<li>react-native link</li>\n<li><code>react-native run-ios</code> or <code>react-native run-android</code></li>\n</ul>"},{"title":"ReactNative热更新之微软CodePush","date":"2018-03-28T14:10:23.014Z","comments":1,"layout":"post","_content":"\n# 微软 CodePush 使用\n\n## 安装\n\n`yarn global add code-push-cli`\n\n## 注册账户\n\n`code-push register`\n\n会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。\n\n<!--more-->\n\n## CodePush 登录相关命令\n\n* code-push login 登陆\n* code-push logout 注销\n* code-push access-key ls 列出登陆的 token\n* code-push access-key rm 删除某个 access-key\n\n## CodePush 创建 App 相关命令\n\n* code-push app add\n  * 如: code-push app add yimutest-ios ios/android react-native\n* code-push app add\n  * 在账号里面添加一个新的 app\n* code-push app remove\n  * rm 在账号里移除一个 app\n* code-push app rename\n  * 重命名一个存在 app\n* code-push app list\n  * ls 列出账号下面的所有 app\n* code-push app transfer\n  * 把 app 的所有权转移到另外一个账号\n\n## 在项目中 \b 加包\n\n1.  `yarn add react-native-code-push`\n1.  `react-native link`\n\n之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里\n\nStaging 为测试的 key，Production 为生产打包时用的 key。\n\n如果忘了 \b 则在终端下做查看:\n\n`code-push deployment ls 您的应用名 -k`\n\n## App.js\n\n```javascript\nimport codePush from \"react-native-code-push\";\nconst codePushOptions = { checkFrequency: codePush.CheckFrequency.MANUAL };\n\ncomponentDidMount(){\n  codePush.sync({\n    updateDialog: true,\n    installMode: codePush.InstallMode.IMMEDIATE,\n    mandatoryInstallMode:codePush.InstallMode.IMMEDIATE,\n    //deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试\n    deploymentKey: 'xxxxxxx',\n    });\n}\n```\n\n附上其他的详细 API: [详细配置](https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md)\n\n## 发布新版本\n\n> `code-push release <应用名称> <Bundles所在目录> <对应的应用版本> --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新`\n\n> `code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description \"我也不知道要写啥\" --mandatory false`\n\n1.  `code-push app add aaa-ios ios react-native`\n1.  `yarn start-ios`\n\n### \bAndroid 新版本发布\n\n修改 App.js 的 deploymentKey 为安卓的\n\n1.  `deploymentKey:'android key'`\n1.  `code-push release-react aaa-android android`\n1.  `yarn start-android`\n","source":"_posts/ReactNativeCodePush.md","raw":"---\ntitle: ReactNative热更新之微软CodePush\ndate: 2018-03-28 22：09\ncomments: true\nlayout: post\ntags: [React Native]\ncategories: React Native\n---\n\n# 微软 CodePush 使用\n\n## 安装\n\n`yarn global add code-push-cli`\n\n## 注册账户\n\n`code-push register`\n\n会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。\n\n<!--more-->\n\n## CodePush 登录相关命令\n\n* code-push login 登陆\n* code-push logout 注销\n* code-push access-key ls 列出登陆的 token\n* code-push access-key rm 删除某个 access-key\n\n## CodePush 创建 App 相关命令\n\n* code-push app add\n  * 如: code-push app add yimutest-ios ios/android react-native\n* code-push app add\n  * 在账号里面添加一个新的 app\n* code-push app remove\n  * rm 在账号里移除一个 app\n* code-push app rename\n  * 重命名一个存在 app\n* code-push app list\n  * ls 列出账号下面的所有 app\n* code-push app transfer\n  * 把 app 的所有权转移到另外一个账号\n\n## 在项目中 \b 加包\n\n1.  `yarn add react-native-code-push`\n1.  `react-native link`\n\n之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里\n\nStaging 为测试的 key，Production 为生产打包时用的 key。\n\n如果忘了 \b 则在终端下做查看:\n\n`code-push deployment ls 您的应用名 -k`\n\n## App.js\n\n```javascript\nimport codePush from \"react-native-code-push\";\nconst codePushOptions = { checkFrequency: codePush.CheckFrequency.MANUAL };\n\ncomponentDidMount(){\n  codePush.sync({\n    updateDialog: true,\n    installMode: codePush.InstallMode.IMMEDIATE,\n    mandatoryInstallMode:codePush.InstallMode.IMMEDIATE,\n    //deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试\n    deploymentKey: 'xxxxxxx',\n    });\n}\n```\n\n附上其他的详细 API: [详细配置](https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md)\n\n## 发布新版本\n\n> `code-push release <应用名称> <Bundles所在目录> <对应的应用版本> --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新`\n\n> `code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description \"我也不知道要写啥\" --mandatory false`\n\n1.  `code-push app add aaa-ios ios react-native`\n1.  `yarn start-ios`\n\n### \bAndroid 新版本发布\n\n修改 App.js 的 deploymentKey 为安卓的\n\n1.  `deploymentKey:'android key'`\n1.  `code-push release-react aaa-android android`\n1.  `yarn start-android`\n","slug":"ReactNativeCodePush","published":1,"updated":"2018-03-28T14:16:55.431Z","photos":[],"link":"","_id":"cjollnbsg004ounfy2pmpjc1f","content":"<h1 id=\"微软-CodePush-使用\"><a href=\"#微软-CodePush-使用\" class=\"headerlink\" title=\"微软 CodePush 使用\"></a>微软 CodePush 使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>yarn global add code-push-cli</code></p>\n<h2 id=\"注册账户\"><a href=\"#注册账户\" class=\"headerlink\" title=\"注册账户\"></a>注册账户</h2><p><code>code-push register</code></p>\n<p>会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。</p>\n<a id=\"more\"></a>\n<h2 id=\"CodePush-登录相关命令\"><a href=\"#CodePush-登录相关命令\" class=\"headerlink\" title=\"CodePush 登录相关命令\"></a>CodePush 登录相关命令</h2><ul>\n<li>code-push login 登陆</li>\n<li>code-push logout 注销</li>\n<li>code-push access-key ls 列出登陆的 token</li>\n<li>code-push access-key rm 删除某个 access-key</li>\n</ul>\n<h2 id=\"CodePush-创建-App-相关命令\"><a href=\"#CodePush-创建-App-相关命令\" class=\"headerlink\" title=\"CodePush 创建 App 相关命令\"></a>CodePush 创建 App 相关命令</h2><ul>\n<li>code-push app add<ul>\n<li>如: code-push app add yimutest-ios ios/android react-native</li>\n</ul>\n</li>\n<li>code-push app add<ul>\n<li>在账号里面添加一个新的 app</li>\n</ul>\n</li>\n<li>code-push app remove<ul>\n<li>rm 在账号里移除一个 app</li>\n</ul>\n</li>\n<li>code-push app rename<ul>\n<li>重命名一个存在 app</li>\n</ul>\n</li>\n<li>code-push app list<ul>\n<li>ls 列出账号下面的所有 app</li>\n</ul>\n</li>\n<li>code-push app transfer<ul>\n<li>把 app 的所有权转移到另外一个账号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在项目中-加包\"><a href=\"#在项目中-加包\" class=\"headerlink\" title=\"在项目中 \b 加包\"></a>在项目中 \b 加包</h2><ol>\n<li><code>yarn add react-native-code-push</code></li>\n<li><code>react-native link</code></li>\n</ol>\n<p>之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里</p>\n<p>Staging 为测试的 key，Production 为生产打包时用的 key。</p>\n<p>如果忘了 \b 则在终端下做查看:</p>\n<p><code>code-push deployment ls 您的应用名 -k</code></p>\n<h2 id=\"App-js\"><a href=\"#App-js\" class=\"headerlink\" title=\"App.js\"></a>App.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> codePush <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-code-push\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: codePush.CheckFrequency.MANUAL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">  codePush.sync(&#123;</span><br><span class=\"line\">    updateDialog: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    installMode: codePush.InstallMode.IMMEDIATE,</span><br><span class=\"line\">    mandatoryInstallMode:codePush.InstallMode.IMMEDIATE,</span><br><span class=\"line\">    <span class=\"comment\">//deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试</span></span><br><span class=\"line\">    deploymentKey: <span class=\"string\">'xxxxxxx'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>附上其他的详细 API: <a href=\"https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md\" target=\"_blank\" rel=\"noopener\">详细配置</a></p>\n<h2 id=\"发布新版本\"><a href=\"#发布新版本\" class=\"headerlink\" title=\"发布新版本\"></a>发布新版本</h2><blockquote>\n<p><code>code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</code></p>\n</blockquote>\n<blockquote>\n<p><code>code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description &quot;我也不知道要写啥&quot; --mandatory false</code></p>\n</blockquote>\n<ol>\n<li><code>code-push app add aaa-ios ios react-native</code></li>\n<li><code>yarn start-ios</code></li>\n</ol>\n<h3 id=\"Android-新版本发布\"><a href=\"#Android-新版本发布\" class=\"headerlink\" title=\"\bAndroid 新版本发布\"></a>\bAndroid 新版本发布</h3><p>修改 App.js 的 deploymentKey 为安卓的</p>\n<ol>\n<li><code>deploymentKey:&#39;android key&#39;</code></li>\n<li><code>code-push release-react aaa-android android</code></li>\n<li><code>yarn start-android</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"微软-CodePush-使用\"><a href=\"#微软-CodePush-使用\" class=\"headerlink\" title=\"微软 CodePush 使用\"></a>微软 CodePush 使用</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>yarn global add code-push-cli</code></p>\n<h2 id=\"注册账户\"><a href=\"#注册账户\" class=\"headerlink\" title=\"注册账户\"></a>注册账户</h2><p><code>code-push register</code></p>\n<p>会弹出一个浏览器,让你注册,可以使用 github 帐号对其进行授权,授权成功会给一串 Token,点击复制，在控制进行粘贴回车(或者使用 code-push login 命令)。</p>","more":"<h2 id=\"CodePush-登录相关命令\"><a href=\"#CodePush-登录相关命令\" class=\"headerlink\" title=\"CodePush 登录相关命令\"></a>CodePush 登录相关命令</h2><ul>\n<li>code-push login 登陆</li>\n<li>code-push logout 注销</li>\n<li>code-push access-key ls 列出登陆的 token</li>\n<li>code-push access-key rm 删除某个 access-key</li>\n</ul>\n<h2 id=\"CodePush-创建-App-相关命令\"><a href=\"#CodePush-创建-App-相关命令\" class=\"headerlink\" title=\"CodePush 创建 App 相关命令\"></a>CodePush 创建 App 相关命令</h2><ul>\n<li>code-push app add<ul>\n<li>如: code-push app add yimutest-ios ios/android react-native</li>\n</ul>\n</li>\n<li>code-push app add<ul>\n<li>在账号里面添加一个新的 app</li>\n</ul>\n</li>\n<li>code-push app remove<ul>\n<li>rm 在账号里移除一个 app</li>\n</ul>\n</li>\n<li>code-push app rename<ul>\n<li>重命名一个存在 app</li>\n</ul>\n</li>\n<li>code-push app list<ul>\n<li>ls 列出账号下面的所有 app</li>\n</ul>\n</li>\n<li>code-push app transfer<ul>\n<li>把 app 的所有权转移到另外一个账号</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在项目中-加包\"><a href=\"#在项目中-加包\" class=\"headerlink\" title=\"在项目中 \b 加包\"></a>在项目中 \b 加包</h2><ol>\n<li><code>yarn add react-native-code-push</code></li>\n<li><code>react-native link</code></li>\n</ol>\n<p>之后会让你将刚才添加的 ios/Android App 的 Staging Key 复制粘贴到这里</p>\n<p>Staging 为测试的 key，Production 为生产打包时用的 key。</p>\n<p>如果忘了 \b 则在终端下做查看:</p>\n<p><code>code-push deployment ls 您的应用名 -k</code></p>\n<h2 id=\"App-js\"><a href=\"#App-js\" class=\"headerlink\" title=\"App.js\"></a>App.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> codePush <span class=\"keyword\">from</span> <span class=\"string\">\"react-native-code-push\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> codePushOptions = &#123; <span class=\"attr\">checkFrequency</span>: codePush.CheckFrequency.MANUAL &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount()&#123;</span><br><span class=\"line\">  codePush.sync(&#123;</span><br><span class=\"line\">    updateDialog: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    installMode: codePush.InstallMode.IMMEDIATE,</span><br><span class=\"line\">    mandatoryInstallMode:codePush.InstallMode.IMMEDIATE,</span><br><span class=\"line\">    <span class=\"comment\">//deploymentKey为刚才生成的,打包哪个平台的App就使用哪个Key,这里用IOS的打包测试</span></span><br><span class=\"line\">    deploymentKey: <span class=\"string\">'xxxxxxx'</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>附上其他的详细 API: <a href=\"https://github.com/Microsoft/react-native-code-push/blob/master/docs/api-js.md\" target=\"_blank\" rel=\"noopener\">详细配置</a></p>\n<h2 id=\"发布新版本\"><a href=\"#发布新版本\" class=\"headerlink\" title=\"发布新版本\"></a>发布新版本</h2><blockquote>\n<p><code>code-push release &lt;应用名称&gt; &lt;Bundles所在目录&gt; &lt;对应的应用版本&gt; --deploymentName： 更新环境 --description： 更新描述 --mandatory： 是否强制更新</code></p>\n</blockquote>\n<blockquote>\n<p><code>code-push release codepush01 ./bundles/ 1.0.0 --deploymentName Production --description &quot;我也不知道要写啥&quot; --mandatory false</code></p>\n</blockquote>\n<ol>\n<li><code>code-push app add aaa-ios ios react-native</code></li>\n<li><code>yarn start-ios</code></li>\n</ol>\n<h3 id=\"Android-新版本发布\"><a href=\"#Android-新版本发布\" class=\"headerlink\" title=\"\bAndroid 新版本发布\"></a>\bAndroid 新版本发布</h3><p>修改 App.js 的 deploymentKey 为安卓的</p>\n<ol>\n<li><code>deploymentKey:&#39;android key&#39;</code></li>\n<li><code>code-push release-react aaa-android android</code></li>\n<li><code>yarn start-android</code></li>\n</ol>"},{"title":"React新生命周期","date":"2018-04-10T12:39:26.000Z","updated":"2018-04-11T13:41:42.000Z","comments":1,"layout":"post","_content":"\n# React16.3.1\n\nReact发生了重大的变化。并且更新了新的生命周期我们来了解一下。\n\n献上一个图！\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n\n> 地址：[React新生命周期图](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)\n\n<!--more-->\n\n# 生命周期\n\n## Mounting/挂载\n\n* constructor()\n* static getDerivedStateFromProps()\n* UNSAFE_componentWillMount()\n* render()\n* componentDidMount()\n\n\n\n## Updating/更新\n\n* UNSAFE_componentWillReceiveProps()\n* static getDerivedStateFromProps()\n* shouldComponentUpdate(prevProps, prevState)\n* UNSAFE_componentWillUpdate()\n* render()\n* getSnapshotBeforeUpdate()\n* componentDidUpdate(prevProps, prevState, snapshot)\n\n\n## Unmounting/卸载\n\n* componentWillUnmount()\n\n\n\n# Demo-getDerivedStateFromProps&&componentDidUpdate:\n\n链接： [小demo，了解一下](https://codesandbox.io/s/2xv69l269j)\n\ncomponentDidUpdate是个做网络请求的好地方。\n\n```javascript\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nconst App = () => (\n  <div style={styles}>\n    <Hello name=\"CodeSandbox\" />\n    <h2>Start editing to see some magic happen {\"\\u2728\"}</h2>\n    <B />\n  </div>\n);\nclass B extends React.Component {\n  state = {\n    myParentValue: \"\"\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ myParentValue: \"XuZiHao\" });\n    }, 1000);\n  }\n\n  render() {\n    return <C foo={this.state.myParentValue} />;\n  }\n}\n\nclass C extends React.Component {\n  state = {\n    foo: \"\"\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.foo === \"XuZiHao\") {\n      return {\n        foo: \"bar\"\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate() {\n    if (this.state.foo === \"bar\") {\n      setTimeout(() => {\n        this.setState({ foo: \"Hello!!!!\" });\n      }, 4000);\n    }\n  }\n\n  render() {\n    return <h1>Value of `foo` is {this.state.foo}</h1>;\n  }\n}\nrender(<App />, document.getElementById(\"root\"));\n\n```\n\n\n\n# Demo-shouldComponentUpdate(prevProps, prevState)\n\n```javascript\nimport React from 'react'\nclass Test extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      Number:1\n    }\n  }\n  //这里调用了setState但是并没有改变setState中的值\n  handleClick = () => {\n     const preNumber = this.state.Number\n     this.setState({\n        Number:this.state.Number\n     })\n  }\n  //在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用\n  shouldComponentUpdate(nextProps,nextState){\n      if(nextState.Number == this.state.Number){\n        return false\n      }\n  }\n  render(){\n    //当render函数被调用时，打印当前的Number\n    console.log(this.state.Number)\n    return(<h1 onClick = {this.handleClick} style ={{margin:30}}>\n             {this.state.Number}\n           </h1>)\n  }\n}\n```\n\n\n\n# Demo-getSnapshotBeforeUpdate()\n\n官方例子：\n\n> [官网地址](https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate)\n\n```javascript\nclass ScrollingList extends React.Component {\n  listRef = React.createRef();\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 是否将新项目添加到列表中？\n    // 捕获列表的当前高度，以便稍后调整滚动。\n    if (prevProps.list.length < this.props.list.length) {\n      return this.listRef.current.scrollHeight;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 如果我们有快照值，我们刚刚添加了新items\n    // 调整滚动条，以便这些新items不会将旧的推出视图。\n    if (snapshot !== null) {\n      this.listRef.current.scrollTop +=\n        this.listRef.current.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n```\n\n","source":"_posts/React新生命周期.md","raw":"---\ntitle: React新生命周期\ndate: 2018-04-10 20:39:26\nupdated: 2018-04-11 21:41:42\ncomments: true\nlayout: post\ntags: [React]\ncategories: React\n---\n\n# React16.3.1\n\nReact发生了重大的变化。并且更新了新的生命周期我们来了解一下。\n\n献上一个图！\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)\n\n> 地址：[React新生命周期图](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/)\n\n<!--more-->\n\n# 生命周期\n\n## Mounting/挂载\n\n* constructor()\n* static getDerivedStateFromProps()\n* UNSAFE_componentWillMount()\n* render()\n* componentDidMount()\n\n\n\n## Updating/更新\n\n* UNSAFE_componentWillReceiveProps()\n* static getDerivedStateFromProps()\n* shouldComponentUpdate(prevProps, prevState)\n* UNSAFE_componentWillUpdate()\n* render()\n* getSnapshotBeforeUpdate()\n* componentDidUpdate(prevProps, prevState, snapshot)\n\n\n## Unmounting/卸载\n\n* componentWillUnmount()\n\n\n\n# Demo-getDerivedStateFromProps&&componentDidUpdate:\n\n链接： [小demo，了解一下](https://codesandbox.io/s/2xv69l269j)\n\ncomponentDidUpdate是个做网络请求的好地方。\n\n```javascript\nimport React from \"react\";\nimport { render } from \"react-dom\";\n\nconst App = () => (\n  <div style={styles}>\n    <Hello name=\"CodeSandbox\" />\n    <h2>Start editing to see some magic happen {\"\\u2728\"}</h2>\n    <B />\n  </div>\n);\nclass B extends React.Component {\n  state = {\n    myParentValue: \"\"\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ myParentValue: \"XuZiHao\" });\n    }, 1000);\n  }\n\n  render() {\n    return <C foo={this.state.myParentValue} />;\n  }\n}\n\nclass C extends React.Component {\n  state = {\n    foo: \"\"\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.foo === \"XuZiHao\") {\n      return {\n        foo: \"bar\"\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate() {\n    if (this.state.foo === \"bar\") {\n      setTimeout(() => {\n        this.setState({ foo: \"Hello!!!!\" });\n      }, 4000);\n    }\n  }\n\n  render() {\n    return <h1>Value of `foo` is {this.state.foo}</h1>;\n  }\n}\nrender(<App />, document.getElementById(\"root\"));\n\n```\n\n\n\n# Demo-shouldComponentUpdate(prevProps, prevState)\n\n```javascript\nimport React from 'react'\nclass Test extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      Number:1\n    }\n  }\n  //这里调用了setState但是并没有改变setState中的值\n  handleClick = () => {\n     const preNumber = this.state.Number\n     this.setState({\n        Number:this.state.Number\n     })\n  }\n  //在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用\n  shouldComponentUpdate(nextProps,nextState){\n      if(nextState.Number == this.state.Number){\n        return false\n      }\n  }\n  render(){\n    //当render函数被调用时，打印当前的Number\n    console.log(this.state.Number)\n    return(<h1 onClick = {this.handleClick} style ={{margin:30}}>\n             {this.state.Number}\n           </h1>)\n  }\n}\n```\n\n\n\n# Demo-getSnapshotBeforeUpdate()\n\n官方例子：\n\n> [官网地址](https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate)\n\n```javascript\nclass ScrollingList extends React.Component {\n  listRef = React.createRef();\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 是否将新项目添加到列表中？\n    // 捕获列表的当前高度，以便稍后调整滚动。\n    if (prevProps.list.length < this.props.list.length) {\n      return this.listRef.current.scrollHeight;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 如果我们有快照值，我们刚刚添加了新items\n    // 调整滚动条，以便这些新items不会将旧的推出视图。\n    if (snapshot !== null) {\n      this.listRef.current.scrollTop +=\n        this.listRef.current.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n```\n\n","slug":"React新生命周期","published":1,"photos":[],"link":"","_id":"cjollnbsj004runfykt7xbxxd","content":"<h1 id=\"React16-3-1\"><a href=\"#React16-3-1\" class=\"headerlink\" title=\"React16.3.1\"></a>React16.3.1</h1><p>React发生了重大的变化。并且更新了新的生命周期我们来了解一下。</p>\n<p>献上一个图！</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"\"></p>\n<blockquote>\n<p>地址：<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">React新生命周期图</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h2 id=\"Mounting-挂载\"><a href=\"#Mounting-挂载\" class=\"headerlink\" title=\"Mounting/挂载\"></a>Mounting/挂载</h2><ul>\n<li>constructor()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>UNSAFE_componentWillMount()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n</ul>\n<h2 id=\"Updating-更新\"><a href=\"#Updating-更新\" class=\"headerlink\" title=\"Updating/更新\"></a>Updating/更新</h2><ul>\n<li>UNSAFE_componentWillReceiveProps()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>shouldComponentUpdate(prevProps, prevState)</li>\n<li>UNSAFE_componentWillUpdate()</li>\n<li>render()</li>\n<li>getSnapshotBeforeUpdate()</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)</li>\n</ul>\n<h2 id=\"Unmounting-卸载\"><a href=\"#Unmounting-卸载\" class=\"headerlink\" title=\"Unmounting/卸载\"></a>Unmounting/卸载</h2><ul>\n<li>componentWillUnmount()</li>\n</ul>\n<h1 id=\"Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate\"><a href=\"#Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate\" class=\"headerlink\" title=\"Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:\"></a>Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:</h1><p>链接： <a href=\"https://codesandbox.io/s/2xv69l269j\" target=\"_blank\" rel=\"noopener\">小demo，了解一下</a></p>\n<p>componentDidUpdate是个做网络请求的好地方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div style=&#123;styles&#125;&gt;</span><br><span class=\"line\">    &lt;Hello name=<span class=\"string\">\"CodeSandbox\"</span> /&gt;</span><br><span class=\"line\">    &lt;h2&gt;Start editing to see some magic happen &#123;<span class=\"string\">\"\\u2728\"</span>&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;B /</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\">class B extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  state = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    myParentValue: \"\"</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  componentDidMount() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.setState(&#123; myParentValue: \"XuZiHao\" &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;, 1000);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &lt;C foo=&#123;this.state.myParentValue&#125; /</span>&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.foo === <span class=\"string\">\"XuZiHao\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.foo === <span class=\"string\">\"bar\"</span>) &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"Hello!!!!\"</span> &#125;);</span><br><span class=\"line\">      &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Value of `foo` is &#123;this.state.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo-shouldComponentUpdate-prevProps-prevState\"><a href=\"#Demo-shouldComponentUpdate-prevProps-prevState\" class=\"headerlink\" title=\"Demo-shouldComponentUpdate(prevProps, prevState)\"></a>Demo-shouldComponentUpdate(prevProps, prevState)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Number</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//这里调用了setState但是并没有改变setState中的值</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> preNumber = <span class=\"keyword\">this</span>.state.Number</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Number</span>:<span class=\"keyword\">this</span>.state.Number</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nextState.Number == <span class=\"keyword\">this</span>.state.Number)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当render函数被调用时，打印当前的Number</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.Number)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span> = <span class=\"string\">&#123;this.handleClick&#125;</span> <span class=\"attr\">style</span> =<span class=\"string\">&#123;&#123;margin:30&#125;&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">             &#123;this.state.Number&#125;</span></span><br><span class=\"line\"><span class=\"xml\">           <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo-getSnapshotBeforeUpdate\"><a href=\"#Demo-getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"Demo-getSnapshotBeforeUpdate()\"></a>Demo-getSnapshotBeforeUpdate()</h1><p>官方例子：</p>\n<blockquote>\n<p><a href=\"https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollingList</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  listRef = React.createRef();</span><br><span class=\"line\"></span><br><span class=\"line\">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否将新项目添加到列表中？</span></span><br><span class=\"line\">    <span class=\"comment\">// 捕获列表的当前高度，以便稍后调整滚动。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.list.length &lt; <span class=\"keyword\">this</span>.props.list.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listRef.current.scrollHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们有快照值，我们刚刚添加了新items</span></span><br><span class=\"line\">    <span class=\"comment\">// 调整滚动条，以便这些新items不会将旧的推出视图。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (snapshot !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listRef.current.scrollTop +=</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listRef.current.scrollHeight - snapshot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div ref=&#123;<span class=\"keyword\">this</span>.listRef&#125;&gt;&#123;<span class=\"comment\">/* ...contents... */</span>&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"React16-3-1\"><a href=\"#React16-3-1\" class=\"headerlink\" title=\"React16.3.1\"></a>React16.3.1</h1><p>React发生了重大的变化。并且更新了新的生命周期我们来了解一下。</p>\n<p>献上一个图！</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/react%E6%96%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"\"></p>\n<blockquote>\n<p>地址：<a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"noopener\">React新生命周期图</a></p>\n</blockquote>","more":"<h1 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h1><h2 id=\"Mounting-挂载\"><a href=\"#Mounting-挂载\" class=\"headerlink\" title=\"Mounting/挂载\"></a>Mounting/挂载</h2><ul>\n<li>constructor()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>UNSAFE_componentWillMount()</li>\n<li>render()</li>\n<li>componentDidMount()</li>\n</ul>\n<h2 id=\"Updating-更新\"><a href=\"#Updating-更新\" class=\"headerlink\" title=\"Updating/更新\"></a>Updating/更新</h2><ul>\n<li>UNSAFE_componentWillReceiveProps()</li>\n<li>static getDerivedStateFromProps()</li>\n<li>shouldComponentUpdate(prevProps, prevState)</li>\n<li>UNSAFE_componentWillUpdate()</li>\n<li>render()</li>\n<li>getSnapshotBeforeUpdate()</li>\n<li>componentDidUpdate(prevProps, prevState, snapshot)</li>\n</ul>\n<h2 id=\"Unmounting-卸载\"><a href=\"#Unmounting-卸载\" class=\"headerlink\" title=\"Unmounting/卸载\"></a>Unmounting/卸载</h2><ul>\n<li>componentWillUnmount()</li>\n</ul>\n<h1 id=\"Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate\"><a href=\"#Demo-getDerivedStateFromProps-amp-amp-componentDidUpdate\" class=\"headerlink\" title=\"Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:\"></a>Demo-getDerivedStateFromProps&amp;&amp;componentDidUpdate:</h1><p>链接： <a href=\"https://codesandbox.io/s/2xv69l269j\" target=\"_blank\" rel=\"noopener\">小demo，了解一下</a></p>\n<p>componentDidUpdate是个做网络请求的好地方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;div style=&#123;styles&#125;&gt;</span><br><span class=\"line\">    &lt;Hello name=<span class=\"string\">\"CodeSandbox\"</span> /&gt;</span><br><span class=\"line\">    &lt;h2&gt;Start editing to see some magic happen &#123;<span class=\"string\">\"\\u2728\"</span>&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;B /</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\">class B extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  state = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    myParentValue: \"\"</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  componentDidMount() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    setTimeout(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">      this.setState(&#123; myParentValue: \"XuZiHao\" &#125;);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;, 1000);</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">    return &lt;C foo=&#123;this.state.myParentValue&#125; /</span>&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    foo: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.foo === <span class=\"string\">\"XuZiHao\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        foo: <span class=\"string\">\"bar\"</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.foo === <span class=\"string\">\"bar\"</span>) &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"Hello!!!!\"</span> &#125;);</span><br><span class=\"line\">      &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Value of `foo` is &#123;this.state.foo&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span>, document.getElementById(\"root\"));</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo-shouldComponentUpdate-prevProps-prevState\"><a href=\"#Demo-shouldComponentUpdate-prevProps-prevState\" class=\"headerlink\" title=\"Demo-shouldComponentUpdate(prevProps, prevState)\"></a>Demo-shouldComponentUpdate(prevProps, prevState)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">      <span class=\"built_in\">Number</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//这里调用了setState但是并没有改变setState中的值</span></span><br><span class=\"line\">  handleClick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> preNumber = <span class=\"keyword\">this</span>.state.Number</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Number</span>:<span class=\"keyword\">this</span>.state.Number</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//在render函数调用前判断：如果前后state中Number不变，通过return false阻止render调用</span></span><br><span class=\"line\">  shouldComponentUpdate(nextProps,nextState)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(nextState.Number == <span class=\"keyword\">this</span>.state.Number)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render()&#123;</span><br><span class=\"line\">    <span class=\"comment\">//当render函数被调用时，打印当前的Number</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.Number)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span> = <span class=\"string\">&#123;this.handleClick&#125;</span> <span class=\"attr\">style</span> =<span class=\"string\">&#123;&#123;margin:30&#125;&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">             &#123;this.state.Number&#125;</span></span><br><span class=\"line\"><span class=\"xml\">           <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Demo-getSnapshotBeforeUpdate\"><a href=\"#Demo-getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"Demo-getSnapshotBeforeUpdate()\"></a>Demo-getSnapshotBeforeUpdate()</h1><p>官方例子：</p>\n<blockquote>\n<p><a href=\"https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollingList</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  listRef = React.createRef();</span><br><span class=\"line\"></span><br><span class=\"line\">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否将新项目添加到列表中？</span></span><br><span class=\"line\">    <span class=\"comment\">// 捕获列表的当前高度，以便稍后调整滚动。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.list.length &lt; <span class=\"keyword\">this</span>.props.list.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.listRef.current.scrollHeight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果我们有快照值，我们刚刚添加了新items</span></span><br><span class=\"line\">    <span class=\"comment\">// 调整滚动条，以便这些新items不会将旧的推出视图。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (snapshot !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.listRef.current.scrollTop +=</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.listRef.current.scrollHeight - snapshot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div ref=&#123;<span class=\"keyword\">this</span>.listRef&#125;&gt;&#123;<span class=\"comment\">/* ...contents... */</span>&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"React-Saga笔记","date":"2018-03-31T14:55:00.000Z","comments":1,"layout":"post","_content":"## 监听\n\n### takeEvery:\n\n```Javascript\nfunction* watchFetchData() {\n  yield* takeEvery('FETCH_REQUESTED', fetchData)\n}\n```\n\n允许多个`fetchData`同时进行，即使上一个还没执行完成。\n<!--more-->\n\n### takeLatest：\n\n```javascript\nfunction* watchFetchData() {\n  yield* takeLatest('FETCH_REQUESTED', fetchData)\n}\n```\n\n始终执行最新的那个请求的响应。\n\n\n\n总结一下就是：\n\n我们疯狂点击一个按钮，它触发也疯狂触发了多次`fetchData`。\n\n如果我们是`takeEvery`那将你点击几次他执行几次`fetchData`。\n\n如果我们是`takeLatest`那将只执行你最后点击的那一次`fetchData`。\n\n\n\n##Effect\n\n从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 *Effect*。\n\n可以使用 `redux-saga/effects` 包里**提供的函数**来创建 Effect。\n\n### call：\n\n`call(fn, ...args)` 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息\n\n简单来说，call就是redux里的Action Creator。 \n\n\n\n###put：\n\n这个函数用于创建 dispatch Effect。\n\n```javascript\n//before\nfunction* fetchProducts(dispatch)\n  const products = yield call(Api.fetch, '/products')\n  dispatch({ type: 'PRODUCTS_RECEIVED', products })\n}\n\n//after\nimport { call, put } from 'redux-saga/effects';\n\nfunction* fetchProducts() {\n  const products = yield call(Api.fetch, '/products')\n  // 创建并 yield 一个 dispatch Effect\n  yield put({ type: 'PRODUCTS_RECEIVED', products })\n}\n```\n\n### take：\n\n它将会暂停 Generator 直到一个匹配的 action 被发起。\n\n```javascript\nfunction* loginFlow() {\n  while(true) {\n    yield take('LOGIN')\n    // ... perform the login logic\n    yield take('LOGOUT')\n    // ... perform the logout logic\n  }\n}\n```\n\n也就是说我们可以用`take`去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。\n\n","source":"_posts/ReduxSaga.md","raw":"---\ntitle: React-Saga笔记\ndate: 2018-03-31 22:55\ncomments: true\nlayout: post\ntags: [React]\ncategories: React\n---\n## 监听\n\n### takeEvery:\n\n```Javascript\nfunction* watchFetchData() {\n  yield* takeEvery('FETCH_REQUESTED', fetchData)\n}\n```\n\n允许多个`fetchData`同时进行，即使上一个还没执行完成。\n<!--more-->\n\n### takeLatest：\n\n```javascript\nfunction* watchFetchData() {\n  yield* takeLatest('FETCH_REQUESTED', fetchData)\n}\n```\n\n始终执行最新的那个请求的响应。\n\n\n\n总结一下就是：\n\n我们疯狂点击一个按钮，它触发也疯狂触发了多次`fetchData`。\n\n如果我们是`takeEvery`那将你点击几次他执行几次`fetchData`。\n\n如果我们是`takeLatest`那将只执行你最后点击的那一次`fetchData`。\n\n\n\n##Effect\n\n从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 *Effect*。\n\n可以使用 `redux-saga/effects` 包里**提供的函数**来创建 Effect。\n\n### call：\n\n`call(fn, ...args)` 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息\n\n简单来说，call就是redux里的Action Creator。 \n\n\n\n###put：\n\n这个函数用于创建 dispatch Effect。\n\n```javascript\n//before\nfunction* fetchProducts(dispatch)\n  const products = yield call(Api.fetch, '/products')\n  dispatch({ type: 'PRODUCTS_RECEIVED', products })\n}\n\n//after\nimport { call, put } from 'redux-saga/effects';\n\nfunction* fetchProducts() {\n  const products = yield call(Api.fetch, '/products')\n  // 创建并 yield 一个 dispatch Effect\n  yield put({ type: 'PRODUCTS_RECEIVED', products })\n}\n```\n\n### take：\n\n它将会暂停 Generator 直到一个匹配的 action 被发起。\n\n```javascript\nfunction* loginFlow() {\n  while(true) {\n    yield take('LOGIN')\n    // ... perform the login logic\n    yield take('LOGOUT')\n    // ... perform the logout logic\n  }\n}\n```\n\n也就是说我们可以用`take`去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。\n\n","slug":"ReduxSaga","published":1,"updated":"2018-04-01T06:20:41.512Z","photos":[],"link":"","_id":"cjollnbsk004wunfy8zl5jwu3","content":"<h2 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h2><h3 id=\"takeEvery\"><a href=\"#takeEvery\" class=\"headerlink\" title=\"takeEvery:\"></a>takeEvery:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* takeEvery(<span class=\"string\">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>允许多个<code>fetchData</code>同时进行，即使上一个还没执行完成。<br><a id=\"more\"></a></p>\n<h3 id=\"takeLatest：\"><a href=\"#takeLatest：\" class=\"headerlink\" title=\"takeLatest：\"></a>takeLatest：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* takeLatest(<span class=\"string\">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>始终执行最新的那个请求的响应。</p>\n<p>总结一下就是：</p>\n<p>我们疯狂点击一个按钮，它触发也疯狂触发了多次<code>fetchData</code>。</p>\n<p>如果我们是<code>takeEvery</code>那将你点击几次他执行几次<code>fetchData</code>。</p>\n<p>如果我们是<code>takeLatest</code>那将只执行你最后点击的那一次<code>fetchData</code>。</p>\n<p>##Effect</p>\n<p>从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 <em>Effect</em>。</p>\n<p>可以使用 <code>redux-saga/effects</code> 包里<strong>提供的函数</strong>来创建 Effect。</p>\n<h3 id=\"call：\"><a href=\"#call：\" class=\"headerlink\" title=\"call：\"></a>call：</h3><p><code>call(fn, ...args)</code> 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息</p>\n<p>简单来说，call就是redux里的Action Creator。 </p>\n<p>###put：</p>\n<p>这个函数用于创建 dispatch Effect。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchProducts</span>(<span class=\"params\">dispatch</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">const</span> <span class=\"title\">products</span> = <span class=\"title\">yield</span> <span class=\"title\">call</span>(<span class=\"params\">Api.fetch, <span class=\"string\">'/products'</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">dispatch</span>(<span class=\"params\">&#123; type: <span class=\"string\">'PRODUCTS_RECEIVED'</span>, products &#125;</span>)</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">after</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">import</span> </span>&#123; call, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchProducts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> products = <span class=\"keyword\">yield</span> call(Api.fetch, <span class=\"string\">'/products'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 创建并 yield 一个 dispatch Effect</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'PRODUCTS_RECEIVED'</span>, products &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"take：\"><a href=\"#take：\" class=\"headerlink\" title=\"take：\"></a>take：</h3><p>它将会暂停 Generator 直到一个匹配的 action 被发起。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loginFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> take(<span class=\"string\">'LOGIN'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... perform the login logic</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> take(<span class=\"string\">'LOGOUT'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... perform the logout logic</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说我们可以用<code>take</code>去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h2><h3 id=\"takeEvery\"><a href=\"#takeEvery\" class=\"headerlink\" title=\"takeEvery:\"></a>takeEvery:</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* takeEvery(<span class=\"string\">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>允许多个<code>fetchData</code>同时进行，即使上一个还没执行完成。<br>","more":"</p>\n<h3 id=\"takeLatest：\"><a href=\"#takeLatest：\" class=\"headerlink\" title=\"takeLatest：\"></a>takeLatest：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchFetchData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* takeLatest(<span class=\"string\">'FETCH_REQUESTED'</span>, fetchData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>始终执行最新的那个请求的响应。</p>\n<p>总结一下就是：</p>\n<p>我们疯狂点击一个按钮，它触发也疯狂触发了多次<code>fetchData</code>。</p>\n<p>如果我们是<code>takeEvery</code>那将你点击几次他执行几次<code>fetchData</code>。</p>\n<p>如果我们是<code>takeLatest</code>那将只执行你最后点击的那一次<code>fetchData</code>。</p>\n<p>##Effect</p>\n<p>从 Generator 里 yield 纯 JavaScript 对象以表达 Saga 逻辑。 我们称呼那些对象为 <em>Effect</em>。</p>\n<p>可以使用 <code>redux-saga/effects</code> 包里<strong>提供的函数</strong>来创建 Effect。</p>\n<h3 id=\"call：\"><a href=\"#call：\" class=\"headerlink\" title=\"call：\"></a>call：</h3><p><code>call(fn, ...args)</code> 这个函数。现在我们不立即执行异步调用，相反，call 创建了一条描述结果的信息</p>\n<p>简单来说，call就是redux里的Action Creator。 </p>\n<p>###put：</p>\n<p>这个函数用于创建 dispatch Effect。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchProducts</span>(<span class=\"params\">dispatch</span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">const</span> <span class=\"title\">products</span> = <span class=\"title\">yield</span> <span class=\"title\">call</span>(<span class=\"params\">Api.fetch, <span class=\"string\">'/products'</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">dispatch</span>(<span class=\"params\">&#123; type: <span class=\"string\">'PRODUCTS_RECEIVED'</span>, products &#125;</span>)</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">//<span class=\"title\">after</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">import</span> </span>&#123; call, put &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux-saga/effects'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fetchProducts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> products = <span class=\"keyword\">yield</span> call(Api.fetch, <span class=\"string\">'/products'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 创建并 yield 一个 dispatch Effect</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'PRODUCTS_RECEIVED'</span>, products &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"take：\"><a href=\"#take：\" class=\"headerlink\" title=\"take：\"></a>take：</h3><p>它将会暂停 Generator 直到一个匹配的 action 被发起。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loginFlow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> take(<span class=\"string\">'LOGIN'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... perform the login logic</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> take(<span class=\"string\">'LOGOUT'</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ... perform the logout logic</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说我们可以用<code>take</code>去监听还未发生的事情。比如我们Login之后必定跟着一个Logout，或者说我们Logout后面必定跟着一个Login。</p>"},{"title":"RegExp正则表达式","date":"2018-04-06T13:44:57.528Z","updated":"2018-04-01T12:21:00.000Z","comments":1,"layout":"post","_content":"\n## 仨标志\n\n* g\n  * 全局查\n* i\n  * 忽略大小写\n* m\n  * 多行查\n\n```javascript\nvar a = /a/g;\nvar b = /at/i;\nvar c = /.at/gi;\n```\n<!--more-->\n\n","source":"_posts/RegExp.md","raw":"---\ntitle: RegExp正则表达式\ndate: 2018-04-06 21：38\nupdated: 2018-04-01 20:21\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n## 仨标志\n\n* g\n  * 全局查\n* i\n  * 忽略大小写\n* m\n  * 多行查\n\n```javascript\nvar a = /a/g;\nvar b = /at/i;\nvar c = /.at/gi;\n```\n<!--more-->\n\n","slug":"RegExp","published":1,"photos":[],"link":"","_id":"cjollnbso004yunfya9lz7qfd","content":"<h2 id=\"仨标志\"><a href=\"#仨标志\" class=\"headerlink\" title=\"仨标志\"></a>仨标志</h2><ul>\n<li>g<ul>\n<li>全局查</li>\n</ul>\n</li>\n<li>i<ul>\n<li>忽略大小写</li>\n</ul>\n</li>\n<li>m<ul>\n<li>多行查</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/a/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"regexp\">/at/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"regexp\">/.at/gi</span>;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"仨标志\"><a href=\"#仨标志\" class=\"headerlink\" title=\"仨标志\"></a>仨标志</h2><ul>\n<li>g<ul>\n<li>全局查</li>\n</ul>\n</li>\n<li>i<ul>\n<li>忽略大小写</li>\n</ul>\n</li>\n<li>m<ul>\n<li>多行查</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"regexp\">/a/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"regexp\">/at/i</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"regexp\">/.at/gi</span>;</span><br></pre></td></tr></table></figure>","more":""},{"title":"React生命周期","date":"2017-09-26T09:20:00.000Z","comments":1,"layout":"post","_content":"\n# React生命周期\n\n生命周期可能经历如下三个经历：\n\n> 装载过程(Mount): 把组件第一次在DOM树中渲染的过程；\n>\n> 更新过程(Update): 组件被重新渲染的过程;\n>\n> 卸载过程(Unmount): 组件从DOM中删除的过程;\n\n<!--more-->\n\n接下来，一个一个解释：\n\n## 装载过程\n\n1. constructor\n2. getInitialState\n3. getDefaultProps\n4. componentWillMount\n5. render\n6. componentDidMount\n\n\n\n\n### 1##\n\n- 一个React组件需要constructor，往往是为了达到下面的目的\n  - 初始化state，因为组件生命周期中任何函数都可能要访问state\n  - 绑定成员函数的this环境\n    - 举个例子：\n    - this.onClickIncrementButton = this.onClickIncrementButton.bind(this);\n    - 这条语句的作用，就是通过**bind方法**让当前实例中onClickIncrementButton函数被调用时，this始终是指向当前组件实例。\n\n### 2##\n\n- `getInitialState`和`getDefaultProps`是在React.createClass方法创造的组件类才会用到。\n\n  - ```javascript\n    const Sample = React.createClass ({\n        getInitialState: function(){\n            return {foo: 'bar'};\n        },\n      \tgetDefaultProps: function(){\n            return {sampleProp: 0};\n        }\n    });\t\n    ```\n\n- 在ES6的话\n\n  - ```javascript\n    class Sample extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n         foo: 'bar'\n        };\n      }\n    Sample.defaultProps = {\n      sampleProp: 0\n    };\n    ```\n\n### 3##\n\n- `render`函数是一个纯函数。完全根据this.state 和  this.props来决定返回的结果，而且不要产生任何副作用。\n- 在render函数中去**调用this.setState毫无疑问是错误**的。因为一个纯函数不应该**引起状态的改变**。\n\n### 4##\n\n- 在装载过程中，`componentWillMount`会在调用`render`函数之前调用。\n  - `componentDidMount`会在调用`render`函数之后调用。\n- 这两个函数是`render`函数的前哨和后卫。\n- 但是一般我们都不用定义`componentWillMount`,因为这个函数发生在\"将要装载\"的时候，这个时候没有任何渲染出来的结果。即使我们去调用this.setState修改状态也不会引发重新绘制。\n  - 也就是说所有可以在`componentWillMount`中做的事情，我们都可以提前到`constructor`中去做。\n- 我们来说说`componentDidMount`这个函数，它仅在浏览器端执行。\n\n\n## 更新过程\n\n1. componentWillReceiveProps\n2. shouldComponentUpdate\n3. componentWillUpdate\n4. render\n5. componentDidUpdate\n\n\n\n### 1#\n\n- `componentWillReceiveProps`\n  - 只要是父组件的`render`函数被调用，在`render`函数里面被渲染的子组件就会经历更新过程。不管父组件传给子组件的props有没有改变，都会触发子组件的`componentWillReceiveProps`函数。\n  - 还有，通过`this.setState`方法触发的更新过程不会调用这个函数。\n    - 因为这个函数适合根据新的`props`值来计算出是不是要更新内部状态`state`。更新组件内部状态的方法就是`this.setState`。\n\n### 2#\n\n- `shouldComponentUpdate(nextProps, nextState)`\n  - 这个函数重要因为，它决定了一个组件什么时候不需要渲染。\n  - 这个函数返回一个布尔值，告诉React库这个组件在这次更新过程中是否要继续。\n  - 在更新过程中，React库首先会调用`shouldComponentUpdate`函数\n    - 如果这个函数返回一个`true`，那就会继续更新过程，接下来调用render函数。\n    - 反之如果得到一个`false`，那就立刻停止更新过程，也就不会引发后续的渲染了。\n  - 说这个函数重要，是因为我们使用恰当的话，能够大大挺高`React`组件的性能。\n\n## 卸载过程\n\n1. componentWillUnmount\n\n\n\n### 1#\n\n- 当React组件要从DOM树上删除掉之前，对应的`componentWillUnmount`函数会被调用。\n\n","source":"_posts/React生命周期.md","raw":"---\ntitle: React生命周期\ndate: 2017-09-26 17:20\ncomments: true\nlayout: post\ntags: [JavaScript,React]\ncategories: React\n---\n\n# React生命周期\n\n生命周期可能经历如下三个经历：\n\n> 装载过程(Mount): 把组件第一次在DOM树中渲染的过程；\n>\n> 更新过程(Update): 组件被重新渲染的过程;\n>\n> 卸载过程(Unmount): 组件从DOM中删除的过程;\n\n<!--more-->\n\n接下来，一个一个解释：\n\n## 装载过程\n\n1. constructor\n2. getInitialState\n3. getDefaultProps\n4. componentWillMount\n5. render\n6. componentDidMount\n\n\n\n\n### 1##\n\n- 一个React组件需要constructor，往往是为了达到下面的目的\n  - 初始化state，因为组件生命周期中任何函数都可能要访问state\n  - 绑定成员函数的this环境\n    - 举个例子：\n    - this.onClickIncrementButton = this.onClickIncrementButton.bind(this);\n    - 这条语句的作用，就是通过**bind方法**让当前实例中onClickIncrementButton函数被调用时，this始终是指向当前组件实例。\n\n### 2##\n\n- `getInitialState`和`getDefaultProps`是在React.createClass方法创造的组件类才会用到。\n\n  - ```javascript\n    const Sample = React.createClass ({\n        getInitialState: function(){\n            return {foo: 'bar'};\n        },\n      \tgetDefaultProps: function(){\n            return {sampleProp: 0};\n        }\n    });\t\n    ```\n\n- 在ES6的话\n\n  - ```javascript\n    class Sample extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n         foo: 'bar'\n        };\n      }\n    Sample.defaultProps = {\n      sampleProp: 0\n    };\n    ```\n\n### 3##\n\n- `render`函数是一个纯函数。完全根据this.state 和  this.props来决定返回的结果，而且不要产生任何副作用。\n- 在render函数中去**调用this.setState毫无疑问是错误**的。因为一个纯函数不应该**引起状态的改变**。\n\n### 4##\n\n- 在装载过程中，`componentWillMount`会在调用`render`函数之前调用。\n  - `componentDidMount`会在调用`render`函数之后调用。\n- 这两个函数是`render`函数的前哨和后卫。\n- 但是一般我们都不用定义`componentWillMount`,因为这个函数发生在\"将要装载\"的时候，这个时候没有任何渲染出来的结果。即使我们去调用this.setState修改状态也不会引发重新绘制。\n  - 也就是说所有可以在`componentWillMount`中做的事情，我们都可以提前到`constructor`中去做。\n- 我们来说说`componentDidMount`这个函数，它仅在浏览器端执行。\n\n\n## 更新过程\n\n1. componentWillReceiveProps\n2. shouldComponentUpdate\n3. componentWillUpdate\n4. render\n5. componentDidUpdate\n\n\n\n### 1#\n\n- `componentWillReceiveProps`\n  - 只要是父组件的`render`函数被调用，在`render`函数里面被渲染的子组件就会经历更新过程。不管父组件传给子组件的props有没有改变，都会触发子组件的`componentWillReceiveProps`函数。\n  - 还有，通过`this.setState`方法触发的更新过程不会调用这个函数。\n    - 因为这个函数适合根据新的`props`值来计算出是不是要更新内部状态`state`。更新组件内部状态的方法就是`this.setState`。\n\n### 2#\n\n- `shouldComponentUpdate(nextProps, nextState)`\n  - 这个函数重要因为，它决定了一个组件什么时候不需要渲染。\n  - 这个函数返回一个布尔值，告诉React库这个组件在这次更新过程中是否要继续。\n  - 在更新过程中，React库首先会调用`shouldComponentUpdate`函数\n    - 如果这个函数返回一个`true`，那就会继续更新过程，接下来调用render函数。\n    - 反之如果得到一个`false`，那就立刻停止更新过程，也就不会引发后续的渲染了。\n  - 说这个函数重要，是因为我们使用恰当的话，能够大大挺高`React`组件的性能。\n\n## 卸载过程\n\n1. componentWillUnmount\n\n\n\n### 1#\n\n- 当React组件要从DOM树上删除掉之前，对应的`componentWillUnmount`函数会被调用。\n\n","slug":"React生命周期","published":1,"updated":"2017-09-26T09:20:37.000Z","photos":[],"link":"","_id":"cjollnbsq0051unfy2tu4a6db","content":"<h1 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h1><p>生命周期可能经历如下三个经历：</p>\n<blockquote>\n<p>装载过程(Mount): 把组件第一次在DOM树中渲染的过程；</p>\n<p>更新过程(Update): 组件被重新渲染的过程;</p>\n<p>卸载过程(Unmount): 组件从DOM中删除的过程;</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>接下来，一个一个解释：</p>\n<h2 id=\"装载过程\"><a href=\"#装载过程\" class=\"headerlink\" title=\"装载过程\"></a>装载过程</h2><ol>\n<li>constructor</li>\n<li>getInitialState</li>\n<li>getDefaultProps</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ol>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li>一个React组件需要constructor，往往是为了达到下面的目的<ul>\n<li>初始化state，因为组件生命周期中任何函数都可能要访问state</li>\n<li>绑定成员函数的this环境<ul>\n<li>举个例子：</li>\n<li>this.onClickIncrementButton = this.onClickIncrementButton.bind(this);</li>\n<li>这条语句的作用，就是通过<strong>bind方法</strong>让当前实例中onClickIncrementButton函数被调用时，this始终是指向当前组件实例。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><ul>\n<li><p><code>getInitialState</code>和<code>getDefaultProps</code>是在React.createClass方法创造的组件类才会用到。</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sample = React.createClass (&#123;</span><br><span class=\"line\">    getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \tgetDefaultProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">sampleProp</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在ES6的话</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">     foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">Sample.defaultProps = &#123;</span><br><span class=\"line\">  sampleProp: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><ul>\n<li><code>render</code>函数是一个纯函数。完全根据this.state 和  this.props来决定返回的结果，而且不要产生任何副作用。</li>\n<li>在render函数中去<strong>调用this.setState毫无疑问是错误</strong>的。因为一个纯函数不应该<strong>引起状态的改变</strong>。</li>\n</ul>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><ul>\n<li>在装载过程中，<code>componentWillMount</code>会在调用<code>render</code>函数之前调用。<ul>\n<li><code>componentDidMount</code>会在调用<code>render</code>函数之后调用。</li>\n</ul>\n</li>\n<li>这两个函数是<code>render</code>函数的前哨和后卫。</li>\n<li>但是一般我们都不用定义<code>componentWillMount</code>,因为这个函数发生在”将要装载”的时候，这个时候没有任何渲染出来的结果。即使我们去调用this.setState修改状态也不会引发重新绘制。<ul>\n<li>也就是说所有可以在<code>componentWillMount</code>中做的事情，我们都可以提前到<code>constructor</code>中去做。</li>\n</ul>\n</li>\n<li>我们来说说<code>componentDidMount</code>这个函数，它仅在浏览器端执行。</li>\n</ul>\n<h2 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h2><ol>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ol>\n<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li><code>componentWillReceiveProps</code><ul>\n<li>只要是父组件的<code>render</code>函数被调用，在<code>render</code>函数里面被渲染的子组件就会经历更新过程。不管父组件传给子组件的props有没有改变，都会触发子组件的<code>componentWillReceiveProps</code>函数。</li>\n<li>还有，通过<code>this.setState</code>方法触发的更新过程不会调用这个函数。<ul>\n<li>因为这个函数适合根据新的<code>props</code>值来计算出是不是要更新内部状态<code>state</code>。更新组件内部状态的方法就是<code>this.setState</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2\"></a>2</h3><ul>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code><ul>\n<li>这个函数重要因为，它决定了一个组件什么时候不需要渲染。</li>\n<li>这个函数返回一个布尔值，告诉React库这个组件在这次更新过程中是否要继续。</li>\n<li>在更新过程中，React库首先会调用<code>shouldComponentUpdate</code>函数<ul>\n<li>如果这个函数返回一个<code>true</code>，那就会继续更新过程，接下来调用render函数。</li>\n<li>反之如果得到一个<code>false</code>，那就立刻停止更新过程，也就不会引发后续的渲染了。</li>\n</ul>\n</li>\n<li>说这个函数重要，是因为我们使用恰当的话，能够大大挺高<code>React</code>组件的性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"卸载过程\"><a href=\"#卸载过程\" class=\"headerlink\" title=\"卸载过程\"></a>卸载过程</h2><ol>\n<li>componentWillUnmount</li>\n</ol>\n<h3 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li>当React组件要从DOM树上删除掉之前，对应的<code>componentWillUnmount</code>函数会被调用。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"React生命周期\"><a href=\"#React生命周期\" class=\"headerlink\" title=\"React生命周期\"></a>React生命周期</h1><p>生命周期可能经历如下三个经历：</p>\n<blockquote>\n<p>装载过程(Mount): 把组件第一次在DOM树中渲染的过程；</p>\n<p>更新过程(Update): 组件被重新渲染的过程;</p>\n<p>卸载过程(Unmount): 组件从DOM中删除的过程;</p>\n</blockquote>","more":"<p>接下来，一个一个解释：</p>\n<h2 id=\"装载过程\"><a href=\"#装载过程\" class=\"headerlink\" title=\"装载过程\"></a>装载过程</h2><ol>\n<li>constructor</li>\n<li>getInitialState</li>\n<li>getDefaultProps</li>\n<li>componentWillMount</li>\n<li>render</li>\n<li>componentDidMount</li>\n</ol>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li>一个React组件需要constructor，往往是为了达到下面的目的<ul>\n<li>初始化state，因为组件生命周期中任何函数都可能要访问state</li>\n<li>绑定成员函数的this环境<ul>\n<li>举个例子：</li>\n<li>this.onClickIncrementButton = this.onClickIncrementButton.bind(this);</li>\n<li>这条语句的作用，就是通过<strong>bind方法</strong>让当前实例中onClickIncrementButton函数被调用时，this始终是指向当前组件实例。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h3><ul>\n<li><p><code>getInitialState</code>和<code>getDefaultProps</code>是在React.createClass方法创造的组件类才会用到。</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sample = React.createClass (&#123;</span><br><span class=\"line\">    getInitialState: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  \tgetDefaultProps: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">sampleProp</span>: <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>在ES6的话</p>\n<ul>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">     foo: <span class=\"string\">'bar'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">Sample.defaultProps = &#123;</span><br><span class=\"line\">  sampleProp: <span class=\"number\">0</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h3><ul>\n<li><code>render</code>函数是一个纯函数。完全根据this.state 和  this.props来决定返回的结果，而且不要产生任何副作用。</li>\n<li>在render函数中去<strong>调用this.setState毫无疑问是错误</strong>的。因为一个纯函数不应该<strong>引起状态的改变</strong>。</li>\n</ul>\n<h3 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h3><ul>\n<li>在装载过程中，<code>componentWillMount</code>会在调用<code>render</code>函数之前调用。<ul>\n<li><code>componentDidMount</code>会在调用<code>render</code>函数之后调用。</li>\n</ul>\n</li>\n<li>这两个函数是<code>render</code>函数的前哨和后卫。</li>\n<li>但是一般我们都不用定义<code>componentWillMount</code>,因为这个函数发生在”将要装载”的时候，这个时候没有任何渲染出来的结果。即使我们去调用this.setState修改状态也不会引发重新绘制。<ul>\n<li>也就是说所有可以在<code>componentWillMount</code>中做的事情，我们都可以提前到<code>constructor</code>中去做。</li>\n</ul>\n</li>\n<li>我们来说说<code>componentDidMount</code>这个函数，它仅在浏览器端执行。</li>\n</ul>\n<h2 id=\"更新过程\"><a href=\"#更新过程\" class=\"headerlink\" title=\"更新过程\"></a>更新过程</h2><ol>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>render</li>\n<li>componentDidUpdate</li>\n</ol>\n<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li><code>componentWillReceiveProps</code><ul>\n<li>只要是父组件的<code>render</code>函数被调用，在<code>render</code>函数里面被渲染的子组件就会经历更新过程。不管父组件传给子组件的props有没有改变，都会触发子组件的<code>componentWillReceiveProps</code>函数。</li>\n<li>还有，通过<code>this.setState</code>方法触发的更新过程不会调用这个函数。<ul>\n<li>因为这个函数适合根据新的<code>props</code>值来计算出是不是要更新内部状态<code>state</code>。更新组件内部状态的方法就是<code>this.setState</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-1\"><a href=\"#2-1\" class=\"headerlink\" title=\"2\"></a>2</h3><ul>\n<li><code>shouldComponentUpdate(nextProps, nextState)</code><ul>\n<li>这个函数重要因为，它决定了一个组件什么时候不需要渲染。</li>\n<li>这个函数返回一个布尔值，告诉React库这个组件在这次更新过程中是否要继续。</li>\n<li>在更新过程中，React库首先会调用<code>shouldComponentUpdate</code>函数<ul>\n<li>如果这个函数返回一个<code>true</code>，那就会继续更新过程，接下来调用render函数。</li>\n<li>反之如果得到一个<code>false</code>，那就立刻停止更新过程，也就不会引发后续的渲染了。</li>\n</ul>\n</li>\n<li>说这个函数重要，是因为我们使用恰当的话，能够大大挺高<code>React</code>组件的性能。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"卸载过程\"><a href=\"#卸载过程\" class=\"headerlink\" title=\"卸载过程\"></a>卸载过程</h2><ol>\n<li>componentWillUnmount</li>\n</ol>\n<h3 id=\"1-2\"><a href=\"#1-2\" class=\"headerlink\" title=\"1\"></a>1</h3><ul>\n<li>当React组件要从DOM树上删除掉之前，对应的<code>componentWillUnmount</code>函数会被调用。</li>\n</ul>"},{"title":"Sass小笔记","date":"2018-06-21T13:26:00.000Z","comments":1,"layout":"post","_content":"\n## 父选择器的标识符&\n```scss\narticle a {\n  color: blue;\n  &:hover { color: red }\n}\n-> \narticle a { color: blue }\narticle a:hover { color: red }\n```\n\n## 嵌套属性\n```scss\nnav {\n  border: {\n  style: solid;\n  width: 1px;\n  color: #ccc;\n  }\n}\n->\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n```\n<!--more-->\n## @mixin\n```scss\n@mixin rounded-corners {\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\nnotice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  @include rounded-corners;\n}\n->\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n```\n## @mixin传参\n```scss\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover { color: $hover; }\n  &:visited { color: $visited; }\n}\na {\n  @include link-colors(blue, red, green);\n}\n\n//Sass最终生成的是：\na { color: blue; }\na:hover { color: red; }\na:visited { color: green; }\n```\n## 继承\n```scss\n//通过选择器继承继承样式\n.error {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```","source":"_posts/Sass小笔记.md","raw":"---\ntitle: Sass小笔记\ndate: 2018-06-21 21:26\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n## 父选择器的标识符&\n```scss\narticle a {\n  color: blue;\n  &:hover { color: red }\n}\n-> \narticle a { color: blue }\narticle a:hover { color: red }\n```\n\n## 嵌套属性\n```scss\nnav {\n  border: {\n  style: solid;\n  width: 1px;\n  color: #ccc;\n  }\n}\n->\nnav {\n  border-style: solid;\n  border-width: 1px;\n  border-color: #ccc;\n}\n```\n<!--more-->\n## @mixin\n```scss\n@mixin rounded-corners {\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\nnotice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  @include rounded-corners;\n}\n->\n.notice {\n  background-color: green;\n  border: 2px solid #00aa00;\n  -moz-border-radius: 5px;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n}\n```\n## @mixin传参\n```scss\n@mixin link-colors($normal, $hover, $visited) {\n  color: $normal;\n  &:hover { color: $hover; }\n  &:visited { color: $visited; }\n}\na {\n  @include link-colors(blue, red, green);\n}\n\n//Sass最终生成的是：\na { color: blue; }\na:hover { color: red; }\na:visited { color: green; }\n```\n## 继承\n```scss\n//通过选择器继承继承样式\n.error {\n  border: 1px solid red;\n  background-color: #fdd;\n}\n.seriousError {\n  @extend .error;\n  border-width: 3px;\n}\n```","slug":"Sass小笔记","published":1,"updated":"2018-07-12T12:55:07.653Z","photos":[],"link":"","_id":"cjollnbsv0055unfykqc05ygo","content":"<h2 id=\"父选择器的标识符-amp\"><a href=\"#父选择器的标识符-amp\" class=\"headerlink\" title=\"父选择器的标识符&amp;\"></a>父选择器的标识符&amp;</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &amp;:hover &#123; <span class=\"attribute\">color</span>: red &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt; </span><br><span class=\"line\">article a &#123; color: blue &#125;</span><br><span class=\"line\">article a:hover &#123; color: red &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"嵌套属性\"><a href=\"#嵌套属性\" class=\"headerlink\" title=\"嵌套属性\"></a>嵌套属性</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: &#123;</span><br><span class=\"line\">  style: solid;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"@mixin\"></a>@mixin</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> rounded-corners &#123;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">notice &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#00aa00</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> rounded-corners;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#00aa00</span>;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mixin传参\"><a href=\"#mixin传参\" class=\"headerlink\" title=\"@mixin传参\"></a>@mixin传参</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> link-colors(<span class=\"variable\">$normal</span>, <span class=\"variable\">$hover</span>, <span class=\"variable\">$visited</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$normal</span>;</span><br><span class=\"line\">  &amp;:hover &#123; <span class=\"attribute\">color</span>: <span class=\"variable\">$hover</span>; &#125;</span><br><span class=\"line\">  &amp;:visited &#123; <span class=\"attribute\">color</span>: <span class=\"variable\">$visited</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> link-colors(blue, red, green);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Sass最终生成的是：</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">color</span>: blue; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>:hover &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>:visited &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过选择器继承继承样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"父选择器的标识符-amp\"><a href=\"#父选择器的标识符-amp\" class=\"headerlink\" title=\"父选择器的标识符&amp;\"></a>父选择器的标识符&amp;</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">article</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  &amp;:hover &#123; <span class=\"attribute\">color</span>: red &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt; </span><br><span class=\"line\">article a &#123; color: blue &#125;</span><br><span class=\"line\">article a:hover &#123; color: red &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"嵌套属性\"><a href=\"#嵌套属性\" class=\"headerlink\" title=\"嵌套属性\"></a>嵌套属性</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: &#123;</span><br><span class=\"line\">  style: solid;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: solid;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"@mixin\"></a>@mixin</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> rounded-corners &#123;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">notice &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#00aa00</span>;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> rounded-corners;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.notice</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#00aa00</span>;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mixin传参\"><a href=\"#mixin传参\" class=\"headerlink\" title=\"@mixin传参\"></a>@mixin传参</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> link-colors(<span class=\"variable\">$normal</span>, <span class=\"variable\">$hover</span>, <span class=\"variable\">$visited</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$normal</span>;</span><br><span class=\"line\">  &amp;:hover &#123; <span class=\"attribute\">color</span>: <span class=\"variable\">$hover</span>; &#125;</span><br><span class=\"line\">  &amp;:visited &#123; <span class=\"attribute\">color</span>: <span class=\"variable\">$visited</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> link-colors(blue, red, green);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Sass最终生成的是：</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">color</span>: blue; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>:hover &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>:visited &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过选择器继承继承样式</span></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fdd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.seriousError</span> &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">extend</span> .error;</span><br><span class=\"line\">  <span class=\"attribute\">border-width</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Typescript配置采坑之路","date":"2018-04-27T16:03:52.000Z","updated":"2018-05-07T12:17:00.000Z","comments":1,"layout":"post","_content":"\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png)\n\n> 这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8\n\n<!--more-->\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png)\n\n> tsconfig文件加这条：    \"module\": \"commonjs\", \n\n\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png)\n\n> tsconfig文件加这条：    \"lib\": [\"es2015\"]\n\n\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsgraphql.png)\n\n> tsconfig文件加这条：    \"lib\": [\"esnext\"]","source":"_posts/Typescript配置采坑之路.md","raw":"---\ntitle: Typescript配置采坑之路\ndate: 2018-04-28 00:03:52\nupdated: 2018-05-07 20:17\ncomments: true\nlayout: post\ntags: [Typescript]\ncategories: Typescript\n---\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png)\n\n> 这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8\n\n<!--more-->\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png)\n\n> tsconfig文件加这条：    \"module\": \"commonjs\", \n\n\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png)\n\n> tsconfig文件加这条：    \"lib\": [\"es2015\"]\n\n\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsgraphql.png)\n\n> tsconfig文件加这条：    \"lib\": [\"esnext\"]","slug":"Typescript配置采坑之路","published":1,"photos":[],"link":"","_id":"cjollnbsw0057unfy8k7lnyrd","content":"<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png\" alt=\"\"></p>\n<blockquote>\n<p>这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “module”: “commonjs”, </p>\n</blockquote>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “lib”: [“es2015”]</p>\n</blockquote>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsgraphql.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “lib”: [“esnext”]</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tscNodeError.png\" alt=\"\"></p>\n<blockquote>\n<p>这是没有@typesc/node导致的。但是安装最新的10.0.0也不行。我就安装了@types/node@8</p>\n</blockquote>","more":"<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigComm.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “module”: “commonjs”, </p>\n</blockquote>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsconfigLib.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “lib”: [“es2015”]</p>\n</blockquote>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/tsgraphql.png\" alt=\"\"></p>\n<blockquote>\n<p>tsconfig文件加这条：    “lib”: [“esnext”]</p>\n</blockquote>"},{"title":"Webpack-dev-server配合react-router4","date":"2018-06-30T13:28:00.000Z","comments":1,"layout":"post","_content":"# Webpack-dev-server配合react-router4\n在React-router4下，用 `BrowserRouter` 路由到一个组件。比如说\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg)\n我刷新之后就会显示 `Cannot GET /dashboard`！？\n原来devServe需要以下设置：\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg)\n<!--more-->\n对于单页面程序，浏览器的`brower histroy`可以设置成`html5 history api`或者`hash`，而设置为`html5 api`的.\n如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.\n所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。\n并且React-router的`BrowserRouter `就是基于`browerhistroy`。\n## 还没完?\n如果你发现你这样设置了还是报`Cannot GET /dashboard` 那么我们应该这样设置\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg)\n没设置是这样\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg)\n\n如此操作之后我们就会发现\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg)\n妥了，随意刷新吧","source":"_posts/Webpack-dev-server配合react-router4.md","raw":"---\ntitle: Webpack-dev-server配合react-router4\ndate: 2018-06-30 21:28\ncomments: true\nlayout: post\ntags: [Webpack]\ncategories: Webpack\n---\n# Webpack-dev-server配合react-router4\n在React-router4下，用 `BrowserRouter` 路由到一个组件。比如说\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg)\n我刷新之后就会显示 `Cannot GET /dashboard`！？\n原来devServe需要以下设置：\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg)\n<!--more-->\n对于单页面程序，浏览器的`brower histroy`可以设置成`html5 history api`或者`hash`，而设置为`html5 api`的.\n如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.\n所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。\n并且React-router的`BrowserRouter `就是基于`browerhistroy`。\n## 还没完?\n如果你发现你这样设置了还是报`Cannot GET /dashboard` 那么我们应该这样设置\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg)\n没设置是这样\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg)\n\n如此操作之后我们就会发现\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg)\n妥了，随意刷新吧","slug":"Webpack-dev-server配合react-router4","published":1,"updated":"2018-06-30T13:28:43.244Z","photos":[],"link":"","_id":"cjollnbt2005cunfyut4odv4e","content":"<h1 id=\"Webpack-dev-server配合react-router4\"><a href=\"#Webpack-dev-server配合react-router4\" class=\"headerlink\" title=\"Webpack-dev-server配合react-router4\"></a>Webpack-dev-server配合react-router4</h1><p>在React-router4下，用 <code>BrowserRouter</code> 路由到一个组件。比如说</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg\" alt=\"\"><br>我刷新之后就会显示 <code>Cannot GET /dashboard</code>！？<br>原来devServe需要以下设置：<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg\" alt=\"\"><br><a id=\"more\"></a><br>对于单页面程序，浏览器的<code>brower histroy</code>可以设置成<code>html5 history api</code>或者<code>hash</code>，而设置为<code>html5 api</code>的.<br>如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.<br>所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。<br>并且React-router的<code>BrowserRouter</code>就是基于<code>browerhistroy</code>。</p>\n<h2 id=\"还没完\"><a href=\"#还没完\" class=\"headerlink\" title=\"还没完?\"></a>还没完?</h2><p>如果你发现你这样设置了还是报<code>Cannot GET /dashboard</code> 那么我们应该这样设置<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg\" alt=\"\"><br>没设置是这样<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg\" alt=\"\"></p>\n<p>如此操作之后我们就会发现</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg\" alt=\"\"><br>妥了，随意刷新吧</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Webpack-dev-server配合react-router4\"><a href=\"#Webpack-dev-server配合react-router4\" class=\"headerlink\" title=\"Webpack-dev-server配合react-router4\"></a>Webpack-dev-server配合react-router4</h1><p>在React-router4下，用 <code>BrowserRouter</code> 路由到一个组件。比如说</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/exampledashboard.jpg\" alt=\"\"><br>我刷新之后就会显示 <code>Cannot GET /dashboard</code>！？<br>原来devServe需要以下设置：<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/devServer.jpg\" alt=\"\"><br>","more":"<br>对于单页面程序，浏览器的<code>brower histroy</code>可以设置成<code>html5 history api</code>或者<code>hash</code>，而设置为<code>html5 api</code>的.<br>如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台.<br>所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html。<br>并且React-router的<code>BrowserRouter</code>就是基于<code>browerhistroy</code>。</p>\n<h2 id=\"还没完\"><a href=\"#还没完\" class=\"headerlink\" title=\"还没完?\"></a>还没完?</h2><p>如果你发现你这样设置了还是报<code>Cannot GET /dashboard</code> 那么我们应该这样设置<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/webpackPublicPath.jpg\" alt=\"\"><br>没设置是这样<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%97%A0:%E7%9A%84.jpg\" alt=\"\"></p>\n<p>如此操作之后我们就会发现</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%9C%89:%E7%9A%84.jpg\" alt=\"\"><br>妥了，随意刷新吧</p>"},{"title":"Vue.js小记","date":"2017-04-28T07:54:00.000Z","comments":1,"layout":"post","_content":"\n#Vue小记\n\n## **v-bind**\n\n- 缩写： `：`\n- 修饰符\n  - `.prop` - 被用于绑定DOM属性\n  - `.camel`\n- 用法\n\n动态的绑定一个或多个特性，或一个组件`prop`到表达式\n\n```javascript\n<a v-bind:href=\"url\" href=\"#\"></a>\n```\n\n在这里`:href`是参数，通过`v-bind`指令将该元素的`href`属性与表达式的`url`绑定。\n\n<!--more-->\n\n## **v-if**\n\n```javascript\n<p v-if=\"seen\">Now you see me</p>\n```\n\n这个`v-if`指令将判断`seen`的真假值来移出/插入`<p>`元素。\n\n\n\n## **v-on**\n\n- 缩写：`@`\n\n```javascript\n<a v-on:click=\"doSomething\">\n```\n\n这个指令是用来监听DOM事件。\n\n### 事件修饰符\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n2.1.4新增\n<!-- 点击事件将只会触发一次 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n### 按键修饰符\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n记住keyCode各种值很难所以提供了别名\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n- `.enter`\n- `.tab`\n- `.delete`(捕获“删除”和“退格”按键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n**2.1.0新增**\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`(Mac上为(⌘)在windows上为(⊞))\n\n## v-for\n\n我们用 `v-for` 指令根据一组数组的选项列表进行渲染。 `v-for` 指令需要以\n\n `item in items` 形式的特殊语法， `items` 是源数据数组并且 `item` 是数组元素迭代的别名。\n\n```html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n```javascript\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'Foo' },\n      {message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n- Foo\n- Bar\n\n## v-model\n\n你可以用 `v-model` 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 `v-model` 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。\n\n具体看\n\n[官方文档]: https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip\t\"V-model\"\n\n","source":"_posts/Vue.js小记.md","raw":"---\ntitle: Vue.js小记\ndate: 2017-04-28 15:54\ncomments: true\nlayout: post\ntags: [JavaScript,Vue.js]\ncategories: Vue\n---\n\n#Vue小记\n\n## **v-bind**\n\n- 缩写： `：`\n- 修饰符\n  - `.prop` - 被用于绑定DOM属性\n  - `.camel`\n- 用法\n\n动态的绑定一个或多个特性，或一个组件`prop`到表达式\n\n```javascript\n<a v-bind:href=\"url\" href=\"#\"></a>\n```\n\n在这里`:href`是参数，通过`v-bind`指令将该元素的`href`属性与表达式的`url`绑定。\n\n<!--more-->\n\n## **v-if**\n\n```javascript\n<p v-if=\"seen\">Now you see me</p>\n```\n\n这个`v-if`指令将判断`seen`的真假值来移出/插入`<p>`元素。\n\n\n\n## **v-on**\n\n- 缩写：`@`\n\n```javascript\n<a v-on:click=\"doSomething\">\n```\n\n这个指令是用来监听DOM事件。\n\n### 事件修饰符\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n2.1.4新增\n<!-- 点击事件将只会触发一次 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n### 按键修饰符\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n记住keyCode各种值很难所以提供了别名\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n- `.enter`\n- `.tab`\n- `.delete`(捕获“删除”和“退格”按键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n**2.1.0新增**\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`(Mac上为(⌘)在windows上为(⊞))\n\n## v-for\n\n我们用 `v-for` 指令根据一组数组的选项列表进行渲染。 `v-for` 指令需要以\n\n `item in items` 形式的特殊语法， `items` 是源数据数组并且 `item` 是数组元素迭代的别名。\n\n```html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n```javascript\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'Foo' },\n      {message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n- Foo\n- Bar\n\n## v-model\n\n你可以用 `v-model` 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 `v-model` 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。\n\n具体看\n\n[官方文档]: https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip\t\"V-model\"\n\n","slug":"Vue.js小记","published":1,"updated":"2017-05-26T08:37:32.000Z","photos":[],"link":"","_id":"cjollnbt3005funfyi16dstua","content":"<p>#Vue小记</p>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a><strong>v-bind</strong></h2><ul>\n<li>缩写： <code>：</code></li>\n<li>修饰符<ul>\n<li><code>.prop</code> - 被用于绑定DOM属性</li>\n<li><code>.camel</code></li>\n</ul>\n</li>\n<li>用法</li>\n</ul>\n<p>动态的绑定一个或多个特性，或一个组件<code>prop</code>到表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span> href=<span class=\"string\">\"#\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在这里<code>:href</code>是参数，通过<code>v-bind</code>指令将该元素的<code>href</code>属性与表达式的<code>url</code>绑定。</p>\n<a id=\"more\"></a>\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a><strong>v-if</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"seen\"</span>&gt;Now you see me&lt;<span class=\"regexp\">/p&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个<code>v-if</code>指令将判断<code>seen</code>的真假值来移出/插入<code>&lt;p&gt;</code>元素。</p>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a><strong>v-on</strong></h2><ul>\n<li>缩写：<code>@</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click=<span class=\"string\">\"doSomething\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这个指令是用来监听DOM事件。</p>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.1.4新增</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">记住keyCode各种值很难所以提供了别名</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code>(捕获“删除”和“退格”按键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p><strong>2.1.0新增</strong></p>\n<ul>\n<li><code>.ctrl</code></li>\n<li><code>.alt</code></li>\n<li><code>.shift</code></li>\n<li><code>.meta</code>(Mac上为(⌘)在windows上为(⊞))</li>\n</ul>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以</p>\n<p> <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<ul>\n<li>Foo</li>\n<li>Bar</li>\n</ul>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>你可以用 <code>v-model</code> 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p>\n<p>具体看</p>\n","site":{"data":{}},"excerpt":"<p>#Vue小记</p>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a><strong>v-bind</strong></h2><ul>\n<li>缩写： <code>：</code></li>\n<li>修饰符<ul>\n<li><code>.prop</code> - 被用于绑定DOM属性</li>\n<li><code>.camel</code></li>\n</ul>\n</li>\n<li>用法</li>\n</ul>\n<p>动态的绑定一个或多个特性，或一个组件<code>prop</code>到表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span> href=<span class=\"string\">\"#\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>在这里<code>:href</code>是参数，通过<code>v-bind</code>指令将该元素的<code>href</code>属性与表达式的<code>url</code>绑定。</p>","more":"<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a><strong>v-if</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"seen\"</span>&gt;Now you see me&lt;<span class=\"regexp\">/p&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个<code>v-if</code>指令将判断<code>seen</code>的真假值来移出/插入<code>&lt;p&gt;</code>元素。</p>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a><strong>v-on</strong></h2><ul>\n<li>缩写：<code>@</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a v-on:click=<span class=\"string\">\"doSomething\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>这个指令是用来监听DOM事件。</p>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">2.1.4新增</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">记住keyCode各种值很难所以提供了别名</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code>(捕获“删除”和“退格”按键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p><strong>2.1.0新增</strong></p>\n<ul>\n<li><code>.ctrl</code></li>\n<li><code>.alt</code></li>\n<li><code>.shift</code></li>\n<li><code>.meta</code>(Mac上为(⌘)在windows上为(⊞))</li>\n</ul>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以</p>\n<p> <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; item.message &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#example-1'</span>,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    items: [</span><br><span class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</span><br><span class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<ul>\n<li>Foo</li>\n<li>Bar</li>\n</ul>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>你可以用 <code>v-model</code> 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p>\n<p>具体看</p>"},{"title":"Webpack4配置指南！Up！","date":"2018-04-23T08:02:00.000Z","updated":"2018-04-21T11:42:28.000Z","comments":1,"layout":"post","_content":"\n# first\n\n```sh\nmkdir simpleFE && cd simpleFE\nnpm init -y\nnpm install webpack webpack-cli --save-dev\nor\nmkdir simpleFE && cd simpleFE\nyarn init -y\nyarn add webpack webpack-cli -D\n```\n\n不要问为什么装了`webpack` 还要装`webpack-cli`。。因为你不装就报错。。官方提示还让你去装。。\n\n---\n<!--more-->\n## 配置Sass\n\n```sh\nnpm install css-loader node-sass sass-loader style-loader --save-dev\n\nor\n\nyarn add css-loader node-sass sass-loader style-loader -D\n```\n\n 配置文件：\n\n```js\n// 提取css文件成单独的文件\nconst extractSass = new ExtractTextPlugin({\n  filename: \"styles/[name].[hash].css\",\n  disable: process.env.NODE_ENV === \"development\"\n});\n\n\nmodule: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [\n            {\n              loader: \"css-loader\", // 将CSS翻译成CommonJS\n              options: {\n                sourceMap: true // 会导致速度变慢\n              }\n            },\n            {\n              loader: \"sass-loader\", // 将Sass编译成CSS\n              options: {\n                sourceMap: true // 会导致速度变慢\n              }\n            }\n          ],\n          // 在dev环境下配置这条\n          fallback: \"style-loader\"\n        })\n      }\n    ]\n  },\n  plugins: [extractSass]\n```\n\n安装`extract-text-webpack-plugin`这是为了把css呀这些文件单独打包成一个\n\n但是会遇到报错：\n\n![extract-text-webpack-plugin](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png)\n\n然后我们去`package.json`会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。\n\n`yarn add extract-text-webpack-plugin@next -D`\n\n# CommonsChunkPlugin\n\n[`CommonsChunkPlugin`](https://webpack.js.org/plugins/commons-chunk-plugin)已被移除。。被 **SplitChunksPlugin** 和 **runtimeChunk** 替代了。\n\nCommonsChunkPlugin存在很多问题：\n\n* 它可能导致更多的代码被下载\n* 它在异步块上效率低下。\n* 很难用\n* 实施难以理解\n\nSplitChunksPlugin很棒的地方：\n\n* 它对异步块也有效\n* 它在默认情况下用于异步块\n* 它处理vendor并拆分多个verdor块\n* 它更容易使用\n* 它不依赖chunk块\n* 大部分是自动的\n\n\n\n我们只要把原有的`new webpack.optimize.CommonsChunkPlugin(options)`删了。加上\n\n```js\nsplitChunks: {\n    chunks: \"async\",\n    minSize: 30000,\n    minChunks: 1,\n    maxAsyncRequests: 5,\n    maxInitialRequests: 3,\n    automaticNameDelimiter: '~',\n    name: true,\n    cacheGroups: {\n        vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            priority: -10\n        },\n    default: {\n            minChunks: 2,\n            priority: -20,\n            reuseExistingChunk: true\n        }\n    }\n}\n```","source":"_posts/Webpack4配置.md","raw":"---\ntitle: Webpack4配置指南！Up！\ndate: 2018-04-23 16:02\nupdated: 2018-04-21 19:42:28\ncomments: true\nlayout: post\ntags: [Webpack]\ncategories: Webpack\n---\n\n# first\n\n```sh\nmkdir simpleFE && cd simpleFE\nnpm init -y\nnpm install webpack webpack-cli --save-dev\nor\nmkdir simpleFE && cd simpleFE\nyarn init -y\nyarn add webpack webpack-cli -D\n```\n\n不要问为什么装了`webpack` 还要装`webpack-cli`。。因为你不装就报错。。官方提示还让你去装。。\n\n---\n<!--more-->\n## 配置Sass\n\n```sh\nnpm install css-loader node-sass sass-loader style-loader --save-dev\n\nor\n\nyarn add css-loader node-sass sass-loader style-loader -D\n```\n\n 配置文件：\n\n```js\n// 提取css文件成单独的文件\nconst extractSass = new ExtractTextPlugin({\n  filename: \"styles/[name].[hash].css\",\n  disable: process.env.NODE_ENV === \"development\"\n});\n\n\nmodule: {\n    rules: [\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [\n            {\n              loader: \"css-loader\", // 将CSS翻译成CommonJS\n              options: {\n                sourceMap: true // 会导致速度变慢\n              }\n            },\n            {\n              loader: \"sass-loader\", // 将Sass编译成CSS\n              options: {\n                sourceMap: true // 会导致速度变慢\n              }\n            }\n          ],\n          // 在dev环境下配置这条\n          fallback: \"style-loader\"\n        })\n      }\n    ]\n  },\n  plugins: [extractSass]\n```\n\n安装`extract-text-webpack-plugin`这是为了把css呀这些文件单独打包成一个\n\n但是会遇到报错：\n\n![extract-text-webpack-plugin](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png)\n\n然后我们去`package.json`会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。\n\n`yarn add extract-text-webpack-plugin@next -D`\n\n# CommonsChunkPlugin\n\n[`CommonsChunkPlugin`](https://webpack.js.org/plugins/commons-chunk-plugin)已被移除。。被 **SplitChunksPlugin** 和 **runtimeChunk** 替代了。\n\nCommonsChunkPlugin存在很多问题：\n\n* 它可能导致更多的代码被下载\n* 它在异步块上效率低下。\n* 很难用\n* 实施难以理解\n\nSplitChunksPlugin很棒的地方：\n\n* 它对异步块也有效\n* 它在默认情况下用于异步块\n* 它处理vendor并拆分多个verdor块\n* 它更容易使用\n* 它不依赖chunk块\n* 大部分是自动的\n\n\n\n我们只要把原有的`new webpack.optimize.CommonsChunkPlugin(options)`删了。加上\n\n```js\nsplitChunks: {\n    chunks: \"async\",\n    minSize: 30000,\n    minChunks: 1,\n    maxAsyncRequests: 5,\n    maxInitialRequests: 3,\n    automaticNameDelimiter: '~',\n    name: true,\n    cacheGroups: {\n        vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            priority: -10\n        },\n    default: {\n            minChunks: 2,\n            priority: -20,\n            reuseExistingChunk: true\n        }\n    }\n}\n```","slug":"Webpack4配置","published":1,"photos":[],"link":"","_id":"cjollnbt6005kunfypu325yqw","content":"<h1 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a>first</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir simpleFE &amp;&amp; <span class=\"built_in\">cd</span> simpleFE</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br><span class=\"line\">or</span><br><span class=\"line\">mkdir simpleFE &amp;&amp; <span class=\"built_in\">cd</span> simpleFE</span><br><span class=\"line\">yarn init -y</span><br><span class=\"line\">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n<p>不要问为什么装了<code>webpack</code> 还要装<code>webpack-cli</code>。。因为你不装就报错。。官方提示还让你去装。。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"配置Sass\"><a href=\"#配置Sass\" class=\"headerlink\" title=\"配置Sass\"></a>配置Sass</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install css-loader node-sass sass-loader style-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add css-loader node-sass sass-loader style-loader -D</span><br></pre></td></tr></table></figure>\n<p> 配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取css文件成单独的文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">\"styles/[name].[hash].css\"</span>,</span><br><span class=\"line\">  disable: process.env.NODE_ENV === <span class=\"string\">\"development\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              loader: <span class=\"string\">\"css-loader\"</span>, <span class=\"comment\">// 将CSS翻译成CommonJS</span></span><br><span class=\"line\">              options: &#123;</span><br><span class=\"line\">                sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 会导致速度变慢</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              loader: <span class=\"string\">\"sass-loader\"</span>, <span class=\"comment\">// 将Sass编译成CSS</span></span><br><span class=\"line\">              options: &#123;</span><br><span class=\"line\">                sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 会导致速度变慢</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"comment\">// 在dev环境下配置这条</span></span><br><span class=\"line\">          fallback: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [extractSass]</span><br></pre></td></tr></table></figure>\n<p>安装<code>extract-text-webpack-plugin</code>这是为了把css呀这些文件单独打包成一个</p>\n<p>但是会遇到报错：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png\" alt=\"extract-text-webpack-plugin\"></p>\n<p>然后我们去<code>package.json</code>会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。</p>\n<p><code>yarn add extract-text-webpack-plugin@next -D</code></p>\n<h1 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h1><p><a href=\"https://webpack.js.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\"><code>CommonsChunkPlugin</code></a>已被移除。。被 <strong>SplitChunksPlugin</strong> 和 <strong>runtimeChunk</strong> 替代了。</p>\n<p>CommonsChunkPlugin存在很多问题：</p>\n<ul>\n<li>它可能导致更多的代码被下载</li>\n<li>它在异步块上效率低下。</li>\n<li>很难用</li>\n<li>实施难以理解</li>\n</ul>\n<p>SplitChunksPlugin很棒的地方：</p>\n<ul>\n<li>它对异步块也有效</li>\n<li>它在默认情况下用于异步块</li>\n<li>它处理vendor并拆分多个verdor块</li>\n<li>它更容易使用</li>\n<li>它不依赖chunk块</li>\n<li>大部分是自动的</li>\n</ul>\n<p>我们只要把原有的<code>new webpack.optimize.CommonsChunkPlugin(options)</code>删了。加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">splitChunks: &#123;</span><br><span class=\"line\">    chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">    minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">    minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">    maxAsyncRequests: <span class=\"number\">5</span>,</span><br><span class=\"line\">    maxInitialRequests: <span class=\"number\">3</span>,</span><br><span class=\"line\">    automaticNameDelimiter: <span class=\"string\">'~'</span>,</span><br><span class=\"line\">    name: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">-10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">            reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"first\"><a href=\"#first\" class=\"headerlink\" title=\"first\"></a>first</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir simpleFE &amp;&amp; <span class=\"built_in\">cd</span> simpleFE</span><br><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install webpack webpack-cli --save-dev</span><br><span class=\"line\">or</span><br><span class=\"line\">mkdir simpleFE &amp;&amp; <span class=\"built_in\">cd</span> simpleFE</span><br><span class=\"line\">yarn init -y</span><br><span class=\"line\">yarn add webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n<p>不要问为什么装了<code>webpack</code> 还要装<code>webpack-cli</code>。。因为你不装就报错。。官方提示还让你去装。。</p>\n<hr>","more":"<h2 id=\"配置Sass\"><a href=\"#配置Sass\" class=\"headerlink\" title=\"配置Sass\"></a>配置Sass</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install css-loader node-sass sass-loader style-loader --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">yarn add css-loader node-sass sass-loader style-loader -D</span><br></pre></td></tr></table></figure>\n<p> 配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取css文件成单独的文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">\"styles/[name].[hash].css\"</span>,</span><br><span class=\"line\">  disable: process.env.NODE_ENV === <span class=\"string\">\"development\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              loader: <span class=\"string\">\"css-loader\"</span>, <span class=\"comment\">// 将CSS翻译成CommonJS</span></span><br><span class=\"line\">              options: &#123;</span><br><span class=\"line\">                sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 会导致速度变慢</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              loader: <span class=\"string\">\"sass-loader\"</span>, <span class=\"comment\">// 将Sass编译成CSS</span></span><br><span class=\"line\">              options: &#123;</span><br><span class=\"line\">                sourceMap: <span class=\"literal\">true</span> <span class=\"comment\">// 会导致速度变慢</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"comment\">// 在dev环境下配置这条</span></span><br><span class=\"line\">          fallback: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [extractSass]</span><br></pre></td></tr></table></figure>\n<p>安装<code>extract-text-webpack-plugin</code>这是为了把css呀这些文件单独打包成一个</p>\n<p>但是会遇到报错：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/extract-text-webpack-plugin.png\" alt=\"extract-text-webpack-plugin\"></p>\n<p>然后我们去<code>package.json</code>会发现他的版本才3.0.2。。那么升级下吧因为我们webpack都4.6了。。</p>\n<p><code>yarn add extract-text-webpack-plugin@next -D</code></p>\n<h1 id=\"CommonsChunkPlugin\"><a href=\"#CommonsChunkPlugin\" class=\"headerlink\" title=\"CommonsChunkPlugin\"></a>CommonsChunkPlugin</h1><p><a href=\"https://webpack.js.org/plugins/commons-chunk-plugin\" target=\"_blank\" rel=\"noopener\"><code>CommonsChunkPlugin</code></a>已被移除。。被 <strong>SplitChunksPlugin</strong> 和 <strong>runtimeChunk</strong> 替代了。</p>\n<p>CommonsChunkPlugin存在很多问题：</p>\n<ul>\n<li>它可能导致更多的代码被下载</li>\n<li>它在异步块上效率低下。</li>\n<li>很难用</li>\n<li>实施难以理解</li>\n</ul>\n<p>SplitChunksPlugin很棒的地方：</p>\n<ul>\n<li>它对异步块也有效</li>\n<li>它在默认情况下用于异步块</li>\n<li>它处理vendor并拆分多个verdor块</li>\n<li>它更容易使用</li>\n<li>它不依赖chunk块</li>\n<li>大部分是自动的</li>\n</ul>\n<p>我们只要把原有的<code>new webpack.optimize.CommonsChunkPlugin(options)</code>删了。加上</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">splitChunks: &#123;</span><br><span class=\"line\">    chunks: <span class=\"string\">\"async\"</span>,</span><br><span class=\"line\">    minSize: <span class=\"number\">30000</span>,</span><br><span class=\"line\">    minChunks: <span class=\"number\">1</span>,</span><br><span class=\"line\">    maxAsyncRequests: <span class=\"number\">5</span>,</span><br><span class=\"line\">    maxInitialRequests: <span class=\"number\">3</span>,</span><br><span class=\"line\">    automaticNameDelimiter: <span class=\"string\">'~'</span>,</span><br><span class=\"line\">    name: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">-10</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: &#123;</span><br><span class=\"line\">            minChunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">            priority: <span class=\"number\">-20</span>,</span><br><span class=\"line\">            reuseExistingChunk: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Contenteditable与变成输入普通文本","date":"2018-04-15T11:36:26.000Z","updeated":"2018-04-17T15:42:01.000Z","comments":1,"layout":"post","_content":"\n我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫`contenteditable`\n\n```html\n<div contenteditable>我是个富文本哟！</div>\n```\n\n很简单这就是一个富文本啦！\n\n<!--more-->\n\n经过百度一番，看见张鑫旭大神的很久以前的文章。为了实现普通输入文本我们只能借助css啦！\n\n**user-modify**\n\n* user-modify: read-only;\n  * 只能看\n* user-modify: read-write;\n  * 支持富文本\n* ~~user-modify: write-only;~~\n  * 无所谓的东西\n* user-modify: read-write-plaintext-only;\n  * 纯文本\n\nOK~~问题解决啦。那就是只要给那个元素设个css\n\n```html\n<div contenteditable style=\"user-modify:read-write-plaintext-only\">\n    我是纯文本\n</div>\n```\n\n\n\n参考：\n\n* [张鑫旭大神博客](http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/)","source":"_posts/contenteditable.md","raw":"---\ntitle: Contenteditable与变成输入普通文本\ndate: 2018-04-15 19:36:26\nupdeated: 2018-04-17 23:42:01\ncomments: true\nlayout: post\ntags: [Html]\ncategories: Html\n---\n\n我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫`contenteditable`\n\n```html\n<div contenteditable>我是个富文本哟！</div>\n```\n\n很简单这就是一个富文本啦！\n\n<!--more-->\n\n经过百度一番，看见张鑫旭大神的很久以前的文章。为了实现普通输入文本我们只能借助css啦！\n\n**user-modify**\n\n* user-modify: read-only;\n  * 只能看\n* user-modify: read-write;\n  * 支持富文本\n* ~~user-modify: write-only;~~\n  * 无所谓的东西\n* user-modify: read-write-plaintext-only;\n  * 纯文本\n\nOK~~问题解决啦。那就是只要给那个元素设个css\n\n```html\n<div contenteditable style=\"user-modify:read-write-plaintext-only\">\n    我是纯文本\n</div>\n```\n\n\n\n参考：\n\n* [张鑫旭大神博客](http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/)","slug":"contenteditable","published":1,"updated":"2018-04-17T15:44:56.767Z","photos":[],"link":"","_id":"cjollnbt8005nunfyhjxofevr","content":"<p>我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫<code>contenteditable</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">contenteditable</span>&gt;</span>我是个富文本哟！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很简单这就是一个富文本啦！</p>\n<a id=\"more\"></a>\n<p>经过百度一番，看见张鑫旭大神的很久以前的文章。为了实现普通输入文本我们只能借助css啦！</p>\n<p><strong>user-modify</strong></p>\n<ul>\n<li>user-modify: read-only;<ul>\n<li>只能看</li>\n</ul>\n</li>\n<li>user-modify: read-write;<ul>\n<li>支持富文本</li>\n</ul>\n</li>\n<li><del>user-modify: write-only;</del><ul>\n<li>无所谓的东西</li>\n</ul>\n</li>\n<li>user-modify: read-write-plaintext-only;<ul>\n<li>纯文本</li>\n</ul>\n</li>\n</ul>\n<p>OK~~问题解决啦。那就是只要给那个元素设个css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">contenteditable</span> <span class=\"attr\">style</span>=<span class=\"string\">\"user-modify:read-write-plaintext-only\"</span>&gt;</span></span><br><span class=\"line\">    我是纯文本</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/\" target=\"_blank\" rel=\"noopener\">张鑫旭大神博客</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我们需要实现富文本的方法有一个很方便那就是在任意元素你都可以给个属性叫<code>contenteditable</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">contenteditable</span>&gt;</span>我是个富文本哟！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>很简单这就是一个富文本啦！</p>","more":"<p>经过百度一番，看见张鑫旭大神的很久以前的文章。为了实现普通输入文本我们只能借助css啦！</p>\n<p><strong>user-modify</strong></p>\n<ul>\n<li>user-modify: read-only;<ul>\n<li>只能看</li>\n</ul>\n</li>\n<li>user-modify: read-write;<ul>\n<li>支持富文本</li>\n</ul>\n</li>\n<li><del>user-modify: write-only;</del><ul>\n<li>无所谓的东西</li>\n</ul>\n</li>\n<li>user-modify: read-write-plaintext-only;<ul>\n<li>纯文本</li>\n</ul>\n</li>\n</ul>\n<p>OK~~问题解决啦。那就是只要给那个元素设个css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">contenteditable</span> <span class=\"attr\">style</span>=<span class=\"string\">\"user-modify:read-write-plaintext-only\"</span>&gt;</span></span><br><span class=\"line\">    我是纯文本</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<ul>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/\" target=\"_blank\" rel=\"noopener\">张鑫旭大神博客</a></li>\n</ul>"},{"title":"es6解构赋值妙用","date":"2018-09-25T14:24:21.133Z","comments":1,"layout":"post","_content":"\n# es6解构赋值妙用\n\n平常我们都这样去操作对象：\n```javascript\nlet options = {\n\tisPush: true,\n\tisOpen: false\n}\n\nlet isPush = options.isPush;\nlet isOpen = options.isOpen;\n```\n\n## 对象解构:\n```javascript\nlet {isPush, isOpen} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\n```\n\n## 解构赋值：\n\n当额外定义一个局部变量`isClick`，但是在`options`上没这个对应名称的属性，所以会返回`underfined`。\n```javscript\nlet {isPush, isOpen, isClick} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\nconsole.log(isClick)\t\t// underfined\n```\n\n但是我们可以给他初始值\n\n```javscript\nlet {isPush, isOpen, isClick = false} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\nconsole.log(isClick)\t\t// false\n```\n\n当然我们可以给未定义的变量赋初始值，那也就可以给变量改名：\n\n```javascript\nlet {isPush: isUnPush, isOpen: isUnOpen, isClick: isUnClick = false} = options;\nconsole.log(isUnPush)\t\t\t// true\nconsole.log(isUnOpen)\t\t\t// false\nconsole.log(isUnClick)\t\t// false\n```\n\n我们还可以发现当`isClick`不存在这个变量的时候，我们可以边给变量名再赋初始值；\n\n## 嵌套对象解构\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t}\n\t}\n};\n\nlet { musicData: { info } } = options;\nconsole.log(info);\t\t// {time: \"2018-09-26}\n```\n\n与之前提到的给变量改名：\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t}\n\t}\n};\n\nlet { musicData: { info: createTime } } = options;\nconsole.log(createTime);\t\t// {time: \"2018-09-26}\n```\n\n所以但我们在读数据之后为了防止`underfined`所以我们都去做`&&`但是写多了也很烦。趁之前*嵌套对象结构*则可以解决这个问题。\n\n## 数组解构\n```javascript\nlet aninmal = [\"dog\", \"cat\", \"duck\"];\n\nlet [, dier, disan] = aninmal;\n\nconsole.log(dier);\t\t// cat\nconsole.log(disan);\t\t// duck\n```\n这样我们还可以不要第一个，只要后面2个值。\n\n## 数组解构\n数组解构和对象解构很像，可以给*默认值*，可以*嵌套数组解构*但是还有一点特殊地方就是可以*交换两个变量的值*.\n\n```javascript\nlet x = 1,\n\t  y = 3;\n\n[x, y] = [y, x]\n\nconsole.log(x)\t\t\t// 3\nconsole.log(y)\t\t\t// 1\n```\n\n\n### 不定元素\n```javascript\nlet colors = [\"red\", \"blue\", \"green\"];\n\nlet [firstColor, ...anyColors] = colors;\n\nconsole.log(firstColor);\t\t// \"red\"\nconsole.log(anyColors);\t\t// [\"blue\", \"green\"]\n```\n\n## 混合解构\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t},\n\t\tbigArray: [1, 2, 3, 4]\n\t}\n};\n\nlet { musicData: {link}, bigArray: [a] } = options;\nconsole.log(link.img);\t\t// \"xxxx.com\"\nconsole.log(a);\t\t\t\t// 1\n```\n\n这种方法很有效，当我们从JSON配置中提取信息的时候，不在需要遍历整个解构了。","source":"_posts/es6解构赋值妙用.md","raw":"---\ntitle: es6解构赋值妙用\ndate: 2018-10-01 15：42\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# es6解构赋值妙用\n\n平常我们都这样去操作对象：\n```javascript\nlet options = {\n\tisPush: true,\n\tisOpen: false\n}\n\nlet isPush = options.isPush;\nlet isOpen = options.isOpen;\n```\n\n## 对象解构:\n```javascript\nlet {isPush, isOpen} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\n```\n\n## 解构赋值：\n\n当额外定义一个局部变量`isClick`，但是在`options`上没这个对应名称的属性，所以会返回`underfined`。\n```javscript\nlet {isPush, isOpen, isClick} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\nconsole.log(isClick)\t\t// underfined\n```\n\n但是我们可以给他初始值\n\n```javscript\nlet {isPush, isOpen, isClick = false} = options;\nconsole.log(isPush)\t\t// true\nconsole.log(isOpen)\t\t// false\nconsole.log(isClick)\t\t// false\n```\n\n当然我们可以给未定义的变量赋初始值，那也就可以给变量改名：\n\n```javascript\nlet {isPush: isUnPush, isOpen: isUnOpen, isClick: isUnClick = false} = options;\nconsole.log(isUnPush)\t\t\t// true\nconsole.log(isUnOpen)\t\t\t// false\nconsole.log(isUnClick)\t\t// false\n```\n\n我们还可以发现当`isClick`不存在这个变量的时候，我们可以边给变量名再赋初始值；\n\n## 嵌套对象解构\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t}\n\t}\n};\n\nlet { musicData: { info } } = options;\nconsole.log(info);\t\t// {time: \"2018-09-26}\n```\n\n与之前提到的给变量改名：\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t}\n\t}\n};\n\nlet { musicData: { info: createTime } } = options;\nconsole.log(createTime);\t\t// {time: \"2018-09-26}\n```\n\n所以但我们在读数据之后为了防止`underfined`所以我们都去做`&&`但是写多了也很烦。趁之前*嵌套对象结构*则可以解决这个问题。\n\n## 数组解构\n```javascript\nlet aninmal = [\"dog\", \"cat\", \"duck\"];\n\nlet [, dier, disan] = aninmal;\n\nconsole.log(dier);\t\t// cat\nconsole.log(disan);\t\t// duck\n```\n这样我们还可以不要第一个，只要后面2个值。\n\n## 数组解构\n数组解构和对象解构很像，可以给*默认值*，可以*嵌套数组解构*但是还有一点特殊地方就是可以*交换两个变量的值*.\n\n```javascript\nlet x = 1,\n\t  y = 3;\n\n[x, y] = [y, x]\n\nconsole.log(x)\t\t\t// 3\nconsole.log(y)\t\t\t// 1\n```\n\n\n### 不定元素\n```javascript\nlet colors = [\"red\", \"blue\", \"green\"];\n\nlet [firstColor, ...anyColors] = colors;\n\nconsole.log(firstColor);\t\t// \"red\"\nconsole.log(anyColors);\t\t// [\"blue\", \"green\"]\n```\n\n## 混合解构\n\n```javascript\nlet options = {\n\tname: \"Music\",\n\tstatus: \"open\",\n\tmusicData: {\n\t\tlink: {\n\t\t\timg: \"xxxx.com\",\n\t\t\taudio: \"xxxxxx.com\"\n\t\t},\n\t\tinfo: {\n\t\t\ttime: \"2018-09-26\"\n\t\t},\n\t\tbigArray: [1, 2, 3, 4]\n\t}\n};\n\nlet { musicData: {link}, bigArray: [a] } = options;\nconsole.log(link.img);\t\t// \"xxxx.com\"\nconsole.log(a);\t\t\t\t// 1\n```\n\n这种方法很有效，当我们从JSON配置中提取信息的时候，不在需要遍历整个解构了。","slug":"es6解构赋值妙用","published":1,"updated":"2018-10-01T07:42:15.749Z","photos":[],"link":"","_id":"cjollnbtf005sunfycueglly4","content":"<h1 id=\"es6解构赋值妙用\"><a href=\"#es6解构赋值妙用\" class=\"headerlink\" title=\"es6解构赋值妙用\"></a>es6解构赋值妙用</h1><p>平常我们都这样去操作对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tisPush: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tisOpen: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> isPush = options.isPush;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isOpen = options.isOpen;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构:\"></a>对象解构:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;isPush, isOpen&#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPush)\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isOpen)\t\t<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解构赋值：\"><a href=\"#解构赋值：\" class=\"headerlink\" title=\"解构赋值：\"></a>解构赋值：</h2><p>当额外定义一个局部变量<code>isClick</code>，但是在<code>options</code>上没这个对应名称的属性，所以会返回<code>underfined</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;isPush, isOpen, isClick&#125; = options;</span><br><span class=\"line\">console.log(isPush)\t\t// true</span><br><span class=\"line\">console.log(isOpen)\t\t// false</span><br><span class=\"line\">console.log(isClick)\t\t// underfined</span><br></pre></td></tr></table></figure></p>\n<p>但是我们可以给他初始值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;isPush, isOpen, isClick = false&#125; = options;</span><br><span class=\"line\">console.log(isPush)\t\t// true</span><br><span class=\"line\">console.log(isOpen)\t\t// false</span><br><span class=\"line\">console.log(isClick)\t\t// false</span><br></pre></td></tr></table></figure>\n<p>当然我们可以给未定义的变量赋初始值，那也就可以给变量改名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">isPush</span>: isUnPush, <span class=\"attr\">isOpen</span>: isUnOpen, <span class=\"attr\">isClick</span>: isUnClick = <span class=\"literal\">false</span>&#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnPush)\t\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnOpen)\t\t\t<span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnClick)\t\t<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>我们还可以发现当<code>isClick</code>不存在这个变量的时候，我们可以边给变量名再赋初始值；</p>\n<h2 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a>嵌套对象解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123; info &#125; &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(info);\t\t<span class=\"comment\">// &#123;time: \"2018-09-26&#125;</span></span><br></pre></td></tr></table></figure>\n<p>与之前提到的给变量改名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123; <span class=\"attr\">info</span>: createTime &#125; &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(createTime);\t\t<span class=\"comment\">// &#123;time: \"2018-09-26&#125;</span></span><br></pre></td></tr></table></figure>\n<p>所以但我们在读数据之后为了防止<code>underfined</code>所以我们都去做<code>&amp;&amp;</code>但是写多了也很烦。趁之前<em>嵌套对象结构</em>则可以解决这个问题。</p>\n<h2 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aninmal = [<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"cat\"</span>, <span class=\"string\">\"duck\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, dier, disan] = aninmal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dier);\t\t<span class=\"comment\">// cat</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(disan);\t\t<span class=\"comment\">// duck</span></span><br></pre></td></tr></table></figure>\n<p>这样我们还可以不要第一个，只要后面2个值。</p>\n<h2 id=\"数组解构-1\"><a href=\"#数组解构-1\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><p>数组解构和对象解构很像，可以给<em>默认值</em>，可以<em>嵌套数组解构</em>但是还有一点特殊地方就是可以<em>交换两个变量的值</em>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t  y = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)\t\t\t<span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y)\t\t\t<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不定元素\"><a href=\"#不定元素\" class=\"headerlink\" title=\"不定元素\"></a>不定元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [firstColor, ...anyColors] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstColor);\t\t<span class=\"comment\">// \"red\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(anyColors);\t\t<span class=\"comment\">// [\"blue\", \"green\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"混合解构\"><a href=\"#混合解构\" class=\"headerlink\" title=\"混合解构\"></a>混合解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbigArray: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123;link&#125;, <span class=\"attr\">bigArray</span>: [a] &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(link.img);\t\t<span class=\"comment\">// \"xxxx.com\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);\t\t\t\t<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>这种方法很有效，当我们从JSON配置中提取信息的时候，不在需要遍历整个解构了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"es6解构赋值妙用\"><a href=\"#es6解构赋值妙用\" class=\"headerlink\" title=\"es6解构赋值妙用\"></a>es6解构赋值妙用</h1><p>平常我们都这样去操作对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tisPush: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tisOpen: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> isPush = options.isPush;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isOpen = options.isOpen;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构:\"></a>对象解构:</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;isPush, isOpen&#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isPush)\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isOpen)\t\t<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"解构赋值：\"><a href=\"#解构赋值：\" class=\"headerlink\" title=\"解构赋值：\"></a>解构赋值：</h2><p>当额外定义一个局部变量<code>isClick</code>，但是在<code>options</code>上没这个对应名称的属性，所以会返回<code>underfined</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;isPush, isOpen, isClick&#125; = options;</span><br><span class=\"line\">console.log(isPush)\t\t// true</span><br><span class=\"line\">console.log(isOpen)\t\t// false</span><br><span class=\"line\">console.log(isClick)\t\t// underfined</span><br></pre></td></tr></table></figure></p>\n<p>但是我们可以给他初始值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let &#123;isPush, isOpen, isClick = false&#125; = options;</span><br><span class=\"line\">console.log(isPush)\t\t// true</span><br><span class=\"line\">console.log(isOpen)\t\t// false</span><br><span class=\"line\">console.log(isClick)\t\t// false</span><br></pre></td></tr></table></figure>\n<p>当然我们可以给未定义的变量赋初始值，那也就可以给变量改名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">isPush</span>: isUnPush, <span class=\"attr\">isOpen</span>: isUnOpen, <span class=\"attr\">isClick</span>: isUnClick = <span class=\"literal\">false</span>&#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnPush)\t\t\t<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnOpen)\t\t\t<span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isUnClick)\t\t<span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>我们还可以发现当<code>isClick</code>不存在这个变量的时候，我们可以边给变量名再赋初始值；</p>\n<h2 id=\"嵌套对象解构\"><a href=\"#嵌套对象解构\" class=\"headerlink\" title=\"嵌套对象解构\"></a>嵌套对象解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123; info &#125; &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(info);\t\t<span class=\"comment\">// &#123;time: \"2018-09-26&#125;</span></span><br></pre></td></tr></table></figure>\n<p>与之前提到的给变量改名：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123; <span class=\"attr\">info</span>: createTime &#125; &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(createTime);\t\t<span class=\"comment\">// &#123;time: \"2018-09-26&#125;</span></span><br></pre></td></tr></table></figure>\n<p>所以但我们在读数据之后为了防止<code>underfined</code>所以我们都去做<code>&amp;&amp;</code>但是写多了也很烦。趁之前<em>嵌套对象结构</em>则可以解决这个问题。</p>\n<h2 id=\"数组解构\"><a href=\"#数组解构\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aninmal = [<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"cat\"</span>, <span class=\"string\">\"duck\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, dier, disan] = aninmal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dier);\t\t<span class=\"comment\">// cat</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(disan);\t\t<span class=\"comment\">// duck</span></span><br></pre></td></tr></table></figure>\n<p>这样我们还可以不要第一个，只要后面2个值。</p>\n<h2 id=\"数组解构-1\"><a href=\"#数组解构-1\" class=\"headerlink\" title=\"数组解构\"></a>数组解构</h2><p>数组解构和对象解构很像，可以给<em>默认值</em>，可以<em>嵌套数组解构</em>但是还有一点特殊地方就是可以<em>交换两个变量的值</em>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>,</span><br><span class=\"line\">\t  y = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)\t\t\t<span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y)\t\t\t<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"不定元素\"><a href=\"#不定元素\" class=\"headerlink\" title=\"不定元素\"></a>不定元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> colors = [<span class=\"string\">\"red\"</span>, <span class=\"string\">\"blue\"</span>, <span class=\"string\">\"green\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [firstColor, ...anyColors] = colors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(firstColor);\t\t<span class=\"comment\">// \"red\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(anyColors);\t\t<span class=\"comment\">// [\"blue\", \"green\"]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"混合解构\"><a href=\"#混合解构\" class=\"headerlink\" title=\"混合解构\"></a>混合解构</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">\tname: <span class=\"string\">\"Music\"</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"open\"</span>,</span><br><span class=\"line\">\tmusicData: &#123;</span><br><span class=\"line\">\t\tlink: &#123;</span><br><span class=\"line\">\t\t\timg: <span class=\"string\">\"xxxx.com\"</span>,</span><br><span class=\"line\">\t\t\taudio: <span class=\"string\">\"xxxxxx.com\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tinfo: &#123;</span><br><span class=\"line\">\t\t\ttime: <span class=\"string\">\"2018-09-26\"</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tbigArray: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">musicData</span>: &#123;link&#125;, <span class=\"attr\">bigArray</span>: [a] &#125; = options;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(link.img);\t\t<span class=\"comment\">// \"xxxx.com\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);\t\t\t\t<span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>这种方法很有效，当我们从JSON配置中提取信息的时候，不在需要遍历整个解构了。</p>\n"},{"title":"Git基本操作","date":"2017-07-25T12:47:00.000Z","comments":1,"layout":"post","_content":"\n\n\n# Git add\n\n`git add -A` 和 `git add .` 和 `git add -u`\n\n- git add   **.** ：他会监控工作区的状态树，使用它会把工作时的**所有变化提交**到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\n<!--more-->\n\n- git add -u ：他仅监控**已经被add的文件**（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写)\n- git add -A ：是上面两个功能的合集（git add --all的缩写）\n\n自我理解:\n\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n\n# commit过程\n\n- git status  检查工作区是否干净\n- git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。\n- git commit -am \"xxxxxxx\"\n- git branch \n- git push origin xxxx\n\n\n\n\n# 删除分支\n\n- git branch -D xx **删除本地分支**\n- git push origin :br  (origin 后面有空格) **删除远程分支**\n\n\n\n# 解决冲突\n\n- git fetch origin cms:new  创建新本地分支new\n- git branch   \n- git merge new  合并\n- git branch -D new 删除本地分支\n\n# diff\n\n查看自上次提交以来，本地代码改动的具体情况\n\n# Git log\n\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 `Git log` 命令查看\n\n# Git show\n\ngit show <commit-hash-id>查看某次commit的修改内容\n\n# Git reset --hard <commit>\n\n现在让我们来重置回那次提交的状态：\n\n# Git rebase\n\n对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。\n\n如果你想在rebase的过程中对一部分提交进行修改，你可以在'git rebase'命令中加入'-i'或'--interactive'参数去调用交互模式。\n\n$ git rebase -i origin/master\n\n这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。\n\n若想查看一下将被rebase的提交，可以用如下的log命令：\n\n$ git log github/master..\n\n\n\n# git branch -a\n\n查看远程分支\n\nmaster\nremotes/origin/HEAD -> origin/master\nremotes/origin/Release\nremotes/origin/master\n\n# git checkout -b myRelease origin/Release\n\n切换到 origin/Release分支，并在本地新建分支 myRelease","source":"_posts/git.md","raw":"---\ntitle: Git基本操作\ndate: 2017-07-25 20:47\ncomments: true\nlayout: post\ntags: [git]\ncategories: git\n---\n\n\n\n# Git add\n\n`git add -A` 和 `git add .` 和 `git add -u`\n\n- git add   **.** ：他会监控工作区的状态树，使用它会把工作时的**所有变化提交**到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\n<!--more-->\n\n- git add -u ：他仅监控**已经被add的文件**（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写)\n- git add -A ：是上面两个功能的合集（git add --all的缩写）\n\n自我理解:\n\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n\n# commit过程\n\n- git status  检查工作区是否干净\n- git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。\n- git commit -am \"xxxxxxx\"\n- git branch \n- git push origin xxxx\n\n\n\n\n# 删除分支\n\n- git branch -D xx **删除本地分支**\n- git push origin :br  (origin 后面有空格) **删除远程分支**\n\n\n\n# 解决冲突\n\n- git fetch origin cms:new  创建新本地分支new\n- git branch   \n- git merge new  合并\n- git branch -D new 删除本地分支\n\n# diff\n\n查看自上次提交以来，本地代码改动的具体情况\n\n# Git log\n\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 `Git log` 命令查看\n\n# Git show\n\ngit show <commit-hash-id>查看某次commit的修改内容\n\n# Git reset --hard <commit>\n\n现在让我们来重置回那次提交的状态：\n\n# Git rebase\n\n对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。\n\n如果你想在rebase的过程中对一部分提交进行修改，你可以在'git rebase'命令中加入'-i'或'--interactive'参数去调用交互模式。\n\n$ git rebase -i origin/master\n\n这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。\n\n若想查看一下将被rebase的提交，可以用如下的log命令：\n\n$ git log github/master..\n\n\n\n# git branch -a\n\n查看远程分支\n\nmaster\nremotes/origin/HEAD -> origin/master\nremotes/origin/Release\nremotes/origin/master\n\n# git checkout -b myRelease origin/Release\n\n切换到 origin/Release分支，并在本地新建分支 myRelease","slug":"git","published":1,"updated":"2017-09-06T09:40:39.000Z","photos":[],"link":"","_id":"cjollnbti005uunfyw85z1wc2","content":"<h1 id=\"Git-add\"><a href=\"#Git-add\" class=\"headerlink\" title=\"Git add\"></a>Git add</h1><p><code>git add -A</code> 和 <code>git add .</code> 和 <code>git add -u</code></p>\n<ul>\n<li>git add   <strong>.</strong> ：他会监控工作区的状态树，使用它会把工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>git add -u ：他仅监控<strong>已经被add的文件</strong>（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写)</li>\n<li>git add -A ：是上面两个功能的合集（git add –all的缩写）</li>\n</ul>\n<p>自我理解:</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n<h1 id=\"commit过程\"><a href=\"#commit过程\" class=\"headerlink\" title=\"commit过程\"></a>commit过程</h1><ul>\n<li>git status  检查工作区是否干净</li>\n<li>git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。</li>\n<li>git commit -am “xxxxxxx”</li>\n<li>git branch </li>\n<li>git push origin xxxx</li>\n</ul>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><ul>\n<li>git branch -D xx <strong>删除本地分支</strong></li>\n<li>git push origin :br  (origin 后面有空格) <strong>删除远程分支</strong></li>\n</ul>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><ul>\n<li>git fetch origin cms:new  创建新本地分支new</li>\n<li>git branch   </li>\n<li>git merge new  合并</li>\n<li>git branch -D new 删除本地分支</li>\n</ul>\n<h1 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h1><p>查看自上次提交以来，本地代码改动的具体情况</p>\n<h1 id=\"Git-log\"><a href=\"#Git-log\" class=\"headerlink\" title=\"Git log\"></a>Git log</h1><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 <code>Git log</code> 命令查看</p>\n<h1 id=\"Git-show\"><a href=\"#Git-show\" class=\"headerlink\" title=\"Git show\"></a>Git show</h1><p>git show <commit-hash-id>查看某次commit的修改内容</commit-hash-id></p>\n<h1 id=\"Git-reset-–hard\"><a href=\"#Git-reset-–hard\" class=\"headerlink\" title=\"Git reset –hard \"></a>Git reset –hard <commit></commit></h1><p>现在让我们来重置回那次提交的状态：</p>\n<h1 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h1><p>对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。</p>\n<p>如果你想在rebase的过程中对一部分提交进行修改，你可以在’git rebase’命令中加入’-i’或’–interactive’参数去调用交互模式。</p>\n<p>$ git rebase -i origin/master</p>\n<p>这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。</p>\n<p>若想查看一下将被rebase的提交，可以用如下的log命令：</p>\n<p>$ git log github/master..</p>\n<h1 id=\"git-branch-a\"><a href=\"#git-branch-a\" class=\"headerlink\" title=\"git branch -a\"></a>git branch -a</h1><p>查看远程分支</p>\n<p>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/Release<br>remotes/origin/master</p>\n<h1 id=\"git-checkout-b-myRelease-origin-Release\"><a href=\"#git-checkout-b-myRelease-origin-Release\" class=\"headerlink\" title=\"git checkout -b myRelease origin/Release\"></a>git checkout -b myRelease origin/Release</h1><p>切换到 origin/Release分支，并在本地新建分支 myRelease</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git-add\"><a href=\"#Git-add\" class=\"headerlink\" title=\"Git add\"></a>Git add</h1><p><code>git add -A</code> 和 <code>git add .</code> 和 <code>git add -u</code></p>\n<ul>\n<li>git add   <strong>.</strong> ：他会监控工作区的状态树，使用它会把工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</li>\n</ul>","more":"<ul>\n<li>git add -u ：他仅监控<strong>已经被add的文件</strong>（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写)</li>\n<li>git add -A ：是上面两个功能的合集（git add –all的缩写）</li>\n</ul>\n<p>自我理解:</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n<h1 id=\"commit过程\"><a href=\"#commit过程\" class=\"headerlink\" title=\"commit过程\"></a>commit过程</h1><ul>\n<li>git status  检查工作区是否干净</li>\n<li>git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。</li>\n<li>git commit -am “xxxxxxx”</li>\n<li>git branch </li>\n<li>git push origin xxxx</li>\n</ul>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><ul>\n<li>git branch -D xx <strong>删除本地分支</strong></li>\n<li>git push origin :br  (origin 后面有空格) <strong>删除远程分支</strong></li>\n</ul>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><ul>\n<li>git fetch origin cms:new  创建新本地分支new</li>\n<li>git branch   </li>\n<li>git merge new  合并</li>\n<li>git branch -D new 删除本地分支</li>\n</ul>\n<h1 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h1><p>查看自上次提交以来，本地代码改动的具体情况</p>\n<h1 id=\"Git-log\"><a href=\"#Git-log\" class=\"headerlink\" title=\"Git log\"></a>Git log</h1><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 <code>Git log</code> 命令查看</p>\n<h1 id=\"Git-show\"><a href=\"#Git-show\" class=\"headerlink\" title=\"Git show\"></a>Git show</h1><p>git show <commit-hash-id>查看某次commit的修改内容</commit-hash-id></p>\n<h1 id=\"Git-reset-–hard\"><a href=\"#Git-reset-–hard\" class=\"headerlink\" title=\"Git reset –hard \"></a>Git reset –hard <commit></commit></h1><p>现在让我们来重置回那次提交的状态：</p>\n<h1 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h1><p>对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。</p>\n<p>如果你想在rebase的过程中对一部分提交进行修改，你可以在’git rebase’命令中加入’-i’或’–interactive’参数去调用交互模式。</p>\n<p>$ git rebase -i origin/master</p>\n<p>这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。</p>\n<p>若想查看一下将被rebase的提交，可以用如下的log命令：</p>\n<p>$ git log github/master..</p>\n<h1 id=\"git-branch-a\"><a href=\"#git-branch-a\" class=\"headerlink\" title=\"git branch -a\"></a>git branch -a</h1><p>查看远程分支</p>\n<p>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/Release<br>remotes/origin/master</p>\n<h1 id=\"git-checkout-b-myRelease-origin-Release\"><a href=\"#git-checkout-b-myRelease-origin-Release\" class=\"headerlink\" title=\"git checkout -b myRelease origin/Release\"></a>git checkout -b myRelease origin/Release</h1><p>切换到 origin/Release分支，并在本地新建分支 myRelease</p>"},{"title":"git empty object file","date":"2018-10-01T07:35:00.000Z","comments":1,"layout":"post","_content":"\n# git empty object file\n\n\n\n一次突然断电。。导致之前的commit的没了。。`status`的时候发现全变空了。。解决过程在如下重现：\n```shell\n~/1mu(1803) » git status\n\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nfatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt\n```\n\n<!--more-->\n\n```shell\n~/1mu(1803) » git fsck —full    \n\nerror: object file .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568 is empty\nerror: unable to mmap .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568: 没有那个文件或目录\nerror: 16cbec146f596b542e174875e8ad0c8c930b2568: object corrupt or missing: .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: unable to mmap .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b: 没有那个文件或目录\nerror: 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b: object corrupt or missing: .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: object file .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97 is empty\nerror: unable to mmap .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97: 没有那个文件或目录\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: object corrupt or missing: .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97\nerror: object file .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8 is empty\nerror: unable to mmap .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8: 没有那个文件或目录\nerror: af0735cb070fe8c8e415102f00e9a9d8825cd8a8: object corrupt or missing: .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8\nerror: object file .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f is empty\nerror: unable to mmap .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f: 没有那个文件或目录\nerror: fea063e56e69f6739e1648ddccd0c5d55a0d052f: object corrupt or missing: .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nfatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt\n```\n\n```shell\n~/1mu(1803) » cd .git \n~/1mu/.git(1803) » find . -type f -empty -delete -print\n执行完后再次\n\n~/1mu/.git(1803) » git fsck —full      \n\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: HEAD: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: refs/heads/1803: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\n\n```\n\n​                                                                                                                                                   \n\n```shell\n# 选择自己的分支 就能看见之前自己的commit信息\n~/1mu(1803) » tail -n 2 .git/logs/refs/heads/1803\n\n9ac273e691830844014b1f1ff85e071bd5c061a2 54ac2f761953dcd0af684b781513472acf553719 xzh <zihao.xu@1mu.club> 1538212290 +0800\tcommit: 改变作品的数据结构\n```\n\n\n```shell\n# 回到你想回到的分支上\n~/1mu(1803) » git update-ref HEAD 54ac2f761953dcd0af684b781513472acf553719\n```\n\n```shell\n~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\n```\n\n\n到这步基本上就已经解决了。\n```shell\n~/1mu(1803*) » rm .git/index                \n~/1mu(1803*) » git reset\n\n重置后取消暂存的变更：\nM\tinterface/www/cms2/index.html\nM\tinterface/www/cms2/package.json\nM\tinterface/www/cms2/webpack.common.js\n\n~/1mu(1803*) » git status                                                                                                                                                                   xuzihao@xuzihao\n位于分支 1803\n您的分支领先 ‘origin/1803' 共 2 个提交。\n  （使用 “git push\" 来发布您的本地提交）\n\n尚未暂存以备提交的变更：\n  （使用 “git add <文件>...\" 更新要提交的内容）\n  （使用 “git checkout -- <文件>...\" 丢弃工作区的改动）\n\n\t修改：     interface/www/cms2/index.html\n\t修改：     interface/www/cms2/package.json\n\t修改：     interface/www/cms2/webpack.common.js\n\n修改尚未加入提交（使用 “git add\" 和/或 \"git commit -a\"）\n```\n\n为了放心再次检查下\n\n```shell\n~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob 2d32a2045e6e9e2c9eac5e94fc7d4105b2fe7bbf\ndangling blob 3e408a4fc423ba3d78d4c9a526f70a12ce749c4a\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\ndangling blob b0e76a232b70b823379a1cfae36dbf443e46fa6e\n```\n\n","source":"_posts/git-empty-object-file.md","raw":"---\ntitle: git empty object file\ndate: 2018-10-01 15:35\ncomments: true\nlayout: post\ntags: [git]\ncategories: git\n---\n\n# git empty object file\n\n\n\n一次突然断电。。导致之前的commit的没了。。`status`的时候发现全变空了。。解决过程在如下重现：\n```shell\n~/1mu(1803) » git status\n\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nfatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt\n```\n\n<!--more-->\n\n```shell\n~/1mu(1803) » git fsck —full    \n\nerror: object file .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568 is empty\nerror: unable to mmap .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568: 没有那个文件或目录\nerror: 16cbec146f596b542e174875e8ad0c8c930b2568: object corrupt or missing: .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: unable to mmap .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b: 没有那个文件或目录\nerror: 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b: object corrupt or missing: .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: object file .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97 is empty\nerror: unable to mmap .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97: 没有那个文件或目录\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: object corrupt or missing: .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97\nerror: object file .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8 is empty\nerror: unable to mmap .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8: 没有那个文件或目录\nerror: af0735cb070fe8c8e415102f00e9a9d8825cd8a8: object corrupt or missing: .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8\nerror: object file .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f is empty\nerror: unable to mmap .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f: 没有那个文件或目录\nerror: fea063e56e69f6739e1648ddccd0c5d55a0d052f: object corrupt or missing: .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nerror: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty\nfatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt\n```\n\n```shell\n~/1mu(1803) » cd .git \n~/1mu/.git(1803) » find . -type f -empty -delete -print\n执行完后再次\n\n~/1mu/.git(1803) » git fsck —full      \n\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: HEAD: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: refs/heads/1803: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\n\n```\n\n​                                                                                                                                                   \n\n```shell\n# 选择自己的分支 就能看见之前自己的commit信息\n~/1mu(1803) » tail -n 2 .git/logs/refs/heads/1803\n\n9ac273e691830844014b1f1ff85e071bd5c061a2 54ac2f761953dcd0af684b781513472acf553719 xzh <zihao.xu@1mu.club> 1538212290 +0800\tcommit: 改变作品的数据结构\n```\n\n\n```shell\n# 回到你想回到的分支上\n~/1mu(1803) » git update-ref HEAD 54ac2f761953dcd0af684b781513472acf553719\n```\n\n```shell\n~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\nerror: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\n```\n\n\n到这步基本上就已经解决了。\n```shell\n~/1mu(1803*) » rm .git/index                \n~/1mu(1803*) » git reset\n\n重置后取消暂存的变更：\nM\tinterface/www/cms2/index.html\nM\tinterface/www/cms2/package.json\nM\tinterface/www/cms2/webpack.common.js\n\n~/1mu(1803*) » git status                                                                                                                                                                   xuzihao@xuzihao\n位于分支 1803\n您的分支领先 ‘origin/1803' 共 2 个提交。\n  （使用 “git push\" 来发布您的本地提交）\n\n尚未暂存以备提交的变更：\n  （使用 “git add <文件>...\" 更新要提交的内容）\n  （使用 “git checkout -- <文件>...\" 丢弃工作区的改动）\n\n\t修改：     interface/www/cms2/index.html\n\t修改：     interface/www/cms2/package.json\n\t修改：     interface/www/cms2/webpack.common.js\n\n修改尚未加入提交（使用 “git add\" 和/或 \"git commit -a\"）\n```\n\n为了放心再次检查下\n\n```shell\n~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao\n检查对象目录中: 100% (256/256), 完成.\n检查对象中: 100% (26504/26504), 完成.\ndangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86\ndangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9\ndangling blob 2d32a2045e6e9e2c9eac5e94fc7d4105b2fe7bbf\ndangling blob 3e408a4fc423ba3d78d4c9a526f70a12ce749c4a\ndangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20\ndangling blob 1a58a089bf85e7115cdda86009c977f9a664844e\ndangling blob d55912305163fe7e28e08ead530e50097da2add7\ndangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece\ndangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c\ndangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7\ndangling blob 66706adb33fb8f5365c42e463f399cde6202c675\ndangling blob ac99430374779d69a69eba7e0def4c2ceb234eec\ndangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5\ndangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d\ndangling blob 3fe6af5f741e750da67d9f47dc54310969826429\ndangling blob b0e76a232b70b823379a1cfae36dbf443e46fa6e\n```\n\n","slug":"git-empty-object-file","published":1,"updated":"2018-11-17T14:41:16.753Z","photos":[],"link":"","_id":"cjollnbtl005yunfyh3onw8d6","content":"<h1 id=\"git-empty-object-file\"><a href=\"#git-empty-object-file\" class=\"headerlink\" title=\"git empty object file\"></a>git empty object file</h1><p>一次突然断电。。导致之前的commit的没了。。<code>status</code>的时候发现全变空了。。解决过程在如下重现：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » git status</span><br><span class=\"line\"></span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » git fsck —full    </span><br><span class=\"line\"></span><br><span class=\"line\">error: object file .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568: 没有那个文件或目录</span><br><span class=\"line\">error: 16cbec146f596b542e174875e8ad0c8c930b2568: object corrupt or missing: .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b: 没有那个文件或目录</span><br><span class=\"line\">error: 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b: object corrupt or missing: .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: object file .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97: 没有那个文件或目录</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: object corrupt or missing: .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97</span><br><span class=\"line\">error: object file .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8: 没有那个文件或目录</span><br><span class=\"line\">error: af0735cb070fe8c8e415102f00e9a9d8825cd8a8: object corrupt or missing: .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8</span><br><span class=\"line\">error: object file .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f: 没有那个文件或目录</span><br><span class=\"line\">error: fea063e56e69f6739e1648ddccd0c5d55a0d052f: object corrupt or missing: .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » cd .git </span><br><span class=\"line\">~/1mu/.git(1803) » find . -type f -empty -delete -print</span><br><span class=\"line\">执行完后再次</span><br><span class=\"line\"></span><br><span class=\"line\">~/1mu/.git(1803) » git fsck —full      </span><br><span class=\"line\"></span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: HEAD: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: refs/heads/1803: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure>\n<p>​                                                                                                                                                   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择自己的分支 就能看见之前自己的commit信息</span></span><br><span class=\"line\">~/1mu(1803) » tail -n 2 .git/logs/refs/heads/1803</span><br><span class=\"line\"></span><br><span class=\"line\">9ac273e691830844014b1f1ff85e071bd5c061a2 54ac2f761953dcd0af684b781513472acf553719 xzh &lt;zihao.xu@1mu.club&gt; 1538212290 +0800\tcommit: 改变作品的数据结构</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 回到你想回到的分支上</span></span><br><span class=\"line\">~/1mu(1803) » git update-ref HEAD 54ac2f761953dcd0af684b781513472acf553719</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure>\n<p>到这步基本上就已经解决了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » rm .git/index                </span><br><span class=\"line\">~/1mu(1803*) » git reset</span><br><span class=\"line\"></span><br><span class=\"line\">重置后取消暂存的变更：</span><br><span class=\"line\">M\tinterface/www/cms2/index.html</span><br><span class=\"line\">M\tinterface/www/cms2/package.json</span><br><span class=\"line\">M\tinterface/www/cms2/webpack.common.js</span><br><span class=\"line\"></span><br><span class=\"line\">~/1mu(1803*) » git status                                                                                                                                                                   xuzihao@xuzihao</span><br><span class=\"line\">位于分支 1803</span><br><span class=\"line\">您的分支领先 ‘origin/1803' 共 2 个提交。</span><br><span class=\"line\">  （使用 “git push\" 来发布您的本地提交）</span><br><span class=\"line\"></span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 “git add &lt;文件&gt;...\" 更新要提交的内容）</span><br><span class=\"line\">  （使用 “git checkout -- &lt;文件&gt;...\" 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\">\t修改：     interface/www/cms2/index.html</span><br><span class=\"line\">\t修改：     interface/www/cms2/package.json</span><br><span class=\"line\">\t修改：     interface/www/cms2/webpack.common.js</span><br><span class=\"line\"></span><br><span class=\"line\">修改尚未加入提交（使用 “git add\" 和/或 \"git commit -a\"）</span><br></pre></td></tr></table></figure></p>\n<p>为了放心再次检查下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob 2d32a2045e6e9e2c9eac5e94fc7d4105b2fe7bbf</span><br><span class=\"line\">dangling blob 3e408a4fc423ba3d78d4c9a526f70a12ce749c4a</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br><span class=\"line\">dangling blob b0e76a232b70b823379a1cfae36dbf443e46fa6e</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"git-empty-object-file\"><a href=\"#git-empty-object-file\" class=\"headerlink\" title=\"git empty object file\"></a>git empty object file</h1><p>一次突然断电。。导致之前的commit的没了。。<code>status</code>的时候发现全变空了。。解决过程在如下重现：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » git status</span><br><span class=\"line\"></span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure></p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » git fsck —full    </span><br><span class=\"line\"></span><br><span class=\"line\">error: object file .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568: 没有那个文件或目录</span><br><span class=\"line\">error: 16cbec146f596b542e174875e8ad0c8c930b2568: object corrupt or missing: .git/objects/16/cbec146f596b542e174875e8ad0c8c930b2568</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b: 没有那个文件或目录</span><br><span class=\"line\">error: 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b: object corrupt or missing: .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: object file .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97: 没有那个文件或目录</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: object corrupt or missing: .git/objects/93/53160448a191e0b2cf58dc4c6d7562df0a1e97</span><br><span class=\"line\">error: object file .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8 is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8: 没有那个文件或目录</span><br><span class=\"line\">error: af0735cb070fe8c8e415102f00e9a9d8825cd8a8: object corrupt or missing: .git/objects/af/0735cb070fe8c8e415102f00e9a9d8825cd8a8</span><br><span class=\"line\">error: object file .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f is empty</span><br><span class=\"line\">error: unable to mmap .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f: 没有那个文件或目录</span><br><span class=\"line\">error: fea063e56e69f6739e1648ddccd0c5d55a0d052f: object corrupt or missing: .git/objects/fe/a063e56e69f6739e1648ddccd0c5d55a0d052f</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">error: object file .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b is empty</span><br><span class=\"line\">fatal: loose object 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b (stored in .git/objects/84/903eeaf8e0715b6ae944ceffa9677a7b7bab2b) is corrupt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803) » cd .git </span><br><span class=\"line\">~/1mu/.git(1803) » find . -type f -empty -delete -print</span><br><span class=\"line\">执行完后再次</span><br><span class=\"line\"></span><br><span class=\"line\">~/1mu/.git(1803) » git fsck —full      </span><br><span class=\"line\"></span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: HEAD: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: refs/heads/1803: invalid sha1 pointer 84903eeaf8e0715b6ae944ceffa9677a7b7bab2b</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure>\n<p>​                                                                                                                                                   </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 选择自己的分支 就能看见之前自己的commit信息</span></span><br><span class=\"line\">~/1mu(1803) » tail -n 2 .git/logs/refs/heads/1803</span><br><span class=\"line\"></span><br><span class=\"line\">9ac273e691830844014b1f1ff85e071bd5c061a2 54ac2f761953dcd0af684b781513472acf553719 xzh &lt;zihao.xu@1mu.club&gt; 1538212290 +0800\tcommit: 改变作品的数据结构</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 回到你想回到的分支上</span></span><br><span class=\"line\">~/1mu(1803) » git update-ref HEAD 54ac2f761953dcd0af684b781513472acf553719</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">error: 9353160448a191e0b2cf58dc4c6d7562df0a1e97: invalid sha1 pointer in cache-tree</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br></pre></td></tr></table></figure>\n<p>到这步基本上就已经解决了。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » rm .git/index                </span><br><span class=\"line\">~/1mu(1803*) » git reset</span><br><span class=\"line\"></span><br><span class=\"line\">重置后取消暂存的变更：</span><br><span class=\"line\">M\tinterface/www/cms2/index.html</span><br><span class=\"line\">M\tinterface/www/cms2/package.json</span><br><span class=\"line\">M\tinterface/www/cms2/webpack.common.js</span><br><span class=\"line\"></span><br><span class=\"line\">~/1mu(1803*) » git status                                                                                                                                                                   xuzihao@xuzihao</span><br><span class=\"line\">位于分支 1803</span><br><span class=\"line\">您的分支领先 ‘origin/1803' 共 2 个提交。</span><br><span class=\"line\">  （使用 “git push\" 来发布您的本地提交）</span><br><span class=\"line\"></span><br><span class=\"line\">尚未暂存以备提交的变更：</span><br><span class=\"line\">  （使用 “git add &lt;文件&gt;...\" 更新要提交的内容）</span><br><span class=\"line\">  （使用 “git checkout -- &lt;文件&gt;...\" 丢弃工作区的改动）</span><br><span class=\"line\"></span><br><span class=\"line\">\t修改：     interface/www/cms2/index.html</span><br><span class=\"line\">\t修改：     interface/www/cms2/package.json</span><br><span class=\"line\">\t修改：     interface/www/cms2/webpack.common.js</span><br><span class=\"line\"></span><br><span class=\"line\">修改尚未加入提交（使用 “git add\" 和/或 \"git commit -a\"）</span><br></pre></td></tr></table></figure></p>\n<p>为了放心再次检查下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~/1mu(1803*) » git fsck —full                                                                                                                                                              xuzihao@xuzihao</span><br><span class=\"line\">检查对象目录中: 100% (256/256), 完成.</span><br><span class=\"line\">检查对象中: 100% (26504/26504), 完成.</span><br><span class=\"line\">dangling blob 8d24466fd1c78e4210ae30e2281cd15c85162e86</span><br><span class=\"line\">dangling blob 332b8381fc34238dca0a0d181edb679f5c4abfa9</span><br><span class=\"line\">dangling blob 2d32a2045e6e9e2c9eac5e94fc7d4105b2fe7bbf</span><br><span class=\"line\">dangling blob 3e408a4fc423ba3d78d4c9a526f70a12ce749c4a</span><br><span class=\"line\">dangling blob de48ce55778be6f22e31d00e7afbed7c7cbc9b20</span><br><span class=\"line\">dangling blob 1a58a089bf85e7115cdda86009c977f9a664844e</span><br><span class=\"line\">dangling blob d55912305163fe7e28e08ead530e50097da2add7</span><br><span class=\"line\">dangling blob 05692eae84da1c4d0882b7b9b681eb41dc61dece</span><br><span class=\"line\">dangling blob 5f69a32eaf9a72ef072e113c60f862acd1a6333c</span><br><span class=\"line\">dangling blob fb69932afa1ec8b6ec09a9131f63422cfec664b7</span><br><span class=\"line\">dangling blob 66706adb33fb8f5365c42e463f399cde6202c675</span><br><span class=\"line\">dangling blob ac99430374779d69a69eba7e0def4c2ceb234eec</span><br><span class=\"line\">dangling blob 63a40e7b1b19c1a148c2ec34de0804dbaec96ff5</span><br><span class=\"line\">dangling blob a4e4e0a5ccb89ecc38b2339b84e84b577228f60d</span><br><span class=\"line\">dangling blob 3fe6af5f741e750da67d9f47dc54310969826429</span><br><span class=\"line\">dangling blob b0e76a232b70b823379a1cfae36dbf443e46fa6e</span><br></pre></td></tr></table></figure>"},{"title":"Kaldi语音识别初用","date":"2018-02-04T06:50:32.416Z","comments":1,"layout":"post","_content":"# Kaldi启用\n\n## INSTALL\n\n1. 在 tools/ 下跑 extras/check_dependencies.sh\n    1. 然后跑make\n2. 之后在 src/ 下跑 ./configure --shared 在跑这句命令之前一定要先执行第一条\n    1. make depend\n    2. make\n<!--more-->\n### 细节\n\n#### 修改路径\n\n设置n = 4\n\n在kaldi/egs 下跑 `vi thchs30/s5/run.sh` \n\n\n`thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr`\n\n\n然后修改/thchs30/s5/cmd.sh为本地跑：\n\n```shell\nexport train_cms = run.pl\nexport decode_cmd = run.pl\nexport mkgraph_cmd = run.pl\nexport cuda_cmd = run.pl\n​````\n\n运行：\n\ncd到s5目录下去跑\n\n`sudo ./run.sh`\n\n静候佳音\n\n## 识别自己的wav\n\n之后我们来到`tools/`下，去安装`./install_portaudio.sh`。\n\n等安装完毕后我们到`src/`下，去 `make ext`去编译扩展程序。\n\n## 找例子\n\n万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。\n\n之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把`s5/exp/tri1`下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到`online-data/models/tri1`下。\n\n然后把`s5/exp/tri/graph_word`里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到`online-data/models/tri1`下。\n\n## 运行例子\n\n我们在online_demo下`vi run.sh`。\n\n之后我们把以下注释掉:\n\n​```shell\nif [ ! -s ${data_file}.tar.bz2 ]; then\n    echo \"Downloading test models and data ...\"\n    wget -T 10 -t 3 $data_url;\n    if [ ! -s ${data_file}.tar.bz2 ]; then\n        echo \"Download of $data_file has failed!\"\n        exit 1\n    fi\nfi\n```\n\n然后在找到下面这句将其路径改成tri1:\n\n```shell\nac_model_type=tri1\n```\n\n然后把下面的也改了注意看`online-wav-gmm-decode-faster`就行了：\n\n```shell\nonline-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\\\n--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \\\nscp:$decode_dir/input.scp $ac_model/final.mdl\n```\n\n## 运行\n\n然后我们直接在online_demo下`./run.sh`\n\n","source":"_posts/kaldi文档.md","raw":"---\ntitle: Kaldi语音识别初用\ndate: 2018-02-04 14：52\ncomments: true\nlayout: post\ntags: [机器学习]\ncategories: 机器学习\n---\n# Kaldi启用\n\n## INSTALL\n\n1. 在 tools/ 下跑 extras/check_dependencies.sh\n    1. 然后跑make\n2. 之后在 src/ 下跑 ./configure --shared 在跑这句命令之前一定要先执行第一条\n    1. make depend\n    2. make\n<!--more-->\n### 细节\n\n#### 修改路径\n\n设置n = 4\n\n在kaldi/egs 下跑 `vi thchs30/s5/run.sh` \n\n\n`thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr`\n\n\n然后修改/thchs30/s5/cmd.sh为本地跑：\n\n```shell\nexport train_cms = run.pl\nexport decode_cmd = run.pl\nexport mkgraph_cmd = run.pl\nexport cuda_cmd = run.pl\n​````\n\n运行：\n\ncd到s5目录下去跑\n\n`sudo ./run.sh`\n\n静候佳音\n\n## 识别自己的wav\n\n之后我们来到`tools/`下，去安装`./install_portaudio.sh`。\n\n等安装完毕后我们到`src/`下，去 `make ext`去编译扩展程序。\n\n## 找例子\n\n万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。\n\n之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把`s5/exp/tri1`下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到`online-data/models/tri1`下。\n\n然后把`s5/exp/tri/graph_word`里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到`online-data/models/tri1`下。\n\n## 运行例子\n\n我们在online_demo下`vi run.sh`。\n\n之后我们把以下注释掉:\n\n​```shell\nif [ ! -s ${data_file}.tar.bz2 ]; then\n    echo \"Downloading test models and data ...\"\n    wget -T 10 -t 3 $data_url;\n    if [ ! -s ${data_file}.tar.bz2 ]; then\n        echo \"Download of $data_file has failed!\"\n        exit 1\n    fi\nfi\n```\n\n然后在找到下面这句将其路径改成tri1:\n\n```shell\nac_model_type=tri1\n```\n\n然后把下面的也改了注意看`online-wav-gmm-decode-faster`就行了：\n\n```shell\nonline-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\\\n--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \\\nscp:$decode_dir/input.scp $ac_model/final.mdl\n```\n\n## 运行\n\n然后我们直接在online_demo下`./run.sh`\n\n","slug":"kaldi文档","published":1,"updated":"2018-02-04T06:52:51.820Z","photos":[],"link":"","_id":"cjollnbtn0061unfyhnza7hbm","content":"<h1 id=\"Kaldi启用\"><a href=\"#Kaldi启用\" class=\"headerlink\" title=\"Kaldi启用\"></a>Kaldi启用</h1><h2 id=\"INSTALL\"><a href=\"#INSTALL\" class=\"headerlink\" title=\"INSTALL\"></a>INSTALL</h2><ol>\n<li>在 tools/ 下跑 extras/check_dependencies.sh<ol>\n<li>然后跑make</li>\n</ol>\n</li>\n<li>之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条<ol>\n<li>make depend</li>\n<li>make<a id=\"more\"></a>\n<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"修改路径\"><a href=\"#修改路径\" class=\"headerlink\" title=\"修改路径\"></a>修改路径</h4><p>设置n = 4</p>\n<p>在kaldi/egs 下跑 <code>vi thchs30/s5/run.sh</code> </p>\n<p><code>thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr</code></p>\n<p>然后修改/thchs30/s5/cmd.sh为本地跑：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export train_cms = run.pl</span><br><span class=\"line\">export decode_cmd = run.pl</span><br><span class=\"line\">export mkgraph_cmd = run.pl</span><br><span class=\"line\">export cuda_cmd = run.pl</span><br><span class=\"line\">​`</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<p>cd到s5目录下去跑</p>\n<p><code>sudo ./run.sh</code></p>\n<p>静候佳音</p>\n<h2 id=\"识别自己的wav\"><a href=\"#识别自己的wav\" class=\"headerlink\" title=\"识别自己的wav\"></a>识别自己的wav</h2><p>之后我们来到<code>tools/</code>下，去安装<code>./install_portaudio.sh</code>。</p>\n<p>等安装完毕后我们到<code>src/</code>下，去 <code>make ext</code>去编译扩展程序。</p>\n<h2 id=\"找例子\"><a href=\"#找例子\" class=\"headerlink\" title=\"找例子\"></a>找例子</h2><p>万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。</p>\n<p>之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把<code>s5/exp/tri1</code>下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到<code>online-data/models/tri1</code>下。</p>\n<p>然后把<code>s5/exp/tri/graph_word</code>里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到<code>online-data/models/tri1</code>下。</p>\n<h2 id=\"运行例子\"><a href=\"#运行例子\" class=\"headerlink\" title=\"运行例子\"></a>运行例子</h2><p>我们在online_demo下<code>vi run.sh</code>。</p>\n<p>之后我们把以下注释掉:</p>\n<p>​<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</span><br><span class=\"line\">    echo \"Downloading test models and data ...\"</span><br><span class=\"line\">    wget -T 10 -t 3 $data_url;</span><br><span class=\"line\">    if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</span><br><span class=\"line\">        echo \"Download of $data_file has failed!\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>然后在找到下面这句将其路径改成tri1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ac_model_type=tri1</span><br></pre></td></tr></table></figure>\n<p>然后把下面的也改了注意看<code>online-wav-gmm-decode-faster</code>就行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">online-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\\</span><br><span class=\"line\">--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \\</span><br><span class=\"line\">scp:$decode_dir/input.scp $ac_model/final.mdl</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>然后我们直接在online_demo下<code>./run.sh</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Kaldi启用\"><a href=\"#Kaldi启用\" class=\"headerlink\" title=\"Kaldi启用\"></a>Kaldi启用</h1><h2 id=\"INSTALL\"><a href=\"#INSTALL\" class=\"headerlink\" title=\"INSTALL\"></a>INSTALL</h2><ol>\n<li>在 tools/ 下跑 extras/check_dependencies.sh<ol>\n<li>然后跑make</li>\n</ol>\n</li>\n<li>之后在 src/ 下跑 ./configure –shared 在跑这句命令之前一定要先执行第一条<ol>\n<li>make depend</li>\n<li>make","more":"<h3 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h3></li>\n</ol>\n</li>\n</ol>\n<h4 id=\"修改路径\"><a href=\"#修改路径\" class=\"headerlink\" title=\"修改路径\"></a>修改路径</h4><p>设置n = 4</p>\n<p>在kaldi/egs 下跑 <code>vi thchs30/s5/run.sh</code> </p>\n<p><code>thchs=/home/xuzihao/kaldi/egs/thchs30/thchs30-openslr</code></p>\n<p>然后修改/thchs30/s5/cmd.sh为本地跑：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export train_cms = run.pl</span><br><span class=\"line\">export decode_cmd = run.pl</span><br><span class=\"line\">export mkgraph_cmd = run.pl</span><br><span class=\"line\">export cuda_cmd = run.pl</span><br><span class=\"line\">​`</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<p>cd到s5目录下去跑</p>\n<p><code>sudo ./run.sh</code></p>\n<p>静候佳音</p>\n<h2 id=\"识别自己的wav\"><a href=\"#识别自己的wav\" class=\"headerlink\" title=\"识别自己的wav\"></a>识别自己的wav</h2><p>之后我们来到<code>tools/</code>下，去安装<code>./install_portaudio.sh</code>。</p>\n<p>等安装完毕后我们到<code>src/</code>下，去 <code>make ext</code>去编译扩展程序。</p>\n<h2 id=\"找例子\"><a href=\"#找例子\" class=\"headerlink\" title=\"找例子\"></a>找例子</h2><p>万事具备，然后我们到egs下，打开voxforge文件夹，去把里面online_demo文件夹直接拷到thchs30下，之后我们在online_demo里建2个文件夹,一个为online-data，一个为work。</p>\n<p>之后我们在online-data下建两个文件夹分别为audio和models。audio下放你的wav文件，models建一个名为tri1的文件夹，之后我们把<code>s5/exp/tri1</code>下的final.mdl和35.mdl(这是final.mdl的快捷方式)拷到<code>online-data/models/tri1</code>下。</p>\n<p>然后把<code>s5/exp/tri/graph_word</code>里面的words.txt和HCLG.fst文件(如果你没有这两文件，说明你还没把模型训练好)拷到<code>online-data/models/tri1</code>下。</p>\n<h2 id=\"运行例子\"><a href=\"#运行例子\" class=\"headerlink\" title=\"运行例子\"></a>运行例子</h2><p>我们在online_demo下<code>vi run.sh</code>。</p>\n<p>之后我们把以下注释掉:</p>\n<p>​<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</span><br><span class=\"line\">    echo \"Downloading test models and data ...\"</span><br><span class=\"line\">    wget -T 10 -t 3 $data_url;</span><br><span class=\"line\">    if [ ! -s $&#123;data_file&#125;.tar.bz2 ]; then</span><br><span class=\"line\">        echo \"Download of $data_file has failed!\"</span><br><span class=\"line\">        exit 1</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>然后在找到下面这句将其路径改成tri1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ac_model_type=tri1</span><br></pre></td></tr></table></figure>\n<p>然后把下面的也改了注意看<code>online-wav-gmm-decode-faster</code>就行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">online-wav-gmm-decode-faster --verbose=1 --rt-min=0.8 --rt-max=0.85\\</span><br><span class=\"line\">--max-active=4000 --beam=12.0 --acoustic-scale=0.0769 \\</span><br><span class=\"line\">scp:$decode_dir/input.scp $ac_model/final.mdl</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>然后我们直接在online_demo下<code>./run.sh</code></p>"},{"title":"Mac通过ssh连接ecs","date":"2018-03-26T13:55:10.689Z","comments":1,"layout":"post","_content":"\n通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。\n\n<!--more-->\n\n那不说多的直接进入正题。\n\n起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png)\n\n它居然说！！！\n\nTimed out!!\n\n这是Why！！\n\n之后帮助中心走了一遭，发现原来我是安全组没配置。。\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png)\n\n然后我们点击安全组配置。\n\n之后进入重点！\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png)\n\n我们在出和入都配置一样的设置。\n\n然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png)","source":"_posts/mac连接ssh.md","raw":"---\ntitle: Mac通过ssh连接ecs\ndate: 2018-03-23 20：56\ncomments: true\nlayout: post\ntags: [Linux]\ncategories: 阿里云服务的使用\n---\n\n通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。\n\n<!--more-->\n\n那不说多的直接进入正题。\n\n起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png)\n\n它居然说！！！\n\nTimed out!!\n\n这是Why！！\n\n之后帮助中心走了一遭，发现原来我是安全组没配置。。\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png)\n\n然后我们点击安全组配置。\n\n之后进入重点！\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png)\n\n我们在出和入都配置一样的设置。\n\n然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png)","slug":"mac连接ssh","published":1,"updated":"2018-03-26T14:09:56.264Z","photos":[],"link":"","_id":"cjollnbtr0065unfy8goihiu3","content":"<p>通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。</p>\n<a id=\"more\"></a>\n<p>那不说多的直接进入正题。</p>\n<p>起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png\" alt=\"\"></p>\n<p>它居然说！！！</p>\n<p>Timed out!!</p>\n<p>这是Why！！</p>\n<p>之后帮助中心走了一遭，发现原来我是安全组没配置。。</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png\" alt=\"\"></p>\n<p>然后我们点击安全组配置。</p>\n<p>之后进入重点！</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png\" alt=\"\"></p>\n<p>我们在出和入都配置一样的设置。</p>\n<p>然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>通过学生优惠买了半年的阿里云服务器ecs！好便宜啊。。想想马上就毕业了，甚至有点小可惜不能时间长点享受优惠。。</p>","more":"<p>那不说多的直接进入正题。</p>\n<p>起初通过阿里云控制台进行远程控制自己买的云服务器。。总是感觉在网页端操作终端有点变扭，就准备用tmux直接通过ssh连接我自己的云服务器。</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ecs%E6%8A%A5%E9%94%99.png\" alt=\"\"></p>\n<p>它居然说！！！</p>\n<p>Timed out!!</p>\n<p>这是Why！！</p>\n<p>之后帮助中心走了一遭，发现原来我是安全组没配置。。</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9B%B4%E5%A4%9A.png\" alt=\"\"></p>\n<p>然后我们点击安全组配置。</p>\n<p>之后进入重点！</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E9%98%BF%E9%87%8C%E4%BA%91ces%E5%87%BA%E5%85%A5.png\" alt=\"\"></p>\n<p>我们在出和入都配置一样的设置。</p>\n<p>然后我们就可以愉快的去终端里通过ssh连接我们的云服务器啦~</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/ssh%E5%89%AF%E6%9C%AC.png\" alt=\"\"></p>"},{"title":"Mongodb之旅(一)","date":"2017-07-27T13:18:35.000Z","comments":1,"layout":"post","_content":"\n# Mongodb之旅(一)\n\n## 插入,insertOne/Many\n\n### insertOne( )\n\n```\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n)\n```\n\n<!--more-->\n\n### insertMany([ ])\n\n```\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n   { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n])\n```\n\n\n\n## 查找,find\n\n### find( )\n\n```\ndb.inventory.find( {} )\n```\n\n\n\n## 更新,updateOne/Many\n\n### $set\n\n```mongodb\ndb.memberplan.update(\n\n{_id:\"xxx\"},\n\n{$set:\n\n{tags:[\"coats\",\"outerwear\"]}\n\n})\n```\n\n###  $currentDate,当前时间\n\n```\ndb.inventory.updateOne(\n   { item: \"paper\" },\n   {\n\t $set: { \"size.uom\": \"cm\", status: \"P\" },\n\t $currentDate: { lastModified: true }\n   }\n)\n\n```\n\n### updateMany\n\n```\ndb.inventory.updateMany(\n   { \"qty\": { $lt: 50 } },\n   {\n     $set: { \"size.uom\": \"in\", status: \"P\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```\n\n\n\n","source":"_posts/mongodb.md","raw":"---\ntitle: Mongodb之旅(一)\ndate: 2017-07-27 21：19\ncomments: true\nlayout: post\ntags: [Mongodb,数据库]\ncategories: [数据库,Mongodb]\n---\n\n# Mongodb之旅(一)\n\n## 插入,insertOne/Many\n\n### insertOne( )\n\n```\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n)\n```\n\n<!--more-->\n\n### insertMany([ ])\n\n```\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n   { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n])\n```\n\n\n\n## 查找,find\n\n### find( )\n\n```\ndb.inventory.find( {} )\n```\n\n\n\n## 更新,updateOne/Many\n\n### $set\n\n```mongodb\ndb.memberplan.update(\n\n{_id:\"xxx\"},\n\n{$set:\n\n{tags:[\"coats\",\"outerwear\"]}\n\n})\n```\n\n###  $currentDate,当前时间\n\n```\ndb.inventory.updateOne(\n   { item: \"paper\" },\n   {\n\t $set: { \"size.uom\": \"cm\", status: \"P\" },\n\t $currentDate: { lastModified: true }\n   }\n)\n\n```\n\n### updateMany\n\n```\ndb.inventory.updateMany(\n   { \"qty\": { $lt: 50 } },\n   {\n     $set: { \"size.uom\": \"in\", status: \"P\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```\n\n\n\n","slug":"mongodb","published":1,"updated":"2017-12-04T07:31:34.342Z","photos":[],"link":"","_id":"cjollnbtt0069unfyl9djuzqi","content":"<h1 id=\"Mongodb之旅-一\"><a href=\"#Mongodb之旅-一\" class=\"headerlink\" title=\"Mongodb之旅(一)\"></a>Mongodb之旅(一)</h1><h2 id=\"插入-insertOne-Many\"><a href=\"#插入-insertOne-Many\" class=\"headerlink\" title=\"插入,insertOne/Many\"></a>插入,insertOne/Many</h2><h3 id=\"insertOne\"><a href=\"#insertOne\" class=\"headerlink\" title=\"insertOne( )\"></a>insertOne( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertOne(</span><br><span class=\"line\">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"insertMany\"><a href=\"#insertMany\" class=\"headerlink\" title=\"insertMany([ ])\"></a>insertMany([ ])</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertMany([</span><br><span class=\"line\">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class=\"line\">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class=\"line\">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h2 id=\"查找-find\"><a href=\"#查找-find\" class=\"headerlink\" title=\"查找,find\"></a>查找,find</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.find( &#123;&#125; )</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新-updateOne-Many\"><a href=\"#更新-updateOne-Many\" class=\"headerlink\" title=\"更新,updateOne/Many\"></a>更新,updateOne/Many</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.memberplan.update(</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;_id:&quot;xxx&quot;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;$set:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;tags:[&quot;coats&quot;,&quot;outerwear&quot;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"currentDate-当前时间\"><a href=\"#currentDate-当前时间\" class=\"headerlink\" title=\"$currentDate,当前时间\"></a>$currentDate,当前时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.updateOne(</span><br><span class=\"line\">   &#123; item: &quot;paper&quot; &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">\t $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;,</span><br><span class=\"line\">\t $currentDate: &#123; lastModified: true &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.updateMany(</span><br><span class=\"line\">   &#123; &quot;qty&quot;: &#123; $lt: 50 &#125; &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;,</span><br><span class=\"line\">     $currentDate: &#123; lastModified: true &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mongodb之旅-一\"><a href=\"#Mongodb之旅-一\" class=\"headerlink\" title=\"Mongodb之旅(一)\"></a>Mongodb之旅(一)</h1><h2 id=\"插入-insertOne-Many\"><a href=\"#插入-insertOne-Many\" class=\"headerlink\" title=\"插入,insertOne/Many\"></a>插入,insertOne/Many</h2><h3 id=\"insertOne\"><a href=\"#insertOne\" class=\"headerlink\" title=\"insertOne( )\"></a>insertOne( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertOne(</span><br><span class=\"line\">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"insertMany\"><a href=\"#insertMany\" class=\"headerlink\" title=\"insertMany([ ])\"></a>insertMany([ ])</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.insertMany([</span><br><span class=\"line\">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class=\"line\">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</span><br><span class=\"line\">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<h2 id=\"查找-find\"><a href=\"#查找-find\" class=\"headerlink\" title=\"查找,find\"></a>查找,find</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.find( &#123;&#125; )</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新-updateOne-Many\"><a href=\"#更新-updateOne-Many\" class=\"headerlink\" title=\"更新,updateOne/Many\"></a>更新,updateOne/Many</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.memberplan.update(</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;_id:&quot;xxx&quot;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;$set:</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;tags:[&quot;coats&quot;,&quot;outerwear&quot;]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"currentDate-当前时间\"><a href=\"#currentDate-当前时间\" class=\"headerlink\" title=\"$currentDate,当前时间\"></a>$currentDate,当前时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.updateOne(</span><br><span class=\"line\">   &#123; item: &quot;paper&quot; &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">\t $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;,</span><br><span class=\"line\">\t $currentDate: &#123; lastModified: true &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.inventory.updateMany(</span><br><span class=\"line\">   &#123; &quot;qty&quot;: &#123; $lt: 50 &#125; &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;,</span><br><span class=\"line\">     $currentDate: &#123; lastModified: true &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>"},{"title":"React-Redux和Redux","date":"2017-07-31T01:18:26.000Z","comments":1,"layout":"post","_content":"\nreact无法让两个组件互相交流，使用对方数据。\n\n# Redux\n\n- 需要回调通知state（等同于回调参数）->action\n- 需要根据回调处理（等同于父级方法） ->reducer\n- 需要state(等同于总状态) ->store\n\n现在您只需要记住 `reducer` 是一个函数，负责更新并返回一个新的`state`\n\n而 `initialState` 主要用于前后端同构的数据同步\n\n<!--more-->\n\n## Action\n\n- 是把数据从应用传到store的有效载荷。\n- 是store数据的唯一来源\n- 描述发生了什么的普通对象\n- 也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。\n\n## Store\n\n- Redux应用中只有一个单一的store\n- 维持应用的state\n- 提供 getState() 获取state\n- 提供dispatch() 更新state\n- 通过subscribe(listener) 注册监听器\n- 通过subscribe(listener) 返回的函数注销监听器.\n- 会把2个参数传入reducer：当前的state树和action。\n\n## Reducer\n\n## Reducer\n\nreducer就是实现(state,action) -> newState的纯函数. 也就是真正处理state的地方.\n\nRedux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.\n\n- **永远不要**在 reducer 里做这些操作：\n  - 修改传入参数；\n  - 执行有副作用的操作，如 API 请求和路由跳转；\n  - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n- 指明根据action更新state。\n\n\n\n通俗点讲，就是 `reducer` 返回啥，`state` 就被替换成啥\n\n- view(React)\n- store(state)\n- action\n- reducer\n\n\n- view(React) = 家具的摆放在视觉的效果上\n- store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)\n- action = 小明分配任务(谁应该干什么)\n- reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)\n\n所以这个过程应该是这样的：\n\n**view ---> action ---> reducer ---> store(state) ---> view**\n\n\n\n# React-Redux\n\n1. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n\n2. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n\n3. mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。\n\n   做好以上流程Redux和React就可以工作了。简单地说就是：\n\n   ​\n\n   1.顶层分发状态，让React组件被动地渲染。\n\n   ​\n\n   2.监听事件，事件有权利回到所有状态顶层影响状态。\n\n# Redux 与传统后端 MVC 的对照\n\n| Redux                         | 传统后端 MVC                           |\n| ----------------------------- | ---------------------------------- |\n| `store`                       | 数据库实例                              |\n| `state`                       | 数据库中存储的数据                          |\n| `dispatch(action)`            | 用户发起请求                             |\n| `action: { type, payload }`   | `type` 表示请求的 URL，`payload` 表示请求的数据 |\n| `reducer`                     | 路由 + 控制器（handler）                  |\n| `reducer` 中的 `switch-case` 分支 | 路由，根据 `action.type` 路由到对应的控制器      |\n| `reducer` 内部对 `state` 的处理     | 控制器对数据库进行增删改操作                     |\n| `reducer` 返回 `nextState`      | 将修改后的记录写回数据库                       |\n\n\n\n# 总结\n\n## redux 三个基本原则\n\n1. 整个应用只有唯一一个 Store 实例\n2. State 只能通过触发 Action 来更改\n3. State 的更改 必须写成纯函数(Reducer)，(oldState, action) => newState，也就是每次更改总是返回一个新的 State\n\n## redux 两个显著的特点\n\n1. 可预测性（Reducer 是纯函数）。\n2. 扩展性强（middleware）。\n\n\n## reducer 可以根据场景分为以下几种:\n\n- root reducer :根reducer ,作为createStore的第一个参数\n- slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.\n- higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.\n- case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.\n\n## reducer 的最佳实践主要分为以下几个部分\n\n- 抽离工具函数,以便复用.\n- 抽离功能函数(case function),精简reducer声明部分的代码\n- 根据数据类别拆分,维护多个独立的slice reducer.\n- 合并slice reducer.\n- 通过crossReducer在多个slice reducer中共享数据.\n- 减少reducer的模板代码.","source":"_posts/redux.md","raw":"---\ntitle: React-Redux和Redux\ndate: 2017-07-31 09:18:26\ncomments: true\nlayout: post\ntags: [JavaScript,React]\ncategories: React\n---\n\nreact无法让两个组件互相交流，使用对方数据。\n\n# Redux\n\n- 需要回调通知state（等同于回调参数）->action\n- 需要根据回调处理（等同于父级方法） ->reducer\n- 需要state(等同于总状态) ->store\n\n现在您只需要记住 `reducer` 是一个函数，负责更新并返回一个新的`state`\n\n而 `initialState` 主要用于前后端同构的数据同步\n\n<!--more-->\n\n## Action\n\n- 是把数据从应用传到store的有效载荷。\n- 是store数据的唯一来源\n- 描述发生了什么的普通对象\n- 也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。\n\n## Store\n\n- Redux应用中只有一个单一的store\n- 维持应用的state\n- 提供 getState() 获取state\n- 提供dispatch() 更新state\n- 通过subscribe(listener) 注册监听器\n- 通过subscribe(listener) 返回的函数注销监听器.\n- 会把2个参数传入reducer：当前的state树和action。\n\n## Reducer\n\n## Reducer\n\nreducer就是实现(state,action) -> newState的纯函数. 也就是真正处理state的地方.\n\nRedux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.\n\n- **永远不要**在 reducer 里做这些操作：\n  - 修改传入参数；\n  - 执行有副作用的操作，如 API 请求和路由跳转；\n  - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n- 指明根据action更新state。\n\n\n\n通俗点讲，就是 `reducer` 返回啥，`state` 就被替换成啥\n\n- view(React)\n- store(state)\n- action\n- reducer\n\n\n- view(React) = 家具的摆放在视觉的效果上\n- store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)\n- action = 小明分配任务(谁应该干什么)\n- reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)\n\n所以这个过程应该是这样的：\n\n**view ---> action ---> reducer ---> store(state) ---> view**\n\n\n\n# React-Redux\n\n1. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n\n2. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n\n3. mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。\n\n   做好以上流程Redux和React就可以工作了。简单地说就是：\n\n   ​\n\n   1.顶层分发状态，让React组件被动地渲染。\n\n   ​\n\n   2.监听事件，事件有权利回到所有状态顶层影响状态。\n\n# Redux 与传统后端 MVC 的对照\n\n| Redux                         | 传统后端 MVC                           |\n| ----------------------------- | ---------------------------------- |\n| `store`                       | 数据库实例                              |\n| `state`                       | 数据库中存储的数据                          |\n| `dispatch(action)`            | 用户发起请求                             |\n| `action: { type, payload }`   | `type` 表示请求的 URL，`payload` 表示请求的数据 |\n| `reducer`                     | 路由 + 控制器（handler）                  |\n| `reducer` 中的 `switch-case` 分支 | 路由，根据 `action.type` 路由到对应的控制器      |\n| `reducer` 内部对 `state` 的处理     | 控制器对数据库进行增删改操作                     |\n| `reducer` 返回 `nextState`      | 将修改后的记录写回数据库                       |\n\n\n\n# 总结\n\n## redux 三个基本原则\n\n1. 整个应用只有唯一一个 Store 实例\n2. State 只能通过触发 Action 来更改\n3. State 的更改 必须写成纯函数(Reducer)，(oldState, action) => newState，也就是每次更改总是返回一个新的 State\n\n## redux 两个显著的特点\n\n1. 可预测性（Reducer 是纯函数）。\n2. 扩展性强（middleware）。\n\n\n## reducer 可以根据场景分为以下几种:\n\n- root reducer :根reducer ,作为createStore的第一个参数\n- slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.\n- higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.\n- case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.\n\n## reducer 的最佳实践主要分为以下几个部分\n\n- 抽离工具函数,以便复用.\n- 抽离功能函数(case function),精简reducer声明部分的代码\n- 根据数据类别拆分,维护多个独立的slice reducer.\n- 合并slice reducer.\n- 通过crossReducer在多个slice reducer中共享数据.\n- 减少reducer的模板代码.","slug":"redux","published":1,"updated":"2017-11-09T14:43:10.000Z","photos":[],"link":"","_id":"cjollnbtu006cunfy8dycqrjb","content":"<p>react无法让两个组件互相交流，使用对方数据。</p>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><ul>\n<li>需要回调通知state（等同于回调参数）-&gt;action</li>\n<li>需要根据回调处理（等同于父级方法） -&gt;reducer</li>\n<li>需要state(等同于总状态) -&gt;store</li>\n</ul>\n<p>现在您只需要记住 <code>reducer</code> 是一个函数，负责更新并返回一个新的<code>state</code></p>\n<p>而 <code>initialState</code> 主要用于前后端同构的数据同步</p>\n<a id=\"more\"></a>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>是把数据从应用传到store的有效载荷。</li>\n<li>是store数据的唯一来源</li>\n<li>描述发生了什么的普通对象</li>\n<li>也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。</li>\n</ul>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><ul>\n<li>Redux应用中只有一个单一的store</li>\n<li>维持应用的state</li>\n<li>提供 getState() 获取state</li>\n<li>提供dispatch() 更新state</li>\n<li>通过subscribe(listener) 注册监听器</li>\n<li>通过subscribe(listener) 返回的函数注销监听器.</li>\n<li>会把2个参数传入reducer：当前的state树和action。</li>\n</ul>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><h2 id=\"Reducer-1\"><a href=\"#Reducer-1\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><p>reducer就是实现(state,action) -&gt; newState的纯函数. 也就是真正处理state的地方.</p>\n<p>Redux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.</p>\n<ul>\n<li><strong>永远不要</strong>在 reducer 里做这些操作：<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n</li>\n<li>指明根据action更新state。</li>\n</ul>\n<p>通俗点讲，就是 <code>reducer</code> 返回啥，<code>state</code> 就被替换成啥</p>\n<ul>\n<li>view(React)</li>\n<li>store(state)</li>\n<li>action</li>\n<li>reducer</li>\n</ul>\n<ul>\n<li>view(React) = 家具的摆放在视觉的效果上</li>\n<li>store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)</li>\n<li>action = 小明分配任务(谁应该干什么)</li>\n<li>reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)</li>\n</ul>\n<p>所以这个过程应该是这样的：</p>\n<p><strong>view —&gt; action —&gt; reducer —&gt; store(state) —&gt; view</strong></p>\n<h1 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h1><ol>\n<li><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。</p>\n</li>\n<li><p>connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</p>\n</li>\n<li><p>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。</p>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：</p>\n<p>​</p>\n<p>1.顶层分发状态，让React组件被动地渲染。</p>\n<p>​</p>\n<p>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>\n</li>\n</ol>\n<h1 id=\"Redux-与传统后端-MVC-的对照\"><a href=\"#Redux-与传统后端-MVC-的对照\" class=\"headerlink\" title=\"Redux 与传统后端 MVC 的对照\"></a>Redux 与传统后端 MVC 的对照</h1><table>\n<thead>\n<tr>\n<th>Redux</th>\n<th>传统后端 MVC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>store</code></td>\n<td>数据库实例</td>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>数据库中存储的数据</td>\n</tr>\n<tr>\n<td><code>dispatch(action)</code></td>\n<td>用户发起请求</td>\n</tr>\n<tr>\n<td><code>action: { type, payload }</code></td>\n<td><code>type</code> 表示请求的 URL，<code>payload</code> 表示请求的数据</td>\n</tr>\n<tr>\n<td><code>reducer</code></td>\n<td>路由 + 控制器（handler）</td>\n</tr>\n<tr>\n<td><code>reducer</code> 中的 <code>switch-case</code> 分支</td>\n<td>路由，根据 <code>action.type</code> 路由到对应的控制器</td>\n</tr>\n<tr>\n<td><code>reducer</code> 内部对 <code>state</code> 的处理</td>\n<td>控制器对数据库进行增删改操作</td>\n</tr>\n<tr>\n<td><code>reducer</code> 返回 <code>nextState</code></td>\n<td>将修改后的记录写回数据库</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"redux-三个基本原则\"><a href=\"#redux-三个基本原则\" class=\"headerlink\" title=\"redux 三个基本原则\"></a>redux 三个基本原则</h2><ol>\n<li>整个应用只有唯一一个 Store 实例</li>\n<li>State 只能通过触发 Action 来更改</li>\n<li>State 的更改 必须写成纯函数(Reducer)，(oldState, action) =&gt; newState，也就是每次更改总是返回一个新的 State</li>\n</ol>\n<h2 id=\"redux-两个显著的特点\"><a href=\"#redux-两个显著的特点\" class=\"headerlink\" title=\"redux 两个显著的特点\"></a>redux 两个显著的特点</h2><ol>\n<li>可预测性（Reducer 是纯函数）。</li>\n<li>扩展性强（middleware）。</li>\n</ol>\n<h2 id=\"reducer-可以根据场景分为以下几种\"><a href=\"#reducer-可以根据场景分为以下几种\" class=\"headerlink\" title=\"reducer 可以根据场景分为以下几种:\"></a>reducer 可以根据场景分为以下几种:</h2><ul>\n<li>root reducer :根reducer ,作为createStore的第一个参数</li>\n<li>slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.</li>\n<li>higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.</li>\n<li>case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.</li>\n</ul>\n<h2 id=\"reducer-的最佳实践主要分为以下几个部分\"><a href=\"#reducer-的最佳实践主要分为以下几个部分\" class=\"headerlink\" title=\"reducer 的最佳实践主要分为以下几个部分\"></a>reducer 的最佳实践主要分为以下几个部分</h2><ul>\n<li>抽离工具函数,以便复用.</li>\n<li>抽离功能函数(case function),精简reducer声明部分的代码</li>\n<li>根据数据类别拆分,维护多个独立的slice reducer.</li>\n<li>合并slice reducer.</li>\n<li>通过crossReducer在多个slice reducer中共享数据.</li>\n<li>减少reducer的模板代码.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>react无法让两个组件互相交流，使用对方数据。</p>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><ul>\n<li>需要回调通知state（等同于回调参数）-&gt;action</li>\n<li>需要根据回调处理（等同于父级方法） -&gt;reducer</li>\n<li>需要state(等同于总状态) -&gt;store</li>\n</ul>\n<p>现在您只需要记住 <code>reducer</code> 是一个函数，负责更新并返回一个新的<code>state</code></p>\n<p>而 <code>initialState</code> 主要用于前后端同构的数据同步</p>","more":"<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>是把数据从应用传到store的有效载荷。</li>\n<li>是store数据的唯一来源</li>\n<li>描述发生了什么的普通对象</li>\n<li>也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。</li>\n</ul>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><ul>\n<li>Redux应用中只有一个单一的store</li>\n<li>维持应用的state</li>\n<li>提供 getState() 获取state</li>\n<li>提供dispatch() 更新state</li>\n<li>通过subscribe(listener) 注册监听器</li>\n<li>通过subscribe(listener) 返回的函数注销监听器.</li>\n<li>会把2个参数传入reducer：当前的state树和action。</li>\n</ul>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><h2 id=\"Reducer-1\"><a href=\"#Reducer-1\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><p>reducer就是实现(state,action) -&gt; newState的纯函数. 也就是真正处理state的地方.</p>\n<p>Redux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.</p>\n<ul>\n<li><strong>永远不要</strong>在 reducer 里做这些操作：<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n</li>\n<li>指明根据action更新state。</li>\n</ul>\n<p>通俗点讲，就是 <code>reducer</code> 返回啥，<code>state</code> 就被替换成啥</p>\n<ul>\n<li>view(React)</li>\n<li>store(state)</li>\n<li>action</li>\n<li>reducer</li>\n</ul>\n<ul>\n<li>view(React) = 家具的摆放在视觉的效果上</li>\n<li>store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)</li>\n<li>action = 小明分配任务(谁应该干什么)</li>\n<li>reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)</li>\n</ul>\n<p>所以这个过程应该是这样的：</p>\n<p><strong>view —&gt; action —&gt; reducer —&gt; store(state) —&gt; view</strong></p>\n<h1 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h1><ol>\n<li><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。</p>\n</li>\n<li><p>connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</p>\n</li>\n<li><p>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。</p>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：</p>\n<p>​</p>\n<p>1.顶层分发状态，让React组件被动地渲染。</p>\n<p>​</p>\n<p>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>\n</li>\n</ol>\n<h1 id=\"Redux-与传统后端-MVC-的对照\"><a href=\"#Redux-与传统后端-MVC-的对照\" class=\"headerlink\" title=\"Redux 与传统后端 MVC 的对照\"></a>Redux 与传统后端 MVC 的对照</h1><table>\n<thead>\n<tr>\n<th>Redux</th>\n<th>传统后端 MVC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>store</code></td>\n<td>数据库实例</td>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>数据库中存储的数据</td>\n</tr>\n<tr>\n<td><code>dispatch(action)</code></td>\n<td>用户发起请求</td>\n</tr>\n<tr>\n<td><code>action: { type, payload }</code></td>\n<td><code>type</code> 表示请求的 URL，<code>payload</code> 表示请求的数据</td>\n</tr>\n<tr>\n<td><code>reducer</code></td>\n<td>路由 + 控制器（handler）</td>\n</tr>\n<tr>\n<td><code>reducer</code> 中的 <code>switch-case</code> 分支</td>\n<td>路由，根据 <code>action.type</code> 路由到对应的控制器</td>\n</tr>\n<tr>\n<td><code>reducer</code> 内部对 <code>state</code> 的处理</td>\n<td>控制器对数据库进行增删改操作</td>\n</tr>\n<tr>\n<td><code>reducer</code> 返回 <code>nextState</code></td>\n<td>将修改后的记录写回数据库</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"redux-三个基本原则\"><a href=\"#redux-三个基本原则\" class=\"headerlink\" title=\"redux 三个基本原则\"></a>redux 三个基本原则</h2><ol>\n<li>整个应用只有唯一一个 Store 实例</li>\n<li>State 只能通过触发 Action 来更改</li>\n<li>State 的更改 必须写成纯函数(Reducer)，(oldState, action) =&gt; newState，也就是每次更改总是返回一个新的 State</li>\n</ol>\n<h2 id=\"redux-两个显著的特点\"><a href=\"#redux-两个显著的特点\" class=\"headerlink\" title=\"redux 两个显著的特点\"></a>redux 两个显著的特点</h2><ol>\n<li>可预测性（Reducer 是纯函数）。</li>\n<li>扩展性强（middleware）。</li>\n</ol>\n<h2 id=\"reducer-可以根据场景分为以下几种\"><a href=\"#reducer-可以根据场景分为以下几种\" class=\"headerlink\" title=\"reducer 可以根据场景分为以下几种:\"></a>reducer 可以根据场景分为以下几种:</h2><ul>\n<li>root reducer :根reducer ,作为createStore的第一个参数</li>\n<li>slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.</li>\n<li>higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.</li>\n<li>case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.</li>\n</ul>\n<h2 id=\"reducer-的最佳实践主要分为以下几个部分\"><a href=\"#reducer-的最佳实践主要分为以下几个部分\" class=\"headerlink\" title=\"reducer 的最佳实践主要分为以下几个部分\"></a>reducer 的最佳实践主要分为以下几个部分</h2><ul>\n<li>抽离工具函数,以便复用.</li>\n<li>抽离功能函数(case function),精简reducer声明部分的代码</li>\n<li>根据数据类别拆分,维护多个独立的slice reducer.</li>\n<li>合并slice reducer.</li>\n<li>通过crossReducer在多个slice reducer中共享数据.</li>\n<li>减少reducer的模板代码.</li>\n</ul>"},{"title":"《你不知道的JavaScript（上）》读书笔记","date":"2017-12-23T13:40:30.000Z","comments":1,"layout":"post","_content":"\n## This\n\n在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。\n\n总结一下：\n\nThis实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。\n\n<!--more-->\n\n那么我们要去判断一个运行中函数的`this`绑定，我们需要先知道：\n\n1. 函数在哪里被直接调用？\n2. 找到之后，我们需要去通过四条顺序规则去判断`this`的绑定对象\n\n\n### 四条顺序\n\n 1. 是否是被`new`调用的？是的话那就绑定到新的创建对象。\n    1. ```javascript\n       var bar = new foo()\n       ```\n\n 2. 是否被`call`或者`apply`或者`bind`调用？是的话那就绑定到指定的对象。\n    1. ```javascript\n       var bar = call(obj, 2);\n       ```\n\n 3. 是否由上下文调用？是的话那就绑定到那个上下文对象。\n\n 4. 默认：在默认情况下，如果我们在严格模式下则为`undefined`，否则我们会绑定到全局对象\n\n## 对象\n\nJavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式\n\n```javascript\n//声明形式\nvar object = {\n  a:1\n};\n//构造形式\nvar b = new Object();\nb.key = 1;\t//给b添加个属性\n\n```\n\n通过这两种形式我发现一个大问题！\n\n用构造函数去创建对象我们只能通过`.`去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。\n\n\n\n那么我想要得到`b`中`key`的值呢？？\n\n```javascript\nconsole.log(b.key,'.');\nconsole.log(b[\"key\"],'[]');\n```\n\n我们有两种方法可以做到哦！\n\n1. 用`.`操作符通常被我们叫做“属性访问”；\n2. 用`[]`操作符通常被我们叫做“键访问”；\n\n但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！\n\n哦对啦！在ES6中还有个好玩的方法！\n\n```javascript\nvar prev = \"foo\";\n\nvar myObject = {\n  [prev + \"Hello\"] : \"Hello\",\n  [prev + \"World\"] : \"World\",\n}\n\nconsole.log(myObject[\"prevHello\"]); -> Hello\nconsole.log(myObject[\"prevWorld\"]); -> World\n```\n\n这是不是很神奇！我们可以通过`+`号实现了可计算的属性名。\n\n多亏了ES6的`Symbol`,它是一种新的类型，在这我就不多说啦，贴上[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n## 属性描述符\n\n![getOwnPropertyDescriptor](http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png)\n\n> writable：可写的\n>\n> enumerable: 可枚举的\n>\n> configurable: 可配置的\n\n那么如果我做以下操作呢？\n\n```javascript\nObject.defineProperty(myObject, \"a\",{\n  value:2,\n  writable:false,\n  configurable:false,\n  enumerable:false\n})\n```\n\n![defineProperty](http://ozar6ogjb.bkt.clouddn.com/defineProperty.png)\n\n也就是这个`myObject`对象变成了不可写、不可枚举、不可配置啦。\n\n那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！\n\n```javascript\nvar zoo = {};\nObject.defineProperty(myObject, \"cat\",{\n  cat: \"cat\",\n  writable:false,\n  configurable:false,\n})\n```\n\n但是我只想要我的动物园(`zoo`)里只有猫不想要别的小动物了！我只能用`Object.preventExtensions()`来禁止别的小动物进入我的动物园，而且还保留了猫。\n\n```javascript\nvar zoo = {\n  cat: \"cat\"\n};\nObject.Object.preventExtensions(zoo);\n\nzoo.dog = \"dog\";\nzoo.dog; ->//undefined\n```\n\n还有2种方法可以做到不可变(不详细讲解，附上mdn)8：\n\n1. [Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n2. [Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n","source":"_posts/《你不知道的JavaScript（上）》读书笔记.md","raw":"---\ntitle: 《你不知道的JavaScript（上）》读书笔记\ndate: 2017-12-23 21:40:30\ncomments: true\nlayout: post\ntags: [读书笔记]\ncategories: 读书笔记\n---\n\n## This\n\n在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。\n\n总结一下：\n\nThis实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。\n\n<!--more-->\n\n那么我们要去判断一个运行中函数的`this`绑定，我们需要先知道：\n\n1. 函数在哪里被直接调用？\n2. 找到之后，我们需要去通过四条顺序规则去判断`this`的绑定对象\n\n\n### 四条顺序\n\n 1. 是否是被`new`调用的？是的话那就绑定到新的创建对象。\n    1. ```javascript\n       var bar = new foo()\n       ```\n\n 2. 是否被`call`或者`apply`或者`bind`调用？是的话那就绑定到指定的对象。\n    1. ```javascript\n       var bar = call(obj, 2);\n       ```\n\n 3. 是否由上下文调用？是的话那就绑定到那个上下文对象。\n\n 4. 默认：在默认情况下，如果我们在严格模式下则为`undefined`，否则我们会绑定到全局对象\n\n## 对象\n\nJavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式\n\n```javascript\n//声明形式\nvar object = {\n  a:1\n};\n//构造形式\nvar b = new Object();\nb.key = 1;\t//给b添加个属性\n\n```\n\n通过这两种形式我发现一个大问题！\n\n用构造函数去创建对象我们只能通过`.`去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。\n\n\n\n那么我想要得到`b`中`key`的值呢？？\n\n```javascript\nconsole.log(b.key,'.');\nconsole.log(b[\"key\"],'[]');\n```\n\n我们有两种方法可以做到哦！\n\n1. 用`.`操作符通常被我们叫做“属性访问”；\n2. 用`[]`操作符通常被我们叫做“键访问”；\n\n但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！\n\n哦对啦！在ES6中还有个好玩的方法！\n\n```javascript\nvar prev = \"foo\";\n\nvar myObject = {\n  [prev + \"Hello\"] : \"Hello\",\n  [prev + \"World\"] : \"World\",\n}\n\nconsole.log(myObject[\"prevHello\"]); -> Hello\nconsole.log(myObject[\"prevWorld\"]); -> World\n```\n\n这是不是很神奇！我们可以通过`+`号实现了可计算的属性名。\n\n多亏了ES6的`Symbol`,它是一种新的类型，在这我就不多说啦，贴上[mdn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol)。\n\n## 属性描述符\n\n![getOwnPropertyDescriptor](http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png)\n\n> writable：可写的\n>\n> enumerable: 可枚举的\n>\n> configurable: 可配置的\n\n那么如果我做以下操作呢？\n\n```javascript\nObject.defineProperty(myObject, \"a\",{\n  value:2,\n  writable:false,\n  configurable:false,\n  enumerable:false\n})\n```\n\n![defineProperty](http://ozar6ogjb.bkt.clouddn.com/defineProperty.png)\n\n也就是这个`myObject`对象变成了不可写、不可枚举、不可配置啦。\n\n那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！\n\n```javascript\nvar zoo = {};\nObject.defineProperty(myObject, \"cat\",{\n  cat: \"cat\",\n  writable:false,\n  configurable:false,\n})\n```\n\n但是我只想要我的动物园(`zoo`)里只有猫不想要别的小动物了！我只能用`Object.preventExtensions()`来禁止别的小动物进入我的动物园，而且还保留了猫。\n\n```javascript\nvar zoo = {\n  cat: \"cat\"\n};\nObject.Object.preventExtensions(zoo);\n\nzoo.dog = \"dog\";\nzoo.dog; ->//undefined\n```\n\n还有2种方法可以做到不可变(不详细讲解，附上mdn)8：\n\n1. [Object.seal()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n2. [Object.freeze()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n","slug":"《你不知道的JavaScript（上）》读书笔记","published":1,"updated":"2017-12-23T13:40:10.302Z","photos":[],"link":"","_id":"cjollnbtw006gunfyy0kioyaw","content":"<h2 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h2><p>在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。</p>\n<p>总结一下：</p>\n<p>This实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n<a id=\"more\"></a>\n<p>那么我们要去判断一个运行中函数的<code>this</code>绑定，我们需要先知道：</p>\n<ol>\n<li>函数在哪里被直接调用？</li>\n<li>找到之后，我们需要去通过四条顺序规则去判断<code>this</code>的绑定对象</li>\n</ol>\n<h3 id=\"四条顺序\"><a href=\"#四条顺序\" class=\"headerlink\" title=\"四条顺序\"></a>四条顺序</h3><ol>\n<li><p>是否是被<code>new</code>调用的？是的话那就绑定到新的创建对象。</p>\n<ol>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>是否被<code>call</code>或者<code>apply</code>或者<code>bind</code>调用？是的话那就绑定到指定的对象。</p>\n<ol>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = call(obj, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>是否由上下文调用？是的话那就绑定到那个上下文对象。</p>\n</li>\n<li><p>默认：在默认情况下，如果我们在严格模式下则为<code>undefined</code>，否则我们会绑定到全局对象</p>\n</li>\n</ol>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>JavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//构造形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">b.key = <span class=\"number\">1</span>;\t<span class=\"comment\">//给b添加个属性</span></span><br></pre></td></tr></table></figure>\n<p>通过这两种形式我发现一个大问题！</p>\n<p>用构造函数去创建对象我们只能通过<code>.</code>去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。</p>\n<p>那么我想要得到<code>b</code>中<code>key</code>的值呢？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.key,<span class=\"string\">'.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"string\">\"key\"</span>],<span class=\"string\">'[]'</span>);</span><br></pre></td></tr></table></figure>\n<p>我们有两种方法可以做到哦！</p>\n<ol>\n<li>用<code>.</code>操作符通常被我们叫做“属性访问”；</li>\n<li>用<code>[]</code>操作符通常被我们叫做“键访问”；</li>\n</ol>\n<p>但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！</p>\n<p>哦对啦！在ES6中还有个好玩的方法！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prev = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  [prev + <span class=\"string\">\"Hello\"</span>] : <span class=\"string\">\"Hello\"</span>,</span><br><span class=\"line\">  [prev + <span class=\"string\">\"World\"</span>] : <span class=\"string\">\"World\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevHello\"</span>]); -&gt; Hello</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevWorld\"</span>]); -&gt; World</span><br></pre></td></tr></table></figure>\n<p>这是不是很神奇！我们可以通过<code>+</code>号实现了可计算的属性名。</p>\n<p>多亏了ES6的<code>Symbol</code>,它是一种新的类型，在这我就不多说啦，贴上<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png\" alt=\"getOwnPropertyDescriptor\"></p>\n<blockquote>\n<p>writable：可写的</p>\n<p>enumerable: 可枚举的</p>\n<p>configurable: 可配置的</p>\n</blockquote>\n<p>那么如果我做以下操作呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"a\"</span>,&#123;</span><br><span class=\"line\">  value:<span class=\"number\">2</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/defineProperty.png\" alt=\"defineProperty\"></p>\n<p>也就是这个<code>myObject</code>对象变成了不可写、不可枚举、不可配置啦。</p>\n<p>那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"cat\"</span>,&#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是我只想要我的动物园(<code>zoo</code>)里只有猫不想要别的小动物了！我只能用<code>Object.preventExtensions()</code>来禁止别的小动物进入我的动物园，而且还保留了猫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.Object.preventExtensions(zoo);</span><br><span class=\"line\"></span><br><span class=\"line\">zoo.dog = <span class=\"string\">\"dog\"</span>;</span><br><span class=\"line\">zoo.dog; -&gt;<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>还有2种方法可以做到不可变(不详细讲解，附上mdn)8：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\">Object.seal()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze()</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"This\"><a href=\"#This\" class=\"headerlink\" title=\"This\"></a>This</h2><p>在JS中This让我们捉摸不透。看了《你不知道的JavaScript（上）》让我对this有了更胜的认识。</p>\n<p>总结一下：</p>\n<p>This实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>","more":"<p>那么我们要去判断一个运行中函数的<code>this</code>绑定，我们需要先知道：</p>\n<ol>\n<li>函数在哪里被直接调用？</li>\n<li>找到之后，我们需要去通过四条顺序规则去判断<code>this</code>的绑定对象</li>\n</ol>\n<h3 id=\"四条顺序\"><a href=\"#四条顺序\" class=\"headerlink\" title=\"四条顺序\"></a>四条顺序</h3><ol>\n<li><p>是否是被<code>new</code>调用的？是的话那就绑定到新的创建对象。</p>\n<ol>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">new</span> foo()</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>是否被<code>call</code>或者<code>apply</code>或者<code>bind</code>调用？是的话那就绑定到指定的对象。</p>\n<ol>\n<li><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bar = call(obj, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>是否由上下文调用？是的话那就绑定到那个上下文对象。</p>\n</li>\n<li><p>默认：在默认情况下，如果我们在严格模式下则为<code>undefined</code>，否则我们会绑定到全局对象</p>\n</li>\n</ol>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>JavaScript对象可以通过两种形式定义： 声明（文字）形式和构造形式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;</span><br><span class=\"line\">  a:<span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//构造形式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">b.key = <span class=\"number\">1</span>;\t<span class=\"comment\">//给b添加个属性</span></span><br></pre></td></tr></table></figure>\n<p>通过这两种形式我发现一个大问题！</p>\n<p>用构造函数去创建对象我们只能通过<code>.</code>去添加属性，那真是可太麻烦了。。所以我基本上都用声明形式去创建对象。</p>\n<p>那么我想要得到<code>b</code>中<code>key</code>的值呢？？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(b.key,<span class=\"string\">'.'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"string\">\"key\"</span>],<span class=\"string\">'[]'</span>);</span><br></pre></td></tr></table></figure>\n<p>我们有两种方法可以做到哦！</p>\n<ol>\n<li>用<code>.</code>操作符通常被我们叫做“属性访问”；</li>\n<li>用<code>[]</code>操作符通常被我们叫做“键访问”；</li>\n</ol>\n<p>但是我发现他们做的是同一件事情。。那我就把他们统称一下叫“属性访问”啦！</p>\n<p>哦对啦！在ES6中还有个好玩的方法！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prev = <span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">  [prev + <span class=\"string\">\"Hello\"</span>] : <span class=\"string\">\"Hello\"</span>,</span><br><span class=\"line\">  [prev + <span class=\"string\">\"World\"</span>] : <span class=\"string\">\"World\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevHello\"</span>]); -&gt; Hello</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myObject[<span class=\"string\">\"prevWorld\"</span>]); -&gt; World</span><br></pre></td></tr></table></figure>\n<p>这是不是很神奇！我们可以通过<code>+</code>号实现了可计算的属性名。</p>\n<p>多亏了ES6的<code>Symbol</code>,它是一种新的类型，在这我就不多说啦，贴上<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" target=\"_blank\" rel=\"noopener\">mdn</a>。</p>\n<h2 id=\"属性描述符\"><a href=\"#属性描述符\" class=\"headerlink\" title=\"属性描述符\"></a>属性描述符</h2><p><img src=\"http://ozar6ogjb.bkt.clouddn.com/getOwnPropertyDescriptor.png\" alt=\"getOwnPropertyDescriptor\"></p>\n<blockquote>\n<p>writable：可写的</p>\n<p>enumerable: 可枚举的</p>\n<p>configurable: 可配置的</p>\n</blockquote>\n<p>那么如果我做以下操作呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"a\"</span>,&#123;</span><br><span class=\"line\">  value:<span class=\"number\">2</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  enumerable:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/defineProperty.png\" alt=\"defineProperty\"></p>\n<p>也就是这个<code>myObject</code>对象变成了不可写、不可枚举、不可配置啦。</p>\n<p>那么我可以通过这个特性去实现一个不可变（Immutable）的对象了！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(myObject, <span class=\"string\">\"cat\"</span>,&#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span>,</span><br><span class=\"line\">  writable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">  configurable:<span class=\"literal\">false</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>但是我只想要我的动物园(<code>zoo</code>)里只有猫不想要别的小动物了！我只能用<code>Object.preventExtensions()</code>来禁止别的小动物进入我的动物园，而且还保留了猫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> zoo = &#123;</span><br><span class=\"line\">  cat: <span class=\"string\">\"cat\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.Object.preventExtensions(zoo);</span><br><span class=\"line\"></span><br><span class=\"line\">zoo.dog = <span class=\"string\">\"dog\"</span>;</span><br><span class=\"line\">zoo.dog; -&gt;<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>还有2种方法可以做到不可变(不详细讲解，附上mdn)8：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\">Object.seal()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\">Object.freeze()</a></li>\n</ol>"},{"title":"《图解HTTP》读书笔记","date":"2017-11-24T14:52:00.000Z","comments":1,"layout":"post","_content":"# 图解HTTP\n\n## TCP/IP协议族\n\n* TCP/IP协议族按层次分别分为四层\n  * 应用层\n  * 传输层\n  * 网络层\n  * 数据链路层\n\n<!--more-->\n\n![TCP/IP通信传输流](http://ozar6ogjb.bkt.clouddn.com/TCPIP%E5%88%86%E5%B1%82.png)\n\nURI, URL, URN\n\n* “A Uniform Resource Identifier (URI) 是一个紧凑的字符串用来标示抽象或物理资源。”\n* URL， URN是URI的子集，除了确定一个资源，还提供一种定位该资源的主要访问机制\n* 换句通俗易懂的话说：\n* URN作用就好像一个人的名字，URL就像一个人的地址。再换句话说：URN确定了东西的身份，URL提供了找到他的方式。\n\n## 状态码的类别\n\n|     | 类别 | 原因短语 |\n| :-- | :-- | :-- |\n| 1xx | Informational(信息状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器错误状态代码) | 服务器处理请求出错 |\n\n最具有代表性的14个状态码：\n\n_**2xx成功**_\n\n* 200 OK\n  * 表示从客户端发来的请求在服务器端被正常处理了。\n* 204 No Content\n  * 代表服务器接受的请求已成功处理，但在返回的响应报文中不含实体的主体部分。\n* 206 Partial Content\n  * 表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。\n\n_**3xx重定向**_\n\n当301， 302， 303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。\n\n* 301 Moved Permanently\n  * 永久性重定向。\n* 302 Found\n  * 临时性重定向。\n* 303 See Other\n  * 由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。\n* 304 Not Modified\n  * 表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求为满足条件的情况后，直接返回304 Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。\n* 307 Temporary Redirect\n  * 临时重定向。该状态码与302有相同的含义，但是307不会从POST变成GET。\n\n_**4xx客户端错误**_\n\n* 400 Bad Request\n  * 表示请求报文中存在语法错误。\n* 401 Unauthorized\n  * 表示发送的请求需要有通过HTTP认证的认证信息。\n* 403 Forbidden\n  * 表明对请求资源的访问被服务器拒绝了。\n* 404 Not Found\n  * 表明服务器上没有请求的资源。\n\n_**5xx服务器错误**_\n\n* 500 Internal Server Error\n  * 表明服务器在执行请求时发生了错误。\n* 503 Service Unavailbale\n  * 表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 通信数据转发程序：代理、网关、隧道\n\n### 代理\n\n代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。**代理不改变请求URI**，会直接发送给前方持有资源的目标服务器。\n\n持有资源实体的服务器称为**源服务器**，从源服务器返回的响应经过代理服务器后再传给客户端。\n\n使用代理服务器的理由：\n\n* 利用缓存技术，减少网络带宽的流量。\n* 组织内部针对特定网站的访问控制，以获取访问日志为主要目的。\n\n代理有两种基准分类： 一种是是否使用了缓存，另一种是是否会修改报文。\n\n缓存代理：代理转发响应式，**缓存代理**会预先将资源的副本保存在代理服务器上。\n\n透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为**透明代理**。反之，如果对报文内容进行加工的代理就叫做**非透明代理**。\n\n### 网关\n\n网关能使通信线路上的服务器提供非HTTP协议服务。\n\n利用网关能提高通信的安全性。\n\n比如说：网关可以连接数据库。还有在我们淘宝购物用信用卡结账的时候，网关可以和信用卡结算系统联动。\n\n### 隧道\n\n隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。\n\n也就是说，隧道本身是不会去解析HTTP请求的，他只是作为一个很安全的通道去让客户端与服务器相连。\n\n## HTTP首部\n\n### HTTP请求报文\n\n在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成\n\n### HTTP响应报文\n\n在响应中，HTTP报文由HTTP版本、状态码（数字和原因短语）、HTTP首部字段 3部分构成。\n\n### HTTP首部字段\n\n使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用的语言、认证信息等内容。\n\nHTTP首部字段是由**首部字段名**和**字段值**构成：\n\n> 首部字段名： 字段值\n\n在HTTP首部中，以Content-Type这个字段来表示报文主题的对象类型：\n> Content-Type: text/html\n>\n> 首部字段名：     字段值\n\n而且在\b字段值对应单个HTTP首部字段可以有多个值。\n\n> Keep-Alive: timeout=15, max=100\n\n### 4种HTTP首部字段类型\n\n* 通用首部字段\n  * 请求报文和响应报文两端都会使用的首部\n* 请求首部字段\n  * 从客户端向服务器端发送请求报文时使用的首部。\n    * 补充了请求的附加内容、客户端信息、响应内容相关优化级等信息\n* 响应首部字段\n  * 从服务器向客户端返回响应报文时使用的首部。\n    * 补充了响应的附加内容，也会要求客户端附加额外的内容信息。\n* 实体首部字段\n  * 针对请求报文和响应豹纹的实体部分使用的首部\n    * 补充了资源内容更新时间等与实体有\b关的信息。\n\n## HTTP的缺点\n\n* 通信使用的明文（不加密），可能会被窃听。\n* 不验证通信方的身份，因此有可能遭遇伪装。\n* 无法证明报文的完整性，所以有可能已遭篡改。\n\n## HTTP使用的认证方式\n\n* BASIC认证（基本认证）\n* DIGEST认证（摘要认证）\n* SSL客户端认证\n* FormBase认证（基于表单认证）\n\n","source":"_posts/《图解HTTP》读书笔记.md","raw":"---\ntitle: 《图解HTTP》读书笔记\ndate: 2017-11-24 22:52\ncomments: true\nlayout: post\ntags: 读书笔记\ncategories: 读书笔记\n---\n# 图解HTTP\n\n## TCP/IP协议族\n\n* TCP/IP协议族按层次分别分为四层\n  * 应用层\n  * 传输层\n  * 网络层\n  * 数据链路层\n\n<!--more-->\n\n![TCP/IP通信传输流](http://ozar6ogjb.bkt.clouddn.com/TCPIP%E5%88%86%E5%B1%82.png)\n\nURI, URL, URN\n\n* “A Uniform Resource Identifier (URI) 是一个紧凑的字符串用来标示抽象或物理资源。”\n* URL， URN是URI的子集，除了确定一个资源，还提供一种定位该资源的主要访问机制\n* 换句通俗易懂的话说：\n* URN作用就好像一个人的名字，URL就像一个人的地址。再换句话说：URN确定了东西的身份，URL提供了找到他的方式。\n\n## 状态码的类别\n\n|     | 类别 | 原因短语 |\n| :-- | :-- | :-- |\n| 1xx | Informational(信息状态码) | 接受的请求正在处理 |\n| 2xx | Success(成功状态码) | 请求正常处理完毕 |\n| 3xx | Redirection(重定向状态码) | 需要进行附加操作以完成请求 |\n| 4xx | Client Error(客户端错误状态码) | 服务器无法处理请求 |\n| 5xx | Server Error(服务器错误状态代码) | 服务器处理请求出错 |\n\n最具有代表性的14个状态码：\n\n_**2xx成功**_\n\n* 200 OK\n  * 表示从客户端发来的请求在服务器端被正常处理了。\n* 204 No Content\n  * 代表服务器接受的请求已成功处理，但在返回的响应报文中不含实体的主体部分。\n* 206 Partial Content\n  * 表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。\n\n_**3xx重定向**_\n\n当301， 302， 303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。\n\n* 301 Moved Permanently\n  * 永久性重定向。\n* 302 Found\n  * 临时性重定向。\n* 303 See Other\n  * 由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。\n* 304 Not Modified\n  * 表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求为满足条件的情况后，直接返回304 Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。\n* 307 Temporary Redirect\n  * 临时重定向。该状态码与302有相同的含义，但是307不会从POST变成GET。\n\n_**4xx客户端错误**_\n\n* 400 Bad Request\n  * 表示请求报文中存在语法错误。\n* 401 Unauthorized\n  * 表示发送的请求需要有通过HTTP认证的认证信息。\n* 403 Forbidden\n  * 表明对请求资源的访问被服务器拒绝了。\n* 404 Not Found\n  * 表明服务器上没有请求的资源。\n\n_**5xx服务器错误**_\n\n* 500 Internal Server Error\n  * 表明服务器在执行请求时发生了错误。\n* 503 Service Unavailbale\n  * 表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n\n## 通信数据转发程序：代理、网关、隧道\n\n### 代理\n\n代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。**代理不改变请求URI**，会直接发送给前方持有资源的目标服务器。\n\n持有资源实体的服务器称为**源服务器**，从源服务器返回的响应经过代理服务器后再传给客户端。\n\n使用代理服务器的理由：\n\n* 利用缓存技术，减少网络带宽的流量。\n* 组织内部针对特定网站的访问控制，以获取访问日志为主要目的。\n\n代理有两种基准分类： 一种是是否使用了缓存，另一种是是否会修改报文。\n\n缓存代理：代理转发响应式，**缓存代理**会预先将资源的副本保存在代理服务器上。\n\n透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为**透明代理**。反之，如果对报文内容进行加工的代理就叫做**非透明代理**。\n\n### 网关\n\n网关能使通信线路上的服务器提供非HTTP协议服务。\n\n利用网关能提高通信的安全性。\n\n比如说：网关可以连接数据库。还有在我们淘宝购物用信用卡结账的时候，网关可以和信用卡结算系统联动。\n\n### 隧道\n\n隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。\n\n也就是说，隧道本身是不会去解析HTTP请求的，他只是作为一个很安全的通道去让客户端与服务器相连。\n\n## HTTP首部\n\n### HTTP请求报文\n\n在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成\n\n### HTTP响应报文\n\n在响应中，HTTP报文由HTTP版本、状态码（数字和原因短语）、HTTP首部字段 3部分构成。\n\n### HTTP首部字段\n\n使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用的语言、认证信息等内容。\n\nHTTP首部字段是由**首部字段名**和**字段值**构成：\n\n> 首部字段名： 字段值\n\n在HTTP首部中，以Content-Type这个字段来表示报文主题的对象类型：\n> Content-Type: text/html\n>\n> 首部字段名：     字段值\n\n而且在\b字段值对应单个HTTP首部字段可以有多个值。\n\n> Keep-Alive: timeout=15, max=100\n\n### 4种HTTP首部字段类型\n\n* 通用首部字段\n  * 请求报文和响应报文两端都会使用的首部\n* 请求首部字段\n  * 从客户端向服务器端发送请求报文时使用的首部。\n    * 补充了请求的附加内容、客户端信息、响应内容相关优化级等信息\n* 响应首部字段\n  * 从服务器向客户端返回响应报文时使用的首部。\n    * 补充了响应的附加内容，也会要求客户端附加额外的内容信息。\n* 实体首部字段\n  * 针对请求报文和响应豹纹的实体部分使用的首部\n    * 补充了资源内容更新时间等与实体有\b关的信息。\n\n## HTTP的缺点\n\n* 通信使用的明文（不加密），可能会被窃听。\n* 不验证通信方的身份，因此有可能遭遇伪装。\n* 无法证明报文的完整性，所以有可能已遭篡改。\n\n## HTTP使用的认证方式\n\n* BASIC认证（基本认证）\n* DIGEST认证（摘要认证）\n* SSL客户端认证\n* FormBase认证（基于表单认证）\n\n","slug":"《图解HTTP》读书笔记","published":1,"updated":"2017-11-24T14:52:51.604Z","photos":[],"link":"","_id":"cjollnbty006iunfykytldnd2","content":"<h1 id=\"图解HTTP\"><a href=\"#图解HTTP\" class=\"headerlink\" title=\"图解HTTP\"></a>图解HTTP</h1><h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><ul>\n<li>TCP/IP协议族按层次分别分为四层<ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/TCPIP%E5%88%86%E5%B1%82.png\" alt=\"TCP/IP通信传输流\"></p>\n<p>URI, URL, URN</p>\n<ul>\n<li>“A Uniform Resource Identifier (URI) 是一个紧凑的字符串用来标示抽象或物理资源。”</li>\n<li>URL， URN是URI的子集，除了确定一个资源，还提供一种定位该资源的主要访问机制</li>\n<li>换句通俗易懂的话说：</li>\n<li>URN作用就好像一个人的名字，URL就像一个人的地址。再换句话说：URN确定了东西的身份，URL提供了找到他的方式。</li>\n</ul>\n<h2 id=\"状态码的类别\"><a href=\"#状态码的类别\" class=\"headerlink\" title=\"状态码的类别\"></a>状态码的类别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">类别</th>\n<th style=\"text-align:left\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1xx</td>\n<td style=\"text-align:left\">Informational(信息状态码)</td>\n<td style=\"text-align:left\">接受的请求正在处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2xx</td>\n<td style=\"text-align:left\">Success(成功状态码)</td>\n<td style=\"text-align:left\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3xx</td>\n<td style=\"text-align:left\">Redirection(重定向状态码)</td>\n<td style=\"text-align:left\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4xx</td>\n<td style=\"text-align:left\">Client Error(客户端错误状态码)</td>\n<td style=\"text-align:left\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5xx</td>\n<td style=\"text-align:left\">Server Error(服务器错误状态代码)</td>\n<td style=\"text-align:left\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<p>最具有代表性的14个状态码：</p>\n<p><em><strong>2xx成功</strong></em></p>\n<ul>\n<li>200 OK<ul>\n<li>表示从客户端发来的请求在服务器端被正常处理了。</li>\n</ul>\n</li>\n<li>204 No Content<ul>\n<li>代表服务器接受的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</li>\n</ul>\n</li>\n<li>206 Partial Content<ul>\n<li>表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>3xx重定向</strong></em></p>\n<p>当301， 302， 303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。</p>\n<ul>\n<li>301 Moved Permanently<ul>\n<li>永久性重定向。</li>\n</ul>\n</li>\n<li>302 Found<ul>\n<li>临时性重定向。</li>\n</ul>\n</li>\n<li>303 See Other<ul>\n<li>由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。</li>\n</ul>\n</li>\n<li>304 Not Modified<ul>\n<li>表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求为满足条件的情况后，直接返回304 Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。</li>\n</ul>\n</li>\n<li>307 Temporary Redirect<ul>\n<li>临时重定向。该状态码与302有相同的含义，但是307不会从POST变成GET。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>4xx客户端错误</strong></em></p>\n<ul>\n<li>400 Bad Request<ul>\n<li>表示请求报文中存在语法错误。</li>\n</ul>\n</li>\n<li>401 Unauthorized<ul>\n<li>表示发送的请求需要有通过HTTP认证的认证信息。</li>\n</ul>\n</li>\n<li>403 Forbidden<ul>\n<li>表明对请求资源的访问被服务器拒绝了。</li>\n</ul>\n</li>\n<li>404 Not Found<ul>\n<li>表明服务器上没有请求的资源。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>5xx服务器错误</strong></em></p>\n<ul>\n<li>500 Internal Server Error<ul>\n<li>表明服务器在执行请求时发生了错误。</li>\n</ul>\n</li>\n<li>503 Service Unavailbale<ul>\n<li>表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通信数据转发程序：代理、网关、隧道\"><a href=\"#通信数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序：代理、网关、隧道\"></a>通信数据转发程序：代理、网关、隧道</h2><h3 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h3><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。<strong>代理不改变请求URI</strong>，会直接发送给前方持有资源的目标服务器。</p>\n<p>持有资源实体的服务器称为<strong>源服务器</strong>，从源服务器返回的响应经过代理服务器后再传给客户端。</p>\n<p>使用代理服务器的理由：</p>\n<ul>\n<li>利用缓存技术，减少网络带宽的流量。</li>\n<li>组织内部针对特定网站的访问控制，以获取访问日志为主要目的。</li>\n</ul>\n<p>代理有两种基准分类： 一种是是否使用了缓存，另一种是是否会修改报文。</p>\n<p>缓存代理：代理转发响应式，<strong>缓存代理</strong>会预先将资源的副本保存在代理服务器上。</p>\n<p>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为<strong>透明代理</strong>。反之，如果对报文内容进行加工的代理就叫做<strong>非透明代理</strong>。</p>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><p>网关能使通信线路上的服务器提供非HTTP协议服务。</p>\n<p>利用网关能提高通信的安全性。</p>\n<p>比如说：网关可以连接数据库。还有在我们淘宝购物用信用卡结账的时候，网关可以和信用卡结算系统联动。</p>\n<h3 id=\"隧道\"><a href=\"#隧道\" class=\"headerlink\" title=\"隧道\"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。</p>\n<p>也就是说，隧道本身是不会去解析HTTP请求的，他只是作为一个很安全的通道去让客户端与服务器相连。</p>\n<h2 id=\"HTTP首部\"><a href=\"#HTTP首部\" class=\"headerlink\" title=\"HTTP首部\"></a>HTTP首部</h2><h3 id=\"HTTP请求报文\"><a href=\"#HTTP请求报文\" class=\"headerlink\" title=\"HTTP请求报文\"></a>HTTP请求报文</h3><p>在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成</p>\n<h3 id=\"HTTP响应报文\"><a href=\"#HTTP响应报文\" class=\"headerlink\" title=\"HTTP响应报文\"></a>HTTP响应报文</h3><p>在响应中，HTTP报文由HTTP版本、状态码（数字和原因短语）、HTTP首部字段 3部分构成。</p>\n<h3 id=\"HTTP首部字段\"><a href=\"#HTTP首部字段\" class=\"headerlink\" title=\"HTTP首部字段\"></a>HTTP首部字段</h3><p>使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用的语言、认证信息等内容。</p>\n<p>HTTP首部字段是由<strong>首部字段名</strong>和<strong>字段值</strong>构成：</p>\n<blockquote>\n<p>首部字段名： 字段值</p>\n</blockquote>\n<p>在HTTP首部中，以Content-Type这个字段来表示报文主题的对象类型：</p>\n<blockquote>\n<p>Content-Type: text/html</p>\n<p>首部字段名：     字段值</p>\n</blockquote>\n<p>而且在\b字段值对应单个HTTP首部字段可以有多个值。</p>\n<blockquote>\n<p>Keep-Alive: timeout=15, max=100</p>\n</blockquote>\n<h3 id=\"4种HTTP首部字段类型\"><a href=\"#4种HTTP首部字段类型\" class=\"headerlink\" title=\"4种HTTP首部字段类型\"></a>4种HTTP首部字段类型</h3><ul>\n<li>通用首部字段<ul>\n<li>请求报文和响应报文两端都会使用的首部</li>\n</ul>\n</li>\n<li>请求首部字段<ul>\n<li>从客户端向服务器端发送请求报文时使用的首部。<ul>\n<li>补充了请求的附加内容、客户端信息、响应内容相关优化级等信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>响应首部字段<ul>\n<li>从服务器向客户端返回响应报文时使用的首部。<ul>\n<li>补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实体首部字段<ul>\n<li>针对请求报文和响应豹纹的实体部分使用的首部<ul>\n<li>补充了资源内容更新时间等与实体有\b关的信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP的缺点\"><a href=\"#HTTP的缺点\" class=\"headerlink\" title=\"HTTP的缺点\"></a>HTTP的缺点</h2><ul>\n<li>通信使用的明文（不加密），可能会被窃听。</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装。</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改。</li>\n</ul>\n<h2 id=\"HTTP使用的认证方式\"><a href=\"#HTTP使用的认证方式\" class=\"headerlink\" title=\"HTTP使用的认证方式\"></a>HTTP使用的认证方式</h2><ul>\n<li>BASIC认证（基本认证）</li>\n<li>DIGEST认证（摘要认证）</li>\n<li>SSL客户端认证</li>\n<li>FormBase认证（基于表单认证）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"图解HTTP\"><a href=\"#图解HTTP\" class=\"headerlink\" title=\"图解HTTP\"></a>图解HTTP</h1><h2 id=\"TCP-IP协议族\"><a href=\"#TCP-IP协议族\" class=\"headerlink\" title=\"TCP/IP协议族\"></a>TCP/IP协议族</h2><ul>\n<li>TCP/IP协议族按层次分别分为四层<ul>\n<li>应用层</li>\n<li>传输层</li>\n<li>网络层</li>\n<li>数据链路层</li>\n</ul>\n</li>\n</ul>","more":"<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/TCPIP%E5%88%86%E5%B1%82.png\" alt=\"TCP/IP通信传输流\"></p>\n<p>URI, URL, URN</p>\n<ul>\n<li>“A Uniform Resource Identifier (URI) 是一个紧凑的字符串用来标示抽象或物理资源。”</li>\n<li>URL， URN是URI的子集，除了确定一个资源，还提供一种定位该资源的主要访问机制</li>\n<li>换句通俗易懂的话说：</li>\n<li>URN作用就好像一个人的名字，URL就像一个人的地址。再换句话说：URN确定了东西的身份，URL提供了找到他的方式。</li>\n</ul>\n<h2 id=\"状态码的类别\"><a href=\"#状态码的类别\" class=\"headerlink\" title=\"状态码的类别\"></a>状态码的类别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">类别</th>\n<th style=\"text-align:left\">原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1xx</td>\n<td style=\"text-align:left\">Informational(信息状态码)</td>\n<td style=\"text-align:left\">接受的请求正在处理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2xx</td>\n<td style=\"text-align:left\">Success(成功状态码)</td>\n<td style=\"text-align:left\">请求正常处理完毕</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3xx</td>\n<td style=\"text-align:left\">Redirection(重定向状态码)</td>\n<td style=\"text-align:left\">需要进行附加操作以完成请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4xx</td>\n<td style=\"text-align:left\">Client Error(客户端错误状态码)</td>\n<td style=\"text-align:left\">服务器无法处理请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5xx</td>\n<td style=\"text-align:left\">Server Error(服务器错误状态代码)</td>\n<td style=\"text-align:left\">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<p>最具有代表性的14个状态码：</p>\n<p><em><strong>2xx成功</strong></em></p>\n<ul>\n<li>200 OK<ul>\n<li>表示从客户端发来的请求在服务器端被正常处理了。</li>\n</ul>\n</li>\n<li>204 No Content<ul>\n<li>代表服务器接受的请求已成功处理，但在返回的响应报文中不含实体的主体部分。</li>\n</ul>\n</li>\n<li>206 Partial Content<ul>\n<li>表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>3xx重定向</strong></em></p>\n<p>当301， 302， 303响应状态码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。</p>\n<ul>\n<li>301 Moved Permanently<ul>\n<li>永久性重定向。</li>\n</ul>\n</li>\n<li>302 Found<ul>\n<li>临时性重定向。</li>\n</ul>\n</li>\n<li>303 See Other<ul>\n<li>由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。</li>\n</ul>\n</li>\n<li>304 Not Modified<ul>\n<li>表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但因发生请求为满足条件的情况后，直接返回304 Not Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）。</li>\n</ul>\n</li>\n<li>307 Temporary Redirect<ul>\n<li>临时重定向。该状态码与302有相同的含义，但是307不会从POST变成GET。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>4xx客户端错误</strong></em></p>\n<ul>\n<li>400 Bad Request<ul>\n<li>表示请求报文中存在语法错误。</li>\n</ul>\n</li>\n<li>401 Unauthorized<ul>\n<li>表示发送的请求需要有通过HTTP认证的认证信息。</li>\n</ul>\n</li>\n<li>403 Forbidden<ul>\n<li>表明对请求资源的访问被服务器拒绝了。</li>\n</ul>\n</li>\n<li>404 Not Found<ul>\n<li>表明服务器上没有请求的资源。</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>5xx服务器错误</strong></em></p>\n<ul>\n<li>500 Internal Server Error<ul>\n<li>表明服务器在执行请求时发生了错误。</li>\n</ul>\n</li>\n<li>503 Service Unavailbale<ul>\n<li>表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"通信数据转发程序：代理、网关、隧道\"><a href=\"#通信数据转发程序：代理、网关、隧道\" class=\"headerlink\" title=\"通信数据转发程序：代理、网关、隧道\"></a>通信数据转发程序：代理、网关、隧道</h2><h3 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h3><p>代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务器。<strong>代理不改变请求URI</strong>，会直接发送给前方持有资源的目标服务器。</p>\n<p>持有资源实体的服务器称为<strong>源服务器</strong>，从源服务器返回的响应经过代理服务器后再传给客户端。</p>\n<p>使用代理服务器的理由：</p>\n<ul>\n<li>利用缓存技术，减少网络带宽的流量。</li>\n<li>组织内部针对特定网站的访问控制，以获取访问日志为主要目的。</li>\n</ul>\n<p>代理有两种基准分类： 一种是是否使用了缓存，另一种是是否会修改报文。</p>\n<p>缓存代理：代理转发响应式，<strong>缓存代理</strong>会预先将资源的副本保存在代理服务器上。</p>\n<p>透明代理：转发请求或响应时，不对报文做任何加工的代理类型被称为<strong>透明代理</strong>。反之，如果对报文内容进行加工的代理就叫做<strong>非透明代理</strong>。</p>\n<h3 id=\"网关\"><a href=\"#网关\" class=\"headerlink\" title=\"网关\"></a>网关</h3><p>网关能使通信线路上的服务器提供非HTTP协议服务。</p>\n<p>利用网关能提高通信的安全性。</p>\n<p>比如说：网关可以连接数据库。还有在我们淘宝购物用信用卡结账的时候，网关可以和信用卡结算系统联动。</p>\n<h3 id=\"隧道\"><a href=\"#隧道\" class=\"headerlink\" title=\"隧道\"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。</p>\n<p>也就是说，隧道本身是不会去解析HTTP请求的，他只是作为一个很安全的通道去让客户端与服务器相连。</p>\n<h2 id=\"HTTP首部\"><a href=\"#HTTP首部\" class=\"headerlink\" title=\"HTTP首部\"></a>HTTP首部</h2><h3 id=\"HTTP请求报文\"><a href=\"#HTTP请求报文\" class=\"headerlink\" title=\"HTTP请求报文\"></a>HTTP请求报文</h3><p>在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成</p>\n<h3 id=\"HTTP响应报文\"><a href=\"#HTTP响应报文\" class=\"headerlink\" title=\"HTTP响应报文\"></a>HTTP响应报文</h3><p>在响应中，HTTP报文由HTTP版本、状态码（数字和原因短语）、HTTP首部字段 3部分构成。</p>\n<h3 id=\"HTTP首部字段\"><a href=\"#HTTP首部字段\" class=\"headerlink\" title=\"HTTP首部字段\"></a>HTTP首部字段</h3><p>使用首部字段是为了给浏览器和服务器提供报文主体大小，所使用的语言、认证信息等内容。</p>\n<p>HTTP首部字段是由<strong>首部字段名</strong>和<strong>字段值</strong>构成：</p>\n<blockquote>\n<p>首部字段名： 字段值</p>\n</blockquote>\n<p>在HTTP首部中，以Content-Type这个字段来表示报文主题的对象类型：</p>\n<blockquote>\n<p>Content-Type: text/html</p>\n<p>首部字段名：     字段值</p>\n</blockquote>\n<p>而且在\b字段值对应单个HTTP首部字段可以有多个值。</p>\n<blockquote>\n<p>Keep-Alive: timeout=15, max=100</p>\n</blockquote>\n<h3 id=\"4种HTTP首部字段类型\"><a href=\"#4种HTTP首部字段类型\" class=\"headerlink\" title=\"4种HTTP首部字段类型\"></a>4种HTTP首部字段类型</h3><ul>\n<li>通用首部字段<ul>\n<li>请求报文和响应报文两端都会使用的首部</li>\n</ul>\n</li>\n<li>请求首部字段<ul>\n<li>从客户端向服务器端发送请求报文时使用的首部。<ul>\n<li>补充了请求的附加内容、客户端信息、响应内容相关优化级等信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>响应首部字段<ul>\n<li>从服务器向客户端返回响应报文时使用的首部。<ul>\n<li>补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实体首部字段<ul>\n<li>针对请求报文和响应豹纹的实体部分使用的首部<ul>\n<li>补充了资源内容更新时间等与实体有\b关的信息。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP的缺点\"><a href=\"#HTTP的缺点\" class=\"headerlink\" title=\"HTTP的缺点\"></a>HTTP的缺点</h2><ul>\n<li>通信使用的明文（不加密），可能会被窃听。</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装。</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改。</li>\n</ul>\n<h2 id=\"HTTP使用的认证方式\"><a href=\"#HTTP使用的认证方式\" class=\"headerlink\" title=\"HTTP使用的认证方式\"></a>HTTP使用的认证方式</h2><ul>\n<li>BASIC认证（基本认证）</li>\n<li>DIGEST认证（摘要认证）</li>\n<li>SSL客户端认证</li>\n<li>FormBase认证（基于表单认证）</li>\n</ul>"},{"title":"vscode快捷键提升效率","date":"2018-05-03T08:47:14.000Z","updated":"2018-05-05T02:27:32.000Z","comments":1,"layout":"post","_content":"\n\n# vscode快捷键提升效率\n\nwindows： cmd = ctrl, option = alt\n* 重开一行\n  * 不在行尾向下： cmd + enter\n  * 不在行尾向上： shift + cmd + enter\n* 删除一行\n  * cmd + x\n  * shift + cmd + k\n* 移动换位\n  * option + ↑\n  * option + ↓\n* 复制一行\n  * shift + option + ↑\n  * shift + option + ↓\n* 选一个词\n  * cmd + d\n* 搜索\n  * cmd + f\n  * cmd + option + f 替换\n  * cmd + shift + f 项目中替换\n* 使用鼠标键选择列 v1.23\n  * 按住shift + option 之后通过鼠标去选择","source":"_posts/vscode快捷键提升效率.md","raw":"---\ntitle: vscode快捷键提升效率\ndate: 2018-05-03 16:47:14\nupdated: 2018-05-05 10:27:32\ncomments: true\nlayout: post\ntags: [前端工具]\ncategories: 前端工具\n---\n\n\n# vscode快捷键提升效率\n\nwindows： cmd = ctrl, option = alt\n* 重开一行\n  * 不在行尾向下： cmd + enter\n  * 不在行尾向上： shift + cmd + enter\n* 删除一行\n  * cmd + x\n  * shift + cmd + k\n* 移动换位\n  * option + ↑\n  * option + ↓\n* 复制一行\n  * shift + option + ↑\n  * shift + option + ↓\n* 选一个词\n  * cmd + d\n* 搜索\n  * cmd + f\n  * cmd + option + f 替换\n  * cmd + shift + f 项目中替换\n* 使用鼠标键选择列 v1.23\n  * 按住shift + option 之后通过鼠标去选择","slug":"vscode快捷键提升效率","published":1,"photos":[],"link":"","_id":"cjollnbu2006nunfy51n4yo3f","content":"<h1 id=\"vscode快捷键提升效率\"><a href=\"#vscode快捷键提升效率\" class=\"headerlink\" title=\"vscode快捷键提升效率\"></a>vscode快捷键提升效率</h1><p>windows： cmd = ctrl, option = alt</p>\n<ul>\n<li>重开一行<ul>\n<li>不在行尾向下： cmd + enter</li>\n<li>不在行尾向上： shift + cmd + enter</li>\n</ul>\n</li>\n<li>删除一行<ul>\n<li>cmd + x</li>\n<li>shift + cmd + k</li>\n</ul>\n</li>\n<li>移动换位<ul>\n<li>option + ↑</li>\n<li>option + ↓</li>\n</ul>\n</li>\n<li>复制一行<ul>\n<li>shift + option + ↑</li>\n<li>shift + option + ↓</li>\n</ul>\n</li>\n<li>选一个词<ul>\n<li>cmd + d</li>\n</ul>\n</li>\n<li>搜索<ul>\n<li>cmd + f</li>\n<li>cmd + option + f 替换</li>\n<li>cmd + shift + f 项目中替换</li>\n</ul>\n</li>\n<li>使用鼠标键选择列 v1.23<ul>\n<li>按住shift + option 之后通过鼠标去选择</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vscode快捷键提升效率\"><a href=\"#vscode快捷键提升效率\" class=\"headerlink\" title=\"vscode快捷键提升效率\"></a>vscode快捷键提升效率</h1><p>windows： cmd = ctrl, option = alt</p>\n<ul>\n<li>重开一行<ul>\n<li>不在行尾向下： cmd + enter</li>\n<li>不在行尾向上： shift + cmd + enter</li>\n</ul>\n</li>\n<li>删除一行<ul>\n<li>cmd + x</li>\n<li>shift + cmd + k</li>\n</ul>\n</li>\n<li>移动换位<ul>\n<li>option + ↑</li>\n<li>option + ↓</li>\n</ul>\n</li>\n<li>复制一行<ul>\n<li>shift + option + ↑</li>\n<li>shift + option + ↓</li>\n</ul>\n</li>\n<li>选一个词<ul>\n<li>cmd + d</li>\n</ul>\n</li>\n<li>搜索<ul>\n<li>cmd + f</li>\n<li>cmd + option + f 替换</li>\n<li>cmd + shift + f 项目中替换</li>\n</ul>\n</li>\n<li>使用鼠标键选择列 v1.23<ul>\n<li>按住shift + option 之后通过鼠标去选择</li>\n</ul>\n</li>\n</ul>\n"},{"title":"《编码》读书笔记","date":"2017-11-12T06:21:00.000Z","comments":1,"layout":"post","_content":"# 十进制，八进制，四进制，二进制\n\n> 在十进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7、 8、 9。\n>\n> 在八进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7。\n>\n> 在四进制中我们计数方式是：0、 1、 2、 3。\n>\n> 在二进制中我们计数方式是：0、 1。\n\n<!--more-->\n\n下面提供一个模板，这个模板可以将一个数转换最大长度为8的二进制数：\n\n![二进制模板](/images/二进制模板.png)\n\n![二进制模板计算](/images/二进制模板计算.png)\n\n这就是使用方法。如果要十进制转化成二进制的话，也可以用这个模板，只不过是把乘改成除就行啦。\n\n| 二进制数 | 十进制数 |\n| :--: | :--: |\n| 0000 |  0   |\n| 0001 |  1   |\n| 0010 |  2   |\n| 0011 |  3   |\n| 0100 |  4   |\n| 0101 |  5   |\n| 0110 |  6   |\n| 0111 |  7   |\n| 1000 |  8   |\n| 1001 |  9   |\n| 1010 |  10  |\n| 1011 |  11  |\n| 1100 |  12  |\n| 1101 |  13  |\n| 1110 |  14  |\n| 1111 |  15  |\n\n* 在最右边一直是 0 和 1 之间交替\n* 右边第二列是 每2个0 和 每2个1 之间相互交替\n* 第三列是 每4个0 和 每4个1 之间相互交替\n* 第四列是 每8个0 和 每8个1 之间相互交替\n* 所以只要再重复这16个数字并且在每个数字前面加一个1就可以很容易的写出后面的16个数字。","source":"_posts/《编码》读书笔记.md","raw":"---\ntitle: 《编码》读书笔记\ndate: 2017-11-12 14:21\ncomments: true\nlayout: post\ntags: 读书笔记\ncategories: 读书笔记\n---\n# 十进制，八进制，四进制，二进制\n\n> 在十进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7、 8、 9。\n>\n> 在八进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7。\n>\n> 在四进制中我们计数方式是：0、 1、 2、 3。\n>\n> 在二进制中我们计数方式是：0、 1。\n\n<!--more-->\n\n下面提供一个模板，这个模板可以将一个数转换最大长度为8的二进制数：\n\n![二进制模板](/images/二进制模板.png)\n\n![二进制模板计算](/images/二进制模板计算.png)\n\n这就是使用方法。如果要十进制转化成二进制的话，也可以用这个模板，只不过是把乘改成除就行啦。\n\n| 二进制数 | 十进制数 |\n| :--: | :--: |\n| 0000 |  0   |\n| 0001 |  1   |\n| 0010 |  2   |\n| 0011 |  3   |\n| 0100 |  4   |\n| 0101 |  5   |\n| 0110 |  6   |\n| 0111 |  7   |\n| 1000 |  8   |\n| 1001 |  9   |\n| 1010 |  10  |\n| 1011 |  11  |\n| 1100 |  12  |\n| 1101 |  13  |\n| 1110 |  14  |\n| 1111 |  15  |\n\n* 在最右边一直是 0 和 1 之间交替\n* 右边第二列是 每2个0 和 每2个1 之间相互交替\n* 第三列是 每4个0 和 每4个1 之间相互交替\n* 第四列是 每8个0 和 每8个1 之间相互交替\n* 所以只要再重复这16个数字并且在每个数字前面加一个1就可以很容易的写出后面的16个数字。","slug":"《编码》读书笔记","published":1,"updated":"2017-11-12T07:56:30.000Z","photos":[],"link":"","_id":"cjollnbu3006qunfyn8mhu0kb","content":"<h1 id=\"十进制，八进制，四进制，二进制\"><a href=\"#十进制，八进制，四进制，二进制\" class=\"headerlink\" title=\"十进制，八进制，四进制，二进制\"></a>十进制，八进制，四进制，二进制</h1><blockquote>\n<p>在十进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7、 8、 9。</p>\n<p>在八进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7。</p>\n<p>在四进制中我们计数方式是：0、 1、 2、 3。</p>\n<p>在二进制中我们计数方式是：0、 1。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>下面提供一个模板，这个模板可以将一个数转换最大长度为8的二进制数：</p>\n<p><img src=\"/images/二进制模板.png\" alt=\"二进制模板\"></p>\n<p><img src=\"/images/二进制模板计算.png\" alt=\"二进制模板计算\"></p>\n<p>这就是使用方法。如果要十进制转化成二进制的话，也可以用这个模板，只不过是把乘改成除就行啦。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">二进制数</th>\n<th style=\"text-align:center\">十进制数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0001</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0010</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0011</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0100</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0101</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0110</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0111</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1001</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1010</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1011</td>\n<td style=\"text-align:center\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1100</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1101</td>\n<td style=\"text-align:center\">13</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1110</td>\n<td style=\"text-align:center\">14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1111</td>\n<td style=\"text-align:center\">15</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在最右边一直是 0 和 1 之间交替</li>\n<li>右边第二列是 每2个0 和 每2个1 之间相互交替</li>\n<li>第三列是 每4个0 和 每4个1 之间相互交替</li>\n<li>第四列是 每8个0 和 每8个1 之间相互交替</li>\n<li>所以只要再重复这16个数字并且在每个数字前面加一个1就可以很容易的写出后面的16个数字。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"十进制，八进制，四进制，二进制\"><a href=\"#十进制，八进制，四进制，二进制\" class=\"headerlink\" title=\"十进制，八进制，四进制，二进制\"></a>十进制，八进制，四进制，二进制</h1><blockquote>\n<p>在十进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7、 8、 9。</p>\n<p>在八进制中我们计数方式是：0、 1、 2、 3、 4、 5、 6、 7。</p>\n<p>在四进制中我们计数方式是：0、 1、 2、 3。</p>\n<p>在二进制中我们计数方式是：0、 1。</p>\n</blockquote>","more":"<p>下面提供一个模板，这个模板可以将一个数转换最大长度为8的二进制数：</p>\n<p><img src=\"/images/二进制模板.png\" alt=\"二进制模板\"></p>\n<p><img src=\"/images/二进制模板计算.png\" alt=\"二进制模板计算\"></p>\n<p>这就是使用方法。如果要十进制转化成二进制的话，也可以用这个模板，只不过是把乘改成除就行啦。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">二进制数</th>\n<th style=\"text-align:center\">十进制数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0001</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0010</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0011</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0100</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0101</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0110</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0111</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1000</td>\n<td style=\"text-align:center\">8</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1001</td>\n<td style=\"text-align:center\">9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1010</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1011</td>\n<td style=\"text-align:center\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1100</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1101</td>\n<td style=\"text-align:center\">13</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1110</td>\n<td style=\"text-align:center\">14</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1111</td>\n<td style=\"text-align:center\">15</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在最右边一直是 0 和 1 之间交替</li>\n<li>右边第二列是 每2个0 和 每2个1 之间相互交替</li>\n<li>第三列是 每4个0 和 每4个1 之间相互交替</li>\n<li>第四列是 每8个0 和 每8个1 之间相互交替</li>\n<li>所以只要再重复这16个数字并且在每个数字前面加一个1就可以很容易的写出后面的16个数字。</li>\n</ul>"},{"title":"事件处理","date":"2018-04-18T14:39:15.249Z","updated":"2018-04-19T13:31:37.000Z","comments":1,"layout":"post","_content":"\n事件简要分析：\n\n* 事件类型\n  * \"load\"..etc..\n* 事件目标\n  * 各种load、load事件\n* 事件处理程序\n* 事件对象\n* 事件传播\n\n<!--more-->\n\n# 注册事件\n\n* `addEventListener()`\n* IE9 之前: `attachEvent()`\n\n按照约定，事件处理程序属性的名字由\"on\"后面跟着时间名组成：`onclick`、`onchange`、`onload`、`onmouseover`.并且所有都是小写。\n\n但是在 `addEventListener()` 中第一个参数却是不用带`on`的，`attachEvent()` 却要加的。\n\n[Demo](https://codepan.net/gist/500a52945c31109d769f0fa4a6bc9cf5)\n\n# 事件调用顺序\n\n* 通过设置对象属性或者HTML属性注册的处理程序一直优先调用\n* 使用`addEventListener()` 注册的处理程序按照它们的注册顺序调用\n* 使用 `attachEvent()` 注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序","source":"_posts/事件处理.md","raw":"---\ntitle: 事件处理\ndate: 2018-04-18 22：38\nupdated: 2018-04-19 21:31:37\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: JavaScript\n---\n\n事件简要分析：\n\n* 事件类型\n  * \"load\"..etc..\n* 事件目标\n  * 各种load、load事件\n* 事件处理程序\n* 事件对象\n* 事件传播\n\n<!--more-->\n\n# 注册事件\n\n* `addEventListener()`\n* IE9 之前: `attachEvent()`\n\n按照约定，事件处理程序属性的名字由\"on\"后面跟着时间名组成：`onclick`、`onchange`、`onload`、`onmouseover`.并且所有都是小写。\n\n但是在 `addEventListener()` 中第一个参数却是不用带`on`的，`attachEvent()` 却要加的。\n\n[Demo](https://codepan.net/gist/500a52945c31109d769f0fa4a6bc9cf5)\n\n# 事件调用顺序\n\n* 通过设置对象属性或者HTML属性注册的处理程序一直优先调用\n* 使用`addEventListener()` 注册的处理程序按照它们的注册顺序调用\n* 使用 `attachEvent()` 注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序","slug":"事件处理","published":1,"photos":[],"link":"","_id":"cjollnbu8006vunfy0s3r6s5u","content":"<p>事件简要分析：</p>\n<ul>\n<li>事件类型<ul>\n<li>“load”..etc..</li>\n</ul>\n</li>\n<li>事件目标<ul>\n<li>各种load、load事件</li>\n</ul>\n</li>\n<li>事件处理程序</li>\n<li>事件对象</li>\n<li>事件传播</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"注册事件\"><a href=\"#注册事件\" class=\"headerlink\" title=\"注册事件\"></a>注册事件</h1><ul>\n<li><code>addEventListener()</code></li>\n<li>IE9 之前: <code>attachEvent()</code></li>\n</ul>\n<p>按照约定，事件处理程序属性的名字由”on”后面跟着时间名组成：<code>onclick</code>、<code>onchange</code>、<code>onload</code>、<code>onmouseover</code>.并且所有都是小写。</p>\n<p>但是在 <code>addEventListener()</code> 中第一个参数却是不用带<code>on</code>的，<code>attachEvent()</code> 却要加的。</p>\n<p><a href=\"https://codepan.net/gist/500a52945c31109d769f0fa4a6bc9cf5\" target=\"_blank\" rel=\"noopener\">Demo</a></p>\n<h1 id=\"事件调用顺序\"><a href=\"#事件调用顺序\" class=\"headerlink\" title=\"事件调用顺序\"></a>事件调用顺序</h1><ul>\n<li>通过设置对象属性或者HTML属性注册的处理程序一直优先调用</li>\n<li>使用<code>addEventListener()</code> 注册的处理程序按照它们的注册顺序调用</li>\n<li>使用 <code>attachEvent()</code> 注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>事件简要分析：</p>\n<ul>\n<li>事件类型<ul>\n<li>“load”..etc..</li>\n</ul>\n</li>\n<li>事件目标<ul>\n<li>各种load、load事件</li>\n</ul>\n</li>\n<li>事件处理程序</li>\n<li>事件对象</li>\n<li>事件传播</li>\n</ul>","more":"<h1 id=\"注册事件\"><a href=\"#注册事件\" class=\"headerlink\" title=\"注册事件\"></a>注册事件</h1><ul>\n<li><code>addEventListener()</code></li>\n<li>IE9 之前: <code>attachEvent()</code></li>\n</ul>\n<p>按照约定，事件处理程序属性的名字由”on”后面跟着时间名组成：<code>onclick</code>、<code>onchange</code>、<code>onload</code>、<code>onmouseover</code>.并且所有都是小写。</p>\n<p>但是在 <code>addEventListener()</code> 中第一个参数却是不用带<code>on</code>的，<code>attachEvent()</code> 却要加的。</p>\n<p><a href=\"https://codepan.net/gist/500a52945c31109d769f0fa4a6bc9cf5\" target=\"_blank\" rel=\"noopener\">Demo</a></p>\n<h1 id=\"事件调用顺序\"><a href=\"#事件调用顺序\" class=\"headerlink\" title=\"事件调用顺序\"></a>事件调用顺序</h1><ul>\n<li>通过设置对象属性或者HTML属性注册的处理程序一直优先调用</li>\n<li>使用<code>addEventListener()</code> 注册的处理程序按照它们的注册顺序调用</li>\n<li>使用 <code>attachEvent()</code> 注册的处理程序可能按照任何顺序调用，所以代码不应该依赖于调用顺序</li>\n</ul>"},{"title":"实习谈业务时所学","date":"2017-07-24T14:33:00.000Z","comments":1,"layout":"post","_content":"\n# 一些。。。\n\n1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。\n\n<!--more-->","source":"_posts/yewu.md","raw":"---\ntitle: 实习谈业务时所学\ndate: 2017-07-24 22:33:00\ncomments: true\nlayout: post\ntags: [生活]\ncategories: Technology\n---\n\n# 一些。。。\n\n1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。\n\n<!--more-->","slug":"yewu","published":1,"updated":"2017-07-27T13:21:26.000Z","photos":[],"link":"","_id":"cjollnbue006yunfyhemifege","content":"<h1 id=\"一些。。。\"><a href=\"#一些。。。\" class=\"headerlink\" title=\"一些。。。\"></a>一些。。。</h1><p>1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"一些。。。\"><a href=\"#一些。。。\" class=\"headerlink\" title=\"一些。。。\"></a>一些。。。</h1><p>1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。</p>","more":""},{"title":"《高性能JavaScript》读书笔记","date":"2018-04-02T06:39:00.000Z","comments":1,"layout":"post","_content":"\n## First\n\n`<script>`方面的我写了一篇博文链接地址：[浅谈script标签](http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html)\n\n## Second\n\n数据存储：\n\n1. 把数据存在访问字面量和局部变量是然后去访问速度最快的。\n2. 全局变量总是在作用域的最末端所以访问速度也是最慢的。\n3. 对象的深度嵌套拿值会影响性能。\n\n<!--more-->\n\n例子：\n\n```javascript\n//before\n\nfunction b(){\n    var getId = document.getElementById(\"id\");\n    var getClass = documnent.getElementsByClassName(\"class\");\n    getId.style.width......\n}\n    \n//after\n    function a(){\n        var doc = document;\n        var getId = doc.getElementById(\"id\");\n        var getClass = doc.getElementsByClassName(\"class\");\n        ....\n    }\n```\n\n","source":"_posts/《高性能JavaScript》读书笔记.md","raw":"---\ntitle: 《高性能JavaScript》读书笔记\ndate: 2018-04-02 14:39\ncomments: true\nlayout: post\ntags: 读书笔记\ncategories: 读书笔记\n---\n\n## First\n\n`<script>`方面的我写了一篇博文链接地址：[浅谈script标签](http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html)\n\n## Second\n\n数据存储：\n\n1. 把数据存在访问字面量和局部变量是然后去访问速度最快的。\n2. 全局变量总是在作用域的最末端所以访问速度也是最慢的。\n3. 对象的深度嵌套拿值会影响性能。\n\n<!--more-->\n\n例子：\n\n```javascript\n//before\n\nfunction b(){\n    var getId = document.getElementById(\"id\");\n    var getClass = documnent.getElementsByClassName(\"class\");\n    getId.style.width......\n}\n    \n//after\n    function a(){\n        var doc = document;\n        var getId = doc.getElementById(\"id\");\n        var getClass = doc.getElementsByClassName(\"class\");\n        ....\n    }\n```\n\n","slug":"《高性能JavaScript》读书笔记","published":1,"updated":"2018-04-02T06:55:27.423Z","photos":[],"link":"","_id":"cjollnbuh0072unfymwmap3wb","content":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p><code>&lt;script&gt;</code>方面的我写了一篇博文链接地址：<a href=\"http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html\" target=\"_blank\" rel=\"noopener\">浅谈script标签</a></p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>数据存储：</p>\n<ol>\n<li>把数据存在访问字面量和局部变量是然后去访问速度最快的。</li>\n<li>全局变量总是在作用域的最末端所以访问速度也是最慢的。</li>\n<li>对象的深度嵌套拿值会影响性能。</li>\n</ol>\n<a id=\"more\"></a>\n<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getClass = documnent.getElementsByClassName(<span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">    getId.style.width......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//after</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getId = doc.getElementById(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getClass = doc.getElementsByClassName(<span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p><code>&lt;script&gt;</code>方面的我写了一篇博文链接地址：<a href=\"http://xuzihao.fun/%E6%B5%85%E8%B0%88script%E6%A0%87%E7%AD%BE.html\" target=\"_blank\" rel=\"noopener\">浅谈script标签</a></p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>数据存储：</p>\n<ol>\n<li>把数据存在访问字面量和局部变量是然后去访问速度最快的。</li>\n<li>全局变量总是在作用域的最末端所以访问速度也是最慢的。</li>\n<li>对象的深度嵌套拿值会影响性能。</li>\n</ol>","more":"<p>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//before</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getId = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getClass = documnent.getElementsByClassName(<span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">    getId.style.width......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//after</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> doc = <span class=\"built_in\">document</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getId = doc.getElementById(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> getClass = doc.getElementsByClassName(<span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"使用阿里云oss踩得坑","date":"2017-08-22T06:44:24.000Z","comments":1,"layout":"post","_content":"\n# Provisional headers are shown\n\n首先我现在console里看见以下报错：\n\n![oss1](/images/oss1.png)\n\n<!--more-->\n\n接着我去了network里看：\n\n![oss3](/images/oss3.png)\n\n最后找到了根本问题所在：\n\n因为我在**https**的网页中，是不允许我去发**http**的请求，所以我需要去自己发起请求的client代码中加入secure：true。\n\n![oss2](/images/oss2.png)\n\n# ErrorCode: AccessForbidden\n\n![oss4](/images/oss4.png)\n\n如果遇到以上问题，那肯定是你的 **CORS**没有配置或者配置不对。\n\n我们需要到阿里云的的OSS控制台中做以下设置：\n\n![oss5](/images/oss5.png)\n\n以下也是上述没设置好的错，错误为：**出错请求的HTTP状态码**\n\n\n\n![oss6](/images/oss6.png)","source":"_posts/使用阿里云oss踩得坑.md","raw":"---\ntitle: 使用阿里云oss踩得坑\ndate: 2017-08-22 14:44:24\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: 阿里云服务的使用\n---\n\n# Provisional headers are shown\n\n首先我现在console里看见以下报错：\n\n![oss1](/images/oss1.png)\n\n<!--more-->\n\n接着我去了network里看：\n\n![oss3](/images/oss3.png)\n\n最后找到了根本问题所在：\n\n因为我在**https**的网页中，是不允许我去发**http**的请求，所以我需要去自己发起请求的client代码中加入secure：true。\n\n![oss2](/images/oss2.png)\n\n# ErrorCode: AccessForbidden\n\n![oss4](/images/oss4.png)\n\n如果遇到以上问题，那肯定是你的 **CORS**没有配置或者配置不对。\n\n我们需要到阿里云的的OSS控制台中做以下设置：\n\n![oss5](/images/oss5.png)\n\n以下也是上述没设置好的错，错误为：**出错请求的HTTP状态码**\n\n\n\n![oss6](/images/oss6.png)","slug":"使用阿里云oss踩得坑","published":1,"updated":"2017-08-22T06:46:25.000Z","photos":[],"link":"","_id":"cjollnbuj0076unfydp01vd53","content":"<h1 id=\"Provisional-headers-are-shown\"><a href=\"#Provisional-headers-are-shown\" class=\"headerlink\" title=\"Provisional headers are shown\"></a>Provisional headers are shown</h1><p>首先我现在console里看见以下报错：</p>\n<p><img src=\"/images/oss1.png\" alt=\"oss1\"></p>\n<a id=\"more\"></a>\n<p>接着我去了network里看：</p>\n<p><img src=\"/images/oss3.png\" alt=\"oss3\"></p>\n<p>最后找到了根本问题所在：</p>\n<p>因为我在<strong>https</strong>的网页中，是不允许我去发<strong>http</strong>的请求，所以我需要去自己发起请求的client代码中加入secure：true。</p>\n<p><img src=\"/images/oss2.png\" alt=\"oss2\"></p>\n<h1 id=\"ErrorCode-AccessForbidden\"><a href=\"#ErrorCode-AccessForbidden\" class=\"headerlink\" title=\"ErrorCode: AccessForbidden\"></a>ErrorCode: AccessForbidden</h1><p><img src=\"/images/oss4.png\" alt=\"oss4\"></p>\n<p>如果遇到以上问题，那肯定是你的 <strong>CORS</strong>没有配置或者配置不对。</p>\n<p>我们需要到阿里云的的OSS控制台中做以下设置：</p>\n<p><img src=\"/images/oss5.png\" alt=\"oss5\"></p>\n<p>以下也是上述没设置好的错，错误为：<strong>出错请求的HTTP状态码</strong></p>\n<p><img src=\"/images/oss6.png\" alt=\"oss6\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Provisional-headers-are-shown\"><a href=\"#Provisional-headers-are-shown\" class=\"headerlink\" title=\"Provisional headers are shown\"></a>Provisional headers are shown</h1><p>首先我现在console里看见以下报错：</p>\n<p><img src=\"/images/oss1.png\" alt=\"oss1\"></p>","more":"<p>接着我去了network里看：</p>\n<p><img src=\"/images/oss3.png\" alt=\"oss3\"></p>\n<p>最后找到了根本问题所在：</p>\n<p>因为我在<strong>https</strong>的网页中，是不允许我去发<strong>http</strong>的请求，所以我需要去自己发起请求的client代码中加入secure：true。</p>\n<p><img src=\"/images/oss2.png\" alt=\"oss2\"></p>\n<h1 id=\"ErrorCode-AccessForbidden\"><a href=\"#ErrorCode-AccessForbidden\" class=\"headerlink\" title=\"ErrorCode: AccessForbidden\"></a>ErrorCode: AccessForbidden</h1><p><img src=\"/images/oss4.png\" alt=\"oss4\"></p>\n<p>如果遇到以上问题，那肯定是你的 <strong>CORS</strong>没有配置或者配置不对。</p>\n<p>我们需要到阿里云的的OSS控制台中做以下设置：</p>\n<p><img src=\"/images/oss5.png\" alt=\"oss5\"></p>\n<p>以下也是上述没设置好的错，错误为：<strong>出错请求的HTTP状态码</strong></p>\n<p><img src=\"/images/oss6.png\" alt=\"oss6\"></p>"},{"title":"前端面试题","date":"2017-05-07T05:42:00.000Z","comments":1,"layout":"post","_content":"\n# 前端面试题\n\n题目来自[朴灵大大的github](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js)\n\n## 介绍JavaScript的基本数据类型\n\nJavaScript有5种简单数据类型： `Undefined`、`Null`、`Boolean`、`Number`、`String`。还有一种复杂数据类型`Object`。\n\n### typeof操作符\n\n用`typeof`操作符能检测给定变量的数据类型。（括号中是自己的理解意思）\n\n- \"undefined\" \t ————这个值没有被定义。（这个变量存在但是没有给它值）\n- \"boolean\"       ————这个值是布尔值。（这个值有true或false输出）\n- \"string\"             ————这个值是字符串。（字符串或字符序列）\n- \"number\"        ————这个值是数值。（字面意思）\n- \"object\"          ————这个值是对象或null。(这个值可能是个对象或者空)\n- \"function\"       ————这个值是函数。(字面意思)\n\n<!--more-->\n\n```javascript\nvar message=\"wa\";\nalert(typeof wa);\t//string\n```\n\n### Undefined类型\n\n使用var声明变量但没有给它加以初始化，这个变量的值就是`undefined`。\n\n```javascript\nvar message;\nalert(message == undefined);\t\t\t//true\n```\n\n### Null类型\n\n`null`表示一个空对象指针，但是用`typeof`操作符检测`null`会返回`object`的原因是什么？\n\n```javascript\nvar car =null;\nalert(\"typeof car\");\t\t\t//\"object\"\n```\n\n只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存`null`值。这样有助于进一步区分`null`和`undefined`。\n\n### Boolean类型\n\n这个字母值就是`true`、`false`。但是这两个值和数字不是一回事情。所以 **true**不一定等于 **1** ， **false**不一定等于 **0** 。\n\n还有布尔值是区分大小的 **True**和 **False**都不是 **Boolean值**。\n\n### Number类型\n\n- 浮点数值\n- 数值范围\n\n最小值保存在Number.MIN_VALUE ： 5e-324。 保存着**-Infinity**\n\n最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着**Infinity**。\n\n想确定一个数值是否有穷可以用`isFinite()函数`。这个函数会在最小和最大数值之间会返回 **true**。\n\n```javascript\nalert(isFinite(result));\n```\n\n- NaN（Not a Number）\n\n任何涉及NaN的操作（NaN/10）都会返回 **NaN**。\n\n还有 **NaN**与任何值都不想等，包括 **NaN**本身。\n\n实际上0除以0才会返回 **NaN**，正数除以0返回 **Infinity**，负数除以0返回 **-Infinity**。\n\n`isNaN()函数`可以确定这个函数是否**不是数值**。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。\n\n- 数值转换\n\n  三个函数\t可以 把非数值转换为数值。\n\n  - `Number()`\t       可以用于任何数据类型\t\n  - `parseInt()`         字符串转换成数值\n  - `parseFloat()`     字符串转换成数值\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（\"）或单引号（'）表示。\n\n-  字符字面量——转义序列\t\t（\\n 换行\n\n  ​\t\t\t\t\t\t\t     \\t 制表···）\n\n- 字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。\n\n```javascript\nvar lang=\"Java\";\nlang=lang+\"Script\";\n```\n\n- 转换为字符串\n  - 使用 `toString()方法` 但是null和undefined没有这个方法所以，\n  - 就使用`String()方法`\n\n### Object类型\n\n对象其实就是一组数据和功能的集合。\n\n```javascript\nvar o =new Object();\n```\n\n## 说说写JavaScript的基本规范？\n\n","source":"_posts/前端面试题.md","raw":"---\ntitle: 前端面试题\ndate: 2017-05-07 13:42\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n# 前端面试题\n\n题目来自[朴灵大大的github](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js)\n\n## 介绍JavaScript的基本数据类型\n\nJavaScript有5种简单数据类型： `Undefined`、`Null`、`Boolean`、`Number`、`String`。还有一种复杂数据类型`Object`。\n\n### typeof操作符\n\n用`typeof`操作符能检测给定变量的数据类型。（括号中是自己的理解意思）\n\n- \"undefined\" \t ————这个值没有被定义。（这个变量存在但是没有给它值）\n- \"boolean\"       ————这个值是布尔值。（这个值有true或false输出）\n- \"string\"             ————这个值是字符串。（字符串或字符序列）\n- \"number\"        ————这个值是数值。（字面意思）\n- \"object\"          ————这个值是对象或null。(这个值可能是个对象或者空)\n- \"function\"       ————这个值是函数。(字面意思)\n\n<!--more-->\n\n```javascript\nvar message=\"wa\";\nalert(typeof wa);\t//string\n```\n\n### Undefined类型\n\n使用var声明变量但没有给它加以初始化，这个变量的值就是`undefined`。\n\n```javascript\nvar message;\nalert(message == undefined);\t\t\t//true\n```\n\n### Null类型\n\n`null`表示一个空对象指针，但是用`typeof`操作符检测`null`会返回`object`的原因是什么？\n\n```javascript\nvar car =null;\nalert(\"typeof car\");\t\t\t//\"object\"\n```\n\n只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存`null`值。这样有助于进一步区分`null`和`undefined`。\n\n### Boolean类型\n\n这个字母值就是`true`、`false`。但是这两个值和数字不是一回事情。所以 **true**不一定等于 **1** ， **false**不一定等于 **0** 。\n\n还有布尔值是区分大小的 **True**和 **False**都不是 **Boolean值**。\n\n### Number类型\n\n- 浮点数值\n- 数值范围\n\n最小值保存在Number.MIN_VALUE ： 5e-324。 保存着**-Infinity**\n\n最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着**Infinity**。\n\n想确定一个数值是否有穷可以用`isFinite()函数`。这个函数会在最小和最大数值之间会返回 **true**。\n\n```javascript\nalert(isFinite(result));\n```\n\n- NaN（Not a Number）\n\n任何涉及NaN的操作（NaN/10）都会返回 **NaN**。\n\n还有 **NaN**与任何值都不想等，包括 **NaN**本身。\n\n实际上0除以0才会返回 **NaN**，正数除以0返回 **Infinity**，负数除以0返回 **-Infinity**。\n\n`isNaN()函数`可以确定这个函数是否**不是数值**。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。\n\n- 数值转换\n\n  三个函数\t可以 把非数值转换为数值。\n\n  - `Number()`\t       可以用于任何数据类型\t\n  - `parseInt()`         字符串转换成数值\n  - `parseFloat()`     字符串转换成数值\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（\"）或单引号（'）表示。\n\n-  字符字面量——转义序列\t\t（\\n 换行\n\n  ​\t\t\t\t\t\t\t     \\t 制表···）\n\n- 字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。\n\n```javascript\nvar lang=\"Java\";\nlang=lang+\"Script\";\n```\n\n- 转换为字符串\n  - 使用 `toString()方法` 但是null和undefined没有这个方法所以，\n  - 就使用`String()方法`\n\n### Object类型\n\n对象其实就是一组数据和功能的集合。\n\n```javascript\nvar o =new Object();\n```\n\n## 说说写JavaScript的基本规范？\n\n","slug":"前端面试题","published":1,"updated":"2017-12-13T13:42:40.120Z","photos":[],"link":"","_id":"cjollnbul007aunfykoxsomyg","content":"<h1 id=\"前端面试题\"><a href=\"#前端面试题\" class=\"headerlink\" title=\"前端面试题\"></a>前端面试题</h1><p>题目来自<a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js\" target=\"_blank\" rel=\"noopener\">朴灵大大的github</a></p>\n<h2 id=\"介绍JavaScript的基本数据类型\"><a href=\"#介绍JavaScript的基本数据类型\" class=\"headerlink\" title=\"介绍JavaScript的基本数据类型\"></a>介绍JavaScript的基本数据类型</h2><p>JavaScript有5种简单数据类型： <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>。还有一种复杂数据类型<code>Object</code>。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>用<code>typeof</code>操作符能检测给定变量的数据类型。（括号中是自己的理解意思）</p>\n<ul>\n<li>“undefined”      ————这个值没有被定义。（这个变量存在但是没有给它值）</li>\n<li>“boolean”       ————这个值是布尔值。（这个值有true或false输出）</li>\n<li>“string”             ————这个值是字符串。（字符串或字符序列）</li>\n<li>“number”        ————这个值是数值。（字面意思）</li>\n<li>“object”          ————这个值是对象或null。(这个值可能是个对象或者空)</li>\n<li>“function”       ————这个值是函数。(字面意思)</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message=<span class=\"string\">\"wa\"</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> wa);\t<span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>使用var声明变量但没有给它加以初始化，这个变量的值就是<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message;</span><br><span class=\"line\">alert(message == <span class=\"literal\">undefined</span>);\t\t\t<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p><code>null</code>表示一个空对象指针，但是用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code>的原因是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car =<span class=\"literal\">null</span>;</span><br><span class=\"line\">alert(<span class=\"string\">\"typeof car\"</span>);\t\t\t<span class=\"comment\">//\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存<code>null</code>值。这样有助于进一步区分<code>null</code>和<code>undefined</code>。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>这个字母值就是<code>true</code>、<code>false</code>。但是这两个值和数字不是一回事情。所以 <strong>true</strong>不一定等于 <strong>1</strong> ， <strong>false</strong>不一定等于 <strong>0</strong> 。</p>\n<p>还有布尔值是区分大小的 <strong>True</strong>和 <strong>False</strong>都不是 <strong>Boolean值</strong>。</p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><ul>\n<li>浮点数值</li>\n<li>数值范围</li>\n</ul>\n<p>最小值保存在Number.MIN_VALUE ： 5e-324。 保存着<strong>-Infinity</strong></p>\n<p>最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着<strong>Infinity</strong>。</p>\n<p>想确定一个数值是否有穷可以用<code>isFinite()函数</code>。这个函数会在最小和最大数值之间会返回 <strong>true</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NaN（Not a Number）</li>\n</ul>\n<p>任何涉及NaN的操作（NaN/10）都会返回 <strong>NaN</strong>。</p>\n<p>还有 <strong>NaN</strong>与任何值都不想等，包括 <strong>NaN</strong>本身。</p>\n<p>实际上0除以0才会返回 <strong>NaN</strong>，正数除以0返回 <strong>Infinity</strong>，负数除以0返回 <strong>-Infinity</strong>。</p>\n<p><code>isNaN()函数</code>可以确定这个函数是否<strong>不是数值</strong>。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。</p>\n<ul>\n<li><p>数值转换</p>\n<p>三个函数    可以 把非数值转换为数值。</p>\n<ul>\n<li><code>Number()</code>           可以用于任何数据类型    </li>\n<li><code>parseInt()</code>         字符串转换成数值</li>\n<li><code>parseFloat()</code>     字符串转换成数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（”）或单引号（’）表示。</p>\n<ul>\n<li><p>字符字面量——转义序列        （\\n 换行</p>\n<p>​                                 \\t 制表···）</p>\n</li>\n<li><p>字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lang=<span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">lang=lang+<span class=\"string\">\"Script\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>转换为字符串<ul>\n<li>使用 <code>toString()方法</code> 但是null和undefined没有这个方法所以，</li>\n<li>就使用<code>String()方法</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象其实就是一组数据和功能的集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"说说写JavaScript的基本规范？\"><a href=\"#说说写JavaScript的基本规范？\" class=\"headerlink\" title=\"说说写JavaScript的基本规范？\"></a>说说写JavaScript的基本规范？</h2>","site":{"data":{}},"excerpt":"<h1 id=\"前端面试题\"><a href=\"#前端面试题\" class=\"headerlink\" title=\"前端面试题\"></a>前端面试题</h1><p>题目来自<a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js\" target=\"_blank\" rel=\"noopener\">朴灵大大的github</a></p>\n<h2 id=\"介绍JavaScript的基本数据类型\"><a href=\"#介绍JavaScript的基本数据类型\" class=\"headerlink\" title=\"介绍JavaScript的基本数据类型\"></a>介绍JavaScript的基本数据类型</h2><p>JavaScript有5种简单数据类型： <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>。还有一种复杂数据类型<code>Object</code>。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>用<code>typeof</code>操作符能检测给定变量的数据类型。（括号中是自己的理解意思）</p>\n<ul>\n<li>“undefined”      ————这个值没有被定义。（这个变量存在但是没有给它值）</li>\n<li>“boolean”       ————这个值是布尔值。（这个值有true或false输出）</li>\n<li>“string”             ————这个值是字符串。（字符串或字符序列）</li>\n<li>“number”        ————这个值是数值。（字面意思）</li>\n<li>“object”          ————这个值是对象或null。(这个值可能是个对象或者空)</li>\n<li>“function”       ————这个值是函数。(字面意思)</li>\n</ul>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message=<span class=\"string\">\"wa\"</span>;</span><br><span class=\"line\">alert(<span class=\"keyword\">typeof</span> wa);\t<span class=\"comment\">//string</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>使用var声明变量但没有给它加以初始化，这个变量的值就是<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> message;</span><br><span class=\"line\">alert(message == <span class=\"literal\">undefined</span>);\t\t\t<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p><code>null</code>表示一个空对象指针，但是用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code>的原因是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car =<span class=\"literal\">null</span>;</span><br><span class=\"line\">alert(<span class=\"string\">\"typeof car\"</span>);\t\t\t<span class=\"comment\">//\"object\"</span></span><br></pre></td></tr></table></figure>\n<p>只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存<code>null</code>值。这样有助于进一步区分<code>null</code>和<code>undefined</code>。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>这个字母值就是<code>true</code>、<code>false</code>。但是这两个值和数字不是一回事情。所以 <strong>true</strong>不一定等于 <strong>1</strong> ， <strong>false</strong>不一定等于 <strong>0</strong> 。</p>\n<p>还有布尔值是区分大小的 <strong>True</strong>和 <strong>False</strong>都不是 <strong>Boolean值</strong>。</p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><ul>\n<li>浮点数值</li>\n<li>数值范围</li>\n</ul>\n<p>最小值保存在Number.MIN_VALUE ： 5e-324。 保存着<strong>-Infinity</strong></p>\n<p>最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着<strong>Infinity</strong>。</p>\n<p>想确定一个数值是否有穷可以用<code>isFinite()函数</code>。这个函数会在最小和最大数值之间会返回 <strong>true</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NaN（Not a Number）</li>\n</ul>\n<p>任何涉及NaN的操作（NaN/10）都会返回 <strong>NaN</strong>。</p>\n<p>还有 <strong>NaN</strong>与任何值都不想等，包括 <strong>NaN</strong>本身。</p>\n<p>实际上0除以0才会返回 <strong>NaN</strong>，正数除以0返回 <strong>Infinity</strong>，负数除以0返回 <strong>-Infinity</strong>。</p>\n<p><code>isNaN()函数</code>可以确定这个函数是否<strong>不是数值</strong>。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。</p>\n<ul>\n<li><p>数值转换</p>\n<p>三个函数    可以 把非数值转换为数值。</p>\n<ul>\n<li><code>Number()</code>           可以用于任何数据类型    </li>\n<li><code>parseInt()</code>         字符串转换成数值</li>\n<li><code>parseFloat()</code>     字符串转换成数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（”）或单引号（’）表示。</p>\n<ul>\n<li><p>字符字面量——转义序列        （\\n 换行</p>\n<p>​                                 \\t 制表···）</p>\n</li>\n<li><p>字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lang=<span class=\"string\">\"Java\"</span>;</span><br><span class=\"line\">lang=lang+<span class=\"string\">\"Script\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>转换为字符串<ul>\n<li>使用 <code>toString()方法</code> 但是null和undefined没有这个方法所以，</li>\n<li>就使用<code>String()方法</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象其实就是一组数据和功能的集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"说说写JavaScript的基本规范？\"><a href=\"#说说写JavaScript的基本规范？\" class=\"headerlink\" title=\"说说写JavaScript的基本规范？\"></a>说说写JavaScript的基本规范？</h2>"},{"title":"初入Node","date":"2018-01-25T12:05:00.000Z","comments":1,"layout":"post","_content":"# 初入Node\n\n## 回调地狱\n\nNode的异步回调惯例：\n\n```javascript\nvar fs = require('fs');\nfs.readFile('/index.html', (err, data) => {\n  if(err) throw err;\n  getSomething(data.toString(), res);\n})\n```\n\n<!--more-->\n\n在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。","source":"_posts/初入Node.md","raw":"---\ntitle: 初入Node\ndate: 2018-01-25 20:05\ncomments: true\nlayout: post\ntags: node.js\ncategories: Node.js\n---\n# 初入Node\n\n## 回调地狱\n\nNode的异步回调惯例：\n\n```javascript\nvar fs = require('fs');\nfs.readFile('/index.html', (err, data) => {\n  if(err) throw err;\n  getSomething(data.toString(), res);\n})\n```\n\n<!--more-->\n\n在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。","slug":"初入Node","published":1,"updated":"2018-01-25T12:52:12.843Z","photos":[],"link":"","_id":"cjollnbus007eunfyoztjgbjc","content":"<h1 id=\"初入Node\"><a href=\"#初入Node\" class=\"headerlink\" title=\"初入Node\"></a>初入Node</h1><h2 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h2><p>Node的异步回调惯例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  getSomething(data.toString(), res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"初入Node\"><a href=\"#初入Node\" class=\"headerlink\" title=\"初入Node\"></a>初入Node</h1><h2 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h2><p>Node的异步回调惯例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  getSomething(data.toString(), res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","more":"<p>在Node里大多数的内置模块在使用回调时都会带两个参数，第一个一般都用来放可能会发生的错误（err或error）;第二个是放结果。</p>"},{"title":"英语例句","date":"2017-10-18T12:24:00.000Z","comments":1,"layout":"post","_content":"\n- No sooner ····· then      \n    - 一。。。就。\n- not so much ...as\n    - 与其。。不如\n- no more...than\n    - 不过，仅仅；至多，同。。。一样不\n\n      <!--more-->\n- as...as\n    - 像。。。一样\n- imagined + sth. + to be + adj.    \n    - 为复合宾语解构\n\n- put forward to do sth.\n    - 提出要求做某事\n- get sth. done\n    - 把某事做了\n- would rather \n    - 引导从句的虚拟结构中，如果表示对现在或将来情况的愿望，从句用**过去时**。\n    - 如果是对过去情况的虚拟，从句用**过去完成时**。\n- never, hardly, seldom, little, not until, not, not only, no sooner, no    longer, nowhere, by no means \n    - 以上位于句首需要部分倒装\n- keep diary\n    - 记日记\n- can't help doing sth.\n    - 忍不住做。。。\n- be worth doing\n    - 某（事或物）值得做\n- be worthy to be done 或 sth. is worthy of being done 以及 sb. be worhty of doing sth. 或者 sb. be worthy to do sth.\n    - 和 worth 的意思一样\n- It is/was /will be the first time that ...句式\n    - 主句谓语是is，从句用现在完成时\n    - 主句谓语是was，从句谓语用过去完成时\n    - 主句谓语是will be，从句谓语用一般现在时\n- be appropriate for sb. 或 be appropriate to do sth.\n    - 固定搭配\n- appreciate + doing sth.\n    - 感激做某事\n- but to do,但是but之前出现了 do/does/did/done就要 but do\n- no mood | in the mood\n    - 没有心情 | 有好心情\n- the impression of + doing sth.\n    -  做过某事的印象\n- have a(the) right to sth.\n    - 享有。。的权利\n- do nothing but \n    - 此结构后要求动词原形\n- need doing / need to done\n    - 需要被\n- sb. spend some time doing sth.\n    - 花时间做某事\n- a large amount of, a great deal of \n    - 固定搭配\n- 将来时除了有be going to, will + do, 还有be to do, be about to do.\n- play a part in\n    - 在。。。起作用。\n- must have + 过去分词\n    - 过去一定做了某事，表示对过去的肯定推测。\n- could have + 过去分词\n    - 本来能够做....\n- another + 基数词 + 名词复数\n    - 另外/在多少个\n    - I want another three apples.\n    - 我还需要三个苹果。\n- mind doing sth.\n    - 介意做某事\n- to help you to out \n    - 表示目的\n- be going to + 一般现在时（leaves）","source":"_posts/例句.md","raw":"---\ntitle: 英语例句\ndate: 2017-10-18 20:24\ncomments: true\nlayout: post\ntags: [English]\ncategories: 日常\n---\n\n- No sooner ····· then      \n    - 一。。。就。\n- not so much ...as\n    - 与其。。不如\n- no more...than\n    - 不过，仅仅；至多，同。。。一样不\n\n      <!--more-->\n- as...as\n    - 像。。。一样\n- imagined + sth. + to be + adj.    \n    - 为复合宾语解构\n\n- put forward to do sth.\n    - 提出要求做某事\n- get sth. done\n    - 把某事做了\n- would rather \n    - 引导从句的虚拟结构中，如果表示对现在或将来情况的愿望，从句用**过去时**。\n    - 如果是对过去情况的虚拟，从句用**过去完成时**。\n- never, hardly, seldom, little, not until, not, not only, no sooner, no    longer, nowhere, by no means \n    - 以上位于句首需要部分倒装\n- keep diary\n    - 记日记\n- can't help doing sth.\n    - 忍不住做。。。\n- be worth doing\n    - 某（事或物）值得做\n- be worthy to be done 或 sth. is worthy of being done 以及 sb. be worhty of doing sth. 或者 sb. be worthy to do sth.\n    - 和 worth 的意思一样\n- It is/was /will be the first time that ...句式\n    - 主句谓语是is，从句用现在完成时\n    - 主句谓语是was，从句谓语用过去完成时\n    - 主句谓语是will be，从句谓语用一般现在时\n- be appropriate for sb. 或 be appropriate to do sth.\n    - 固定搭配\n- appreciate + doing sth.\n    - 感激做某事\n- but to do,但是but之前出现了 do/does/did/done就要 but do\n- no mood | in the mood\n    - 没有心情 | 有好心情\n- the impression of + doing sth.\n    -  做过某事的印象\n- have a(the) right to sth.\n    - 享有。。的权利\n- do nothing but \n    - 此结构后要求动词原形\n- need doing / need to done\n    - 需要被\n- sb. spend some time doing sth.\n    - 花时间做某事\n- a large amount of, a great deal of \n    - 固定搭配\n- 将来时除了有be going to, will + do, 还有be to do, be about to do.\n- play a part in\n    - 在。。。起作用。\n- must have + 过去分词\n    - 过去一定做了某事，表示对过去的肯定推测。\n- could have + 过去分词\n    - 本来能够做....\n- another + 基数词 + 名词复数\n    - 另外/在多少个\n    - I want another three apples.\n    - 我还需要三个苹果。\n- mind doing sth.\n    - 介意做某事\n- to help you to out \n    - 表示目的\n- be going to + 一般现在时（leaves）","slug":"例句","published":1,"updated":"2017-11-12T07:57:17.000Z","photos":[],"link":"","_id":"cjollnbuu007iunfydrd67pw0","content":"<ul>\n<li>No sooner ····· then      <ul>\n<li>一。。。就。</li>\n</ul>\n</li>\n<li>not so much …as<ul>\n<li>与其。。不如</li>\n</ul>\n</li>\n<li><p>no more…than</p>\n<ul>\n<li><p>不过，仅仅；至多，同。。。一样不</p>\n<a id=\"more\"></a></li>\n</ul>\n</li>\n<li>as…as<ul>\n<li>像。。。一样</li>\n</ul>\n</li>\n<li><p>imagined + sth. + to be + adj.    </p>\n<ul>\n<li>为复合宾语解构</li>\n</ul>\n</li>\n<li><p>put forward to do sth.</p>\n<ul>\n<li>提出要求做某事</li>\n</ul>\n</li>\n<li>get sth. done<ul>\n<li>把某事做了</li>\n</ul>\n</li>\n<li>would rather <ul>\n<li>引导从句的虚拟结构中，如果表示对现在或将来情况的愿望，从句用<strong>过去时</strong>。</li>\n<li>如果是对过去情况的虚拟，从句用<strong>过去完成时</strong>。</li>\n</ul>\n</li>\n<li>never, hardly, seldom, little, not until, not, not only, no sooner, no    longer, nowhere, by no means <ul>\n<li>以上位于句首需要部分倒装</li>\n</ul>\n</li>\n<li>keep diary<ul>\n<li>记日记</li>\n</ul>\n</li>\n<li>can’t help doing sth.<ul>\n<li>忍不住做。。。</li>\n</ul>\n</li>\n<li>be worth doing<ul>\n<li>某（事或物）值得做</li>\n</ul>\n</li>\n<li>be worthy to be done 或 sth. is worthy of being done 以及 sb. be worhty of doing sth. 或者 sb. be worthy to do sth.<ul>\n<li>和 worth 的意思一样</li>\n</ul>\n</li>\n<li>It is/was /will be the first time that …句式<ul>\n<li>主句谓语是is，从句用现在完成时</li>\n<li>主句谓语是was，从句谓语用过去完成时</li>\n<li>主句谓语是will be，从句谓语用一般现在时</li>\n</ul>\n</li>\n<li>be appropriate for sb. 或 be appropriate to do sth.<ul>\n<li>固定搭配</li>\n</ul>\n</li>\n<li>appreciate + doing sth.<ul>\n<li>感激做某事</li>\n</ul>\n</li>\n<li>but to do,但是but之前出现了 do/does/did/done就要 but do</li>\n<li>no mood | in the mood<ul>\n<li>没有心情 | 有好心情</li>\n</ul>\n</li>\n<li>the impression of + doing sth.<ul>\n<li>做过某事的印象</li>\n</ul>\n</li>\n<li>have a(the) right to sth.<ul>\n<li>享有。。的权利</li>\n</ul>\n</li>\n<li>do nothing but <ul>\n<li>此结构后要求动词原形</li>\n</ul>\n</li>\n<li>need doing / need to done<ul>\n<li>需要被</li>\n</ul>\n</li>\n<li>sb. spend some time doing sth.<ul>\n<li>花时间做某事</li>\n</ul>\n</li>\n<li>a large amount of, a great deal of <ul>\n<li>固定搭配</li>\n</ul>\n</li>\n<li>将来时除了有be going to, will + do, 还有be to do, be about to do.</li>\n<li>play a part in<ul>\n<li>在。。。起作用。</li>\n</ul>\n</li>\n<li>must have + 过去分词<ul>\n<li>过去一定做了某事，表示对过去的肯定推测。</li>\n</ul>\n</li>\n<li>could have + 过去分词<ul>\n<li>本来能够做….</li>\n</ul>\n</li>\n<li>another + 基数词 + 名词复数<ul>\n<li>另外/在多少个</li>\n<li>I want another three apples.</li>\n<li>我还需要三个苹果。</li>\n</ul>\n</li>\n<li>mind doing sth.<ul>\n<li>介意做某事</li>\n</ul>\n</li>\n<li>to help you to out <ul>\n<li>表示目的</li>\n</ul>\n</li>\n<li>be going to + 一般现在时（leaves）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>No sooner ····· then      <ul>\n<li>一。。。就。</li>\n</ul>\n</li>\n<li>not so much …as<ul>\n<li>与其。。不如</li>\n</ul>\n</li>\n<li><p>no more…than</p>\n<ul>\n<li><p>不过，仅仅；至多，同。。。一样不</p>","more":"</li>\n</ul>\n</li>\n<li>as…as<ul>\n<li>像。。。一样</li>\n</ul>\n</li>\n<li><p>imagined + sth. + to be + adj.    </p>\n<ul>\n<li>为复合宾语解构</li>\n</ul>\n</li>\n<li><p>put forward to do sth.</p>\n<ul>\n<li>提出要求做某事</li>\n</ul>\n</li>\n<li>get sth. done<ul>\n<li>把某事做了</li>\n</ul>\n</li>\n<li>would rather <ul>\n<li>引导从句的虚拟结构中，如果表示对现在或将来情况的愿望，从句用<strong>过去时</strong>。</li>\n<li>如果是对过去情况的虚拟，从句用<strong>过去完成时</strong>。</li>\n</ul>\n</li>\n<li>never, hardly, seldom, little, not until, not, not only, no sooner, no    longer, nowhere, by no means <ul>\n<li>以上位于句首需要部分倒装</li>\n</ul>\n</li>\n<li>keep diary<ul>\n<li>记日记</li>\n</ul>\n</li>\n<li>can’t help doing sth.<ul>\n<li>忍不住做。。。</li>\n</ul>\n</li>\n<li>be worth doing<ul>\n<li>某（事或物）值得做</li>\n</ul>\n</li>\n<li>be worthy to be done 或 sth. is worthy of being done 以及 sb. be worhty of doing sth. 或者 sb. be worthy to do sth.<ul>\n<li>和 worth 的意思一样</li>\n</ul>\n</li>\n<li>It is/was /will be the first time that …句式<ul>\n<li>主句谓语是is，从句用现在完成时</li>\n<li>主句谓语是was，从句谓语用过去完成时</li>\n<li>主句谓语是will be，从句谓语用一般现在时</li>\n</ul>\n</li>\n<li>be appropriate for sb. 或 be appropriate to do sth.<ul>\n<li>固定搭配</li>\n</ul>\n</li>\n<li>appreciate + doing sth.<ul>\n<li>感激做某事</li>\n</ul>\n</li>\n<li>but to do,但是but之前出现了 do/does/did/done就要 but do</li>\n<li>no mood | in the mood<ul>\n<li>没有心情 | 有好心情</li>\n</ul>\n</li>\n<li>the impression of + doing sth.<ul>\n<li>做过某事的印象</li>\n</ul>\n</li>\n<li>have a(the) right to sth.<ul>\n<li>享有。。的权利</li>\n</ul>\n</li>\n<li>do nothing but <ul>\n<li>此结构后要求动词原形</li>\n</ul>\n</li>\n<li>need doing / need to done<ul>\n<li>需要被</li>\n</ul>\n</li>\n<li>sb. spend some time doing sth.<ul>\n<li>花时间做某事</li>\n</ul>\n</li>\n<li>a large amount of, a great deal of <ul>\n<li>固定搭配</li>\n</ul>\n</li>\n<li>将来时除了有be going to, will + do, 还有be to do, be about to do.</li>\n<li>play a part in<ul>\n<li>在。。。起作用。</li>\n</ul>\n</li>\n<li>must have + 过去分词<ul>\n<li>过去一定做了某事，表示对过去的肯定推测。</li>\n</ul>\n</li>\n<li>could have + 过去分词<ul>\n<li>本来能够做….</li>\n</ul>\n</li>\n<li>another + 基数词 + 名词复数<ul>\n<li>另外/在多少个</li>\n<li>I want another three apples.</li>\n<li>我还需要三个苹果。</li>\n</ul>\n</li>\n<li>mind doing sth.<ul>\n<li>介意做某事</li>\n</ul>\n</li>\n<li>to help you to out <ul>\n<li>表示目的</li>\n</ul>\n</li>\n<li>be going to + 一般现在时（leaves）</li>\n</ul>"},{"title":"英语单词","date":"2017-10-18T12:24:00.000Z","comments":1,"layout":"post","_content":"\n- delicate| 易碎的\n- idleness| 懒惰\n- tell the truth | 说实话\n\n<!--more-->\n\n- tell a lie / tell lies| 说谎话\n- hold the view 持某种看法;认为.\n- in view of | 鉴于，考虑到\n- working on | 从事于；致力于\n- set free | 释放\n- run into | 偶然\n- allow | 允许，给予(人)\n- for fear of | 生怕，以免\n","source":"_posts/单词.md","raw":"---\ntitle: 英语单词\ndate: 2017-10-18 20:24\ncomments: true\nlayout: post\ntags: [English]\ncategories: 日常\n---\n\n- delicate| 易碎的\n- idleness| 懒惰\n- tell the truth | 说实话\n\n<!--more-->\n\n- tell a lie / tell lies| 说谎话\n- hold the view 持某种看法;认为.\n- in view of | 鉴于，考虑到\n- working on | 从事于；致力于\n- set free | 释放\n- run into | 偶然\n- allow | 允许，给予(人)\n- for fear of | 生怕，以免\n","slug":"单词","published":1,"updated":"2017-11-12T07:57:05.000Z","photos":[],"link":"","_id":"cjollnbux007munfyzmj6nouh","content":"<ul>\n<li>delicate| 易碎的</li>\n<li>idleness| 懒惰</li>\n<li>tell the truth | 说实话</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>tell a lie / tell lies| 说谎话</li>\n<li>hold the view 持某种看法;认为.</li>\n<li>in view of | 鉴于，考虑到</li>\n<li>working on | 从事于；致力于</li>\n<li>set free | 释放</li>\n<li>run into | 偶然</li>\n<li>allow | 允许，给予(人)</li>\n<li>for fear of | 生怕，以免</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>delicate| 易碎的</li>\n<li>idleness| 懒惰</li>\n<li>tell the truth | 说实话</li>\n</ul>","more":"<ul>\n<li>tell a lie / tell lies| 说谎话</li>\n<li>hold the view 持某种看法;认为.</li>\n<li>in view of | 鉴于，考虑到</li>\n<li>working on | 从事于；致力于</li>\n<li>set free | 释放</li>\n<li>run into | 偶然</li>\n<li>allow | 允许，给予(人)</li>\n<li>for fear of | 生怕，以免</li>\n</ul>"},{"title":"天总知乎live小结","date":"2018-05-24T05:27:00.000Z","comments":1,"layout":"post","_content":"## 误入歧途怎么对编程感兴趣？\n\n如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。\n\n<!--more-->\n## 介绍某端语言\n\n前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js\n\n\n\n后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。\n\n\n\n大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python\n\n\n\n游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。\n\n\n\n硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。\n\n\n\n机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。\n\n\n\n运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的\n\n\n\n## 如何学习\n\n一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。\n\n\n\n## 学习效率如何提高。\n\n你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。\n\n\n\n很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。\n\n\n\n## 补\n\n### C / C++\n\n主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。\n\n### 数据结构\n\n即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。\n\n### 算法\n\n算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。\n\n\n\n### 计算机网络\n\n先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）\n\n\n\n### 操作系统\n\nFIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。\n\n\n\n### 数据库\n\n数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。\n\n\n\n## 书籍推荐\n\n从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）","source":"_posts/天总知乎live小结.md","raw":"---\ntitle: 天总知乎live小结\ndate: 2018-05-24 13:27\ncomments: true\nlayout: post\ntags: 生活\ncategories: 日常\n---\n## 误入歧途怎么对编程感兴趣？\n\n如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。\n\n<!--more-->\n## 介绍某端语言\n\n前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js\n\n\n\n后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。\n\n\n\n大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python\n\n\n\n游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。\n\n\n\n硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。\n\n\n\n机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。\n\n\n\n运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的\n\n\n\n## 如何学习\n\n一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。\n\n\n\n## 学习效率如何提高。\n\n你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。\n\n\n\n很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。\n\n\n\n## 补\n\n### C / C++\n\n主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。\n\n### 数据结构\n\n即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。\n\n### 算法\n\n算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。\n\n\n\n### 计算机网络\n\n先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）\n\n\n\n### 操作系统\n\nFIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。\n\n\n\n### 数据库\n\n数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。\n\n\n\n## 书籍推荐\n\n从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）","slug":"天总知乎live小结","published":1,"updated":"2018-05-25T12:16:57.489Z","photos":[],"link":"","_id":"cjollnbv4007qunfybdn5lowm","content":"<h2 id=\"误入歧途怎么对编程感兴趣？\"><a href=\"#误入歧途怎么对编程感兴趣？\" class=\"headerlink\" title=\"误入歧途怎么对编程感兴趣？\"></a>误入歧途怎么对编程感兴趣？</h2><p>如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。</p>\n<a id=\"more\"></a>\n<h2 id=\"介绍某端语言\"><a href=\"#介绍某端语言\" class=\"headerlink\" title=\"介绍某端语言\"></a>介绍某端语言</h2><p>前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js</p>\n<p>后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。</p>\n<p>大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python</p>\n<p>游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。</p>\n<p>硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。</p>\n<p>机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。</p>\n<p>运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的</p>\n<h2 id=\"如何学习\"><a href=\"#如何学习\" class=\"headerlink\" title=\"如何学习\"></a>如何学习</h2><p>一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。</p>\n<h2 id=\"学习效率如何提高。\"><a href=\"#学习效率如何提高。\" class=\"headerlink\" title=\"学习效率如何提高。\"></a>学习效率如何提高。</h2><p>你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。</p>\n<p>很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。</p>\n<h2 id=\"补\"><a href=\"#补\" class=\"headerlink\" title=\"补\"></a>补</h2><h3 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C / C++\"></a>C / C++</h3><p>主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。</p>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><p>先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）</p>\n<h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h3><p>FIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。</p>\n<h2 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h2><p>从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"误入歧途怎么对编程感兴趣？\"><a href=\"#误入歧途怎么对编程感兴趣？\" class=\"headerlink\" title=\"误入歧途怎么对编程感兴趣？\"></a>误入歧途怎么对编程感兴趣？</h2><p>如果你是一个对数学感兴趣的同学，或许可以从 C语言，再自学一些数据结构和算法中找到乐趣；如果你是一个希望快速看到成果的人，可能 HTML + CSS 会成为你入门的最好伴侣。</p>","more":"<h2 id=\"介绍某端语言\"><a href=\"#介绍某端语言\" class=\"headerlink\" title=\"介绍某端语言\"></a>介绍某端语言</h2><p>前端毫无疑问，HTML+CSS+JavaScript，可以选修 TypeScript 以备不时之需，当然，随着对前端的要求越来越高，你可能还要学一下 Node.js</p>\n<p>后端，这里我们指的是服务端开发，更主流的还是使用 Java，如果你有偏好的话，Python / Ruby / Node / PHP / Go 都可以成为你的选择。</p>\n<p>大数据，从语言上来说大数据的工具都是用 Java 实现的，也会有比较多的人用 Java，或者python</p>\n<p>游戏开发，游戏开发除了页游有 PHP 的以外，PC端游都是 C++ 的，而手机游戏同移动端开发，Android 和 iOS 就是那点，Java，Kotlin，Objective C 和 Swift。</p>\n<p>硬件开发，除了玩具级的 Ruff 使用的是自己封装的 JavaScript 以外，C / C++ 绝对是不二的选择。</p>\n<p>机器学习，虽然很多语言都有机器学习的库，不过 Python 凭借着库多而取胜，尤其是今年机器学习大热年，越来越多的 Python + 机器学习培训班冒了出来，大家趋之若鹜。</p>\n<p>运维的话Linux 和 Shell 脚本肯定是必须的，Python 学会自然是更好的</p>\n<h2 id=\"如何学习\"><a href=\"#如何学习\" class=\"headerlink\" title=\"如何学习\"></a>如何学习</h2><p>一些实践平台和学习平台可能是你最好的伴侣——比如：CodeCademy / FreeCodeCamp / Coursera 等等，国内的比如慕课网，网易云课堂，计蒜客等等。此外，对于有一些基础的同学，也可以去一些国内的技术交流社区，刷刷 GitHub，StackOverflow，如果英文不够好，还可以去 SegmentFault，稀土掘金看看，同样也不乏入门到精通的教程。此外，读书和实践仍然是你最好的方式。</p>\n<h2 id=\"学习效率如何提高。\"><a href=\"#学习效率如何提高。\" class=\"headerlink\" title=\"学习效率如何提高。\"></a>学习效率如何提高。</h2><p>你会发现，看了这么多书，似乎并没有什么卵用，该不会的还是不会。而如果你光低着头写代码而不看书、文档或者是其他比较权威的内容，就会发现，写了这么多代码，似乎都差不多，对自己并没有什么实际的提升。</p>\n<p>很多人都在思考的内容，为什么学习的内容好像越来越多，学都学不完，而且每个东西的学习成本似乎都没有下降，依旧要花费很长的时间进行学习。其实计算机这种东西，我仍然认为，万变不离其宗，而且概念这种东西尤其如此，变化最多最让人吐槽的前端，其实抄来抄去，还是把后端很久以前的东西拿过来用用，变成了自己的，只是因为过去的前端没用受到足够的重视，技术比较落后而已。而后端的很多概念呢，则是挪用一些基础的思想进行演化，换句话说，只要计算机基础够扎实，那么很多东西对你而言并不是什么太大的问题。</p>\n<h2 id=\"补\"><a href=\"#补\" class=\"headerlink\" title=\"补\"></a>补</h2><h3 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C / C++\"></a>C / C++</h3><p>主要是因为，学习了这个，对于其他语言而言更容易掌握，你可以更好的理解底层内存的工作，尤其是指针，引用值和引用地址的区别一清二楚。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>即使太难的你掌握不了，我觉得，懂哈希的和不懂哈希的还是两种人；懂树的和不懂树的也是两种人，懂排序算法和不懂排序算法的也是两种人。</p>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>算法对于一些数据结构都没有学好的人而言可能算是很难理解的，但是理解时间和空间复杂度的和不理解时空复杂度的也不一样，知道分治法也是一件受益的事情。</p>\n<h3 id=\"计算机网络\"><a href=\"#计算机网络\" class=\"headerlink\" title=\"计算机网络\"></a>计算机网络</h3><p>先不说应用层的 HTTP，知道 TCP 的常见问题和三次握手，到物理层的网线——也是另一个收益。（知道如何买网线和修网线）</p>\n<h3 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h3><p>FIFO 和 LRU，死锁问题，生产者消费者，银行家问题，哲学家进餐问题等等，帮你更好的了解系统，从而将系统中的解决方案用于自己的应用或者服务中。</p>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>数据库看起来并不太重要，但是实际上它提供了 SQL 里的一些基础知识，你至少可以了解基础的范式。</p>\n<h2 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h2><p>从《Heading First》系列到《XX 是怎样 XX 的》（比如《网络是怎样连接》），还有日本人的《图解XXXX》系列都是入门里比较基础和科普级别的书。动物书系列有很多可以深入的书，而各类黑皮书往往像教科书一样可以让你更好的全面理解（比如《现代操作系统》《算法导论》）</p>"},{"title":"初入React+Webpack(入门)","date":"2017-04-27T07:29:00.000Z","comments":1,"layout":"post","_content":"\n因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。\n\n# 通过npm使用React\n\n建议在 React 中使用 CommonJS 模块系统，比如 [browserify](http://browserify.org/) 或 [webpack](https://webpack.github.io/)。使用 [`react`](https://www.npmjs.com/package/react) 和 [`react-dom`](https://www.npmjs.com/package/react-dom) npm 包.\n\n我使用webpack来安装React DOM的\n\n```git\n$ npm install --save react react-dom babelify babel-preset-react\n$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js\n```\n\n那么第一步肯定是创建Hello World啦~\n\n<!--more-->\n\n我们需要创建一个`helloworld.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n\n在代码中\n\n```javascript\nReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n```\n\n这是jsx语法。可以去 [JSX 语法](http://reactjs.cn/react/docs/jsx-in-depth.html) 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 `<script type=\"text/babel\">` 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！\n\n## 分离文件\n\n那么我们在React中也是可以分离js的。\n\n我们需要创建一个下面的`build/helloworld.js`\n\n```javascript\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n\n之后我们在html的文件中像以前引用文件一样去引用就可以了。\n\n```javascript\n<script type=\"text/babel\" src=\"src/helloworld.js\"></script>\n```\n\n**但是我是用chrome**不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了`<script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>`那么就我就去跟着开发文档配置了`babel`。\n\n## Babel\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：[Babel](https://babeljs.io/)\n\n## Webpack(入门)\n\n### webpack是什么？\n\nwebpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考[官网](https://webpack.js.org/)\n\n\n###开始使用Webpack\n我们来一步一步去开始学习使用Webpack。\n\n###安装\nWebpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。\n\n```git\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n我们在终端中使用`npm init `的命令可以自动创建这个package.json文件\n\n```git\nnpm init\n```\n\n输入后，会有一些需要你输入的信息，你只需要一直回车就行了。\n\n- 接下来我们在这个文件夹下进行安装Webpack作为依赖包\n\n```Git\n//安装Webpack\nnpm install --save-dev webpack\n```\n\n- 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.\n- **index.html**文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n\n```\n\n- **Greeter.js**只包括一个用来返回包含问候信息的html元素的函数。\n\n```\n//main.js \nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n- **main.js**用来把Greeter模块返回的节点插入页面。\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n### 正式使用Webpack\n\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n\n可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果\n\n#### 通过配置文件来使用Webpack\n\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n\n> **注**：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n#### 更快捷的执行打包任务\n\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n\n> **注：**package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`\n\n#### Loaders\n\n**鼎鼎大名的Loaders登场了！**\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的`modules`关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n- `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n**创建带有问候信息的JSON文件(命名为config.json)**\n\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n### Babel\n\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n- 下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n- 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n#### Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n\n在webpack中配置Babel的方法如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n使用ES6的模块定义和渲染Greeter模块\n\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n#### Babel的配置选项\n\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### CSS\n\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style-loaders!css-loaders'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n\n> **注**：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n> 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n\n\n\n\n\n\n\n\n感谢网上各大资源\n\n参考以及转载（其中在原文中有些错误我已经更改）\n [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#)\n\n\n","source":"_posts/初入React.md","raw":"---\ntitle: 初入React+Webpack(入门)\ndate: 2017-04-27 15:29\ncomments: true\nlayout: post\ntags: [JavaScript,React,Webpack]\ncategories: React\n---\n\n因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。\n\n# 通过npm使用React\n\n建议在 React 中使用 CommonJS 模块系统，比如 [browserify](http://browserify.org/) 或 [webpack](https://webpack.github.io/)。使用 [`react`](https://www.npmjs.com/package/react) 和 [`react-dom`](https://www.npmjs.com/package/react-dom) npm 包.\n\n我使用webpack来安装React DOM的\n\n```git\n$ npm install --save react react-dom babelify babel-preset-react\n$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js\n```\n\n那么第一步肯定是创建Hello World啦~\n\n<!--more-->\n\n我们需要创建一个`helloworld.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n\n在代码中\n\n```javascript\nReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n```\n\n这是jsx语法。可以去 [JSX 语法](http://reactjs.cn/react/docs/jsx-in-depth.html) 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 `<script type=\"text/babel\">` 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！\n\n## 分离文件\n\n那么我们在React中也是可以分离js的。\n\n我们需要创建一个下面的`build/helloworld.js`\n\n```javascript\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n\n之后我们在html的文件中像以前引用文件一样去引用就可以了。\n\n```javascript\n<script type=\"text/babel\" src=\"src/helloworld.js\"></script>\n```\n\n**但是我是用chrome**不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了`<script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>`那么就我就去跟着开发文档配置了`babel`。\n\n## Babel\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：[Babel](https://babeljs.io/)\n\n## Webpack(入门)\n\n### webpack是什么？\n\nwebpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考[官网](https://webpack.js.org/)\n\n\n###开始使用Webpack\n我们来一步一步去开始学习使用Webpack。\n\n###安装\nWebpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。\n\n```git\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n我们在终端中使用`npm init `的命令可以自动创建这个package.json文件\n\n```git\nnpm init\n```\n\n输入后，会有一些需要你输入的信息，你只需要一直回车就行了。\n\n- 接下来我们在这个文件夹下进行安装Webpack作为依赖包\n\n```Git\n//安装Webpack\nnpm install --save-dev webpack\n```\n\n- 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.\n- **index.html**文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n\n```\n\n- **Greeter.js**只包括一个用来返回包含问候信息的html元素的函数。\n\n```\n//main.js \nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n- **main.js**用来把Greeter模块返回的节点插入页面。\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n### 正式使用Webpack\n\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n\n可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果\n\n#### 通过配置文件来使用Webpack\n\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n\n> **注**：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n#### 更快捷的执行打包任务\n\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n\n> **注：**package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`\n\n#### Loaders\n\n**鼎鼎大名的Loaders登场了！**\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的`modules`关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n- `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n**创建带有问候信息的JSON文件(命名为config.json)**\n\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n### Babel\n\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n- 下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n- 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n#### Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n\n在webpack中配置Babel的方法如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n使用ES6的模块定义和渲染Greeter模块\n\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n#### Babel的配置选项\n\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### CSS\n\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style-loaders!css-loaders'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n\n> **注**：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n> 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n\n\n\n\n\n\n\n\n感谢网上各大资源\n\n参考以及转载（其中在原文中有些错误我已经更改）\n [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#)\n\n\n","slug":"初入React","published":1,"updated":"2017-07-24T14:37:52.000Z","photos":[],"link":"","_id":"cjollnbvf007uunfyn4fdpm0y","content":"<p>因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。</p>\n<h1 id=\"通过npm使用React\"><a href=\"#通过npm使用React\" class=\"headerlink\" title=\"通过npm使用React\"></a>通过npm使用React</h1><p>建议在 React 中使用 CommonJS 模块系统，比如 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">browserify</a> 或 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">webpack</a>。使用 <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"noopener\"><code>react</code></a> 和 <a href=\"https://www.npmjs.com/package/react-dom\" target=\"_blank\" rel=\"noopener\"><code>react-dom</code></a> npm 包.</p>\n<p>我使用webpack来安装React DOM的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save react react-dom babelify babel-preset-react</span><br><span class=\"line\">$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js</span><br></pre></td></tr></table></figure>\n<p>那么第一步肯定是创建Hello World啦~</p>\n<a id=\"more\"></a>\n<p>我们需要创建一个<code>helloworld.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      );</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在代码中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br></pre></td></tr></table></figure>\n<p>这是jsx语法。可以去 <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"noopener\">JSX 语法</a> 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 <code>&lt;script type=&quot;text/babel&quot;&gt;</code> 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！</p>\n<h2 id=\"分离文件\"><a href=\"#分离文件\" class=\"headerlink\" title=\"分离文件\"></a>分离文件</h2><p>那么我们在React中也是可以分离js的。</p>\n<p>我们需要创建一个下面的<code>build/helloworld.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>之后我们在html的文件中像以前引用文件一样去引用就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"src/helloworld.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>但是我是用chrome</strong>不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了<code>&lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;</code>那么就我就去跟着开发文档配置了<code>babel</code>。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener\">Babel</a></p>\n<h2 id=\"Webpack-入门\"><a href=\"#Webpack-入门\" class=\"headerlink\" title=\"Webpack(入门)\"></a>Webpack(入门)</h2><h3 id=\"webpack是什么？\"><a href=\"#webpack是什么？\" class=\"headerlink\" title=\"webpack是什么？\"></a>webpack是什么？</h3><p>webpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>###开始使用Webpack<br>我们来一步一步去开始学习使用Webpack。</p>\n<p>###安装<br>Webpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\">//安装到你的项目目录</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<p>我们在终端中使用<code>npm init</code>的命令可以自动创建这个package.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>输入后，会有一些需要你输入的信息，你只需要一直回车就行了。</p>\n<ul>\n<li>接下来我们在这个文件夹下进行安装Webpack作为依赖包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装Webpack</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<ul>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.</li>\n<li><strong>index.html</strong>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Greeter.js</strong>只包括一个用来返回包含问候信息的html元素的函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js </span><br><span class=\"line\">var greeter = require(&apos;./Greeter.js&apos;);</span><br><span class=\"line\">document.getElementById(&apos;root&apos;).appendChild(greeter());</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>main.js</strong>用来把Greeter模块返回的节点插入页面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Greeter.js</span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack非全局安装的情况</span><br><span class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</span><br></pre></td></tr></table></figure>\n<p>可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<h4 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<h4 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h4><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot; //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^1.12.9&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：</strong>package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p>\n<p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的<code>modules</code>关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装可以装换JSON的loader</span><br><span class=\"line\">npm install --save-dev json-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;//在配置文件里添加JSON loader</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,</span><br><span class=\"line\">    colors: true,</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    inline: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>创建带有问候信息的JSON文件(命名为config.json)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var config = require(&apos;./config.json&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = config.greetText;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h3 id=\"Babel-1\"><a href=\"#Babel-1\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h4 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>在webpack中配置Babel的方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;,//在webpack的module部分的loaders里进行配置即可</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [&apos;es2015&apos;,&apos;react&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,</span><br><span class=\"line\">    colors: true,</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    inline: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Greeter,js</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h4><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;...&#125; // Omitted for brevity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        loader: &apos;style-loaders!css-loaders&apos;//添加对样式表的处理</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  -ms-text-size-adjust: 100%;</span><br><span class=\"line\">  -webkit-text-size-adjust: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">*, *:before, *:after &#123;</span><br><span class=\"line\">  box-sizing: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n</blockquote>\n<p>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n<p>感谢网上各大资源</p>\n<p>参考以及转载（其中在原文中有些错误我已经更改）<br> <a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></p>\n","site":{"data":{}},"excerpt":"<p>因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。</p>\n<h1 id=\"通过npm使用React\"><a href=\"#通过npm使用React\" class=\"headerlink\" title=\"通过npm使用React\"></a>通过npm使用React</h1><p>建议在 React 中使用 CommonJS 模块系统，比如 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"noopener\">browserify</a> 或 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"noopener\">webpack</a>。使用 <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"noopener\"><code>react</code></a> 和 <a href=\"https://www.npmjs.com/package/react-dom\" target=\"_blank\" rel=\"noopener\"><code>react-dom</code></a> npm 包.</p>\n<p>我使用webpack来安装React DOM的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save react react-dom babelify babel-preset-react</span><br><span class=\"line\">$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js</span><br></pre></td></tr></table></figure>\n<p>那么第一步肯定是创建Hello World啦~</p>","more":"<p>我们需要创建一个<code>helloworld.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">      ReactDOM.render(</span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">      );</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在代码中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">      );</span><br></pre></td></tr></table></figure>\n<p>这是jsx语法。可以去 <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"noopener\">JSX 语法</a> 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 <code>&lt;script type=&quot;text/babel&quot;&gt;</code> 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！</p>\n<h2 id=\"分离文件\"><a href=\"#分离文件\" class=\"headerlink\" title=\"分离文件\"></a>分离文件</h2><p>那么我们在React中也是可以分离js的。</p>\n<p>我们需要创建一个下面的<code>build/helloworld.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt;Hello, world!<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>之后我们在html的文件中像以前引用文件一样去引用就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"src/helloworld.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><strong>但是我是用chrome</strong>不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了<code>&lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;</code>那么就我就去跟着开发文档配置了<code>babel</code>。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"noopener\">Babel</a></p>\n<h2 id=\"Webpack-入门\"><a href=\"#Webpack-入门\" class=\"headerlink\" title=\"Webpack(入门)\"></a>Webpack(入门)</h2><h3 id=\"webpack是什么？\"><a href=\"#webpack是什么？\" class=\"headerlink\" title=\"webpack是什么？\"></a>webpack是什么？</h3><p>webpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>###开始使用Webpack<br>我们来一步一步去开始学习使用Webpack。</p>\n<p>###安装<br>Webpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//全局安装</span><br><span class=\"line\">npm install -g webpack</span><br><span class=\"line\">//安装到你的项目目录</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<p>我们在终端中使用<code>npm init</code>的命令可以自动创建这个package.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<p>输入后，会有一些需要你输入的信息，你只需要一直回车就行了。</p>\n<ul>\n<li>接下来我们在这个文件夹下进行安装Webpack作为依赖包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装Webpack</span><br><span class=\"line\">npm install --save-dev webpack</span><br></pre></td></tr></table></figure>\n<ul>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.</li>\n<li><strong>index.html</strong>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Greeter.js</strong>只包括一个用来返回包含问候信息的html元素的函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js </span><br><span class=\"line\">var greeter = require(&apos;./Greeter.js&apos;);</span><br><span class=\"line\">document.getElementById(&apos;root&apos;).appendChild(greeter());</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>main.js</strong>用来把Greeter模块返回的节点插入页面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Greeter.js</span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack非全局安装的情况</span><br><span class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</span><br></pre></td></tr></table></figure>\n<p>可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<h4 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<h4 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h4><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack&quot; //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^1.12.9&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：</strong>package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p>\n<p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的<code>modules</code>关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装可以装换JSON的loader</span><br><span class=\"line\">npm install --save-dev json-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;//在配置文件里添加JSON loader</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,</span><br><span class=\"line\">    colors: true,</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    inline: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>创建带有问候信息的JSON文件(命名为config.json)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var config = require(&apos;./config.json&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = function() &#123;</span><br><span class=\"line\">  var greet = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">  greet.textContent = config.greetText;</span><br><span class=\"line\">  return greet;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h3 id=\"Babel-1\"><a href=\"#Babel-1\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h4 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</span><br></pre></td></tr></table></figure>\n<p>在webpack中配置Babel的方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;,//在webpack的module部分的loaders里进行配置即可</span><br><span class=\"line\">        query: &#123;</span><br><span class=\"line\">          presets: [&apos;es2015&apos;,&apos;react&apos;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: &quot;./public&quot;,</span><br><span class=\"line\">    colors: true,</span><br><span class=\"line\">    historyApiFallback: true,</span><br><span class=\"line\">    inline: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save react react-dom</span><br></pre></td></tr></table></figure>\n<p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Greeter,js</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import config from &apos;./config.json&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Greeter extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &#123;config.greetText&#125;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Greeter</span><br></pre></td></tr></table></figure>\n<p>使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<h4 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h4><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack.config.js</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/public&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;...&#125; // Omitted for brevity</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装</span><br><span class=\"line\">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  devtool: &apos;eval-source-map&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: __dirname + &quot;/build&quot;,</span><br><span class=\"line\">    filename: &quot;bundle.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.json$/,</span><br><span class=\"line\">        loader: &quot;json-loaders&quot;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.js$/,</span><br><span class=\"line\">        exclude: /node_modules/,</span><br><span class=\"line\">        loader: &apos;babel-loaders&apos;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        loader: &apos;style-loaders!css-loaders&apos;//添加对样式表的处理</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html &#123;</span><br><span class=\"line\">  box-sizing: border-box;</span><br><span class=\"line\">  -ms-text-size-adjust: 100%;</span><br><span class=\"line\">  -webkit-text-size-adjust: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">*, *:before, *:after &#123;</span><br><span class=\"line\">  box-sizing: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;;</span><br><span class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</span><br><span class=\"line\">import Greeter from &apos;./Greeter&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</span><br><span class=\"line\"></span><br><span class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n</blockquote>\n<p>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n<p>感谢网上各大资源</p>\n<p>参考以及转载（其中在原文中有些错误我已经更改）<br> <a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"noopener\">入门Webpack，看这篇就够了</a></p>"},{"title":"学习CSS(一)","date":"2017-09-04T12:26:00.000Z","comments":1,"layout":"post","_content":"\n\n# 给自己的要求\n\n- class应该用在概念上相似的元素，这些元素可以出现在同一页面上的多个位置。\n- ID应该用于不同的唯一的元素。\n\n# DTD（文档类型定义）\n\nDOCTYPE声明是指HTML文档开头处的一行或两行代码。它描述使用哪个DTD。\n\n> 但是在HTML5中就不需要URL，浏览器一般不读取这些文件。而是只识别常见的DOCTYPE声明。\n\n# 选择器\n\n选择器最常用的两种： **类型选择器** 和 **后代选择器** 。\n\n<!--more-->\n\n```css\n/*类型选择器*/\np { color: black; }\nh1 { font-weight: bold; }\n```\n\n\n\n```css\n/*后代选择器*/\nblockquote p { padding: 15px; }\n```\n\n还有两种就是： **ID选择器** 和 **类选择器** 。\n\n```css\n#intro { font-weight: bold; }\t\t\t/*ID选择器*/\n.date-posted { color: #ccc; }\t\t\t/*类选择器*/\n```\n\n\n\n但是类选择器和ID选择器用太多也不是很好。下面有一种方法可以以一种方式对主体和副的地方操作css\n\n```html\n#main-content h2 { font-weight: 1.8em; }\n#secondary-content h2 { font-weight: 1.2em; }\n\n<div id=\"main-content\">\n\t<h2>Hello</h2>\n\t.....\n</div>\n<div id=\"secondary-content\">\n  \t<h2>Hi</h2>\n  \t....\n</div>\n```\n\n## 伪类\n\n```css\na:link { color : blue; }\t\t/*链接伪类*/\na:visited { color : green; }\t/*链接伪类*/\n/*链接伪类只能用于锚元素*/\n\n动态伪类\na:hover, a:focus, a:active { color: red; }\t\t\ntr:hover { background-color: red; }\ninput:focus { background-color: yellow; }\n\n伪类链接\na:visited:hover { color: olive; }\n```\n\n## 通用选择器\n\n```css\n* {\n    padding: 0;\n  \tmargin: 0;\n}\n/*删除每个元素上默认的浏览器内边距和外边距*/\n```\n\n## 高级选择器之----子选择器\n\n后代选择器选择一个元素的所有后代，那么子选择器就只选择元素的直接后代啦！\n\n```Html\n#nav>li {\n  font-size: 30px;\n}\n\n<ul id=\"nav\">\n\t<li><a href=\"/home/\">Home</a></li>\n  \t<li><a href=\"/Services/\">Services</a></li>\n  \t\t<ul>\n        \t<li><a href=\"/Services/design\">Design</a></li>\n        \t<li><a href=\"/Services/development\">Development</a></li>\n        \t<li><a href=\"/Services/consultancy\">Consultancy</a></li>\n  \t\t</ul>\n    <li><a href=\"/contact\">Contact Us</a></li>\n</ul>\n```\n\n![css1](/images/css1.png)\n\n子选择器指定列表子元素的样式，但是不影响他的孙元素。\n\n\n\n还有根据一个元素与另一个元素的相邻关系对它应用样式。\n\n```html\nh2 + p {\n  font-size: 1.4em;\n  font-weight: blod;\n  color: #777;\n}\n\n<h2>Hello World</h2>\n    <p>I'm here</p>\n    <p>wow,me too</p>\n```\n\n![css2](/images/css2.png)\n\n更新于2017-09-05 21：30\n\n## 属性选择器\n\n```html\n[title=hi]\n{\nborder:5px solid blue;\n}\n\n<h1>可以应用样式：</h1>\n<img title=\"hi\" src=\"/nihao.gif\" />\n<br />\n<a title=\"hi\" href=\"/\">W3School</a>\n<hr />\n```\n\n# 层叠和特殊性\n\n### 层叠性\n\n有 **!important** 标志的规则，它优先于任何规则。\n\n\n\n### 特殊性 \n\n|           选择器            |   特殊性   | 以10为基数的特殊性 |\n| :----------------------: | :-----: | :--------: |\n|        Style=“ ”         | 1,0,0,0 |    1000    |\n|   #wrapper #content {}   | 0,2,0,0 |    200     |\n| #content .datePosted {}  | 0,1,1,0 |    110     |\n|      div#content {}      | 0,1,0,1 |    101     |\n|       #content {}        | 0,1,0,0 |    100     |\n| p.comment .dateposted {} | 0,0,2,1 |     21     |\n|       p.comment {}       | 0,0,1,1 |     11     |\n|         div p {}         | 0,0,0,2 |     2      |\n|           p {}           | 0,0,0,1 |     1      |\n\n\n\n```html\n#content div#main-content h2{\ncolor: gray;\n}\n#content #main-content>h2 {\ncolor: blue;\n}\nbody #content div[div=\"main-content\"] h2 {\ncolor: green;\n}\n#main-content div.news-story h2 {\ncolor: orange;\n}\n#main-content [class=\"news-story\"] h2 {\ncolor: yellow;\n}\ndiv#main-content div.news-story h2.first {\ncolor: red;\n}\n\n<div id=\"content\">\n  <div id=\"main-content\">\n    <h2>Hello</h2>\n    <p>哇</p>\n    <div class=\"news-story\">   \n      <h2 class=\"first\">BigBong</h2>\n      <p>嘻嘻</p>\n    </div>\n  </div>\n</div>\n```\n\n![css3](/images/css3.png)\n\n","source":"_posts/学CSS（一）.md","raw":"---\ntitle: 学习CSS(一)\ndate: 2017-09-04 20:26\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n\n# 给自己的要求\n\n- class应该用在概念上相似的元素，这些元素可以出现在同一页面上的多个位置。\n- ID应该用于不同的唯一的元素。\n\n# DTD（文档类型定义）\n\nDOCTYPE声明是指HTML文档开头处的一行或两行代码。它描述使用哪个DTD。\n\n> 但是在HTML5中就不需要URL，浏览器一般不读取这些文件。而是只识别常见的DOCTYPE声明。\n\n# 选择器\n\n选择器最常用的两种： **类型选择器** 和 **后代选择器** 。\n\n<!--more-->\n\n```css\n/*类型选择器*/\np { color: black; }\nh1 { font-weight: bold; }\n```\n\n\n\n```css\n/*后代选择器*/\nblockquote p { padding: 15px; }\n```\n\n还有两种就是： **ID选择器** 和 **类选择器** 。\n\n```css\n#intro { font-weight: bold; }\t\t\t/*ID选择器*/\n.date-posted { color: #ccc; }\t\t\t/*类选择器*/\n```\n\n\n\n但是类选择器和ID选择器用太多也不是很好。下面有一种方法可以以一种方式对主体和副的地方操作css\n\n```html\n#main-content h2 { font-weight: 1.8em; }\n#secondary-content h2 { font-weight: 1.2em; }\n\n<div id=\"main-content\">\n\t<h2>Hello</h2>\n\t.....\n</div>\n<div id=\"secondary-content\">\n  \t<h2>Hi</h2>\n  \t....\n</div>\n```\n\n## 伪类\n\n```css\na:link { color : blue; }\t\t/*链接伪类*/\na:visited { color : green; }\t/*链接伪类*/\n/*链接伪类只能用于锚元素*/\n\n动态伪类\na:hover, a:focus, a:active { color: red; }\t\t\ntr:hover { background-color: red; }\ninput:focus { background-color: yellow; }\n\n伪类链接\na:visited:hover { color: olive; }\n```\n\n## 通用选择器\n\n```css\n* {\n    padding: 0;\n  \tmargin: 0;\n}\n/*删除每个元素上默认的浏览器内边距和外边距*/\n```\n\n## 高级选择器之----子选择器\n\n后代选择器选择一个元素的所有后代，那么子选择器就只选择元素的直接后代啦！\n\n```Html\n#nav>li {\n  font-size: 30px;\n}\n\n<ul id=\"nav\">\n\t<li><a href=\"/home/\">Home</a></li>\n  \t<li><a href=\"/Services/\">Services</a></li>\n  \t\t<ul>\n        \t<li><a href=\"/Services/design\">Design</a></li>\n        \t<li><a href=\"/Services/development\">Development</a></li>\n        \t<li><a href=\"/Services/consultancy\">Consultancy</a></li>\n  \t\t</ul>\n    <li><a href=\"/contact\">Contact Us</a></li>\n</ul>\n```\n\n![css1](/images/css1.png)\n\n子选择器指定列表子元素的样式，但是不影响他的孙元素。\n\n\n\n还有根据一个元素与另一个元素的相邻关系对它应用样式。\n\n```html\nh2 + p {\n  font-size: 1.4em;\n  font-weight: blod;\n  color: #777;\n}\n\n<h2>Hello World</h2>\n    <p>I'm here</p>\n    <p>wow,me too</p>\n```\n\n![css2](/images/css2.png)\n\n更新于2017-09-05 21：30\n\n## 属性选择器\n\n```html\n[title=hi]\n{\nborder:5px solid blue;\n}\n\n<h1>可以应用样式：</h1>\n<img title=\"hi\" src=\"/nihao.gif\" />\n<br />\n<a title=\"hi\" href=\"/\">W3School</a>\n<hr />\n```\n\n# 层叠和特殊性\n\n### 层叠性\n\n有 **!important** 标志的规则，它优先于任何规则。\n\n\n\n### 特殊性 \n\n|           选择器            |   特殊性   | 以10为基数的特殊性 |\n| :----------------------: | :-----: | :--------: |\n|        Style=“ ”         | 1,0,0,0 |    1000    |\n|   #wrapper #content {}   | 0,2,0,0 |    200     |\n| #content .datePosted {}  | 0,1,1,0 |    110     |\n|      div#content {}      | 0,1,0,1 |    101     |\n|       #content {}        | 0,1,0,0 |    100     |\n| p.comment .dateposted {} | 0,0,2,1 |     21     |\n|       p.comment {}       | 0,0,1,1 |     11     |\n|         div p {}         | 0,0,0,2 |     2      |\n|           p {}           | 0,0,0,1 |     1      |\n\n\n\n```html\n#content div#main-content h2{\ncolor: gray;\n}\n#content #main-content>h2 {\ncolor: blue;\n}\nbody #content div[div=\"main-content\"] h2 {\ncolor: green;\n}\n#main-content div.news-story h2 {\ncolor: orange;\n}\n#main-content [class=\"news-story\"] h2 {\ncolor: yellow;\n}\ndiv#main-content div.news-story h2.first {\ncolor: red;\n}\n\n<div id=\"content\">\n  <div id=\"main-content\">\n    <h2>Hello</h2>\n    <p>哇</p>\n    <div class=\"news-story\">   \n      <h2 class=\"first\">BigBong</h2>\n      <p>嘻嘻</p>\n    </div>\n  </div>\n</div>\n```\n\n![css3](/images/css3.png)\n\n","slug":"学CSS（一）","published":1,"updated":"2017-09-06T09:48:24.000Z","photos":[],"link":"","_id":"cjollnbvh007yunfyjxthcyhl","content":"<h1 id=\"给自己的要求\"><a href=\"#给自己的要求\" class=\"headerlink\" title=\"给自己的要求\"></a>给自己的要求</h1><ul>\n<li>class应该用在概念上相似的元素，这些元素可以出现在同一页面上的多个位置。</li>\n<li>ID应该用于不同的唯一的元素。</li>\n</ul>\n<h1 id=\"DTD（文档类型定义）\"><a href=\"#DTD（文档类型定义）\" class=\"headerlink\" title=\"DTD（文档类型定义）\"></a>DTD（文档类型定义）</h1><p>DOCTYPE声明是指HTML文档开头处的一行或两行代码。它描述使用哪个DTD。</p>\n<blockquote>\n<p>但是在HTML5中就不需要URL，浏览器一般不读取这些文件。而是只识别常见的DOCTYPE声明。</p>\n</blockquote>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><p>选择器最常用的两种： <strong>类型选择器</strong> 和 <strong>后代选择器</strong> 。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*类型选择器*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*后代选择器*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>还有两种就是： <strong>ID选择器</strong> 和 <strong>类选择器</strong> 。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#intro</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;\t\t\t<span class=\"comment\">/*ID选择器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.date-posted</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>; &#125;\t\t\t<span class=\"comment\">/*类选择器*/</span></span><br></pre></td></tr></table></figure>\n<p>但是类选择器和ID选择器用太多也不是很好。下面有一种方法可以以一种方式对主体和副的地方操作css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#main-content h2 &#123; font-weight: 1.8em; &#125;</span><br><span class=\"line\">#secondary-content h2 &#123; font-weight: 1.2em; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"secondary-content\"</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  \t....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123; <span class=\"attribute\">color </span>: blue; &#125;\t\t<span class=\"comment\">/*链接伪类*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color </span>: green; &#125;\t<span class=\"comment\">/*链接伪类*/</span></span><br><span class=\"line\"><span class=\"comment\">/*链接伪类只能用于锚元素*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">动态伪类</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: red; &#125;\t\t</span><br><span class=\"line\"><span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">伪类链接</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: olive; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通用选择器\"><a href=\"#通用选择器\" class=\"headerlink\" title=\"通用选择器\"></a>通用选择器</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*删除每个元素上默认的浏览器内边距和外边距*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"高级选择器之—-子选择器\"><a href=\"#高级选择器之—-子选择器\" class=\"headerlink\" title=\"高级选择器之—-子选择器\"></a>高级选择器之—-子选择器</h2><p>后代选择器选择一个元素的所有后代，那么子选择器就只选择元素的直接后代啦！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nav&gt;li &#123;</span><br><span class=\"line\">  font-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/home/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/\"</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/design\"</span>&gt;</span>Design<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/development\"</span>&gt;</span>Development<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/consultancy\"</span>&gt;</span>Consultancy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact Us<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css1.png\" alt=\"css1\"></p>\n<p>子选择器指定列表子元素的样式，但是不影响他的孙元素。</p>\n<p>还有根据一个元素与另一个元素的相邻关系对它应用样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h2 + p &#123;</span><br><span class=\"line\">  font-size: 1.4em;</span><br><span class=\"line\">  font-weight: blod;</span><br><span class=\"line\">  color: #777;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I'm here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>wow,me too<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css2.png\" alt=\"css2\"></p>\n<p>更新于2017-09-05 21：30</p>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[title=hi]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">border:5px solid blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>可以应用样式：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hi\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/nihao.gif\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hi\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>W3School<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"层叠和特殊性\"><a href=\"#层叠和特殊性\" class=\"headerlink\" title=\"层叠和特殊性\"></a>层叠和特殊性</h1><h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>有 <strong>!important</strong> 标志的规则，它优先于任何规则。</p>\n<h3 id=\"特殊性\"><a href=\"#特殊性\" class=\"headerlink\" title=\"特殊性\"></a>特殊性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选择器</th>\n<th style=\"text-align:center\">特殊性</th>\n<th style=\"text-align:center\">以10为基数的特殊性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Style=“ ”</td>\n<td style=\"text-align:center\">1,0,0,0</td>\n<td style=\"text-align:center\">1000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#wrapper #content {}</td>\n<td style=\"text-align:center\">0,2,0,0</td>\n<td style=\"text-align:center\">200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#content .datePosted {}</td>\n<td style=\"text-align:center\">0,1,1,0</td>\n<td style=\"text-align:center\">110</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div#content {}</td>\n<td style=\"text-align:center\">0,1,0,1</td>\n<td style=\"text-align:center\">101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#content {}</td>\n<td style=\"text-align:center\">0,1,0,0</td>\n<td style=\"text-align:center\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p.comment .dateposted {}</td>\n<td style=\"text-align:center\">0,0,2,1</td>\n<td style=\"text-align:center\">21</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p.comment {}</td>\n<td style=\"text-align:center\">0,0,1,1</td>\n<td style=\"text-align:center\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div p {}</td>\n<td style=\"text-align:center\">0,0,0,2</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p {}</td>\n<td style=\"text-align:center\">0,0,0,1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#content div#main-content h2&#123;</span><br><span class=\"line\">color: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content #main-content&gt;h2 &#123;</span><br><span class=\"line\">color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body #content div[div=\"main-content\"] h2 &#123;</span><br><span class=\"line\">color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#main-content div.news-story h2 &#123;</span><br><span class=\"line\">color: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#main-content [class=\"news-story\"] h2 &#123;</span><br><span class=\"line\">color: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div#main-content div.news-story h2.first &#123;</span><br><span class=\"line\">color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>哇<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-story\"</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span>BigBong<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>嘻嘻<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css3.png\" alt=\"css3\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"给自己的要求\"><a href=\"#给自己的要求\" class=\"headerlink\" title=\"给自己的要求\"></a>给自己的要求</h1><ul>\n<li>class应该用在概念上相似的元素，这些元素可以出现在同一页面上的多个位置。</li>\n<li>ID应该用于不同的唯一的元素。</li>\n</ul>\n<h1 id=\"DTD（文档类型定义）\"><a href=\"#DTD（文档类型定义）\" class=\"headerlink\" title=\"DTD（文档类型定义）\"></a>DTD（文档类型定义）</h1><p>DOCTYPE声明是指HTML文档开头处的一行或两行代码。它描述使用哪个DTD。</p>\n<blockquote>\n<p>但是在HTML5中就不需要URL，浏览器一般不读取这些文件。而是只识别常见的DOCTYPE声明。</p>\n</blockquote>\n<h1 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h1><p>选择器最常用的两种： <strong>类型选择器</strong> 和 <strong>后代选择器</strong> 。</p>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*类型选择器*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*后代选择器*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">padding</span>: <span class=\"number\">15px</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>还有两种就是： <strong>ID选择器</strong> 和 <strong>类选择器</strong> 。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#intro</span> &#123; <span class=\"attribute\">font-weight</span>: bold; &#125;\t\t\t<span class=\"comment\">/*ID选择器*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.date-posted</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>; &#125;\t\t\t<span class=\"comment\">/*类选择器*/</span></span><br></pre></td></tr></table></figure>\n<p>但是类选择器和ID选择器用太多也不是很好。下面有一种方法可以以一种方式对主体和副的地方操作css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#main-content h2 &#123; font-weight: 1.8em; &#125;</span><br><span class=\"line\">#secondary-content h2 &#123; font-weight: 1.2em; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">\t.....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"secondary-content\"</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hi<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  \t....</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span> &#123; <span class=\"attribute\">color </span>: blue; &#125;\t\t<span class=\"comment\">/*链接伪类*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123; <span class=\"attribute\">color </span>: green; &#125;\t<span class=\"comment\">/*链接伪类*/</span></span><br><span class=\"line\"><span class=\"comment\">/*链接伪类只能用于锚元素*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">动态伪类</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:focus</span>, <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123; <span class=\"attribute\">color</span>: red; &#125;\t\t</span><br><span class=\"line\"><span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">background-color</span>: red; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123; <span class=\"attribute\">background-color</span>: yellow; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">伪类链接</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: olive; &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通用选择器\"><a href=\"#通用选择器\" class=\"headerlink\" title=\"通用选择器\"></a>通用选择器</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  \t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*删除每个元素上默认的浏览器内边距和外边距*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"高级选择器之—-子选择器\"><a href=\"#高级选择器之—-子选择器\" class=\"headerlink\" title=\"高级选择器之—-子选择器\"></a>高级选择器之—-子选择器</h2><p>后代选择器选择一个元素的所有后代，那么子选择器就只选择元素的直接后代啦！</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#nav&gt;li &#123;</span><br><span class=\"line\">  font-size: 30px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/home/\"</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/\"</span>&gt;</span>Services<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/design\"</span>&gt;</span>Design<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/development\"</span>&gt;</span>Development<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        \t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/Services/consultancy\"</span>&gt;</span>Consultancy<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/contact\"</span>&gt;</span>Contact Us<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css1.png\" alt=\"css1\"></p>\n<p>子选择器指定列表子元素的样式，但是不影响他的孙元素。</p>\n<p>还有根据一个元素与另一个元素的相邻关系对它应用样式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">h2 + p &#123;</span><br><span class=\"line\">  font-size: 1.4em;</span><br><span class=\"line\">  font-weight: blod;</span><br><span class=\"line\">  color: #777;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I'm here<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>wow,me too<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css2.png\" alt=\"css2\"></p>\n<p>更新于2017-09-05 21：30</p>\n<h2 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[title=hi]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">border:5px solid blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>可以应用样式：<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hi\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/nihao.gif\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hi\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/\"</span>&gt;</span>W3School<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"层叠和特殊性\"><a href=\"#层叠和特殊性\" class=\"headerlink\" title=\"层叠和特殊性\"></a>层叠和特殊性</h1><h3 id=\"层叠性\"><a href=\"#层叠性\" class=\"headerlink\" title=\"层叠性\"></a>层叠性</h3><p>有 <strong>!important</strong> 标志的规则，它优先于任何规则。</p>\n<h3 id=\"特殊性\"><a href=\"#特殊性\" class=\"headerlink\" title=\"特殊性\"></a>特殊性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选择器</th>\n<th style=\"text-align:center\">特殊性</th>\n<th style=\"text-align:center\">以10为基数的特殊性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Style=“ ”</td>\n<td style=\"text-align:center\">1,0,0,0</td>\n<td style=\"text-align:center\">1000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#wrapper #content {}</td>\n<td style=\"text-align:center\">0,2,0,0</td>\n<td style=\"text-align:center\">200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#content .datePosted {}</td>\n<td style=\"text-align:center\">0,1,1,0</td>\n<td style=\"text-align:center\">110</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div#content {}</td>\n<td style=\"text-align:center\">0,1,0,1</td>\n<td style=\"text-align:center\">101</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">#content {}</td>\n<td style=\"text-align:center\">0,1,0,0</td>\n<td style=\"text-align:center\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p.comment .dateposted {}</td>\n<td style=\"text-align:center\">0,0,2,1</td>\n<td style=\"text-align:center\">21</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p.comment {}</td>\n<td style=\"text-align:center\">0,0,1,1</td>\n<td style=\"text-align:center\">11</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">div p {}</td>\n<td style=\"text-align:center\">0,0,0,2</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">p {}</td>\n<td style=\"text-align:center\">0,0,0,1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#content div#main-content h2&#123;</span><br><span class=\"line\">color: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#content #main-content&gt;h2 &#123;</span><br><span class=\"line\">color: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body #content div[div=\"main-content\"] h2 &#123;</span><br><span class=\"line\">color: green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#main-content div.news-story h2 &#123;</span><br><span class=\"line\">color: orange;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#main-content [class=\"news-story\"] h2 &#123;</span><br><span class=\"line\">color: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div#main-content div.news-story h2.first &#123;</span><br><span class=\"line\">color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main-content\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>哇<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-story\"</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"first\"</span>&gt;</span>BigBong<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>嘻嘻<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css3.png\" alt=\"css3\"></p>"},{"title":"微信小程序客服自动回复消息功能采坑（完）","date":"2018-06-29T15:19:00.000Z","comments":1,"layout":"post","_content":"# 微信小程序客服自动回复消息功能采坑（完）\n\n小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 `<button open-type=\"contact\" />` 可以显示进入客服会话按钮。\n然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。\n但是有个问题，我们如何做到自动回复呢？\n那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。\n[接入指引 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html)附上官网接入指南，这可是相当的简洁。\n## First\n填写服务器配置的图：\n![](https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626)\n<!--more-->\n在这里填写的同时我们需要在后台写`get`请求验证。\n官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。\n这里我是用`express`写得提供一个例子\n```javascript\nfunction checkSignature(params) {\n    var key = [params.token, params.timestamp, params.nonce].sort().join('');\n    var sha1 = crypto.createHash('sha1');\n    sha1.update(key);\n    return sha1.digest('hex') === params.signature;\n  }\napp.get('/wxlalalala', function(req, res, next) {\n    let token = 'xxxxx'; // 填写服务器配置上所填的token\n    let isCheck = checkSignature({\n      signature: req.query.signature,\n      timestamp: req.query.timestamp,\n      nonce: req.query.nonce,\n      token: token,\n    });\n    req.body = req.query.echostr;\n    res.send(req.body);\n    return req.body;\n  });\n```\n然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。\n## Second\n当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。\n当然第一我们需要先去拿`access_token`。没有这个我们啥事情都做不了。\n给上一个官方网站：\n[接口调用凭证 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token)，但是毫无代码示例，算了还在自己撸吧。\n以下自己的code:\n```javascript\nlet access_token = '';\n\n  const getAccessToken = function() {\n    if (access_token !== '') {\n      return access_token;\n    }\n    let URL =\n      'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&appid=xxxx&secret=sssss'; // grant_type一定要填client_credential.\n    let options = {\n      method: 'GET',\n      url: URL,\n    };\n    return new Promise((resolve, reject) => {\n      request(options, function(err, res, body) {\n        if (res) {\n          access_token = JSON.parse(body).access_token;\n          let expires_in = parseInt(JSON.parse(body).expires_in) - 10;\n          setTimeout(() => {\n            access_token = '';\n            //getAccessToken();\n          }, expires_in * 1000);\n          resolve(access_token);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n```\n因为token有7200s的过期时间，所以就存在内存里了。\nOk这个我们就有`access_token`能去做客服自动回复啦！\n## Third\n再来一个官方客服发送消息的文档：\n[发送客服消息 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html)，发现又是啥都没用。。。\n还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。\n```javascript\n  const postJson = function(param) {\n    var options = {\n      url: param.url,\n      method: 'POST',\n      body: param.body,\n      json: true,\n    };\n    request(options, function callback(error, response, data) {\n      if (!error && response.statusCode == 200) {\n        param.success(response.errcode);\n      } else {\n        param.error(error);\n      }\n    });\n  };\n\n  async function sendTextMessage(content, data, access_token) {\n    await postJson({\n      url:\n        'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=' +\n        access_token,\n      body: {\n        touser: data.FromUserName,\n        msgtype: 'text',\n        text: {\n          content: content,\n        },\n      },\n      success: function(res) {\n        console.log(res, 'send successed!1');\n      },\n      error: function(err) {\n        console.log(err);\n      },\n    });\n  }\n```\n## Last\n回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎\n[客服消息 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6)\n```javascript\napp.post('/wxlallalal', (req, res, next) => {\n    let token = 'xxxxx';// 填写服务器配置那的token\n    let reqBody = req.body;\n    let isCheck = checkSignature({\n      signature: req.query.signature,\n      timestamp: req.query.timestamp,\n      nonce: req.query.nonce,\n      token: token,\n    });\n    if (isCheck) {\n      let welcome= '欢迎';\n         switch (reqBody.MsgType) {\n        case 'text': {\n          //文本消息\n          sendTextMessage('您好，【'+reqBody.Content+'】是未知命令，已转发给人工处理。\\n'+welcomeTips, reqBody, getAccessToken());\n          break;\n        }\n        case 'image': {\n          //用户在客服会话中发送图片消息\n          sendImageMessage('xxxxxxx', reqBody, getAccessToken());\n          break;\n        }\n        case 'event': {\n            sendTextMessage(welcome, reqBody, getAccessToken());\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    res.send('success');\n    next();\n    res.end();\n  });\n```\n\n完成啦愉快的使用自动客服回复！！","source":"_posts/微信客服消息功能全解.md","raw":"---\ntitle: 微信小程序客服自动回复消息功能采坑（完）\ndate: 2018-06-29 23:19:00\ncomments: true\nlayout: post\ntags: [小程序]\ncategories: 小程序\n---\n# 微信小程序客服自动回复消息功能采坑（完）\n\n小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 `<button open-type=\"contact\" />` 可以显示进入客服会话按钮。\n然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。\n但是有个问题，我们如何做到自动回复呢？\n那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。\n[接入指引 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html)附上官网接入指南，这可是相当的简洁。\n## First\n填写服务器配置的图：\n![](https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626)\n<!--more-->\n在这里填写的同时我们需要在后台写`get`请求验证。\n官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。\n这里我是用`express`写得提供一个例子\n```javascript\nfunction checkSignature(params) {\n    var key = [params.token, params.timestamp, params.nonce].sort().join('');\n    var sha1 = crypto.createHash('sha1');\n    sha1.update(key);\n    return sha1.digest('hex') === params.signature;\n  }\napp.get('/wxlalalala', function(req, res, next) {\n    let token = 'xxxxx'; // 填写服务器配置上所填的token\n    let isCheck = checkSignature({\n      signature: req.query.signature,\n      timestamp: req.query.timestamp,\n      nonce: req.query.nonce,\n      token: token,\n    });\n    req.body = req.query.echostr;\n    res.send(req.body);\n    return req.body;\n  });\n```\n然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。\n## Second\n当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。\n当然第一我们需要先去拿`access_token`。没有这个我们啥事情都做不了。\n给上一个官方网站：\n[接口调用凭证 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token)，但是毫无代码示例，算了还在自己撸吧。\n以下自己的code:\n```javascript\nlet access_token = '';\n\n  const getAccessToken = function() {\n    if (access_token !== '') {\n      return access_token;\n    }\n    let URL =\n      'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&appid=xxxx&secret=sssss'; // grant_type一定要填client_credential.\n    let options = {\n      method: 'GET',\n      url: URL,\n    };\n    return new Promise((resolve, reject) => {\n      request(options, function(err, res, body) {\n        if (res) {\n          access_token = JSON.parse(body).access_token;\n          let expires_in = parseInt(JSON.parse(body).expires_in) - 10;\n          setTimeout(() => {\n            access_token = '';\n            //getAccessToken();\n          }, expires_in * 1000);\n          resolve(access_token);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n```\n因为token有7200s的过期时间，所以就存在内存里了。\nOk这个我们就有`access_token`能去做客服自动回复啦！\n## Third\n再来一个官方客服发送消息的文档：\n[发送客服消息 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html)，发现又是啥都没用。。。\n还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。\n```javascript\n  const postJson = function(param) {\n    var options = {\n      url: param.url,\n      method: 'POST',\n      body: param.body,\n      json: true,\n    };\n    request(options, function callback(error, response, data) {\n      if (!error && response.statusCode == 200) {\n        param.success(response.errcode);\n      } else {\n        param.error(error);\n      }\n    });\n  };\n\n  async function sendTextMessage(content, data, access_token) {\n    await postJson({\n      url:\n        'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=' +\n        access_token,\n      body: {\n        touser: data.FromUserName,\n        msgtype: 'text',\n        text: {\n          content: content,\n        },\n      },\n      success: function(res) {\n        console.log(res, 'send successed!1');\n      },\n      error: function(err) {\n        console.log(err);\n      },\n    });\n  }\n```\n## Last\n回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎\n[客服消息 · 小程序](https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6)\n```javascript\napp.post('/wxlallalal', (req, res, next) => {\n    let token = 'xxxxx';// 填写服务器配置那的token\n    let reqBody = req.body;\n    let isCheck = checkSignature({\n      signature: req.query.signature,\n      timestamp: req.query.timestamp,\n      nonce: req.query.nonce,\n      token: token,\n    });\n    if (isCheck) {\n      let welcome= '欢迎';\n         switch (reqBody.MsgType) {\n        case 'text': {\n          //文本消息\n          sendTextMessage('您好，【'+reqBody.Content+'】是未知命令，已转发给人工处理。\\n'+welcomeTips, reqBody, getAccessToken());\n          break;\n        }\n        case 'image': {\n          //用户在客服会话中发送图片消息\n          sendImageMessage('xxxxxxx', reqBody, getAccessToken());\n          break;\n        }\n        case 'event': {\n            sendTextMessage(welcome, reqBody, getAccessToken());\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    res.send('success');\n    next();\n    res.end();\n  });\n```\n\n完成啦愉快的使用自动客服回复！！","slug":"微信客服消息功能全解","published":1,"updated":"2018-07-04T05:06:17.041Z","photos":[],"link":"","_id":"cjollnbvj0082unfyauhsz7lz","content":"<h1 id=\"微信小程序客服自动回复消息功能采坑（完）\"><a href=\"#微信小程序客服自动回复消息功能采坑（完）\" class=\"headerlink\" title=\"微信小程序客服自动回复消息功能采坑（完）\"></a>微信小程序客服自动回复消息功能采坑（完）</h1><p>小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 <code>&lt;button open-type=&quot;contact&quot; /&gt;</code> 可以显示进入客服会话按钮。<br>然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。<br>但是有个问题，我们如何做到自动回复呢？<br>那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html\" target=\"_blank\" rel=\"noopener\">接入指引 · 小程序</a>附上官网接入指南，这可是相当的简洁。</p>\n<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>填写服务器配置的图：<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626\" alt=\"\"><br><a id=\"more\"></a><br>在这里填写的同时我们需要在后台写<code>get</code>请求验证。<br>官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。<br>这里我是用<code>express</code>写得提供一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkSignature</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = [params.token, params.timestamp, params.nonce].sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sha1 = crypto.createHash(<span class=\"string\">'sha1'</span>);</span><br><span class=\"line\">    sha1.update(key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sha1.digest(<span class=\"string\">'hex'</span>) === params.signature;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">app.get(<span class=\"string\">'/wxlalalala'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> token = <span class=\"string\">'xxxxx'</span>; <span class=\"comment\">// 填写服务器配置上所填的token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCheck = checkSignature(&#123;</span><br><span class=\"line\">      signature: req.query.signature,</span><br><span class=\"line\">      timestamp: req.query.timestamp,</span><br><span class=\"line\">      nonce: req.query.nonce,</span><br><span class=\"line\">      token: token,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.body = req.query.echostr;</span><br><span class=\"line\">    res.send(req.body);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> req.body;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。<br>当然第一我们需要先去拿<code>access_token</code>。没有这个我们啥事情都做不了。<br>给上一个官方网站：<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token\" target=\"_blank\" rel=\"noopener\">接口调用凭证 · 小程序</a>，但是毫无代码示例，算了还在自己撸吧。<br>以下自己的code:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> access_token = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getAccessToken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (access_token !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> access_token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> URL =</span><br><span class=\"line\">      <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&amp;appid=xxxx&amp;secret=sssss'</span>; <span class=\"comment\">// grant_type一定要填client_credential.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      url: URL,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res, body</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">          access_token = <span class=\"built_in\">JSON</span>.parse(body).access_token;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> expires_in = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(body).expires_in) - <span class=\"number\">10</span>;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            access_token = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"comment\">//getAccessToken();</span></span><br><span class=\"line\">          &#125;, expires_in * <span class=\"number\">1000</span>);</span><br><span class=\"line\">          resolve(access_token);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>因为token有7200s的过期时间，所以就存在内存里了。<br>Ok这个我们就有<code>access_token</code>能去做客服自动回复啦！</p>\n<h2 id=\"Third\"><a href=\"#Third\" class=\"headerlink\" title=\"Third\"></a>Third</h2><p>再来一个官方客服发送消息的文档：<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html\" target=\"_blank\" rel=\"noopener\">发送客服消息 · 小程序</a>，发现又是啥都没用。。。<br>还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postJson = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    url: param.url,</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">    body: param.body,</span><br><span class=\"line\">    json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">error, response, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      param.success(response.errcode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      param.error(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendTextMessage</span>(<span class=\"params\">content, data, access_token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> postJson(&#123;</span><br><span class=\"line\">    url:</span><br><span class=\"line\">      <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token='</span> +</span><br><span class=\"line\">      access_token,</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      touser: data.FromUserName,</span><br><span class=\"line\">      msgtype: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">      text: &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res, <span class=\"string\">'send successed!1'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Last\"><a href=\"#Last\" class=\"headerlink\" title=\"Last\"></a>Last</h2><p>回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">客服消息 · 小程序</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/wxlallalal'</span>, (req, res, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> token = <span class=\"string\">'xxxxx'</span>;<span class=\"comment\">// 填写服务器配置那的token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reqBody = req.body;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCheck = checkSignature(&#123;</span><br><span class=\"line\">      signature: req.query.signature,</span><br><span class=\"line\">      timestamp: req.query.timestamp,</span><br><span class=\"line\">      nonce: req.query.nonce,</span><br><span class=\"line\">      token: token,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCheck) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> welcome= <span class=\"string\">'欢迎'</span>;</span><br><span class=\"line\">         <span class=\"keyword\">switch</span> (reqBody.MsgType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'text'</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//文本消息</span></span><br><span class=\"line\">          sendTextMessage(<span class=\"string\">'您好，【'</span>+reqBody.Content+<span class=\"string\">'】是未知命令，已转发给人工处理。\\n'</span>+welcomeTips, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'image'</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//用户在客服会话中发送图片消息</span></span><br><span class=\"line\">          sendImageMessage(<span class=\"string\">'xxxxxxx'</span>, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'event'</span>: &#123;</span><br><span class=\"line\">            sendTextMessage(welcome, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.send(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>完成啦愉快的使用自动客服回复！！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"微信小程序客服自动回复消息功能采坑（完）\"><a href=\"#微信小程序客服自动回复消息功能采坑（完）\" class=\"headerlink\" title=\"微信小程序客服自动回复消息功能采坑（完）\"></a>微信小程序客服自动回复消息功能采坑（完）</h1><p>小程序接入客服，我们就需要调用微信客服功能。很简单，只需要在页面中使用 <code>&lt;button open-type=&quot;contact&quot; /&gt;</code> 可以显示进入客服会话按钮。<br>然后我们就能登录网页版的微信公众平台的客服页面进去回复各种千奇百怪的问题了。<br>但是有个问题，我们如何做到自动回复呢？<br>那么就需要通过自己的服务器去通过微信端请求服务，完成这项工作。<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/callback_help.html\" target=\"_blank\" rel=\"noopener\">接入指引 · 小程序</a>附上官网接入指南，这可是相当的简洁。</p>\n<h2 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h2><p>填写服务器配置的图：<br><img src=\"https://mp.weixin.qq.com/debug/wxadoc/dev/image/callback_help.png?t=2018626\" alt=\"\"><br>","more":"<br>在这里填写的同时我们需要在后台写<code>get</code>请求验证。<br>官方提供了一个非常简洁的一个php代码。。那是相当的坑爹啊。<br>这里我是用<code>express</code>写得提供一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkSignature</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = [params.token, params.timestamp, params.nonce].sort().join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sha1 = crypto.createHash(<span class=\"string\">'sha1'</span>);</span><br><span class=\"line\">    sha1.update(key);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sha1.digest(<span class=\"string\">'hex'</span>) === params.signature;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">app.get(<span class=\"string\">'/wxlalalala'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> token = <span class=\"string\">'xxxxx'</span>; <span class=\"comment\">// 填写服务器配置上所填的token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCheck = checkSignature(&#123;</span><br><span class=\"line\">      signature: req.query.signature,</span><br><span class=\"line\">      timestamp: req.query.timestamp,</span><br><span class=\"line\">      nonce: req.query.nonce,</span><br><span class=\"line\">      token: token,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.body = req.query.echostr;</span><br><span class=\"line\">    res.send(req.body);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> req.body;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>然后我们就完成了最关键的一步。之后就可以去写，客户发了什么我们就自动回啥的逻辑。</p>\n<h2 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h2><p>当我们去接受客户发的消息和事件，我们都需要去通过一个post去接受。<br>当然第一我们需要先去拿<code>access_token</code>。没有这个我们啥事情都做不了。<br>给上一个官方网站：<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/token.html#%E8%8E%B7%E5%8F%96-access_token\" target=\"_blank\" rel=\"noopener\">接口调用凭证 · 小程序</a>，但是毫无代码示例，算了还在自己撸吧。<br>以下自己的code:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> access_token = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getAccessToken = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (access_token !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> access_token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> URL =</span><br><span class=\"line\">      <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type= client_credential&amp;appid=xxxx&amp;secret=sssss'</span>; <span class=\"comment\">// grant_type一定要填client_credential.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">      url: URL,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, res, body</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res) &#123;</span><br><span class=\"line\">          access_token = <span class=\"built_in\">JSON</span>.parse(body).access_token;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> expires_in = <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">JSON</span>.parse(body).expires_in) - <span class=\"number\">10</span>;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            access_token = <span class=\"string\">''</span>;</span><br><span class=\"line\">            <span class=\"comment\">//getAccessToken();</span></span><br><span class=\"line\">          &#125;, expires_in * <span class=\"number\">1000</span>);</span><br><span class=\"line\">          resolve(access_token);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>因为token有7200s的过期时间，所以就存在内存里了。<br>Ok这个我们就有<code>access_token</code>能去做客服自动回复啦！</p>\n<h2 id=\"Third\"><a href=\"#Third\" class=\"headerlink\" title=\"Third\"></a>Third</h2><p>再来一个官方客服发送消息的文档：<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/conversation.html\" target=\"_blank\" rel=\"noopener\">发送客服消息 · 小程序</a>，发现又是啥都没用。。。<br>还是自己动手写一个吧。。毕竟那么精瘦的文档。。T T.那就写一个回复文本消息的吧！其他的类似自己扩展。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postJson = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">    url: param.url,</span><br><span class=\"line\">    method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">    body: param.body,</span><br><span class=\"line\">    json: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  request(options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">error, response, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      param.success(response.errcode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      param.error(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendTextMessage</span>(<span class=\"params\">content, data, access_token</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> postJson(&#123;</span><br><span class=\"line\">    url:</span><br><span class=\"line\">      <span class=\"string\">'https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token='</span> +</span><br><span class=\"line\">      access_token,</span><br><span class=\"line\">    body: &#123;</span><br><span class=\"line\">      touser: data.FromUserName,</span><br><span class=\"line\">      msgtype: <span class=\"string\">'text'</span>,</span><br><span class=\"line\">      text: &#123;</span><br><span class=\"line\">        content: content,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res, <span class=\"string\">'send successed!1'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Last\"><a href=\"#Last\" class=\"headerlink\" title=\"Last\"></a>Last</h2><p>回复的函数也写好了，来到最后根据客户发来的消息我们作为智能客服去回消息啦！不多说直接上code。文档。。。就算了只能看看参数啥的。。哎<br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/custommsg/receive.html#%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF%E5%92%8C%E4%BA%8B%E4%BB%B6\" target=\"_blank\" rel=\"noopener\">客服消息 · 小程序</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/wxlallalal'</span>, (req, res, next) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> token = <span class=\"string\">'xxxxx'</span>;<span class=\"comment\">// 填写服务器配置那的token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reqBody = req.body;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCheck = checkSignature(&#123;</span><br><span class=\"line\">      signature: req.query.signature,</span><br><span class=\"line\">      timestamp: req.query.timestamp,</span><br><span class=\"line\">      nonce: req.query.nonce,</span><br><span class=\"line\">      token: token,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isCheck) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> welcome= <span class=\"string\">'欢迎'</span>;</span><br><span class=\"line\">         <span class=\"keyword\">switch</span> (reqBody.MsgType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'text'</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//文本消息</span></span><br><span class=\"line\">          sendTextMessage(<span class=\"string\">'您好，【'</span>+reqBody.Content+<span class=\"string\">'】是未知命令，已转发给人工处理。\\n'</span>+welcomeTips, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'image'</span>: &#123;</span><br><span class=\"line\">          <span class=\"comment\">//用户在客服会话中发送图片消息</span></span><br><span class=\"line\">          sendImageMessage(<span class=\"string\">'xxxxxxx'</span>, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'event'</span>: &#123;</span><br><span class=\"line\">            sendTextMessage(welcome, reqBody, getAccessToken());</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.send(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">    next();</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>完成啦愉快的使用自动客服回复！！</p>"},{"title":"微微学习Docker","date":"2018-05-01T12:24:00.000Z","updated":"2018-05-12T13:03:15.000Z","comments":1,"layout":"post","_content":"# 微微学习 Docker\n```shell\n跑镜像\ndocker run -it imageName bash\n\n创建一个容器，但不启动\ndocker create\n\n改镜像名\ndocker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0\n\ncommit容器\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\nnone就随便删呗\ndocker image prune\n```\n<!--more-->\n## Docker file\n* FROM  拉镜像\n* MAINTAINER  指定创建镜像的用户\n* RUN  在当前镜像基础上执行指定命令，并提交为新的镜像\n* CMD  启动容器时提供一个默认的命令执行选项\n* EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。\n* ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留\n* ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中\n* COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS\n* ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。\n* VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点\n* USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户\n* WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。\n* ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时\n- - - -\n\n## docker-machine\n\n创建一台docker主机\ndocker-machine create -d virtualbox test\n\n`docker-machine node ls`\n\nscale mytest服务的task数量从2到4：\ndocker service scale Name=4","source":"_posts/微微学习 Docker.md","raw":"---\ntitle: 微微学习Docker\ndate: 2018-05-01 20:24:00\nupdated: 2018-05-12 21:03:15\ncomments: true\nlayout: post\ntags: [docker]\ncategories: docker\n---\n# 微微学习 Docker\n```shell\n跑镜像\ndocker run -it imageName bash\n\n创建一个容器，但不启动\ndocker create\n\n改镜像名\ndocker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0\n\ncommit容器\ndocker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n\nnone就随便删呗\ndocker image prune\n```\n<!--more-->\n## Docker file\n* FROM  拉镜像\n* MAINTAINER  指定创建镜像的用户\n* RUN  在当前镜像基础上执行指定命令，并提交为新的镜像\n* CMD  启动容器时提供一个默认的命令执行选项\n* EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。\n* ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留\n* ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中\n* COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS\n* ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。\n* VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点\n* USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户\n* WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。\n* ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时\n- - - -\n\n## docker-machine\n\n创建一台docker主机\ndocker-machine create -d virtualbox test\n\n`docker-machine node ls`\n\nscale mytest服务的task数量从2到4：\ndocker service scale Name=4","slug":"微微学习 Docker","published":1,"photos":[],"link":"","_id":"cjollnbvl0086unfyjvetb3gx","content":"<h1 id=\"微微学习-Docker\"><a href=\"#微微学习-Docker\" class=\"headerlink\" title=\"微微学习 Docker\"></a>微微学习 Docker</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">跑镜像</span><br><span class=\"line\">docker run -it imageName bash</span><br><span class=\"line\"></span><br><span class=\"line\">创建一个容器，但不启动</span><br><span class=\"line\">docker create</span><br><span class=\"line\"></span><br><span class=\"line\">改镜像名</span><br><span class=\"line\">docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">commit容器</span><br><span class=\"line\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class=\"line\"></span><br><span class=\"line\">none就随便删呗</span><br><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"Docker-file\"><a href=\"#Docker-file\" class=\"headerlink\" title=\"Docker file\"></a>Docker file</h2><ul>\n<li>FROM  拉镜像</li>\n<li>MAINTAINER  指定创建镜像的用户</li>\n<li>RUN  在当前镜像基础上执行指定命令，并提交为新的镜像</li>\n<li>CMD  启动容器时提供一个默认的命令执行选项</li>\n<li>EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。</li>\n<li>ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留</li>\n<li>ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中</li>\n<li>COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS</li>\n<li>ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。</li>\n<li>VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点</li>\n<li>USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户</li>\n<li>WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。</li>\n<li>ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时</li>\n</ul>\n<hr>\n<h2 id=\"docker-machine\"><a href=\"#docker-machine\" class=\"headerlink\" title=\"docker-machine\"></a>docker-machine</h2><p>创建一台docker主机<br>docker-machine create -d virtualbox test</p>\n<p><code>docker-machine node ls</code></p>\n<p>scale mytest服务的task数量从2到4：<br>docker service scale Name=4</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"微微学习-Docker\"><a href=\"#微微学习-Docker\" class=\"headerlink\" title=\"微微学习 Docker\"></a>微微学习 Docker</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">跑镜像</span><br><span class=\"line\">docker run -it imageName bash</span><br><span class=\"line\"></span><br><span class=\"line\">创建一个容器，但不启动</span><br><span class=\"line\">docker create</span><br><span class=\"line\"></span><br><span class=\"line\">改镜像名</span><br><span class=\"line\">docker tag ca1b6b825289 registry.cn-hangzhou.aliyuncs.com/xxxxxxx:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\">commit容器</span><br><span class=\"line\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class=\"line\"></span><br><span class=\"line\">none就随便删呗</span><br><span class=\"line\">docker image prune</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Docker-file\"><a href=\"#Docker-file\" class=\"headerlink\" title=\"Docker file\"></a>Docker file</h2><ul>\n<li>FROM  拉镜像</li>\n<li>MAINTAINER  指定创建镜像的用户</li>\n<li>RUN  在当前镜像基础上执行指定命令，并提交为新的镜像</li>\n<li>CMD  启动容器时提供一个默认的命令执行选项</li>\n<li>EXPOSE  告诉 Docker 服务端容器对外映射的本地端口，需要在 docker run 的时候使用-p或者-P选项生效。</li>\n<li>ENV  指定一个环节变量，会被后续RUN指令使用，并在容器运行时保留</li>\n<li>ADD  复制本地主机文件、目录或者远程文件 URLS 从 并且添加到容器指定路径中</li>\n<li>COPY  复制新文件或者目录从 并且添加到容器指定路径中 。用法同ADD，唯一的不同是不能指定远程文件 URLS</li>\n<li>ENTRYPOINT  配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖，而CMD是可以被覆盖的。</li>\n<li>VOLUME  创建一个可以从本地主机或其他容器挂载的挂载点</li>\n<li>USER 指定运行容器时的用户名或 UID，后续的操作也会使用指定用户</li>\n<li>WORKDIR  为后续的RUN、CMD、ENTRYPOINT指令配置工作目录。</li>\n<li>ONBUILD  配置当所创建的镜像作为其它新创建镜像的基础镜像时</li>\n</ul>\n<hr>\n<h2 id=\"docker-machine\"><a href=\"#docker-machine\" class=\"headerlink\" title=\"docker-machine\"></a>docker-machine</h2><p>创建一台docker主机<br>docker-machine create -d virtualbox test</p>\n<p><code>docker-machine node ls</code></p>\n<p>scale mytest服务的task数量从2到4：<br>docker service scale Name=4</p>"},{"title":"学习CSS(二)","date":"2017-09-06T09:38:00.000Z","comments":1,"layout":"post","_content":"\n# 盒模型\n\n页面上的每个元素被看做一个矩形框，这个框由元素的内容、内边距（padding）、边框（border）、和外边距（margin）组成。\n\n\n\n外边距叠加\n\n本小节参考[W3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)。\n\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。\n\n![css4](/images/css4.gif)\n\n<!--more-->\n\n当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。\n\n![css5](/images/css5.gif)\n\n\n\n尽管看上去有些奇怪，但是外边距甚至可以与自身发生合并。\n\n假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：\n\n\n\n![css7](/images/css6.gif)\n\n如果这个外边距遇到另一个元素的外边距，它还会发生合并：\n\n![css7](/images/css8.gif)\n\n\n\n外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。\n\n# 定位概述\n\n可视化格式模型和定位模型。\n\n## 可视化格式模型\n\n`h1`,`p`,`div`等元素常常称为块级元素。\n\n`strong`,`span`等元素称为行内元素。\n\n当行内元素你把它们的`display`属性设置成`block`，此元素会被显示为块级元素。\n\n块级框从上到下一个接一个地垂直排列。\n\n\n\n## 相对定位\n\n如果对一个元素进行相对定位，其实就是让这个元素“相对于”它的起点移动。\n\n```html\n#myBox {\nwidth: 200px;\nheight: 200px;\nbackground: red;\n}\n#myBox1 {\nposition: relative;\nwidth: 200px;\nheight: 200px;\nbackground: blue;\n}\n#myBox2 {\nposition: relative;\nleft: 20px;\ntop: 20px;\nwidth: 200px;\nheight: 200px;\nbackground: gray;\n}\n\n<div id=\"myBox\"></div>\n<div id=\"myBox1\"></div>\n<div id=\"myBox2\"></div>\n```\n\n![css9](/images/css9.png)\n\n## 绝对定位\n\n绝对定位使元素的位置与文档流无关。\n\n绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的。如果元素没有已定位的祖先元素，那么它的位置是相对于初始包含块的。\n\n\n\n接下来我们让一个文本段落对准一个大框的右下角：\n\n```html\n#branding {\nwidth: 20em;\nheight: 10em;\nposition: relative;\nbackground: black;\n}\n#branding .tel {\nposition: absolute;\nright: 1em;\nbottom: 1em;\ntext-align: right;\ncolor: white;\n}\n\n<div id=\"branding\">\n  <p class=\"tel\">Tel: 0845 838 6163</p>\n</div>\n```\n\n![css10](/images/css10.png)\n\n","source":"_posts/学习CSS(二).md","raw":"---\ntitle: 学习CSS(二)\ndate: 2017-09-06 17:38\ncomments: true\nlayout: post\ntags: [CSS]\ncategories: CSS\n---\n\n# 盒模型\n\n页面上的每个元素被看做一个矩形框，这个框由元素的内容、内边距（padding）、边框（border）、和外边距（margin）组成。\n\n\n\n外边距叠加\n\n本小节参考[W3school](http://www.w3school.com.cn/css/css_margin_collapsing.asp)。\n\n当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。\n\n![css4](/images/css4.gif)\n\n<!--more-->\n\n当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。\n\n![css5](/images/css5.gif)\n\n\n\n尽管看上去有些奇怪，但是外边距甚至可以与自身发生合并。\n\n假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：\n\n\n\n![css7](/images/css6.gif)\n\n如果这个外边距遇到另一个元素的外边距，它还会发生合并：\n\n![css7](/images/css8.gif)\n\n\n\n外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。\n\n# 定位概述\n\n可视化格式模型和定位模型。\n\n## 可视化格式模型\n\n`h1`,`p`,`div`等元素常常称为块级元素。\n\n`strong`,`span`等元素称为行内元素。\n\n当行内元素你把它们的`display`属性设置成`block`，此元素会被显示为块级元素。\n\n块级框从上到下一个接一个地垂直排列。\n\n\n\n## 相对定位\n\n如果对一个元素进行相对定位，其实就是让这个元素“相对于”它的起点移动。\n\n```html\n#myBox {\nwidth: 200px;\nheight: 200px;\nbackground: red;\n}\n#myBox1 {\nposition: relative;\nwidth: 200px;\nheight: 200px;\nbackground: blue;\n}\n#myBox2 {\nposition: relative;\nleft: 20px;\ntop: 20px;\nwidth: 200px;\nheight: 200px;\nbackground: gray;\n}\n\n<div id=\"myBox\"></div>\n<div id=\"myBox1\"></div>\n<div id=\"myBox2\"></div>\n```\n\n![css9](/images/css9.png)\n\n## 绝对定位\n\n绝对定位使元素的位置与文档流无关。\n\n绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的。如果元素没有已定位的祖先元素，那么它的位置是相对于初始包含块的。\n\n\n\n接下来我们让一个文本段落对准一个大框的右下角：\n\n```html\n#branding {\nwidth: 20em;\nheight: 10em;\nposition: relative;\nbackground: black;\n}\n#branding .tel {\nposition: absolute;\nright: 1em;\nbottom: 1em;\ntext-align: right;\ncolor: white;\n}\n\n<div id=\"branding\">\n  <p class=\"tel\">Tel: 0845 838 6163</p>\n</div>\n```\n\n![css10](/images/css10.png)\n\n","slug":"学习CSS(二)","published":1,"updated":"2017-09-07T06:33:42.000Z","photos":[],"link":"","_id":"cjollnbw20089unfypft3y9xe","content":"<h1 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h1><p>页面上的每个元素被看做一个矩形框，这个框由元素的内容、内边距（padding）、边框（border）、和外边距（margin）组成。</p>\n<p>外边距叠加</p>\n<p>本小节参考<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">W3school</a>。</p>\n<p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</p>\n<p><img src=\"/images/css4.gif\" alt=\"css4\"></p>\n<a id=\"more\"></a>\n<p>当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。</p>\n<p><img src=\"/images/css5.gif\" alt=\"css5\"></p>\n<p>尽管看上去有些奇怪，但是外边距甚至可以与自身发生合并。</p>\n<p>假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：</p>\n<p><img src=\"/images/css6.gif\" alt=\"css7\"></p>\n<p>如果这个外边距遇到另一个元素的外边距，它还会发生合并：</p>\n<p><img src=\"/images/css8.gif\" alt=\"css7\"></p>\n<p>外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。</p>\n<h1 id=\"定位概述\"><a href=\"#定位概述\" class=\"headerlink\" title=\"定位概述\"></a>定位概述</h1><p>可视化格式模型和定位模型。</p>\n<h2 id=\"可视化格式模型\"><a href=\"#可视化格式模型\" class=\"headerlink\" title=\"可视化格式模型\"></a>可视化格式模型</h2><p><code>h1</code>,<code>p</code>,<code>div</code>等元素常常称为块级元素。</p>\n<p><code>strong</code>,<code>span</code>等元素称为行内元素。</p>\n<p>当行内元素你把它们的<code>display</code>属性设置成<code>block</code>，此元素会被显示为块级元素。</p>\n<p>块级框从上到下一个接一个地垂直排列。</p>\n<h2 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h2><p>如果对一个元素进行相对定位，其实就是让这个元素“相对于”它的起点移动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#myBox &#123;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#myBox1 &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#myBox2 &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">left: 20px;</span><br><span class=\"line\">top: 20px;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css9.png\" alt=\"css9\"></p>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><p>绝对定位使元素的位置与文档流无关。</p>\n<p>绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的。如果元素没有已定位的祖先元素，那么它的位置是相对于初始包含块的。</p>\n<p>接下来我们让一个文本段落对准一个大框的右下角：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#branding &#123;</span><br><span class=\"line\">width: 20em;</span><br><span class=\"line\">height: 10em;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">background: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#branding .tel &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">right: 1em;</span><br><span class=\"line\">bottom: 1em;</span><br><span class=\"line\">text-align: right;</span><br><span class=\"line\">color: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"branding\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tel\"</span>&gt;</span>Tel: 0845 838 6163<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css10.png\" alt=\"css10\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h1><p>页面上的每个元素被看做一个矩形框，这个框由元素的内容、内边距（padding）、边框（border）、和外边距（margin）组成。</p>\n<p>外边距叠加</p>\n<p>本小节参考<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\" target=\"_blank\" rel=\"noopener\">W3school</a>。</p>\n<p>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</p>\n<p><img src=\"/images/css4.gif\" alt=\"css4\"></p>","more":"<p>当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。</p>\n<p><img src=\"/images/css5.gif\" alt=\"css5\"></p>\n<p>尽管看上去有些奇怪，但是外边距甚至可以与自身发生合并。</p>\n<p>假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：</p>\n<p><img src=\"/images/css6.gif\" alt=\"css7\"></p>\n<p>如果这个外边距遇到另一个元素的外边距，它还会发生合并：</p>\n<p><img src=\"/images/css8.gif\" alt=\"css7\"></p>\n<p>外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。</p>\n<h1 id=\"定位概述\"><a href=\"#定位概述\" class=\"headerlink\" title=\"定位概述\"></a>定位概述</h1><p>可视化格式模型和定位模型。</p>\n<h2 id=\"可视化格式模型\"><a href=\"#可视化格式模型\" class=\"headerlink\" title=\"可视化格式模型\"></a>可视化格式模型</h2><p><code>h1</code>,<code>p</code>,<code>div</code>等元素常常称为块级元素。</p>\n<p><code>strong</code>,<code>span</code>等元素称为行内元素。</p>\n<p>当行内元素你把它们的<code>display</code>属性设置成<code>block</code>，此元素会被显示为块级元素。</p>\n<p>块级框从上到下一个接一个地垂直排列。</p>\n<h2 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h2><p>如果对一个元素进行相对定位，其实就是让这个元素“相对于”它的起点移动。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#myBox &#123;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#myBox1 &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#myBox2 &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">left: 20px;</span><br><span class=\"line\">top: 20px;</span><br><span class=\"line\">width: 200px;</span><br><span class=\"line\">height: 200px;</span><br><span class=\"line\">background: gray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myBox2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css9.png\" alt=\"css9\"></p>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><p>绝对定位使元素的位置与文档流无关。</p>\n<p>绝对定位的元素的位置是相对于距离它最近的那个已定位的祖先元素确定的。如果元素没有已定位的祖先元素，那么它的位置是相对于初始包含块的。</p>\n<p>接下来我们让一个文本段落对准一个大框的右下角：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#branding &#123;</span><br><span class=\"line\">width: 20em;</span><br><span class=\"line\">height: 10em;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">background: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#branding .tel &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">right: 1em;</span><br><span class=\"line\">bottom: 1em;</span><br><span class=\"line\">text-align: right;</span><br><span class=\"line\">color: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"branding\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tel\"</span>&gt;</span>Tel: 0845 838 6163<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/css10.png\" alt=\"css10\"></p>"},{"title":"支付宝小程序踩坑（一）","date":"2017-08-20T12:49:24.000Z","comments":1,"layout":"post","_content":"\n\n\n这是支付宝小程序编译器的主界面\n\n![paytest1](/images/paytest1.png)\n\n<!--more-->\n\n这是 **hello，world**的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 **ESLint** 支持\n\n![paytest2](/images/paytest2.png)\n\n","source":"_posts/支付宝小程序.md","raw":"---\ntitle: 支付宝小程序踩坑（一）\ndate: 2017-08-20 20：50\ncomments: true\nlayout: post\ntags: 小程序\ncategories: 小程序\n---\n\n\n\n这是支付宝小程序编译器的主界面\n\n![paytest1](/images/paytest1.png)\n\n<!--more-->\n\n这是 **hello，world**的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 **ESLint** 支持\n\n![paytest2](/images/paytest2.png)\n\n","slug":"支付宝小程序","published":1,"updated":"2017-11-12T07:50:53.000Z","photos":[],"link":"","_id":"cjollnbw8008eunfytgyenf5g","content":"<p>这是支付宝小程序编译器的主界面</p>\n<p><img src=\"/images/paytest1.png\" alt=\"paytest1\"></p>\n<a id=\"more\"></a>\n<p>这是 <strong>hello，world</strong>的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 <strong>ESLint</strong> 支持</p>\n<p><img src=\"/images/paytest2.png\" alt=\"paytest2\"></p>\n","site":{"data":{}},"excerpt":"<p>这是支付宝小程序编译器的主界面</p>\n<p><img src=\"/images/paytest1.png\" alt=\"paytest1\"></p>","more":"<p>这是 <strong>hello，world</strong>的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 <strong>ESLint</strong> 支持</p>\n<p><img src=\"/images/paytest2.png\" alt=\"paytest2\"></p>"},{"_content":"# 打造个人or团队适用的开源项目规范\n\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1541259226466&di=3d9d04f5f77d2f23b7b121fb02083038&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg)\n\n## lerna\nLerna 是一个用来优化托管在git\\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。\n\nlerna的文件树：\n```\nmy-lerna-repo/\n  package.json\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json\n```\n\n首先作为项目拥有者全局安装：\n```shell\n$ npm install -g lerna\n# or\n$ yarn global add lerna\n```\n\n### init\n在项目使用以下命令：\n\n<!--more-->\n\n```shell\n$ lerna init\n# or\n$ lerna init --independent\n```\n\n这条命令要注意的是，lerna提供两类管理项目的模式：\n1. fixed/locked mode（default）\n\t1. Fixed模式下，项目通过单一的版本进行控制。版本号放在项目根目录下的lerna.json文件的version这个字段。当你执行 lerna publish，如果有文件更新，它将发布新的版本。\n2. independent mode（—independent）\n\t1. 这种模式下，项目里的各个package独立维护自己的version，它将会忽略lerna.json中定义的version\n\n### publish\n```shell\n$ lerna publish\n```\nPublish它做了以下几件事情\n1. 发布项目里的每个模块\n2. 执行lerna updated确定是否需要发布\n3. 假如需要发布 给lerna.json 版本号做自增\n4. 更新package.json里的版本号至最新\n5. 为新版本更新dependencies\n6. 为新版本创建一个git commit 和tag\n7. 发布更新项目到npm\n8. 一次发布所有packages\n只有你在`package.json`里设置`private: true`这个包则不会被发布。\n\n### 配置\n如果我们使用yarn我们可以在`lerna.json`做如下配置：\n```json\n{\n...\n  \"npmClient\": \"yarn\"\n...\n}\n```\n\n\n## 代码检查和规范\n在一个项目中，多人开发时会遇到代码格式问题。\n解决方案：\n### 使用Eslint\n项目拥有者需要全局安装：\n```shell\n$ npm install eslint -g\n# or\n$ yarn global add eslint\n```\n\n在项目中执行命令：\n```shell\n$ eslint --init\n```\n\nReact项目推荐使用airbnb规范。\n```json\n{\n    \"devDependencies\": {\n        \"eslint\": \"^4.19.1\",\n        \"eslint-config-airbnb\": \"^17.0.0\",\n        \"eslint-plugin-import\": \"^2.13.0\",\n        \"eslint-plugin-react\": \"^7.10.0\",\n        \"eslint-plugin-jsx-a11y\": \"^6.1.1\"\n    }\n}\n```\n\n### 使用Standard\n参考中文文档 [standard/README-zhcn.md at master · standard/standard · GitHub](https://github.com/standard/standard/blob/master/docs/README-zhcn.md#i-disagree-with-rule-x-can-you-change-it)\n### Prettier\nEslint + prettier 解决了代码风格和格式化的所有问题。\n\n### 与git hook来解决何时lint\n\n目前比较成熟的是`husky`与`lint-staged`两者结合:\n```shell\n$ npm install lint-staged husky -D\n# or\n$ yarn add lint-staged husky -D\n```\n\n接着在`package.json`中加入：\n```json\n\"lint-staged\": {\n    \"packages/*/src/**/*.js\": [\n      \"eslint --fix\",\n      \"prettier --write\",\n      \"git add\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n```\n\n### Tslint\n如果你的项目使`TypeScript`那么`tslint`能帮助你许多！\n\n```shell\n$ yarn add -D prettier tslint-config-prettier tslint-plugin-prettier husky pretty-quick\n```\n\n#### Tslint.json\n```json\n{\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n\t\t\t\t\"tslint:recommended\",\n\t\t\t\t\"tslint-react\",\n\t\t\t\t\"tslint-config-prettier\"\n    ],\n    \"jsRules\": {},\n    \"rules\": {\n\t\t\t\"prettier\": [true, \"./prettierrc\"]\n\t\t},\n    \"rulesDirectory\": [\n\t\t\t\"tslint-plugin-prettier\"\n\t\t]\n}\n```\n\n## 编辑器的不同\n解决方案：\n主流的都是使用EditorConfig\n只需要在根目录新建一个`.editorconfig`文件，然后去根据文档自行定义。再给自己使用的编辑器安装`editorConfig`的插件即可。\n官方网站：[EditorConfig](https://editorconfig.org/)\n\n## commit 不统一\n主流的方法是commitizen.\n项目拥有者应当全局安装：\n```shell\n$ npm install -g commitizen\n# or\n$ yarn global add commitizen\n```\n\n之后我们在项目里选用angular格式的commit message并在终端下输入以下命令：\n```shell\n$ commitizen init cz-conventional-changelog —save-exact\n# or\n$ commitizen init cz-conventional-changelog --yarn --dev --exact\n```\n上面的命令为你做了三件事：\n1. 安装cz-conventional-changelog的adapter的npm模块。\n2. 将其保存到package.json的dependencies或devDependencies。\n3. 将config.commitizen键添加到package.json的根目录，如下所示：\n```json\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"cz-conventional-changelog\"\n    }\n  }\n```\n然后在`package.json`里的`scripts`里加上\n```json\n\"scripts\": {\n    \"commit\": \"git-cz\"\n }\n```\n注意：\n如果你使用像`husky`这样的`precommit hooks`，你需要为脚本命名除“commit”之外的其他东西（例如“cm”：“git-cz”）。\n原因是因为npm-scripts有一个“feature”，它自动运行名称为prexxx的脚本，其中xxx是另一个脚本的名称。\n本质上，如果您将脚本命名为“commit”，则npm和husky将运行两次“precommit”脚本，并且解决方法是阻止npm触发的precommit脚本。\n\n之后如果有别人也参与进你的项目开发中，我们最好在仓库里也安装依赖\n```shell\n$ npm install -D commitizen\n# or\n$ yarn add commititzen -D\n```\n\n## changelog\n通过手动去维护changelog在我之前的那个wx-tsApi项目中是非常头疼的一件事情，所以去寻找自动化的东西。\n\n全局安装\n```shell\n$ npm install -g conventional-changelog-cli\n# or\n$ yarn global add conventional-changelog-cli\n```\n然后在`package.json`文件中添加`scripts`\n```json\n{\n\t\"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md\"\n\t}\n}\n```\n\n官方推荐的工作流程：\n1. 做出改变\n2. 提交这些改变\n3. 确定Travis变成绿色\n4. 改version\n5. changelog\n6. commit package.json 和CHANGELOG.md文件\n7. 打Tag\n8. push\n\n基于lerna的工作流程(自己研究的有不对请指出)：\n1. 做出改变\n2. git-cz\n3. \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md\"\n4. commit CHANGELOG.md 文件\n5. Git push\n6. lerna publish\n\n## 借鉴\n- eJayYoung([如何打造规范的开源项目workflow · Issue #1 · eJayYoung/blog · GitHub](https://github.com/eJayYoung/blog/issues/1))","source":"_posts/打造个人or团队适用的开源项目规范.md","raw":"# 打造个人or团队适用的开源项目规范\n\n![](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1541259226466&di=3d9d04f5f77d2f23b7b121fb02083038&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg)\n\n## lerna\nLerna 是一个用来优化托管在git\\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。\n\nlerna的文件树：\n```\nmy-lerna-repo/\n  package.json\n  packages/\n    package-1/\n      package.json\n    package-2/\n      package.json\n```\n\n首先作为项目拥有者全局安装：\n```shell\n$ npm install -g lerna\n# or\n$ yarn global add lerna\n```\n\n### init\n在项目使用以下命令：\n\n<!--more-->\n\n```shell\n$ lerna init\n# or\n$ lerna init --independent\n```\n\n这条命令要注意的是，lerna提供两类管理项目的模式：\n1. fixed/locked mode（default）\n\t1. Fixed模式下，项目通过单一的版本进行控制。版本号放在项目根目录下的lerna.json文件的version这个字段。当你执行 lerna publish，如果有文件更新，它将发布新的版本。\n2. independent mode（—independent）\n\t1. 这种模式下，项目里的各个package独立维护自己的version，它将会忽略lerna.json中定义的version\n\n### publish\n```shell\n$ lerna publish\n```\nPublish它做了以下几件事情\n1. 发布项目里的每个模块\n2. 执行lerna updated确定是否需要发布\n3. 假如需要发布 给lerna.json 版本号做自增\n4. 更新package.json里的版本号至最新\n5. 为新版本更新dependencies\n6. 为新版本创建一个git commit 和tag\n7. 发布更新项目到npm\n8. 一次发布所有packages\n只有你在`package.json`里设置`private: true`这个包则不会被发布。\n\n### 配置\n如果我们使用yarn我们可以在`lerna.json`做如下配置：\n```json\n{\n...\n  \"npmClient\": \"yarn\"\n...\n}\n```\n\n\n## 代码检查和规范\n在一个项目中，多人开发时会遇到代码格式问题。\n解决方案：\n### 使用Eslint\n项目拥有者需要全局安装：\n```shell\n$ npm install eslint -g\n# or\n$ yarn global add eslint\n```\n\n在项目中执行命令：\n```shell\n$ eslint --init\n```\n\nReact项目推荐使用airbnb规范。\n```json\n{\n    \"devDependencies\": {\n        \"eslint\": \"^4.19.1\",\n        \"eslint-config-airbnb\": \"^17.0.0\",\n        \"eslint-plugin-import\": \"^2.13.0\",\n        \"eslint-plugin-react\": \"^7.10.0\",\n        \"eslint-plugin-jsx-a11y\": \"^6.1.1\"\n    }\n}\n```\n\n### 使用Standard\n参考中文文档 [standard/README-zhcn.md at master · standard/standard · GitHub](https://github.com/standard/standard/blob/master/docs/README-zhcn.md#i-disagree-with-rule-x-can-you-change-it)\n### Prettier\nEslint + prettier 解决了代码风格和格式化的所有问题。\n\n### 与git hook来解决何时lint\n\n目前比较成熟的是`husky`与`lint-staged`两者结合:\n```shell\n$ npm install lint-staged husky -D\n# or\n$ yarn add lint-staged husky -D\n```\n\n接着在`package.json`中加入：\n```json\n\"lint-staged\": {\n    \"packages/*/src/**/*.js\": [\n      \"eslint --fix\",\n      \"prettier --write\",\n      \"git add\"\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n```\n\n### Tslint\n如果你的项目使`TypeScript`那么`tslint`能帮助你许多！\n\n```shell\n$ yarn add -D prettier tslint-config-prettier tslint-plugin-prettier husky pretty-quick\n```\n\n#### Tslint.json\n```json\n{\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n\t\t\t\t\"tslint:recommended\",\n\t\t\t\t\"tslint-react\",\n\t\t\t\t\"tslint-config-prettier\"\n    ],\n    \"jsRules\": {},\n    \"rules\": {\n\t\t\t\"prettier\": [true, \"./prettierrc\"]\n\t\t},\n    \"rulesDirectory\": [\n\t\t\t\"tslint-plugin-prettier\"\n\t\t]\n}\n```\n\n## 编辑器的不同\n解决方案：\n主流的都是使用EditorConfig\n只需要在根目录新建一个`.editorconfig`文件，然后去根据文档自行定义。再给自己使用的编辑器安装`editorConfig`的插件即可。\n官方网站：[EditorConfig](https://editorconfig.org/)\n\n## commit 不统一\n主流的方法是commitizen.\n项目拥有者应当全局安装：\n```shell\n$ npm install -g commitizen\n# or\n$ yarn global add commitizen\n```\n\n之后我们在项目里选用angular格式的commit message并在终端下输入以下命令：\n```shell\n$ commitizen init cz-conventional-changelog —save-exact\n# or\n$ commitizen init cz-conventional-changelog --yarn --dev --exact\n```\n上面的命令为你做了三件事：\n1. 安装cz-conventional-changelog的adapter的npm模块。\n2. 将其保存到package.json的dependencies或devDependencies。\n3. 将config.commitizen键添加到package.json的根目录，如下所示：\n```json\n\"config\": {\n    \"commitizen\": {\n      \"path\": \"cz-conventional-changelog\"\n    }\n  }\n```\n然后在`package.json`里的`scripts`里加上\n```json\n\"scripts\": {\n    \"commit\": \"git-cz\"\n }\n```\n注意：\n如果你使用像`husky`这样的`precommit hooks`，你需要为脚本命名除“commit”之外的其他东西（例如“cm”：“git-cz”）。\n原因是因为npm-scripts有一个“feature”，它自动运行名称为prexxx的脚本，其中xxx是另一个脚本的名称。\n本质上，如果您将脚本命名为“commit”，则npm和husky将运行两次“precommit”脚本，并且解决方法是阻止npm触发的precommit脚本。\n\n之后如果有别人也参与进你的项目开发中，我们最好在仓库里也安装依赖\n```shell\n$ npm install -D commitizen\n# or\n$ yarn add commititzen -D\n```\n\n## changelog\n通过手动去维护changelog在我之前的那个wx-tsApi项目中是非常头疼的一件事情，所以去寻找自动化的东西。\n\n全局安装\n```shell\n$ npm install -g conventional-changelog-cli\n# or\n$ yarn global add conventional-changelog-cli\n```\n然后在`package.json`文件中添加`scripts`\n```json\n{\n\t\"scripts\": {\n    \"changelog\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md\"\n\t}\n}\n```\n\n官方推荐的工作流程：\n1. 做出改变\n2. 提交这些改变\n3. 确定Travis变成绿色\n4. 改version\n5. changelog\n6. commit package.json 和CHANGELOG.md文件\n7. 打Tag\n8. push\n\n基于lerna的工作流程(自己研究的有不对请指出)：\n1. 做出改变\n2. git-cz\n3. \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 && git add CHANGELOG.md\"\n4. commit CHANGELOG.md 文件\n5. Git push\n6. lerna publish\n\n## 借鉴\n- eJayYoung([如何打造规范的开源项目workflow · Issue #1 · eJayYoung/blog · GitHub](https://github.com/eJayYoung/blog/issues/1))","slug":"打造个人or团队适用的开源项目规范","published":1,"date":"2018-10-03T07:10:14.280Z","updated":"2018-11-03T12:51:15.430Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjollnbwa008hunfyv7eqt38y","content":"<h1 id=\"打造个人or团队适用的开源项目规范\"><a href=\"#打造个人or团队适用的开源项目规范\" class=\"headerlink\" title=\"打造个人or团队适用的开源项目规范\"></a>打造个人or团队适用的开源项目规范</h1><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541259226466&amp;di=3d9d04f5f77d2f23b7b121fb02083038&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg\" alt=\"\"></p>\n<h2 id=\"lerna\"><a href=\"#lerna\" class=\"headerlink\" title=\"lerna\"></a>lerna</h2><p>Lerna 是一个用来优化托管在git\\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。</p>\n<p>lerna的文件树：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-lerna-repo/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  packages/</span><br><span class=\"line\">    package-1/</span><br><span class=\"line\">      package.json</span><br><span class=\"line\">    package-2/</span><br><span class=\"line\">      package.json</span><br></pre></td></tr></table></figure></p>\n<p>首先作为项目拥有者全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g lerna</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add lerna</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>在项目使用以下命令：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna init</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna init --independent</span></span><br></pre></td></tr></table></figure>\n<p>这条命令要注意的是，lerna提供两类管理项目的模式：</p>\n<ol>\n<li>fixed/locked mode（default）<ol>\n<li>Fixed模式下，项目通过单一的版本进行控制。版本号放在项目根目录下的lerna.json文件的version这个字段。当你执行 lerna publish，如果有文件更新，它将发布新的版本。</li>\n</ol>\n</li>\n<li>independent mode（—independent）<ol>\n<li>这种模式下，项目里的各个package独立维护自己的version，它将会忽略lerna.json中定义的version</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna publish</span></span><br></pre></td></tr></table></figure>\n<p>Publish它做了以下几件事情</p>\n<ol>\n<li>发布项目里的每个模块</li>\n<li>执行lerna updated确定是否需要发布</li>\n<li>假如需要发布 给lerna.json 版本号做自增</li>\n<li>更新package.json里的版本号至最新</li>\n<li>为新版本更新dependencies</li>\n<li>为新版本创建一个git commit 和tag</li>\n<li>发布更新项目到npm</li>\n<li>一次发布所有packages<br>只有你在<code>package.json</code>里设置<code>private: true</code>这个包则不会被发布。</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>如果我们使用yarn我们可以在<code>lerna.json</code>做如下配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  \"npmClient\": \"yarn\"</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码检查和规范\"><a href=\"#代码检查和规范\" class=\"headerlink\" title=\"代码检查和规范\"></a>代码检查和规范</h2><p>在一个项目中，多人开发时会遇到代码格式问题。<br>解决方案：</p>\n<h3 id=\"使用Eslint\"><a href=\"#使用Eslint\" class=\"headerlink\" title=\"使用Eslint\"></a>使用Eslint</h3><p>项目拥有者需要全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install eslint -g</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add eslint</span></span><br></pre></td></tr></table></figure></p>\n<p>在项目中执行命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> eslint --init</span></span><br></pre></td></tr></table></figure></p>\n<p>React项目推荐使用airbnb规范。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^4.19.1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.13.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.10.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.1\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用Standard\"><a href=\"#使用Standard\" class=\"headerlink\" title=\"使用Standard\"></a>使用Standard</h3><p>参考中文文档 <a href=\"https://github.com/standard/standard/blob/master/docs/README-zhcn.md#i-disagree-with-rule-x-can-you-change-it\" target=\"_blank\" rel=\"noopener\">standard/README-zhcn.md at master · standard/standard · GitHub</a></p>\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><p>Eslint + prettier 解决了代码风格和格式化的所有问题。</p>\n<h3 id=\"与git-hook来解决何时lint\"><a href=\"#与git-hook来解决何时lint\" class=\"headerlink\" title=\"与git hook来解决何时lint\"></a>与git hook来解决何时lint</h3><p>目前比较成熟的是<code>husky</code>与<code>lint-staged</code>两者结合:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install lint-staged husky -D</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add lint-staged husky -D</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在<code>package.json</code>中加入：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"packages/*/src/**/*.js\": [</span><br><span class=\"line\">      \"eslint --fix\",</span><br><span class=\"line\">      \"prettier --write\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Tslint\"><a href=\"#Tslint\" class=\"headerlink\" title=\"Tslint\"></a>Tslint</h3><p>如果你的项目使<code>TypeScript</code>那么<code>tslint</code>能帮助你许多！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add -D prettier tslint-config-prettier tslint-plugin-prettier husky pretty-quick</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Tslint-json\"><a href=\"#Tslint-json\" class=\"headerlink\" title=\"Tslint.json\"></a>Tslint.json</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"defaultSeverity\"</span>: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint:recommended\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint-react\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint-config-prettier\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"jsRules\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"prettier\"</span>: [<span class=\"literal\">true</span>, <span class=\"string\">\"./prettierrc\"</span>]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"rulesDirectory\"</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"tslint-plugin-prettier\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑器的不同\"><a href=\"#编辑器的不同\" class=\"headerlink\" title=\"编辑器的不同\"></a>编辑器的不同</h2><p>解决方案：<br>主流的都是使用EditorConfig<br>只需要在根目录新建一个<code>.editorconfig</code>文件，然后去根据文档自行定义。再给自己使用的编辑器安装<code>editorConfig</code>的插件即可。<br>官方网站：<a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"noopener\">EditorConfig</a></p>\n<h2 id=\"commit-不统一\"><a href=\"#commit-不统一\" class=\"headerlink\" title=\"commit 不统一\"></a>commit 不统一</h2><p>主流的方法是commitizen.<br>项目拥有者应当全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g commitizen</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add commitizen</span></span><br></pre></td></tr></table></figure></p>\n<p>之后我们在项目里选用angular格式的commit message并在终端下输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> commitizen init cz-conventional-changelog —save-exact</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> commitizen init cz-conventional-changelog --yarn --dev --exact</span></span><br></pre></td></tr></table></figure></p>\n<p>上面的命令为你做了三件事：</p>\n<ol>\n<li>安装cz-conventional-changelog的adapter的npm模块。</li>\n<li>将其保存到package.json的dependencies或devDependencies。</li>\n<li>将config.commitizen键添加到package.json的根目录，如下所示：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\": &#123;</span><br><span class=\"line\">    \"commitizen\": &#123;</span><br><span class=\"line\">      \"path\": \"cz-conventional-changelog\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在<code>package.json</code>里的<code>scripts</code>里加上<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"commit\": \"git-cz\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：<br>如果你使用像<code>husky</code>这样的<code>precommit hooks</code>，你需要为脚本命名除“commit”之外的其他东西（例如“cm”：“git-cz”）。<br>原因是因为npm-scripts有一个“feature”，它自动运行名称为prexxx的脚本，其中xxx是另一个脚本的名称。<br>本质上，如果您将脚本命名为“commit”，则npm和husky将运行两次“precommit”脚本，并且解决方法是阻止npm触发的precommit脚本。</p>\n<p>之后如果有别人也参与进你的项目开发中，我们最好在仓库里也安装依赖<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -D commitizen</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add commititzen -D</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"changelog\"><a href=\"#changelog\" class=\"headerlink\" title=\"changelog\"></a>changelog</h2><p>通过手动去维护changelog在我之前的那个wx-tsApi项目中是非常头疼的一件事情，所以去寻找自动化的东西。</p>\n<p>全局安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g conventional-changelog-cli</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add conventional-changelog-cli</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>package.json</code>文件中添加<code>scripts</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"changelog\"</span>: <span class=\"string\">\"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>官方推荐的工作流程：</p>\n<ol>\n<li>做出改变</li>\n<li>提交这些改变</li>\n<li>确定Travis变成绿色</li>\n<li>改version</li>\n<li>changelog</li>\n<li>commit package.json 和CHANGELOG.md文件</li>\n<li>打Tag</li>\n<li>push</li>\n</ol>\n<p>基于lerna的工作流程(自己研究的有不对请指出)：</p>\n<ol>\n<li>做出改变</li>\n<li>git-cz</li>\n<li>“conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md”</li>\n<li>commit CHANGELOG.md 文件</li>\n<li>Git push</li>\n<li>lerna publish</li>\n</ol>\n<h2 id=\"借鉴\"><a href=\"#借鉴\" class=\"headerlink\" title=\"借鉴\"></a>借鉴</h2><ul>\n<li>eJayYoung(<a href=\"https://github.com/eJayYoung/blog/issues/1\" target=\"_blank\" rel=\"noopener\">如何打造规范的开源项目workflow · Issue #1 · eJayYoung/blog · GitHub</a>)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"打造个人or团队适用的开源项目规范\"><a href=\"#打造个人or团队适用的开源项目规范\" class=\"headerlink\" title=\"打造个人or团队适用的开源项目规范\"></a>打造个人or团队适用的开源项目规范</h1><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1541259226466&amp;di=3d9d04f5f77d2f23b7b121fb02083038&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D738639994%2C2302403857%26fm%3D214%26gp%3D0.jpg\" alt=\"\"></p>\n<h2 id=\"lerna\"><a href=\"#lerna\" class=\"headerlink\" title=\"lerna\"></a>lerna</h2><p>Lerna 是一个用来优化托管在git\\npm上的多package代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目，从而解决了多个包互相依赖，且发布时需要手动维护多个包的问题。</p>\n<p>lerna的文件树：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-lerna-repo/</span><br><span class=\"line\">  package.json</span><br><span class=\"line\">  packages/</span><br><span class=\"line\">    package-1/</span><br><span class=\"line\">      package.json</span><br><span class=\"line\">    package-2/</span><br><span class=\"line\">      package.json</span><br></pre></td></tr></table></figure></p>\n<p>首先作为项目拥有者全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g lerna</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add lerna</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>在项目使用以下命令：</p>","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna init</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna init --independent</span></span><br></pre></td></tr></table></figure>\n<p>这条命令要注意的是，lerna提供两类管理项目的模式：</p>\n<ol>\n<li>fixed/locked mode（default）<ol>\n<li>Fixed模式下，项目通过单一的版本进行控制。版本号放在项目根目录下的lerna.json文件的version这个字段。当你执行 lerna publish，如果有文件更新，它将发布新的版本。</li>\n</ol>\n</li>\n<li>independent mode（—independent）<ol>\n<li>这种模式下，项目里的各个package独立维护自己的version，它将会忽略lerna.json中定义的version</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> lerna publish</span></span><br></pre></td></tr></table></figure>\n<p>Publish它做了以下几件事情</p>\n<ol>\n<li>发布项目里的每个模块</li>\n<li>执行lerna updated确定是否需要发布</li>\n<li>假如需要发布 给lerna.json 版本号做自增</li>\n<li>更新package.json里的版本号至最新</li>\n<li>为新版本更新dependencies</li>\n<li>为新版本创建一个git commit 和tag</li>\n<li>发布更新项目到npm</li>\n<li>一次发布所有packages<br>只有你在<code>package.json</code>里设置<code>private: true</code>这个包则不会被发布。</li>\n</ol>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>如果我们使用yarn我们可以在<code>lerna.json</code>做如下配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">  \"npmClient\": \"yarn\"</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"代码检查和规范\"><a href=\"#代码检查和规范\" class=\"headerlink\" title=\"代码检查和规范\"></a>代码检查和规范</h2><p>在一个项目中，多人开发时会遇到代码格式问题。<br>解决方案：</p>\n<h3 id=\"使用Eslint\"><a href=\"#使用Eslint\" class=\"headerlink\" title=\"使用Eslint\"></a>使用Eslint</h3><p>项目拥有者需要全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install eslint -g</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add eslint</span></span><br></pre></td></tr></table></figure></p>\n<p>在项目中执行命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> eslint --init</span></span><br></pre></td></tr></table></figure></p>\n<p>React项目推荐使用airbnb规范。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^4.19.1\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.0.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.13.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.10.0\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.1\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用Standard\"><a href=\"#使用Standard\" class=\"headerlink\" title=\"使用Standard\"></a>使用Standard</h3><p>参考中文文档 <a href=\"https://github.com/standard/standard/blob/master/docs/README-zhcn.md#i-disagree-with-rule-x-can-you-change-it\" target=\"_blank\" rel=\"noopener\">standard/README-zhcn.md at master · standard/standard · GitHub</a></p>\n<h3 id=\"Prettier\"><a href=\"#Prettier\" class=\"headerlink\" title=\"Prettier\"></a>Prettier</h3><p>Eslint + prettier 解决了代码风格和格式化的所有问题。</p>\n<h3 id=\"与git-hook来解决何时lint\"><a href=\"#与git-hook来解决何时lint\" class=\"headerlink\" title=\"与git hook来解决何时lint\"></a>与git hook来解决何时lint</h3><p>目前比较成熟的是<code>husky</code>与<code>lint-staged</code>两者结合:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install lint-staged husky -D</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add lint-staged husky -D</span></span><br></pre></td></tr></table></figure></p>\n<p>接着在<code>package.json</code>中加入：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"lint-staged\": &#123;</span><br><span class=\"line\">    \"packages/*/src/**/*.js\": [</span><br><span class=\"line\">      \"eslint --fix\",</span><br><span class=\"line\">      \"prettier --write\",</span><br><span class=\"line\">      <span class=\"string\">\"git add\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"husky\": &#123;</span><br><span class=\"line\">    \"hooks\": &#123;</span><br><span class=\"line\">      \"pre-commit\": \"lint-staged\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Tslint\"><a href=\"#Tslint\" class=\"headerlink\" title=\"Tslint\"></a>Tslint</h3><p>如果你的项目使<code>TypeScript</code>那么<code>tslint</code>能帮助你许多！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add -D prettier tslint-config-prettier tslint-plugin-prettier husky pretty-quick</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Tslint-json\"><a href=\"#Tslint-json\" class=\"headerlink\" title=\"Tslint.json\"></a>Tslint.json</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"defaultSeverity\"</span>: <span class=\"string\">\"error\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extends\"</span>: [</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint:recommended\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint-react\"</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"tslint-config-prettier\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"jsRules\"</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">\"prettier\"</span>: [<span class=\"literal\">true</span>, <span class=\"string\">\"./prettierrc\"</span>]</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"rulesDirectory\"</span>: [</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"tslint-plugin-prettier\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑器的不同\"><a href=\"#编辑器的不同\" class=\"headerlink\" title=\"编辑器的不同\"></a>编辑器的不同</h2><p>解决方案：<br>主流的都是使用EditorConfig<br>只需要在根目录新建一个<code>.editorconfig</code>文件，然后去根据文档自行定义。再给自己使用的编辑器安装<code>editorConfig</code>的插件即可。<br>官方网站：<a href=\"https://editorconfig.org/\" target=\"_blank\" rel=\"noopener\">EditorConfig</a></p>\n<h2 id=\"commit-不统一\"><a href=\"#commit-不统一\" class=\"headerlink\" title=\"commit 不统一\"></a>commit 不统一</h2><p>主流的方法是commitizen.<br>项目拥有者应当全局安装：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g commitizen</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add commitizen</span></span><br></pre></td></tr></table></figure></p>\n<p>之后我们在项目里选用angular格式的commit message并在终端下输入以下命令：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> commitizen init cz-conventional-changelog —save-exact</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> commitizen init cz-conventional-changelog --yarn --dev --exact</span></span><br></pre></td></tr></table></figure></p>\n<p>上面的命令为你做了三件事：</p>\n<ol>\n<li>安装cz-conventional-changelog的adapter的npm模块。</li>\n<li>将其保存到package.json的dependencies或devDependencies。</li>\n<li>将config.commitizen键添加到package.json的根目录，如下所示：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"config\": &#123;</span><br><span class=\"line\">    \"commitizen\": &#123;</span><br><span class=\"line\">      \"path\": \"cz-conventional-changelog\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在<code>package.json</code>里的<code>scripts</code>里加上<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">    \"commit\": \"git-cz\"</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：<br>如果你使用像<code>husky</code>这样的<code>precommit hooks</code>，你需要为脚本命名除“commit”之外的其他东西（例如“cm”：“git-cz”）。<br>原因是因为npm-scripts有一个“feature”，它自动运行名称为prexxx的脚本，其中xxx是另一个脚本的名称。<br>本质上，如果您将脚本命名为“commit”，则npm和husky将运行两次“precommit”脚本，并且解决方法是阻止npm触发的precommit脚本。</p>\n<p>之后如果有别人也参与进你的项目开发中，我们最好在仓库里也安装依赖<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -D commitizen</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn add commititzen -D</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"changelog\"><a href=\"#changelog\" class=\"headerlink\" title=\"changelog\"></a>changelog</h2><p>通过手动去维护changelog在我之前的那个wx-tsApi项目中是非常头疼的一件事情，所以去寻找自动化的东西。</p>\n<p>全局安装<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npm install -g conventional-changelog-cli</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> or</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> yarn global add conventional-changelog-cli</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在<code>package.json</code>文件中添加<code>scripts</code><br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"changelog\"</span>: <span class=\"string\">\"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>官方推荐的工作流程：</p>\n<ol>\n<li>做出改变</li>\n<li>提交这些改变</li>\n<li>确定Travis变成绿色</li>\n<li>改version</li>\n<li>changelog</li>\n<li>commit package.json 和CHANGELOG.md文件</li>\n<li>打Tag</li>\n<li>push</li>\n</ol>\n<p>基于lerna的工作流程(自己研究的有不对请指出)：</p>\n<ol>\n<li>做出改变</li>\n<li>git-cz</li>\n<li>“conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md”</li>\n<li>commit CHANGELOG.md 文件</li>\n<li>Git push</li>\n<li>lerna publish</li>\n</ol>\n<h2 id=\"借鉴\"><a href=\"#借鉴\" class=\"headerlink\" title=\"借鉴\"></a>借鉴</h2><ul>\n<li>eJayYoung(<a href=\"https://github.com/eJayYoung/blog/issues/1\" target=\"_blank\" rel=\"noopener\">如何打造规范的开源项目workflow · Issue #1 · eJayYoung/blog · GitHub</a>)</li>\n</ul>"},{"title":"数据结构与算法学习","date":"2018-03-10T13:25:00.000Z","updated":"2018-04-03T04:54:00.000Z","comments":1,"layout":"post","_content":"\n## 二分查找\n\n```javascript\nfunction binary_search(array, item){\n    let low = 0;\n    let high = array.length - 1;\n    while(low <= high){\n        let mid = (low + high) / 2 >> 0;\n        let guess = array[mid];\n        if(guess == item){\n            return mid;\n        }\n        if(guess > item){\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n        return '没有该数字'\n    }\n}\n```\n\n<!--more-->\n\n## 排序\n\n### 选择排序\n\n```javascript\nfunction choicesort(arr){\n  let len = arr.length, min, temp;\n  for(let i = 0; i < len; i++){\n    min = i;\n    for(let j = i + 1; j < len; j++){\n      if(arr[j] < arr[min]) min = j;\n      temp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = temp;\n    }\n  }\n  return arr\n}\n```\n\n\n\n### 快排\n\n```javascript\n/**\n * \n * @param {array} 传入一个需要排序的数组 \n */\nfunction quicksort(arr){\n  if (arr.length <= 1) { return arr; }\n  let pivotIndex = arr.length / 2 >> 0;\n  let pivot = arr.splice(pivotIndex, 1)[0];\n  let left = [];\n  let right = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]<pivot){\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quicksort(left).concat([pivot], quicksort(right));\n}\n```\n\n\n\n## 散列表\n\n* 模拟映射关系；\n* 防止重复；\n* 缓存/ 记住数据，以免服务器再通过处理来生成它们。\n*  一旦填装因子超过0.7 ，就该调整散列表的长度。\n\n\n\n## \t狄克斯特拉算法\t\t\n\n狄克斯特拉算法包含4个步骤。\n\n1. 找出最便宜的节点，即可在最短时间内前往的节点。\n2. 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。\n3. 重复这个过程，直到对图中的每个节点都这样做了。\n4. 计算最终路径。\n\n\n​\t\t\n​\t","source":"_posts/数据结构与算法.md","raw":"---\ntitle: 数据结构与算法学习\ndate: 2018-03-10 21:25\nupdated: 2018-04-03 12:54\ncomments: true\nlayout: post\ntags: [数据结构与算法]\ncategories: 数据结构与算法\n---\n\n## 二分查找\n\n```javascript\nfunction binary_search(array, item){\n    let low = 0;\n    let high = array.length - 1;\n    while(low <= high){\n        let mid = (low + high) / 2 >> 0;\n        let guess = array[mid];\n        if(guess == item){\n            return mid;\n        }\n        if(guess > item){\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n        return '没有该数字'\n    }\n}\n```\n\n<!--more-->\n\n## 排序\n\n### 选择排序\n\n```javascript\nfunction choicesort(arr){\n  let len = arr.length, min, temp;\n  for(let i = 0; i < len; i++){\n    min = i;\n    for(let j = i + 1; j < len; j++){\n      if(arr[j] < arr[min]) min = j;\n      temp = arr[i];\n      arr[i] = arr[min];\n      arr[min] = temp;\n    }\n  }\n  return arr\n}\n```\n\n\n\n### 快排\n\n```javascript\n/**\n * \n * @param {array} 传入一个需要排序的数组 \n */\nfunction quicksort(arr){\n  if (arr.length <= 1) { return arr; }\n  let pivotIndex = arr.length / 2 >> 0;\n  let pivot = arr.splice(pivotIndex, 1)[0];\n  let left = [];\n  let right = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]<pivot){\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return quicksort(left).concat([pivot], quicksort(right));\n}\n```\n\n\n\n## 散列表\n\n* 模拟映射关系；\n* 防止重复；\n* 缓存/ 记住数据，以免服务器再通过处理来生成它们。\n*  一旦填装因子超过0.7 ，就该调整散列表的长度。\n\n\n\n## \t狄克斯特拉算法\t\t\n\n狄克斯特拉算法包含4个步骤。\n\n1. 找出最便宜的节点，即可在最短时间内前往的节点。\n2. 对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。\n3. 重复这个过程，直到对图中的每个节点都这样做了。\n4. 计算最终路径。\n\n\n​\t\t\n​\t","slug":"数据结构与算法","published":1,"photos":[],"link":"","_id":"cjollnbwc008lunfy4mn1z1i4","content":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">array, item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = (low + high) / <span class=\"number\">2</span> &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> guess = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(guess == item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(guess &gt; item)&#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'没有该数字'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">choicesort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length, min, temp;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">    min = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j] &lt; arr[min]) min = j;</span><br><span class=\"line\">      temp = arr[i];</span><br><span class=\"line\">      arr[i] = arr[min];</span><br><span class=\"line\">      arr[min] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;array&#125; 传入一个需要排序的数组 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span> arr; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pivotIndex = arr.length / <span class=\"number\">2</span> &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class=\"line\">      left.push(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quicksort(left).concat([pivot], quicksort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><ul>\n<li>模拟映射关系；</li>\n<li>防止重复；</li>\n<li>缓存/ 记住数据，以免服务器再通过处理来生成它们。</li>\n<li>一旦填装因子超过0.7 ，就该调整散列表的长度。</li>\n</ul>\n<h2 id=\"狄克斯特拉算法\"><a href=\"#狄克斯特拉算法\" class=\"headerlink\" title=\"狄克斯特拉算法\"></a>狄克斯特拉算法</h2><p>狄克斯特拉算法包含4个步骤。</p>\n<ol>\n<li>找出最便宜的节点，即可在最短时间内前往的节点。</li>\n<li>对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。</li>\n<li>重复这个过程，直到对图中的每个节点都这样做了。</li>\n<li>计算最终路径。</li>\n</ol>\n<p>​<br>​    </p>\n","site":{"data":{}},"excerpt":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">array, item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> high = array.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt;= high)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> mid = (low + high) / <span class=\"number\">2</span> &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> guess = array[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(guess == item)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(guess &gt; item)&#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'没有该数字'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">choicesort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.length, min, temp;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++)&#123;</span><br><span class=\"line\">    min = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j] &lt; arr[min]) min = j;</span><br><span class=\"line\">      temp = arr[i];</span><br><span class=\"line\">      arr[i] = arr[min];</span><br><span class=\"line\">      arr[min] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;array&#125; 传入一个需要排序的数组 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quicksort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr.length &lt;= <span class=\"number\">1</span>) &#123; <span class=\"keyword\">return</span> arr; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pivotIndex = arr.length / <span class=\"number\">2</span> &gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> pivot = arr.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class=\"line\">      left.push(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quicksort(left).concat([pivot], quicksort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><ul>\n<li>模拟映射关系；</li>\n<li>防止重复；</li>\n<li>缓存/ 记住数据，以免服务器再通过处理来生成它们。</li>\n<li>一旦填装因子超过0.7 ，就该调整散列表的长度。</li>\n</ul>\n<h2 id=\"狄克斯特拉算法\"><a href=\"#狄克斯特拉算法\" class=\"headerlink\" title=\"狄克斯特拉算法\"></a>狄克斯特拉算法</h2><p>狄克斯特拉算法包含4个步骤。</p>\n<ol>\n<li>找出最便宜的节点，即可在最短时间内前往的节点。</li>\n<li>对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。</li>\n<li>重复这个过程，直到对图中的每个节点都这样做了。</li>\n<li>计算最终路径。</li>\n</ol>\n<p>​<br>​    </p>"},{"title":"英语时态","date":"2017-10-18T12:24:00.000Z","comments":1,"layout":"post","_content":"\n# 英语语法——时态\n\n时间概念包含四种，**过去**、**现在**、**将来**和**过去将来**。\n\n动作方面包含四种，**一般**、**进行**、**完成**和**完成进行**。\n\n将时间概念和动作方面结合一起，就能构成16种时态。\n\n- 一般现在时\n- 现在进行时\n- 现在完成时\n- 现在完成进行时\n\n<!--more-->\n\n<br>\n\n- 一般过去时\n- 过去进行时\n- 过去完成时\n- 过去完成进行时\n  <br>\n\n- 一般将来时\n- 将来进行时\n- 将来完成时\n- 将来完成进行时\n\n<br>\n\n- 一般过去将来时\n- 一般过去将来进行时\n- 一般过去将来完成时\n- 一般过去将来完成进行\n\n> [以下图片和部分文字参考自知乎赛门喵](https://www.zhihu.com/question/19721822)\n\n![时态](/image/时态.jpg)\n\n谓语动词有「时间」和「状态」两个属性。结构上也由「时间+时间状态」构成\n\n**将上图总结成一个表：**\n\n![时态总结](/image/时态总结.jpg)\n\n表格中的「助动词」突出「时间」，「主动词」突出动作「状态」。\n\n动词原形通过两次变形，第一次具有了「动作状态」属性。第二次具有了「时间」属性，完成到了谓语动词的转换。\n\n「时间」+「动作状态」的方式，一方面帮助了我们了解时态的的本质，更让我们可以毫不费力的记住16种时态。\n\n## 接下来细致的说明这16种时态\n\n- ### 一般\n\n  - 概念：仅仅陈诉一个事实（fact）\n  - 形式：动词原形，我们用play。\n\n```文字\nI played baskerball. \t\t\t\t\t\t\t\t我过去（以前）打篮球。\nI play baskerball.\t\t\t\t\t\t\t\t我现在打篮球。\nI will play baskerball.\t\t\t\t\t\t\t\t我将要打篮球。\nI didn't know if he would come.  \t\t\t\t\t\t我不知道她是否回来。\n```\n\n> did + play = played = 过去 + 一般体 = 一般过去时\n>\n> do/does + play = play/plays = 现在 + 一般体 = 一般现在时\n>\n> will + play = will play = 将来 + 一般体 = 一般将来时\n>\n> would + come = would come = 过去将来 + 一般体 = 一般过去将来时\n\n- ### 进行\n\n  -  概念：表示动作正在发生\n\n  - 形式：ing\n\n    - #### 过去进行时(was/ were)\n\n      We were discussing the decoration problem 10 minutes ago. \n      10分钟前，我们正讨论装修的问题。\n\n      ​<br>\n      I was cooking when you ***knocked*** at the door.\n\n      你敲门时我正在做饭。\n\n    - #### 现在进行时(am/ is/ are)\n\n      I'm felling better now.\t\t\t\t\t\n\n      **//表示正在进行的动作**\n\n      我现在感觉好多了。\n\n      <br>\n      We are leaving tomorrow.   \t\t\t\n\n      **//有些瞬间动词用进行时表将来**\n\n      我们明天离开。\n\n      <br>\n      ​\t He is always asking such foolish questions.\t\t\t\n\n        **//表示某动作反复发生**\n\n      ​  他总是问如此愚蠢的问题。\n\n      <br>\n      ​  You are being modest.\t\t\t\t\t\n\n      ​  **//“an, are, is+bing” 强调被描述情况或状态的暂时性。**\n\n      ​  你这会儿倒是挺谦虚的。\n\n        <br>\n        he is buying a new bike soon.\t\t\n\n        **//在时间和条件状语从句中，现在进行时表示将来的动作。**\n\n        她不久将买一辆新自行车。\t\n\n    - #### 将来进行时(will be)\n\n      The train will be leaving in a second.\n\n      火车就要开了。\n\n      What will you be doing this time tomorrow？\n\n      明天这个时候你将做什么？\n\n    - #### 过去将来进行时(should be/ would be)\n\n      I never realized that someday I would be living in Africa.\n\n      我以前从没想过将来有一天我会生活在非洲。 \n\n- ### 完成\n\n  - 概念：表示动作完成了\n\n  - 形式：过去分词，drunk\n\n    - #### 过去完成时(had) + done\n\n      Up to the end of last year, the aim **had been achieved** to cut energy use by 80%.\t\t\t\n\n      **//过去的过去的动作或状态，“up to/ before/ by + 过去时间”作时间状语。**\n\n      到去年年底，已经实现节能80%的目标。\n\n      <br>\n\n      There **had been** someone in our room just now, because i noticed a burning cigarette end on the floor when we opened the front door.\n\n      **//过去的过去。这种逻辑关系通过上下文体现**\n\n      刚才有人在我们的房间里，因为我们打开前门进来时，我注意到地板上有一个仍在燃烧的烟头\n\n    - #### 现在完成时(hava/ has) + done\n\n      She **has won** prizes for her records.\n\n      **//表示从过去某时刻开始，持续到现在的动作或情况，并且有可能会继续延续下去。**\n\n      她的唱片曾获奖过几次奖。\n\n      <br>\n      For years i **have been interested** in engineering.\n\n      **//时间状语常用since加一个过去的时间点，或for加一段时间**\n\n      多年来，我一直对工程学感兴趣。\n\n      <br>\n      I **have been here** since last June.\n\n      从去年6月起，我一直在这里。\n\n      <br>\n      A moment please, I **have almost finished** the report.\n\n      **//表示发生在过去， 但对现在仍有影响的动作或情况，通常用瞬间动词“arrive begin, find, give, finish, lose”**\n\n      稍等，我的报告就快完成了。\n    - #### 将来完成时(will have) + done\n\n      If you come at 6 p.m, I shall not yet **have finished** dinner.\n\n      **//表示将来某一时间之前完成的动作，并往往对将来某一时间产生影响。**\n\n      你若下午6点来，我还没吃完晚饭呢。\n\n      <br>\n      You must take a taxi, otherwise the train **will have** left **by the time** you get to the station.\n\n      **//常用 “before + 将来时间点”或“by + 将来时间点”作时间状语**\n\n      你必须坐出租，否则等你到了车站火车都开走了。\n\n      <br>\n      Before long, he **will have forgotten** all about the matter.\n\n      过不久，他就将把这事儿忘记了。\n\n    - #### 过去将来完成时(would have) + done\n\n      He said that he **would have done** with my camera by the end of next week.\n\n      **//表示在过去将来某一时间以前发生的动作，并往往会对过去将来某一时间产生影响**\n\n      他说到下周末就不用我的照相机了。\n\n- ### 完成进行\n  - 概念： 表明动作(暂时)完成了，并且还要继续\n  - 形式： been + (base form) ing\n\n    - #### 过去完成进行时(had) + been doing\n\n      He was tired. He **had been working** all day.\n\n      **//和过去完成时一样，过去完成进行时也必须以一个过去的事就为前提。**\n\n      他累了，他工作了一整天。\n\n      It **had been raining** heavily for two days and the ground was very wet.\n\n      连着下了两天大雨，地上很湿。\n\n    - #### 现在完成进行时(have/ has) + been doing\n\n      We **have been working** on this project for over a month now.\n\n      **//表示某一动作开始于过去某一时间，延续或重复的出现至今，或将继续延续至将来。**\n\n      到目前为止，我们一直在处理那个项目，已经花了一个多月时间了。\n\n      **//与现在完成时相比，现在完成时进行时更强调在从过去到现在的时间里，动作或状态一直持续或一直反复出现。**\n    - #### 将来完成进行时(will have) + been doing\n\n      If we don't hurry up the store **will have been closing** before we get there.\n\n      **//表示动作从某一时间开始一直延续到将来某一时间。**\n\n      如果我们不快一点儿， 等到了那儿，商店早关门了。\n\n      By then, we **will have been cooperating** for half a year.\n\n      到那时为止，我们就将会合作半年了。\n\n    - #### 过去将来完成进行时(would have) + been doing\n\n      He said that by the end of July he **would have been studing** German for six months.\n\n      **//表示动作从过去某一时间开始一直延续到过去将来某一时间**\n\n      他说到7月底，他学德语就有半年了。\n\n\n\n\n\n\n\n<br>\n<br>\n\n  [以下未满18岁请自动屏蔽LoVe 这段我无意间看见](https://link.zhihu.com/?target=http%3A//blog.tarwon.com/english-grammar.html/)\n\n  > **一般现在时:I make love with her everyday.**\n  > 一般过去时:I made love with her yesterday.\n  > 一般将来时:I will make love with her tomorrow.\n  >\n  > **现在进行时:I am making love with her.**\n  > 过去进行时:I was making love with her at this time yesterday.\n  > 将来进行时:I will be making love with her at this time tomorrow.\n  >\n  > **现在完成时:I have made love with her by now.**\n  > 过去完成时:I had made love with her before yesterday.\n  > 将来完成时:I will have made love with her by tomorrow.\n  >\n  > **现在完成进行时:I have been making love with her for two hours.**\n  > 过去完成进行时:I had been making love with her for two hours when her husband came in.\n  > 将来完成进行时:I will have been making love with her for two hours when her husband wakes up tomorrow morning.\n","source":"_posts/时态.md","raw":"---\ntitle: 英语时态\ndate: 2017-10-18 20:24\ncomments: true\nlayout: post\ntags: [English]\ncategories: 日常\n---\n\n# 英语语法——时态\n\n时间概念包含四种，**过去**、**现在**、**将来**和**过去将来**。\n\n动作方面包含四种，**一般**、**进行**、**完成**和**完成进行**。\n\n将时间概念和动作方面结合一起，就能构成16种时态。\n\n- 一般现在时\n- 现在进行时\n- 现在完成时\n- 现在完成进行时\n\n<!--more-->\n\n<br>\n\n- 一般过去时\n- 过去进行时\n- 过去完成时\n- 过去完成进行时\n  <br>\n\n- 一般将来时\n- 将来进行时\n- 将来完成时\n- 将来完成进行时\n\n<br>\n\n- 一般过去将来时\n- 一般过去将来进行时\n- 一般过去将来完成时\n- 一般过去将来完成进行\n\n> [以下图片和部分文字参考自知乎赛门喵](https://www.zhihu.com/question/19721822)\n\n![时态](/image/时态.jpg)\n\n谓语动词有「时间」和「状态」两个属性。结构上也由「时间+时间状态」构成\n\n**将上图总结成一个表：**\n\n![时态总结](/image/时态总结.jpg)\n\n表格中的「助动词」突出「时间」，「主动词」突出动作「状态」。\n\n动词原形通过两次变形，第一次具有了「动作状态」属性。第二次具有了「时间」属性，完成到了谓语动词的转换。\n\n「时间」+「动作状态」的方式，一方面帮助了我们了解时态的的本质，更让我们可以毫不费力的记住16种时态。\n\n## 接下来细致的说明这16种时态\n\n- ### 一般\n\n  - 概念：仅仅陈诉一个事实（fact）\n  - 形式：动词原形，我们用play。\n\n```文字\nI played baskerball. \t\t\t\t\t\t\t\t我过去（以前）打篮球。\nI play baskerball.\t\t\t\t\t\t\t\t我现在打篮球。\nI will play baskerball.\t\t\t\t\t\t\t\t我将要打篮球。\nI didn't know if he would come.  \t\t\t\t\t\t我不知道她是否回来。\n```\n\n> did + play = played = 过去 + 一般体 = 一般过去时\n>\n> do/does + play = play/plays = 现在 + 一般体 = 一般现在时\n>\n> will + play = will play = 将来 + 一般体 = 一般将来时\n>\n> would + come = would come = 过去将来 + 一般体 = 一般过去将来时\n\n- ### 进行\n\n  -  概念：表示动作正在发生\n\n  - 形式：ing\n\n    - #### 过去进行时(was/ were)\n\n      We were discussing the decoration problem 10 minutes ago. \n      10分钟前，我们正讨论装修的问题。\n\n      ​<br>\n      I was cooking when you ***knocked*** at the door.\n\n      你敲门时我正在做饭。\n\n    - #### 现在进行时(am/ is/ are)\n\n      I'm felling better now.\t\t\t\t\t\n\n      **//表示正在进行的动作**\n\n      我现在感觉好多了。\n\n      <br>\n      We are leaving tomorrow.   \t\t\t\n\n      **//有些瞬间动词用进行时表将来**\n\n      我们明天离开。\n\n      <br>\n      ​\t He is always asking such foolish questions.\t\t\t\n\n        **//表示某动作反复发生**\n\n      ​  他总是问如此愚蠢的问题。\n\n      <br>\n      ​  You are being modest.\t\t\t\t\t\n\n      ​  **//“an, are, is+bing” 强调被描述情况或状态的暂时性。**\n\n      ​  你这会儿倒是挺谦虚的。\n\n        <br>\n        he is buying a new bike soon.\t\t\n\n        **//在时间和条件状语从句中，现在进行时表示将来的动作。**\n\n        她不久将买一辆新自行车。\t\n\n    - #### 将来进行时(will be)\n\n      The train will be leaving in a second.\n\n      火车就要开了。\n\n      What will you be doing this time tomorrow？\n\n      明天这个时候你将做什么？\n\n    - #### 过去将来进行时(should be/ would be)\n\n      I never realized that someday I would be living in Africa.\n\n      我以前从没想过将来有一天我会生活在非洲。 \n\n- ### 完成\n\n  - 概念：表示动作完成了\n\n  - 形式：过去分词，drunk\n\n    - #### 过去完成时(had) + done\n\n      Up to the end of last year, the aim **had been achieved** to cut energy use by 80%.\t\t\t\n\n      **//过去的过去的动作或状态，“up to/ before/ by + 过去时间”作时间状语。**\n\n      到去年年底，已经实现节能80%的目标。\n\n      <br>\n\n      There **had been** someone in our room just now, because i noticed a burning cigarette end on the floor when we opened the front door.\n\n      **//过去的过去。这种逻辑关系通过上下文体现**\n\n      刚才有人在我们的房间里，因为我们打开前门进来时，我注意到地板上有一个仍在燃烧的烟头\n\n    - #### 现在完成时(hava/ has) + done\n\n      She **has won** prizes for her records.\n\n      **//表示从过去某时刻开始，持续到现在的动作或情况，并且有可能会继续延续下去。**\n\n      她的唱片曾获奖过几次奖。\n\n      <br>\n      For years i **have been interested** in engineering.\n\n      **//时间状语常用since加一个过去的时间点，或for加一段时间**\n\n      多年来，我一直对工程学感兴趣。\n\n      <br>\n      I **have been here** since last June.\n\n      从去年6月起，我一直在这里。\n\n      <br>\n      A moment please, I **have almost finished** the report.\n\n      **//表示发生在过去， 但对现在仍有影响的动作或情况，通常用瞬间动词“arrive begin, find, give, finish, lose”**\n\n      稍等，我的报告就快完成了。\n    - #### 将来完成时(will have) + done\n\n      If you come at 6 p.m, I shall not yet **have finished** dinner.\n\n      **//表示将来某一时间之前完成的动作，并往往对将来某一时间产生影响。**\n\n      你若下午6点来，我还没吃完晚饭呢。\n\n      <br>\n      You must take a taxi, otherwise the train **will have** left **by the time** you get to the station.\n\n      **//常用 “before + 将来时间点”或“by + 将来时间点”作时间状语**\n\n      你必须坐出租，否则等你到了车站火车都开走了。\n\n      <br>\n      Before long, he **will have forgotten** all about the matter.\n\n      过不久，他就将把这事儿忘记了。\n\n    - #### 过去将来完成时(would have) + done\n\n      He said that he **would have done** with my camera by the end of next week.\n\n      **//表示在过去将来某一时间以前发生的动作，并往往会对过去将来某一时间产生影响**\n\n      他说到下周末就不用我的照相机了。\n\n- ### 完成进行\n  - 概念： 表明动作(暂时)完成了，并且还要继续\n  - 形式： been + (base form) ing\n\n    - #### 过去完成进行时(had) + been doing\n\n      He was tired. He **had been working** all day.\n\n      **//和过去完成时一样，过去完成进行时也必须以一个过去的事就为前提。**\n\n      他累了，他工作了一整天。\n\n      It **had been raining** heavily for two days and the ground was very wet.\n\n      连着下了两天大雨，地上很湿。\n\n    - #### 现在完成进行时(have/ has) + been doing\n\n      We **have been working** on this project for over a month now.\n\n      **//表示某一动作开始于过去某一时间，延续或重复的出现至今，或将继续延续至将来。**\n\n      到目前为止，我们一直在处理那个项目，已经花了一个多月时间了。\n\n      **//与现在完成时相比，现在完成时进行时更强调在从过去到现在的时间里，动作或状态一直持续或一直反复出现。**\n    - #### 将来完成进行时(will have) + been doing\n\n      If we don't hurry up the store **will have been closing** before we get there.\n\n      **//表示动作从某一时间开始一直延续到将来某一时间。**\n\n      如果我们不快一点儿， 等到了那儿，商店早关门了。\n\n      By then, we **will have been cooperating** for half a year.\n\n      到那时为止，我们就将会合作半年了。\n\n    - #### 过去将来完成进行时(would have) + been doing\n\n      He said that by the end of July he **would have been studing** German for six months.\n\n      **//表示动作从过去某一时间开始一直延续到过去将来某一时间**\n\n      他说到7月底，他学德语就有半年了。\n\n\n\n\n\n\n\n<br>\n<br>\n\n  [以下未满18岁请自动屏蔽LoVe 这段我无意间看见](https://link.zhihu.com/?target=http%3A//blog.tarwon.com/english-grammar.html/)\n\n  > **一般现在时:I make love with her everyday.**\n  > 一般过去时:I made love with her yesterday.\n  > 一般将来时:I will make love with her tomorrow.\n  >\n  > **现在进行时:I am making love with her.**\n  > 过去进行时:I was making love with her at this time yesterday.\n  > 将来进行时:I will be making love with her at this time tomorrow.\n  >\n  > **现在完成时:I have made love with her by now.**\n  > 过去完成时:I had made love with her before yesterday.\n  > 将来完成时:I will have made love with her by tomorrow.\n  >\n  > **现在完成进行时:I have been making love with her for two hours.**\n  > 过去完成进行时:I had been making love with her for two hours when her husband came in.\n  > 将来完成进行时:I will have been making love with her for two hours when her husband wakes up tomorrow morning.\n","slug":"时态","published":1,"updated":"2017-11-12T07:57:33.000Z","photos":[],"link":"","_id":"cjollnbwe008punfyw1uwk630","content":"<h1 id=\"英语语法——时态\"><a href=\"#英语语法——时态\" class=\"headerlink\" title=\"英语语法——时态\"></a>英语语法——时态</h1><p>时间概念包含四种，<strong>过去</strong>、<strong>现在</strong>、<strong>将来</strong>和<strong>过去将来</strong>。</p>\n<p>动作方面包含四种，<strong>一般</strong>、<strong>进行</strong>、<strong>完成</strong>和<strong>完成进行</strong>。</p>\n<p>将时间概念和动作方面结合一起，就能构成16种时态。</p>\n<ul>\n<li>一般现在时</li>\n<li>现在进行时</li>\n<li>现在完成时</li>\n<li>现在完成进行时</li>\n</ul>\n<a id=\"more\"></a>\n<p><br></p>\n<ul>\n<li>一般过去时</li>\n<li>过去进行时</li>\n<li>过去完成时</li>\n<li><p>过去完成进行时<br><br></p>\n</li>\n<li><p>一般将来时</p>\n</li>\n<li>将来进行时</li>\n<li>将来完成时</li>\n<li>将来完成进行时</li>\n</ul>\n<p><br></p>\n<ul>\n<li>一般过去将来时</li>\n<li>一般过去将来进行时</li>\n<li>一般过去将来完成时</li>\n<li>一般过去将来完成进行</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/19721822\" target=\"_blank\" rel=\"noopener\">以下图片和部分文字参考自知乎赛门喵</a></p>\n</blockquote>\n<p><img src=\"/image/时态.jpg\" alt=\"时态\"></p>\n<p>谓语动词有「时间」和「状态」两个属性。结构上也由「时间+时间状态」构成</p>\n<p><strong>将上图总结成一个表：</strong></p>\n<p><img src=\"/image/时态总结.jpg\" alt=\"时态总结\"></p>\n<p>表格中的「助动词」突出「时间」，「主动词」突出动作「状态」。</p>\n<p>动词原形通过两次变形，第一次具有了「动作状态」属性。第二次具有了「时间」属性，完成到了谓语动词的转换。</p>\n<p>「时间」+「动作状态」的方式，一方面帮助了我们了解时态的的本质，更让我们可以毫不费力的记住16种时态。</p>\n<h2 id=\"接下来细致的说明这16种时态\"><a href=\"#接下来细致的说明这16种时态\" class=\"headerlink\" title=\"接下来细致的说明这16种时态\"></a>接下来细致的说明这16种时态</h2><ul>\n<li><h3 id=\"一般\"><a href=\"#一般\" class=\"headerlink\" title=\"一般\"></a>一般</h3><ul>\n<li>概念：仅仅陈诉一个事实（fact）</li>\n<li>形式：动词原形，我们用play。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I played baskerball. \t\t\t\t\t\t\t\t我过去（以前）打篮球。</span><br><span class=\"line\">I play baskerball.\t\t\t\t\t\t\t\t我现在打篮球。</span><br><span class=\"line\">I will play baskerball.\t\t\t\t\t\t\t\t我将要打篮球。</span><br><span class=\"line\">I didn&apos;t know if he would come.  \t\t\t\t\t\t我不知道她是否回来。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>did + play = played = 过去 + 一般体 = 一般过去时</p>\n<p>do/does + play = play/plays = 现在 + 一般体 = 一般现在时</p>\n<p>will + play = will play = 将来 + 一般体 = 一般将来时</p>\n<p>would + come = would come = 过去将来 + 一般体 = 一般过去将来时</p>\n</blockquote>\n<ul>\n<li><h3 id=\"进行\"><a href=\"#进行\" class=\"headerlink\" title=\"进行\"></a>进行</h3><ul>\n<li><p>概念：表示动作正在发生</p>\n</li>\n<li><p>形式：ing</p>\n<ul>\n<li><h4 id=\"过去进行时-was-were\"><a href=\"#过去进行时-was-were\" class=\"headerlink\" title=\"过去进行时(was/ were)\"></a>过去进行时(was/ were)</h4><p>We were discussing the decoration problem 10 minutes ago.<br>10分钟前，我们正讨论装修的问题。</p>\n<p>​<br><br>I was cooking when you <strong><em>knocked</em></strong> at the door.</p>\n<p>你敲门时我正在做饭。</p>\n</li>\n<li><h4 id=\"现在进行时-am-is-are\"><a href=\"#现在进行时-am-is-are\" class=\"headerlink\" title=\"现在进行时(am/ is/ are)\"></a>现在进行时(am/ is/ are)</h4><p>I’m felling better now.                    </p>\n<p><strong>//表示正在进行的动作</strong></p>\n<p>我现在感觉好多了。</p>\n<p><br><br>We are leaving tomorrow.               </p>\n<p><strong>//有些瞬间动词用进行时表将来</strong></p>\n<p>我们明天离开。</p>\n<p><br><br>​     He is always asking such foolish questions.            </p>\n<p>  <strong>//表示某动作反复发生</strong></p>\n<p>​  他总是问如此愚蠢的问题。</p>\n<p><br><br>​  You are being modest.                    </p>\n<p>​  <strong>//“an, are, is+bing” 强调被描述情况或状态的暂时性。</strong></p>\n<p>​  你这会儿倒是挺谦虚的。</p>\n<p>  <br><br>  he is buying a new bike soon.        </p>\n<p>  <strong>//在时间和条件状语从句中，现在进行时表示将来的动作。</strong></p>\n<p>  她不久将买一辆新自行车。    </p>\n</li>\n<li><h4 id=\"将来进行时-will-be\"><a href=\"#将来进行时-will-be\" class=\"headerlink\" title=\"将来进行时(will be)\"></a>将来进行时(will be)</h4><p>The train will be leaving in a second.</p>\n<p>火车就要开了。</p>\n<p>What will you be doing this time tomorrow？</p>\n<p>明天这个时候你将做什么？</p>\n</li>\n<li><h4 id=\"过去将来进行时-should-be-would-be\"><a href=\"#过去将来进行时-should-be-would-be\" class=\"headerlink\" title=\"过去将来进行时(should be/ would be)\"></a>过去将来进行时(should be/ would be)</h4><p>I never realized that someday I would be living in Africa.</p>\n<p>我以前从没想过将来有一天我会生活在非洲。 </p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><ul>\n<li><p>概念：表示动作完成了</p>\n</li>\n<li><p>形式：过去分词，drunk</p>\n<ul>\n<li><h4 id=\"过去完成时-had-done\"><a href=\"#过去完成时-had-done\" class=\"headerlink\" title=\"过去完成时(had) + done\"></a>过去完成时(had) + done</h4><p>Up to the end of last year, the aim <strong>had been achieved</strong> to cut energy use by 80%.            </p>\n<p><strong>//过去的过去的动作或状态，“up to/ before/ by + 过去时间”作时间状语。</strong></p>\n<p>到去年年底，已经实现节能80%的目标。</p>\n<p><br></p>\n<p>There <strong>had been</strong> someone in our room just now, because i noticed a burning cigarette end on the floor when we opened the front door.</p>\n<p><strong>//过去的过去。这种逻辑关系通过上下文体现</strong></p>\n<p>刚才有人在我们的房间里，因为我们打开前门进来时，我注意到地板上有一个仍在燃烧的烟头</p>\n</li>\n<li><h4 id=\"现在完成时-hava-has-done\"><a href=\"#现在完成时-hava-has-done\" class=\"headerlink\" title=\"现在完成时(hava/ has) + done\"></a>现在完成时(hava/ has) + done</h4><p>She <strong>has won</strong> prizes for her records.</p>\n<p><strong>//表示从过去某时刻开始，持续到现在的动作或情况，并且有可能会继续延续下去。</strong></p>\n<p>她的唱片曾获奖过几次奖。</p>\n<p><br><br>For years i <strong>have been interested</strong> in engineering.</p>\n<p><strong>//时间状语常用since加一个过去的时间点，或for加一段时间</strong></p>\n<p>多年来，我一直对工程学感兴趣。</p>\n<p><br><br>I <strong>have been here</strong> since last June.</p>\n<p>从去年6月起，我一直在这里。</p>\n<p><br><br>A moment please, I <strong>have almost finished</strong> the report.</p>\n<p><strong>//表示发生在过去， 但对现在仍有影响的动作或情况，通常用瞬间动词“arrive begin, find, give, finish, lose”</strong></p>\n<p>稍等，我的报告就快完成了。</p>\n</li>\n<li><h4 id=\"将来完成时-will-have-done\"><a href=\"#将来完成时-will-have-done\" class=\"headerlink\" title=\"将来完成时(will have) + done\"></a>将来完成时(will have) + done</h4><p>If you come at 6 p.m, I shall not yet <strong>have finished</strong> dinner.</p>\n<p><strong>//表示将来某一时间之前完成的动作，并往往对将来某一时间产生影响。</strong></p>\n<p>你若下午6点来，我还没吃完晚饭呢。</p>\n<p><br><br>You must take a taxi, otherwise the train <strong>will have</strong> left <strong>by the time</strong> you get to the station.</p>\n<p><strong>//常用 “before + 将来时间点”或“by + 将来时间点”作时间状语</strong></p>\n<p>你必须坐出租，否则等你到了车站火车都开走了。</p>\n<p><br><br>Before long, he <strong>will have forgotten</strong> all about the matter.</p>\n<p>过不久，他就将把这事儿忘记了。</p>\n</li>\n<li><h4 id=\"过去将来完成时-would-have-done\"><a href=\"#过去将来完成时-would-have-done\" class=\"headerlink\" title=\"过去将来完成时(would have) + done\"></a>过去将来完成时(would have) + done</h4><p>He said that he <strong>would have done</strong> with my camera by the end of next week.</p>\n<p><strong>//表示在过去将来某一时间以前发生的动作，并往往会对过去将来某一时间产生影响</strong></p>\n<p>他说到下周末就不用我的照相机了。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"完成进行\"><a href=\"#完成进行\" class=\"headerlink\" title=\"完成进行\"></a>完成进行</h3><ul>\n<li>概念： 表明动作(暂时)完成了，并且还要继续</li>\n<li><p>形式： been + (base form) ing</p>\n<ul>\n<li><h4 id=\"过去完成进行时-had-been-doing\"><a href=\"#过去完成进行时-had-been-doing\" class=\"headerlink\" title=\"过去完成进行时(had) + been doing\"></a>过去完成进行时(had) + been doing</h4><p>He was tired. He <strong>had been working</strong> all day.</p>\n<p><strong>//和过去完成时一样，过去完成进行时也必须以一个过去的事就为前提。</strong></p>\n<p>他累了，他工作了一整天。</p>\n<p>It <strong>had been raining</strong> heavily for two days and the ground was very wet.</p>\n<p>连着下了两天大雨，地上很湿。</p>\n</li>\n<li><h4 id=\"现在完成进行时-have-has-been-doing\"><a href=\"#现在完成进行时-have-has-been-doing\" class=\"headerlink\" title=\"现在完成进行时(have/ has) + been doing\"></a>现在完成进行时(have/ has) + been doing</h4><p>We <strong>have been working</strong> on this project for over a month now.</p>\n<p><strong>//表示某一动作开始于过去某一时间，延续或重复的出现至今，或将继续延续至将来。</strong></p>\n<p>到目前为止，我们一直在处理那个项目，已经花了一个多月时间了。</p>\n<p><strong>//与现在完成时相比，现在完成时进行时更强调在从过去到现在的时间里，动作或状态一直持续或一直反复出现。</strong></p>\n</li>\n<li><h4 id=\"将来完成进行时-will-have-been-doing\"><a href=\"#将来完成进行时-will-have-been-doing\" class=\"headerlink\" title=\"将来完成进行时(will have) + been doing\"></a>将来完成进行时(will have) + been doing</h4><p>If we don’t hurry up the store <strong>will have been closing</strong> before we get there.</p>\n<p><strong>//表示动作从某一时间开始一直延续到将来某一时间。</strong></p>\n<p>如果我们不快一点儿， 等到了那儿，商店早关门了。</p>\n<p>By then, we <strong>will have been cooperating</strong> for half a year.</p>\n<p>到那时为止，我们就将会合作半年了。</p>\n</li>\n<li><h4 id=\"过去将来完成进行时-would-have-been-doing\"><a href=\"#过去将来完成进行时-would-have-been-doing\" class=\"headerlink\" title=\"过去将来完成进行时(would have) + been doing\"></a>过去将来完成进行时(would have) + been doing</h4><p>He said that by the end of July he <strong>would have been studing</strong> German for six months.</p>\n<p><strong>//表示动作从过去某一时间开始一直延续到过去将来某一时间</strong></p>\n<p>他说到7月底，他学德语就有半年了。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<p>  <a href=\"https://link.zhihu.com/?target=http%3A//blog.tarwon.com/english-grammar.html/\" target=\"_blank\" rel=\"noopener\">以下未满18岁请自动屏蔽LoVe 这段我无意间看见</a></p>\n<blockquote>\n<p><strong>一般现在时:I make love with her everyday.</strong><br>一般过去时:I made love with her yesterday.<br>一般将来时:I will make love with her tomorrow.</p>\n<p><strong>现在进行时:I am making love with her.</strong><br>过去进行时:I was making love with her at this time yesterday.<br>将来进行时:I will be making love with her at this time tomorrow.</p>\n<p><strong>现在完成时:I have made love with her by now.</strong><br>过去完成时:I had made love with her before yesterday.<br>将来完成时:I will have made love with her by tomorrow.</p>\n<p><strong>现在完成进行时:I have been making love with her for two hours.</strong><br>过去完成进行时:I had been making love with her for two hours when her husband came in.<br>将来完成进行时:I will have been making love with her for two hours when her husband wakes up tomorrow morning.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"英语语法——时态\"><a href=\"#英语语法——时态\" class=\"headerlink\" title=\"英语语法——时态\"></a>英语语法——时态</h1><p>时间概念包含四种，<strong>过去</strong>、<strong>现在</strong>、<strong>将来</strong>和<strong>过去将来</strong>。</p>\n<p>动作方面包含四种，<strong>一般</strong>、<strong>进行</strong>、<strong>完成</strong>和<strong>完成进行</strong>。</p>\n<p>将时间概念和动作方面结合一起，就能构成16种时态。</p>\n<ul>\n<li>一般现在时</li>\n<li>现在进行时</li>\n<li>现在完成时</li>\n<li>现在完成进行时</li>\n</ul>","more":"<p><br></p>\n<ul>\n<li>一般过去时</li>\n<li>过去进行时</li>\n<li>过去完成时</li>\n<li><p>过去完成进行时<br><br></p>\n</li>\n<li><p>一般将来时</p>\n</li>\n<li>将来进行时</li>\n<li>将来完成时</li>\n<li>将来完成进行时</li>\n</ul>\n<p><br></p>\n<ul>\n<li>一般过去将来时</li>\n<li>一般过去将来进行时</li>\n<li>一般过去将来完成时</li>\n<li>一般过去将来完成进行</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/19721822\" target=\"_blank\" rel=\"noopener\">以下图片和部分文字参考自知乎赛门喵</a></p>\n</blockquote>\n<p><img src=\"/image/时态.jpg\" alt=\"时态\"></p>\n<p>谓语动词有「时间」和「状态」两个属性。结构上也由「时间+时间状态」构成</p>\n<p><strong>将上图总结成一个表：</strong></p>\n<p><img src=\"/image/时态总结.jpg\" alt=\"时态总结\"></p>\n<p>表格中的「助动词」突出「时间」，「主动词」突出动作「状态」。</p>\n<p>动词原形通过两次变形，第一次具有了「动作状态」属性。第二次具有了「时间」属性，完成到了谓语动词的转换。</p>\n<p>「时间」+「动作状态」的方式，一方面帮助了我们了解时态的的本质，更让我们可以毫不费力的记住16种时态。</p>\n<h2 id=\"接下来细致的说明这16种时态\"><a href=\"#接下来细致的说明这16种时态\" class=\"headerlink\" title=\"接下来细致的说明这16种时态\"></a>接下来细致的说明这16种时态</h2><ul>\n<li><h3 id=\"一般\"><a href=\"#一般\" class=\"headerlink\" title=\"一般\"></a>一般</h3><ul>\n<li>概念：仅仅陈诉一个事实（fact）</li>\n<li>形式：动词原形，我们用play。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I played baskerball. \t\t\t\t\t\t\t\t我过去（以前）打篮球。</span><br><span class=\"line\">I play baskerball.\t\t\t\t\t\t\t\t我现在打篮球。</span><br><span class=\"line\">I will play baskerball.\t\t\t\t\t\t\t\t我将要打篮球。</span><br><span class=\"line\">I didn&apos;t know if he would come.  \t\t\t\t\t\t我不知道她是否回来。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>did + play = played = 过去 + 一般体 = 一般过去时</p>\n<p>do/does + play = play/plays = 现在 + 一般体 = 一般现在时</p>\n<p>will + play = will play = 将来 + 一般体 = 一般将来时</p>\n<p>would + come = would come = 过去将来 + 一般体 = 一般过去将来时</p>\n</blockquote>\n<ul>\n<li><h3 id=\"进行\"><a href=\"#进行\" class=\"headerlink\" title=\"进行\"></a>进行</h3><ul>\n<li><p>概念：表示动作正在发生</p>\n</li>\n<li><p>形式：ing</p>\n<ul>\n<li><h4 id=\"过去进行时-was-were\"><a href=\"#过去进行时-was-were\" class=\"headerlink\" title=\"过去进行时(was/ were)\"></a>过去进行时(was/ were)</h4><p>We were discussing the decoration problem 10 minutes ago.<br>10分钟前，我们正讨论装修的问题。</p>\n<p>​<br><br>I was cooking when you <strong><em>knocked</em></strong> at the door.</p>\n<p>你敲门时我正在做饭。</p>\n</li>\n<li><h4 id=\"现在进行时-am-is-are\"><a href=\"#现在进行时-am-is-are\" class=\"headerlink\" title=\"现在进行时(am/ is/ are)\"></a>现在进行时(am/ is/ are)</h4><p>I’m felling better now.                    </p>\n<p><strong>//表示正在进行的动作</strong></p>\n<p>我现在感觉好多了。</p>\n<p><br><br>We are leaving tomorrow.               </p>\n<p><strong>//有些瞬间动词用进行时表将来</strong></p>\n<p>我们明天离开。</p>\n<p><br><br>​     He is always asking such foolish questions.            </p>\n<p>  <strong>//表示某动作反复发生</strong></p>\n<p>​  他总是问如此愚蠢的问题。</p>\n<p><br><br>​  You are being modest.                    </p>\n<p>​  <strong>//“an, are, is+bing” 强调被描述情况或状态的暂时性。</strong></p>\n<p>​  你这会儿倒是挺谦虚的。</p>\n<p>  <br><br>  he is buying a new bike soon.        </p>\n<p>  <strong>//在时间和条件状语从句中，现在进行时表示将来的动作。</strong></p>\n<p>  她不久将买一辆新自行车。    </p>\n</li>\n<li><h4 id=\"将来进行时-will-be\"><a href=\"#将来进行时-will-be\" class=\"headerlink\" title=\"将来进行时(will be)\"></a>将来进行时(will be)</h4><p>The train will be leaving in a second.</p>\n<p>火车就要开了。</p>\n<p>What will you be doing this time tomorrow？</p>\n<p>明天这个时候你将做什么？</p>\n</li>\n<li><h4 id=\"过去将来进行时-should-be-would-be\"><a href=\"#过去将来进行时-should-be-would-be\" class=\"headerlink\" title=\"过去将来进行时(should be/ would be)\"></a>过去将来进行时(should be/ would be)</h4><p>I never realized that someday I would be living in Africa.</p>\n<p>我以前从没想过将来有一天我会生活在非洲。 </p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><ul>\n<li><p>概念：表示动作完成了</p>\n</li>\n<li><p>形式：过去分词，drunk</p>\n<ul>\n<li><h4 id=\"过去完成时-had-done\"><a href=\"#过去完成时-had-done\" class=\"headerlink\" title=\"过去完成时(had) + done\"></a>过去完成时(had) + done</h4><p>Up to the end of last year, the aim <strong>had been achieved</strong> to cut energy use by 80%.            </p>\n<p><strong>//过去的过去的动作或状态，“up to/ before/ by + 过去时间”作时间状语。</strong></p>\n<p>到去年年底，已经实现节能80%的目标。</p>\n<p><br></p>\n<p>There <strong>had been</strong> someone in our room just now, because i noticed a burning cigarette end on the floor when we opened the front door.</p>\n<p><strong>//过去的过去。这种逻辑关系通过上下文体现</strong></p>\n<p>刚才有人在我们的房间里，因为我们打开前门进来时，我注意到地板上有一个仍在燃烧的烟头</p>\n</li>\n<li><h4 id=\"现在完成时-hava-has-done\"><a href=\"#现在完成时-hava-has-done\" class=\"headerlink\" title=\"现在完成时(hava/ has) + done\"></a>现在完成时(hava/ has) + done</h4><p>She <strong>has won</strong> prizes for her records.</p>\n<p><strong>//表示从过去某时刻开始，持续到现在的动作或情况，并且有可能会继续延续下去。</strong></p>\n<p>她的唱片曾获奖过几次奖。</p>\n<p><br><br>For years i <strong>have been interested</strong> in engineering.</p>\n<p><strong>//时间状语常用since加一个过去的时间点，或for加一段时间</strong></p>\n<p>多年来，我一直对工程学感兴趣。</p>\n<p><br><br>I <strong>have been here</strong> since last June.</p>\n<p>从去年6月起，我一直在这里。</p>\n<p><br><br>A moment please, I <strong>have almost finished</strong> the report.</p>\n<p><strong>//表示发生在过去， 但对现在仍有影响的动作或情况，通常用瞬间动词“arrive begin, find, give, finish, lose”</strong></p>\n<p>稍等，我的报告就快完成了。</p>\n</li>\n<li><h4 id=\"将来完成时-will-have-done\"><a href=\"#将来完成时-will-have-done\" class=\"headerlink\" title=\"将来完成时(will have) + done\"></a>将来完成时(will have) + done</h4><p>If you come at 6 p.m, I shall not yet <strong>have finished</strong> dinner.</p>\n<p><strong>//表示将来某一时间之前完成的动作，并往往对将来某一时间产生影响。</strong></p>\n<p>你若下午6点来，我还没吃完晚饭呢。</p>\n<p><br><br>You must take a taxi, otherwise the train <strong>will have</strong> left <strong>by the time</strong> you get to the station.</p>\n<p><strong>//常用 “before + 将来时间点”或“by + 将来时间点”作时间状语</strong></p>\n<p>你必须坐出租，否则等你到了车站火车都开走了。</p>\n<p><br><br>Before long, he <strong>will have forgotten</strong> all about the matter.</p>\n<p>过不久，他就将把这事儿忘记了。</p>\n</li>\n<li><h4 id=\"过去将来完成时-would-have-done\"><a href=\"#过去将来完成时-would-have-done\" class=\"headerlink\" title=\"过去将来完成时(would have) + done\"></a>过去将来完成时(would have) + done</h4><p>He said that he <strong>would have done</strong> with my camera by the end of next week.</p>\n<p><strong>//表示在过去将来某一时间以前发生的动作，并往往会对过去将来某一时间产生影响</strong></p>\n<p>他说到下周末就不用我的照相机了。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"完成进行\"><a href=\"#完成进行\" class=\"headerlink\" title=\"完成进行\"></a>完成进行</h3><ul>\n<li>概念： 表明动作(暂时)完成了，并且还要继续</li>\n<li><p>形式： been + (base form) ing</p>\n<ul>\n<li><h4 id=\"过去完成进行时-had-been-doing\"><a href=\"#过去完成进行时-had-been-doing\" class=\"headerlink\" title=\"过去完成进行时(had) + been doing\"></a>过去完成进行时(had) + been doing</h4><p>He was tired. He <strong>had been working</strong> all day.</p>\n<p><strong>//和过去完成时一样，过去完成进行时也必须以一个过去的事就为前提。</strong></p>\n<p>他累了，他工作了一整天。</p>\n<p>It <strong>had been raining</strong> heavily for two days and the ground was very wet.</p>\n<p>连着下了两天大雨，地上很湿。</p>\n</li>\n<li><h4 id=\"现在完成进行时-have-has-been-doing\"><a href=\"#现在完成进行时-have-has-been-doing\" class=\"headerlink\" title=\"现在完成进行时(have/ has) + been doing\"></a>现在完成进行时(have/ has) + been doing</h4><p>We <strong>have been working</strong> on this project for over a month now.</p>\n<p><strong>//表示某一动作开始于过去某一时间，延续或重复的出现至今，或将继续延续至将来。</strong></p>\n<p>到目前为止，我们一直在处理那个项目，已经花了一个多月时间了。</p>\n<p><strong>//与现在完成时相比，现在完成时进行时更强调在从过去到现在的时间里，动作或状态一直持续或一直反复出现。</strong></p>\n</li>\n<li><h4 id=\"将来完成进行时-will-have-been-doing\"><a href=\"#将来完成进行时-will-have-been-doing\" class=\"headerlink\" title=\"将来完成进行时(will have) + been doing\"></a>将来完成进行时(will have) + been doing</h4><p>If we don’t hurry up the store <strong>will have been closing</strong> before we get there.</p>\n<p><strong>//表示动作从某一时间开始一直延续到将来某一时间。</strong></p>\n<p>如果我们不快一点儿， 等到了那儿，商店早关门了。</p>\n<p>By then, we <strong>will have been cooperating</strong> for half a year.</p>\n<p>到那时为止，我们就将会合作半年了。</p>\n</li>\n<li><h4 id=\"过去将来完成进行时-would-have-been-doing\"><a href=\"#过去将来完成进行时-would-have-been-doing\" class=\"headerlink\" title=\"过去将来完成进行时(would have) + been doing\"></a>过去将来完成进行时(would have) + been doing</h4><p>He said that by the end of July he <strong>would have been studing</strong> German for six months.</p>\n<p><strong>//表示动作从过去某一时间开始一直延续到过去将来某一时间</strong></p>\n<p>他说到7月底，他学德语就有半年了。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><br><br><br></p>\n<p>  <a href=\"https://link.zhihu.com/?target=http%3A//blog.tarwon.com/english-grammar.html/\" target=\"_blank\" rel=\"noopener\">以下未满18岁请自动屏蔽LoVe 这段我无意间看见</a></p>\n<blockquote>\n<p><strong>一般现在时:I make love with her everyday.</strong><br>一般过去时:I made love with her yesterday.<br>一般将来时:I will make love with her tomorrow.</p>\n<p><strong>现在进行时:I am making love with her.</strong><br>过去进行时:I was making love with her at this time yesterday.<br>将来进行时:I will be making love with her at this time tomorrow.</p>\n<p><strong>现在完成时:I have made love with her by now.</strong><br>过去完成时:I had made love with her before yesterday.<br>将来完成时:I will have made love with her by tomorrow.</p>\n<p><strong>现在完成进行时:I have been making love with her for two hours.</strong><br>过去完成进行时:I had been making love with her for two hours when her husband came in.<br>将来完成进行时:I will have been making love with her for two hours when her husband wakes up tomorrow morning.</p>\n</blockquote>"},{"title":"玩Deno遇到问题的解决方案","date":"2018-06-02T07:30:00.000Z","comments":1,"layout":"post","_content":"\n最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。\n但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！\n再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。\n\n附上项目地址:\n[GitHub - ry/deno: A secure TypeScript runtime on V8](https://github.com/ry/deno)\n\n<!--more-->\n\n## Step1\n\n在开始之前请准备好v*p*n*。\n大家需要去安装 `Go` 环境.并且去 `export` 各种Go相关的环境变量.\n\n以下是方正大佬给我提供解决方案，很感谢。\nhttps://github.com/ry/deno/issues/92\nMac OS可以参考以下：\n```shell\nexport GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )\nexport GOPATH=$HOME/go # means `~/go` \nexport PATH=$PATH:$HOME/go/bin:$GOPATH/bin\n```\n\n如果是Mac的话，我们还需要去安装`xcode-select`\n http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/ \n\n我们还需要安装Protobuf 。Ubuntu下：\n```shell\ncd ~\nwget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip\nunzip protoc-3.1.0-linux-x86_64.zip\nexport PATH=$HOME/bin:$PATH\n```\nMac下简单粗暴：\n`brew install protobuf`\n再来装一个`README`中没提及的\n`brew install pkg-config`\n## Step2\nOk以上一切正常，没出啥幺蛾子。\n我们继续，现在需要 `protoc-gen-go`  和  `go-bindata`:\n```shell\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u github.com/jteeuwen/go-bindata/...\n```\n这步需要等一小伙，记得一定要v*p*n啊!\n## Step3\n现在我们来困难重重的 `v8worker2` 啦。我们需要get 然后 build 它。大概会花30min\n```shell\ngo get -u github.com/ry/v8worker2\ncd $GOPATH/src/github.com/ry/v8worker2\n./build.py --use_ccache\n```\n接下来大家可能遇到的情况：\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png)\n这种情况说明我们 `clone` 下的v8是有损坏的，然后我们需要做以下操作\n1. \n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\nrm -rf v8\ngit clone https://github.com/v8/v8.git\ncd v8\ngit checkout fe12316ec4b4a101923e395791ca55442e62f4cc\n```\n或者\n2. \n```shell\nexport PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools\ncd $GOPATH/src/github.com/ry/v8worker2\nrm -rf v8\nfetch v8\ncd v8\ngit checkout fe12316\n```\n因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入`fetch`发现命令行出现`command not found: fetch`。\n你可以尝试\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\ndepot_tools/./fetch v8\n```\n感谢 [go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub](https://github.com/ry/deno/issues/92) 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz \n\n如果你发现自己的`depot_tools`文件夹下啥都没有。你需要执行以下命令\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\ngit submodule update --init\n```\n之后再去\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\n./build.py\n```\n你看见了以下，那么就恭喜啦！他在编译了\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png)\n## Step4\n最后一步\n```shell\ngo get -u github.com/ry/deno/...\ncd $GOPATH/src/github.com/ry/deno\nmake # 稍等片刻\n./deno testdata/001_hello.js # Output: Hello World\n```\n又是熟悉的Hello World！\n在`go get -u github.com/ry/deno/...`遇到以下问题不要急，直接`make deno`走你！\n[deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub](https://github.com/ry/deno/issues/71)\n```shell\n$ go get  -u github.com/ry/deno/...\n# github.com/ry/deno\n../deno/dispatch.go:10:26: undefined: BaseMsg\n../deno/dispatch.go:30:10: undefined: BaseMsg\n../deno/dispatch.go:62:14: undefined: BaseMsg\n../deno/dispatch.go:68:34: undefined: Msg\n../deno/dispatch.go:119:13: select case must be receive, send or assign recv\n../deno/fetch.go:13:11: undefined: Msg\n../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ\n../deno/fetch.go:29:14: undefined: Msg\n../deno/main.go:38:15: undefined: Asset\n../deno/main.go:110:19: undefined: Msg\n../deno/main.go:110:19: too many errors\n```\n\n如果你在这`make deno`遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png)\n\n之后再次运行`make deno`完成！\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png)","source":"_posts/玩Deno遇到问题的解决方案.md","raw":"---\ntitle: 玩Deno遇到问题的解决方案\ndate: 2018-06-02 15:30\ncomments: true\nlayout: post\ntags: [TypeScript, go]\ncategories: Node.js\n---\n\n最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。\n但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！\n再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。\n\n附上项目地址:\n[GitHub - ry/deno: A secure TypeScript runtime on V8](https://github.com/ry/deno)\n\n<!--more-->\n\n## Step1\n\n在开始之前请准备好v*p*n*。\n大家需要去安装 `Go` 环境.并且去 `export` 各种Go相关的环境变量.\n\n以下是方正大佬给我提供解决方案，很感谢。\nhttps://github.com/ry/deno/issues/92\nMac OS可以参考以下：\n```shell\nexport GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )\nexport GOPATH=$HOME/go # means `~/go` \nexport PATH=$PATH:$HOME/go/bin:$GOPATH/bin\n```\n\n如果是Mac的话，我们还需要去安装`xcode-select`\n http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/ \n\n我们还需要安装Protobuf 。Ubuntu下：\n```shell\ncd ~\nwget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip\nunzip protoc-3.1.0-linux-x86_64.zip\nexport PATH=$HOME/bin:$PATH\n```\nMac下简单粗暴：\n`brew install protobuf`\n再来装一个`README`中没提及的\n`brew install pkg-config`\n## Step2\nOk以上一切正常，没出啥幺蛾子。\n我们继续，现在需要 `protoc-gen-go`  和  `go-bindata`:\n```shell\ngo get -u github.com/golang/protobuf/protoc-gen-go\ngo get -u github.com/jteeuwen/go-bindata/...\n```\n这步需要等一小伙，记得一定要v*p*n啊!\n## Step3\n现在我们来困难重重的 `v8worker2` 啦。我们需要get 然后 build 它。大概会花30min\n```shell\ngo get -u github.com/ry/v8worker2\ncd $GOPATH/src/github.com/ry/v8worker2\n./build.py --use_ccache\n```\n接下来大家可能遇到的情况：\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png)\n这种情况说明我们 `clone` 下的v8是有损坏的，然后我们需要做以下操作\n1. \n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\nrm -rf v8\ngit clone https://github.com/v8/v8.git\ncd v8\ngit checkout fe12316ec4b4a101923e395791ca55442e62f4cc\n```\n或者\n2. \n```shell\nexport PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools\ncd $GOPATH/src/github.com/ry/v8worker2\nrm -rf v8\nfetch v8\ncd v8\ngit checkout fe12316\n```\n因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入`fetch`发现命令行出现`command not found: fetch`。\n你可以尝试\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\ndepot_tools/./fetch v8\n```\n感谢 [go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub](https://github.com/ry/deno/issues/92) 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz \n\n如果你发现自己的`depot_tools`文件夹下啥都没有。你需要执行以下命令\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\ngit submodule update --init\n```\n之后再去\n```shell\ncd $GOPATH/src/github.com/ry/v8worker2\n./build.py\n```\n你看见了以下，那么就恭喜啦！他在编译了\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png)\n## Step4\n最后一步\n```shell\ngo get -u github.com/ry/deno/...\ncd $GOPATH/src/github.com/ry/deno\nmake # 稍等片刻\n./deno testdata/001_hello.js # Output: Hello World\n```\n又是熟悉的Hello World！\n在`go get -u github.com/ry/deno/...`遇到以下问题不要急，直接`make deno`走你！\n[deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub](https://github.com/ry/deno/issues/71)\n```shell\n$ go get  -u github.com/ry/deno/...\n# github.com/ry/deno\n../deno/dispatch.go:10:26: undefined: BaseMsg\n../deno/dispatch.go:30:10: undefined: BaseMsg\n../deno/dispatch.go:62:14: undefined: BaseMsg\n../deno/dispatch.go:68:34: undefined: Msg\n../deno/dispatch.go:119:13: select case must be receive, send or assign recv\n../deno/fetch.go:13:11: undefined: Msg\n../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ\n../deno/fetch.go:29:14: undefined: Msg\n../deno/main.go:38:15: undefined: Asset\n../deno/main.go:110:19: undefined: Msg\n../deno/main.go:110:19: too many errors\n```\n\n如果你在这`make deno`遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png)\n\n之后再次运行`make deno`完成！\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png)","slug":"玩Deno遇到问题的解决方案","published":1,"updated":"2018-08-26T12:07:13.131Z","photos":[],"link":"","_id":"cjollnbwg008tunfy52mw5xki","content":"<p>最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。<br>但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！<br>再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。</p>\n<p>附上项目地址:<br><a href=\"https://github.com/ry/deno\" target=\"_blank\" rel=\"noopener\">GitHub - ry/deno: A secure TypeScript runtime on V8</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Step1\"><a href=\"#Step1\" class=\"headerlink\" title=\"Step1\"></a>Step1</h2><p>在开始之前请准备好v<em>p</em>n*。<br>大家需要去安装 <code>Go</code> 环境.并且去 <code>export</code> 各种Go相关的环境变量.</p>\n<p>以下是方正大佬给我提供解决方案，很感谢。<br><a href=\"https://github.com/ry/deno/issues/92\" target=\"_blank\" rel=\"noopener\">https://github.com/ry/deno/issues/92</a><br>Mac OS可以参考以下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )</span><br><span class=\"line\">export GOPATH=$HOME/go # means `~/go` </span><br><span class=\"line\">export PATH=$PATH:$HOME/go/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure></p>\n<p>如果是Mac的话，我们还需要去安装<code>xcode-select</code><br> <a href=\"http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/\" target=\"_blank\" rel=\"noopener\">http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/</a> </p>\n<p>我们还需要安装Protobuf 。Ubuntu下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip</span><br><span class=\"line\">unzip protoc-3.1.0-linux-x86_64.zip</span><br><span class=\"line\">export PATH=$HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>Mac下简单粗暴：<br><code>brew install protobuf</code><br>再来装一个<code>README</code>中没提及的<br><code>brew install pkg-config</code></p>\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><p>Ok以上一切正常，没出啥幺蛾子。<br>我们继续，现在需要 <code>protoc-gen-go</code>  和  <code>go-bindata</code>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure></p>\n<p>这步需要等一小伙，记得一定要v<em>p</em>n啊!</p>\n<h2 id=\"Step3\"><a href=\"#Step3\" class=\"headerlink\" title=\"Step3\"></a>Step3</h2><p>现在我们来困难重重的 <code>v8worker2</code> 啦。我们需要get 然后 build 它。大概会花30min<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/ry/v8worker2</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">./build.py --use_ccache</span><br></pre></td></tr></table></figure></p>\n<p>接下来大家可能遇到的情况：<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png\" alt=\"\"><br>这种情况说明我们 <code>clone</code> 下的v8是有损坏的，然后我们需要做以下操作</p>\n<ol>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">rm -rf v8</span><br><span class=\"line\">git clone https://github.com/v8/v8.git</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">git checkout fe12316ec4b4a101923e395791ca55442e62f4cc</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者</p>\n<ol start=\"2\">\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">rm -rf v8</span><br><span class=\"line\">fetch v8</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">git checkout fe12316</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入<code>fetch</code>发现命令行出现<code>command not found: fetch</code>。<br>你可以尝试<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">depot_tools/./fetch v8</span><br></pre></td></tr></table></figure></p>\n<p>感谢 <a href=\"https://github.com/ry/deno/issues/92\" target=\"_blank\" rel=\"noopener\">go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub</a> 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz </p>\n<p>如果你发现自己的<code>depot_tools</code>文件夹下啥都没有。你需要执行以下命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure></p>\n<p>之后再去<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">./build.py</span><br></pre></td></tr></table></figure></p>\n<p>你看见了以下，那么就恭喜啦！他在编译了<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png\" alt=\"\"></p>\n<h2 id=\"Step4\"><a href=\"#Step4\" class=\"headerlink\" title=\"Step4\"></a>Step4</h2><p>最后一步<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/ry/deno/...</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/deno</span><br><span class=\"line\">make # 稍等片刻</span><br><span class=\"line\">./deno testdata/001_hello.js # Output: Hello World</span><br></pre></td></tr></table></figure></p>\n<p>又是熟悉的Hello World！<br>在<code>go get -u github.com/ry/deno/...</code>遇到以下问题不要急，直接<code>make deno</code>走你！<br><a href=\"https://github.com/ry/deno/issues/71\" target=\"_blank\" rel=\"noopener\">deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go get  -u github.com/ry/deno/...</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> github.com/ry/deno</span></span><br><span class=\"line\">../deno/dispatch.go:10:26: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:30:10: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:62:14: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:68:34: undefined: Msg</span><br><span class=\"line\">../deno/dispatch.go:119:13: select case must be receive, send or assign recv</span><br><span class=\"line\">../deno/fetch.go:13:11: undefined: Msg</span><br><span class=\"line\">../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ</span><br><span class=\"line\">../deno/fetch.go:29:14: undefined: Msg</span><br><span class=\"line\">../deno/main.go:38:15: undefined: Asset</span><br><span class=\"line\">../deno/main.go:110:19: undefined: Msg</span><br><span class=\"line\">../deno/main.go:110:19: too many errors</span><br></pre></td></tr></table></figure></p>\n<p>如果你在这<code>make deno</code>遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png\" alt=\"\"></p>\n<p>之后再次运行<code>make deno</code>完成！<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>最近有个新的Deno项目是由node原作者ry发起的，瞬间火爆，star数飞起。<br>但是在搭建环境的过程中还是有些小问题，但是在友好的issue下都得到了解决！<br>再此总结，并对那些在issue里无私贡献自己解决方案的人点赞！开源社区的和谐需要大家去一起努力。</p>\n<p>附上项目地址:<br><a href=\"https://github.com/ry/deno\" target=\"_blank\" rel=\"noopener\">GitHub - ry/deno: A secure TypeScript runtime on V8</a></p>","more":"<h2 id=\"Step1\"><a href=\"#Step1\" class=\"headerlink\" title=\"Step1\"></a>Step1</h2><p>在开始之前请准备好v<em>p</em>n*。<br>大家需要去安装 <code>Go</code> 环境.并且去 <code>export</code> 各种Go相关的环境变量.</p>\n<p>以下是方正大佬给我提供解决方案，很感谢。<br><a href=\"https://github.com/ry/deno/issues/92\" target=\"_blank\" rel=\"noopener\">https://github.com/ry/deno/issues/92</a><br>Mac OS可以参考以下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export GOROOT=/usr/local/go # where your `go` sitting, usually here ( Mac )</span><br><span class=\"line\">export GOPATH=$HOME/go # means `~/go` </span><br><span class=\"line\">export PATH=$PATH:$HOME/go/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure></p>\n<p>如果是Mac的话，我们还需要去安装<code>xcode-select</code><br> <a href=\"http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/\" target=\"_blank\" rel=\"noopener\">http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/</a> </p>\n<p>我们还需要安装Protobuf 。Ubuntu下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">wget https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip</span><br><span class=\"line\">unzip protoc-3.1.0-linux-x86_64.zip</span><br><span class=\"line\">export PATH=$HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>Mac下简单粗暴：<br><code>brew install protobuf</code><br>再来装一个<code>README</code>中没提及的<br><code>brew install pkg-config</code></p>\n<h2 id=\"Step2\"><a href=\"#Step2\" class=\"headerlink\" title=\"Step2\"></a>Step2</h2><p>Ok以上一切正常，没出啥幺蛾子。<br>我们继续，现在需要 <code>protoc-gen-go</code>  和  <code>go-bindata</code>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\">go get -u github.com/jteeuwen/go-bindata/...</span><br></pre></td></tr></table></figure></p>\n<p>这步需要等一小伙，记得一定要v<em>p</em>n啊!</p>\n<h2 id=\"Step3\"><a href=\"#Step3\" class=\"headerlink\" title=\"Step3\"></a>Step3</h2><p>现在我们来困难重重的 <code>v8worker2</code> 啦。我们需要get 然后 build 它。大概会花30min<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/ry/v8worker2</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">./build.py --use_ccache</span><br></pre></td></tr></table></figure></p>\n<p>接下来大家可能遇到的情况：<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/go-get.png\" alt=\"\"><br>这种情况说明我们 <code>clone</code> 下的v8是有损坏的，然后我们需要做以下操作</p>\n<ol>\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">rm -rf v8</span><br><span class=\"line\">git clone https://github.com/v8/v8.git</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">git checkout fe12316ec4b4a101923e395791ca55442e62f4cc</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>或者</p>\n<ol start=\"2\">\n<li><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:$GOPATH/src/github.com/ry/v8worker2/depot_tools</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">rm -rf v8</span><br><span class=\"line\">fetch v8</span><br><span class=\"line\">cd v8</span><br><span class=\"line\">git checkout fe12316</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>因为用第一种方法我发现我的vpn不能快速的下载所以就尝试了第二种方法。如果你键入<code>fetch</code>发现命令行出现<code>command not found: fetch</code>。<br>你可以尝试<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">depot_tools/./fetch v8</span><br></pre></td></tr></table></figure></p>\n<p>感谢 <a href=\"https://github.com/ry/deno/issues/92\" target=\"_blank\" rel=\"noopener\">go get v8worker2 Direct fetching of that commit failed? · Issue #92 · ry/deno · GitHub</a> 下面给出解决方案的人@wbgbg ，@qti3e，@ztplz </p>\n<p>如果你发现自己的<code>depot_tools</code>文件夹下啥都没有。你需要执行以下命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">git submodule update --init</span><br></pre></td></tr></table></figure></p>\n<p>之后再去<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $GOPATH/src/github.com/ry/v8worker2</span><br><span class=\"line\">./build.py</span><br></pre></td></tr></table></figure></p>\n<p>你看见了以下，那么就恭喜啦！他在编译了<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/buildv8woker2.png\" alt=\"\"></p>\n<h2 id=\"Step4\"><a href=\"#Step4\" class=\"headerlink\" title=\"Step4\"></a>Step4</h2><p>最后一步<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/ry/deno/...</span><br><span class=\"line\">cd $GOPATH/src/github.com/ry/deno</span><br><span class=\"line\">make # 稍等片刻</span><br><span class=\"line\">./deno testdata/001_hello.js # Output: Hello World</span><br></pre></td></tr></table></figure></p>\n<p>又是熟悉的Hello World！<br>在<code>go get -u github.com/ry/deno/...</code>遇到以下问题不要急，直接<code>make deno</code>走你！<br><a href=\"https://github.com/ry/deno/issues/71\" target=\"_blank\" rel=\"noopener\">deno/dispatch.go:10:26: undefined: BaseMsg · Issue #71 · ry/deno · GitHub</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> go get  -u github.com/ry/deno/...</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> github.com/ry/deno</span></span><br><span class=\"line\">../deno/dispatch.go:10:26: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:30:10: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:62:14: undefined: BaseMsg</span><br><span class=\"line\">../deno/dispatch.go:68:34: undefined: Msg</span><br><span class=\"line\">../deno/dispatch.go:119:13: select case must be receive, send or assign recv</span><br><span class=\"line\">../deno/fetch.go:13:11: undefined: Msg</span><br><span class=\"line\">../deno/fetch.go:16:8: undefined: Msg_FETCH_REQ</span><br><span class=\"line\">../deno/fetch.go:29:14: undefined: Msg</span><br><span class=\"line\">../deno/main.go:38:15: undefined: Asset</span><br><span class=\"line\">../deno/main.go:110:19: undefined: Msg</span><br><span class=\"line\">../deno/main.go:110:19: too many errors</span><br></pre></td></tr></table></figure></p>\n<p>如果你在这<code>make deno</code>遇到了以下问题，说明你第一步方正大佬给出的解决方案还没做。回去乖乖配置吧！<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/makedeno.png\" alt=\"\"></p>\n<p>之后再次运行<code>make deno</code>完成！<br><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/denowork.png\" alt=\"\"></p>"},{"title":"浅谈script标签","date":"2018-03-19T12:57:11.911Z","updated":"2018-04-01T12:21:00.000Z","comments":1,"layout":"post","_content":"\n`<script>` ? 这不就是直接执行script脚本吗？\n\n以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。\n\n<!--more-->\n\n## 属性\n\n`<script>`拥有7个属性，没想到吧！\n\n* **async**\n  * boolean\n  * 异步执行该脚本，但不保证按照指定它们的先后顺序执行\n* **defer**\n  * boolean\n  * 通知浏览器该脚本将在文档完成解析后遇到`</html>`，并会按照它们出现的先后顺序执行。但会在触发 `DOMContentLoaded` 事件前执行。\n* **integrity**\n  * 包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据\n* **src**\n* **type**\n* **text**\n* **crossorigin**\n  * 使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错\n\n> 在XHTML文档中，要把async属性设置为 async = \"async\", defer = \"defer\"\n\n知道了那几个属性接下来，来看看下面这个图：\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png)\n\n1. 第一个光秃秃的`<script>`说明了，在`html`解析中，如果有`<script>`的话，`html`会在`Script`下载并且执行的时候，暂停解析。\n2. 第二个带`async`属性的`<script>`，如图所示，也就是他下载`Script`的时候是异步的，但是只要`Script`文件下好了，那么就马上执行。\n3. 第三个带`defer`属性的`<script>`，其实和上面带`async`属性一样都是异步执行去下载`Script`文件的。但是在这个带有`defer`的则是在`html`全部解析完毕之后才去执行`Script`文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 `defer` 是最接近我们对于应用脚本加载和执行的要求的\n\n## 使用动态创建的`<script>`标签元素来下载并执行代码\n\n```javascript\nvar script = document.createElement('script');\nscript.type = \"text/javascript\";\nscript.src = \"file1.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(script);\n```\n\n这个技术的重点在于：\n\n无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。\n\n参考：\n\n> 《高性能JavaScript》\n\n## 使用XHR对象下载JS代码注入页面\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement(\n\"e\");\n    script.type = \"text/javascript\";\n    if(script.readyState){\t//ie\n        script.onreadystatechange = function(){\n            if(script.readyState == \"loaded\" || script.readyState == \"complete\"){\n                script.onreadystatechage = null;\n                callback();\n            }\n        };\n    } else {\n        script.onload = function(){\n            callback();\n        }\n    }\n}\n\nloadScript(\"the-rest.js\", function(){\n    Application.init()\n});\n```\n\n这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。\n\n\n\n## 参考\n\n* [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)\n* [SegmentFault](https://segmentfault.com/a/1190000006778717)\n\n","source":"_posts/浅谈script标签.md","raw":"---\ntitle: 浅谈script标签\ndate: 2018-03-19 20：56\nupdated: 2018-04-01 20:21\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n`<script>` ? 这不就是直接执行script脚本吗？\n\n以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。\n\n<!--more-->\n\n## 属性\n\n`<script>`拥有7个属性，没想到吧！\n\n* **async**\n  * boolean\n  * 异步执行该脚本，但不保证按照指定它们的先后顺序执行\n* **defer**\n  * boolean\n  * 通知浏览器该脚本将在文档完成解析后遇到`</html>`，并会按照它们出现的先后顺序执行。但会在触发 `DOMContentLoaded` 事件前执行。\n* **integrity**\n  * 包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据\n* **src**\n* **type**\n* **text**\n* **crossorigin**\n  * 使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错\n\n> 在XHTML文档中，要把async属性设置为 async = \"async\", defer = \"defer\"\n\n知道了那几个属性接下来，来看看下面这个图：\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png)\n\n1. 第一个光秃秃的`<script>`说明了，在`html`解析中，如果有`<script>`的话，`html`会在`Script`下载并且执行的时候，暂停解析。\n2. 第二个带`async`属性的`<script>`，如图所示，也就是他下载`Script`的时候是异步的，但是只要`Script`文件下好了，那么就马上执行。\n3. 第三个带`defer`属性的`<script>`，其实和上面带`async`属性一样都是异步执行去下载`Script`文件的。但是在这个带有`defer`的则是在`html`全部解析完毕之后才去执行`Script`文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 `defer` 是最接近我们对于应用脚本加载和执行的要求的\n\n## 使用动态创建的`<script>`标签元素来下载并执行代码\n\n```javascript\nvar script = document.createElement('script');\nscript.type = \"text/javascript\";\nscript.src = \"file1.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(script);\n```\n\n这个技术的重点在于：\n\n无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。\n\n参考：\n\n> 《高性能JavaScript》\n\n## 使用XHR对象下载JS代码注入页面\n\n```javascript\nfunction loadScript(url, callback){\n    var script = document.createElement(\n\"e\");\n    script.type = \"text/javascript\";\n    if(script.readyState){\t//ie\n        script.onreadystatechange = function(){\n            if(script.readyState == \"loaded\" || script.readyState == \"complete\"){\n                script.onreadystatechage = null;\n                callback();\n            }\n        };\n    } else {\n        script.onload = function(){\n            callback();\n        }\n    }\n}\n\nloadScript(\"the-rest.js\", function(){\n    Application.init()\n});\n```\n\n这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。\n\n\n\n## 参考\n\n* [MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script)\n* [SegmentFault](https://segmentfault.com/a/1190000006778717)\n\n","slug":"浅谈script标签","published":1,"photos":[],"link":"","_id":"cjollnbwi008xunfyh0dmwudm","content":"<p><code>&lt;script&gt;</code> ? 这不就是直接执行script脚本吗？</p>\n<p>以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。</p>\n<a id=\"more\"></a>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p><code>&lt;script&gt;</code>拥有7个属性，没想到吧！</p>\n<ul>\n<li><strong>async</strong><ul>\n<li>boolean</li>\n<li>异步执行该脚本，但不保证按照指定它们的先后顺序执行</li>\n</ul>\n</li>\n<li><strong>defer</strong><ul>\n<li>boolean</li>\n<li>通知浏览器该脚本将在文档完成解析后遇到<code>&lt;/html&gt;</code>，并会按照它们出现的先后顺序执行。但会在触发 <code>DOMContentLoaded</code> 事件前执行。</li>\n</ul>\n</li>\n<li><strong>integrity</strong><ul>\n<li>包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据</li>\n</ul>\n</li>\n<li><strong>src</strong></li>\n<li><strong>type</strong></li>\n<li><strong>text</strong></li>\n<li><strong>crossorigin</strong><ul>\n<li>使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在XHTML文档中，要把async属性设置为 async = “async”, defer = “defer”</p>\n</blockquote>\n<p>知道了那几个属性接下来，来看看下面这个图：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png\" alt=\"\"></p>\n<ol>\n<li>第一个光秃秃的<code>&lt;script&gt;</code>说明了，在<code>html</code>解析中，如果有<code>&lt;script&gt;</code>的话，<code>html</code>会在<code>Script</code>下载并且执行的时候，暂停解析。</li>\n<li>第二个带<code>async</code>属性的<code>&lt;script&gt;</code>，如图所示，也就是他下载<code>Script</code>的时候是异步的，但是只要<code>Script</code>文件下好了，那么就马上执行。</li>\n<li>第三个带<code>defer</code>属性的<code>&lt;script&gt;</code>，其实和上面带<code>async</code>属性一样都是异步执行去下载<code>Script</code>文件的。但是在这个带有<code>defer</code>的则是在<code>html</code>全部解析完毕之后才去执行<code>Script</code>文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 <code>defer</code> 是最接近我们对于应用脚本加载和执行的要求的</li>\n</ol>\n<h2 id=\"使用动态创建的-lt-script-gt-标签元素来下载并执行代码\"><a href=\"#使用动态创建的-lt-script-gt-标签元素来下载并执行代码\" class=\"headerlink\" title=\"使用动态创建的&lt;script&gt;标签元素来下载并执行代码\"></a>使用动态创建的<code>&lt;script&gt;</code>标签元素来下载并执行代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">\"file1.js\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>这个技术的重点在于：</p>\n<p>无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。</p>\n<p>参考：</p>\n<blockquote>\n<p>《高性能JavaScript》</p>\n</blockquote>\n<h2 id=\"使用XHR对象下载JS代码注入页面\"><a href=\"#使用XHR对象下载JS代码注入页面\" class=\"headerlink\" title=\"使用XHR对象下载JS代码注入页面\"></a>使用XHR对象下载JS代码注入页面</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(</span><br><span class=\"line\"><span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">    script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;\t<span class=\"comment\">//ie</span></span><br><span class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">\"loaded\"</span> || script.readyState == <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">                script.onreadystatechage = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                callback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadScript(<span class=\"string\">\"the-rest.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Application.init()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"noopener\">MDN</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006778717\" target=\"_blank\" rel=\"noopener\">SegmentFault</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><code>&lt;script&gt;</code> ? 这不就是直接执行script脚本吗？</p>\n<p>以前的我这有认为，但是今天却知道了他的奥秘。他并没有表面的那么简单。</p>","more":"<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p><code>&lt;script&gt;</code>拥有7个属性，没想到吧！</p>\n<ul>\n<li><strong>async</strong><ul>\n<li>boolean</li>\n<li>异步执行该脚本，但不保证按照指定它们的先后顺序执行</li>\n</ul>\n</li>\n<li><strong>defer</strong><ul>\n<li>boolean</li>\n<li>通知浏览器该脚本将在文档完成解析后遇到<code>&lt;/html&gt;</code>，并会按照它们出现的先后顺序执行。但会在触发 <code>DOMContentLoaded</code> 事件前执行。</li>\n</ul>\n</li>\n<li><strong>integrity</strong><ul>\n<li>包含用户代理可用于验证已提取资源是否已无意外操作的内联元数据</li>\n</ul>\n</li>\n<li><strong>src</strong></li>\n<li><strong>type</strong></li>\n<li><strong>text</strong></li>\n<li><strong>crossorigin</strong><ul>\n<li>使那些将静态资源放在另外一个域名的站点打印错误信息,就是将跨域报错变为同源报错</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>在XHTML文档中，要把async属性设置为 async = “async”, defer = “defer”</p>\n</blockquote>\n<p>知道了那几个属性接下来，来看看下面这个图：</p>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%3Cscript%3E.png\" alt=\"\"></p>\n<ol>\n<li>第一个光秃秃的<code>&lt;script&gt;</code>说明了，在<code>html</code>解析中，如果有<code>&lt;script&gt;</code>的话，<code>html</code>会在<code>Script</code>下载并且执行的时候，暂停解析。</li>\n<li>第二个带<code>async</code>属性的<code>&lt;script&gt;</code>，如图所示，也就是他下载<code>Script</code>的时候是异步的，但是只要<code>Script</code>文件下好了，那么就马上执行。</li>\n<li>第三个带<code>defer</code>属性的<code>&lt;script&gt;</code>，其实和上面带<code>async</code>属性一样都是异步执行去下载<code>Script</code>文件的。但是在这个带有<code>defer</code>的则是在<code>html</code>全部解析完毕之后才去执行<code>Script</code>文件。而且它是按照加载顺序执行脚本的，这一点要善加利用。显然 <code>defer</code> 是最接近我们对于应用脚本加载和执行的要求的</li>\n</ol>\n<h2 id=\"使用动态创建的-lt-script-gt-标签元素来下载并执行代码\"><a href=\"#使用动态创建的-lt-script-gt-标签元素来下载并执行代码\" class=\"headerlink\" title=\"使用动态创建的&lt;script&gt;标签元素来下载并执行代码\"></a>使用动态创建的<code>&lt;script&gt;</code>标签元素来下载并执行代码</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">script.src = <span class=\"string\">\"file1.js\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>\n<p>这个技术的重点在于：</p>\n<p>无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。</p>\n<p>参考：</p>\n<blockquote>\n<p>《高性能JavaScript》</p>\n</blockquote>\n<h2 id=\"使用XHR对象下载JS代码注入页面\"><a href=\"#使用XHR对象下载JS代码注入页面\" class=\"headerlink\" title=\"使用XHR对象下载JS代码注入页面\"></a>使用XHR对象下载JS代码注入页面</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url, callback</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(</span><br><span class=\"line\"><span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">    script.type = <span class=\"string\">\"text/javascript\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(script.readyState)&#123;\t<span class=\"comment\">//ie</span></span><br><span class=\"line\">        script.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(script.readyState == <span class=\"string\">\"loaded\"</span> || script.readyState == <span class=\"string\">\"complete\"</span>)&#123;</span><br><span class=\"line\">                script.onreadystatechage = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                callback();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loadScript(<span class=\"string\">\"the-rest.js\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Application.init()</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这样做实现了动态创建标签元素并下载，其次当第二个脚本文件下载时，应用所需的所有DOM结构已经创建完毕，并做好了交互的准备,从而避免了需要另一个事件来检测页面是否准备好。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\" target=\"_blank\" rel=\"noopener\">MDN</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006778717\" target=\"_blank\" rel=\"noopener\">SegmentFault</a></li>\n</ul>"},{"title":"畅读深入理解计算机系统","date":"2018-05-16T13:53:01.000Z","updated":"2018-05-23T12:50:28.000Z","comments":1,"layout":"post","_content":"\n# 畅读深入理解计算机系统\n## 第一章\n程序为0和1组成的位。\n8个位组成一起为字节。\n每个字节表示程序中的某些字符。\n\n只由 `ASCII` 字符构成的文件为——文本文件\n其他文件为———二进制文件\n\n编译一个可执行的 `hello world`  需要4个步骤:\nhello.c -> 预处理器(cpp) -> hello.i -> 编译器(ccl) -> hello.s -> 汇编器(as) -> hello.o -> 链接器(ld) -> hello可执行文件\n<!--more-->\n### 系统的硬件组成\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.jpg)\n1. 总线\n2. I/O设备\n3. 主存\n4. 处理器\n### 存储器访问速度\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E5%99%A8%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6.jpg)\n\n### 操作系统管理硬件\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6.jpg)\n\n**文件** 是对  `I/O` 设备的抽象表示,\n**虚拟内存** 是 对主存和磁盘的`I/O`设备的抽象表示\n**进程** 则是对 处理器、主存和`I/O`设备的抽象表示\n\n### 虚拟地址空间\n程序代码和数据 -> 堆 -> 共享库 -> 栈 -> 内核虚拟内存 \n\n网络就是一种I/O设备","source":"_posts/畅读深入理解计算机系统.md","raw":"---\ntitle: 畅读深入理解计算机系统\ndate: 2018-05-16 21:53:01\nupdated: 2018-05-23 20:50:28\ncomments: true\nlayout: post\ntags: [读书笔记]\ncategories: [读书笔记]\n---\n\n# 畅读深入理解计算机系统\n## 第一章\n程序为0和1组成的位。\n8个位组成一起为字节。\n每个字节表示程序中的某些字符。\n\n只由 `ASCII` 字符构成的文件为——文本文件\n其他文件为———二进制文件\n\n编译一个可执行的 `hello world`  需要4个步骤:\nhello.c -> 预处理器(cpp) -> hello.i -> 编译器(ccl) -> hello.s -> 汇编器(as) -> hello.o -> 链接器(ld) -> hello可执行文件\n<!--more-->\n### 系统的硬件组成\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.jpg)\n1. 总线\n2. I/O设备\n3. 主存\n4. 处理器\n### 存储器访问速度\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E5%99%A8%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6.jpg)\n\n### 操作系统管理硬件\n\n![](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6.jpg)\n\n**文件** 是对  `I/O` 设备的抽象表示,\n**虚拟内存** 是 对主存和磁盘的`I/O`设备的抽象表示\n**进程** 则是对 处理器、主存和`I/O`设备的抽象表示\n\n### 虚拟地址空间\n程序代码和数据 -> 堆 -> 共享库 -> 栈 -> 内核虚拟内存 \n\n网络就是一种I/O设备","slug":"畅读深入理解计算机系统","published":1,"photos":[],"link":"","_id":"cjollnbwl0091unfyzh9wlfl8","content":"<h1 id=\"畅读深入理解计算机系统\"><a href=\"#畅读深入理解计算机系统\" class=\"headerlink\" title=\"畅读深入理解计算机系统\"></a>畅读深入理解计算机系统</h1><h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><p>程序为0和1组成的位。<br>8个位组成一起为字节。<br>每个字节表示程序中的某些字符。</p>\n<p>只由 <code>ASCII</code> 字符构成的文件为——文本文件<br>其他文件为———二进制文件</p>\n<p>编译一个可执行的 <code>hello world</code>  需要4个步骤:<br>hello.c -&gt; 预处理器(cpp) -&gt; hello.i -&gt; 编译器(ccl) -&gt; hello.s -&gt; 汇编器(as) -&gt; hello.o -&gt; 链接器(ld) -&gt; hello可执行文件<br><a id=\"more\"></a></p>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.jpg\" alt=\"\"></p>\n<ol>\n<li>总线</li>\n<li>I/O设备</li>\n<li>主存</li>\n<li>处理器<h3 id=\"存储器访问速度\"><a href=\"#存储器访问速度\" class=\"headerlink\" title=\"存储器访问速度\"></a>存储器访问速度</h3></li>\n</ol>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E5%99%A8%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6.jpg\" alt=\"\"></p>\n<h3 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h3><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6.jpg\" alt=\"\"></p>\n<p><strong>文件</strong> 是对  <code>I/O</code> 设备的抽象表示,<br><strong>虚拟内存</strong> 是 对主存和磁盘的<code>I/O</code>设备的抽象表示<br><strong>进程</strong> 则是对 处理器、主存和<code>I/O</code>设备的抽象表示</p>\n<h3 id=\"虚拟地址空间\"><a href=\"#虚拟地址空间\" class=\"headerlink\" title=\"虚拟地址空间\"></a>虚拟地址空间</h3><p>程序代码和数据 -&gt; 堆 -&gt; 共享库 -&gt; 栈 -&gt; 内核虚拟内存 </p>\n<p>网络就是一种I/O设备</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"畅读深入理解计算机系统\"><a href=\"#畅读深入理解计算机系统\" class=\"headerlink\" title=\"畅读深入理解计算机系统\"></a>畅读深入理解计算机系统</h1><h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><p>程序为0和1组成的位。<br>8个位组成一起为字节。<br>每个字节表示程序中的某些字符。</p>\n<p>只由 <code>ASCII</code> 字符构成的文件为——文本文件<br>其他文件为———二进制文件</p>\n<p>编译一个可执行的 <code>hello world</code>  需要4个步骤:<br>hello.c -&gt; 预处理器(cpp) -&gt; hello.i -&gt; 编译器(ccl) -&gt; hello.s -&gt; 汇编器(as) -&gt; hello.o -&gt; 链接器(ld) -&gt; hello可执行文件<br>","more":"</p>\n<h3 id=\"系统的硬件组成\"><a href=\"#系统的硬件组成\" class=\"headerlink\" title=\"系统的硬件组成\"></a>系统的硬件组成</h3><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A1%AC%E4%BB%B6%E7%BB%84%E6%88%90.jpg\" alt=\"\"></p>\n<ol>\n<li>总线</li>\n<li>I/O设备</li>\n<li>主存</li>\n<li>处理器<h3 id=\"存储器访问速度\"><a href=\"#存储器访问速度\" class=\"headerlink\" title=\"存储器访问速度\"></a>存储器访问速度</h3></li>\n</ol>\n<p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E5%AD%98%E5%82%A8%E5%99%A8%E8%AF%BB%E5%86%99%E9%80%9F%E5%BA%A6.jpg\" alt=\"\"></p>\n<h3 id=\"操作系统管理硬件\"><a href=\"#操作系统管理硬件\" class=\"headerlink\" title=\"操作系统管理硬件\"></a>操作系统管理硬件</h3><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E7%A1%AC%E4%BB%B6.jpg\" alt=\"\"></p>\n<p><strong>文件</strong> 是对  <code>I/O</code> 设备的抽象表示,<br><strong>虚拟内存</strong> 是 对主存和磁盘的<code>I/O</code>设备的抽象表示<br><strong>进程</strong> 则是对 处理器、主存和<code>I/O</code>设备的抽象表示</p>\n<h3 id=\"虚拟地址空间\"><a href=\"#虚拟地址空间\" class=\"headerlink\" title=\"虚拟地址空间\"></a>虚拟地址空间</h3><p>程序代码和数据 -&gt; 堆 -&gt; 共享库 -&gt; 栈 -&gt; 内核虚拟内存 </p>\n<p>网络就是一种I/O设备</p>"},{"title":"计算机网络读书笔记（一）","date":"2017-12-04T07:29:00.000Z","comments":1,"layout":"post","_content":"\n\n\n## 服务原语\n\n\n\n| 原语         | 含义              |\n| :--------- | :-------------- |\n| LISTEN     | 阻塞操作，等待入境连接请求   |\n| CONNECT    | 与等待中的对等实体建立连接   |\n| ACCEPT     | 接受来自对等实体的入境连接请求 |\n| RECEIVE    | 阻塞操作，等待入境报文     |\n| SEND       | 给对等实体发送一个报文     |\n| DISCONNECT | 终止一个连接          |\n\n\n\n## 服务和协议\n\n服务和协议是两个截然不同的概念。\n\n**服务：**\n\n是指某一层向它上一层提供的一组原语（操作）。服务定义了该层准备代表其用户执行哪些操作，但是它不会去考虑如何实现这些操作。低层是服务提供者，上层是服务用户。\n\n\n\n**协议：**\n\n协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。\n\n\n\n**服务涉及层与层之间的接口！！！！那么，协议设计不同机器上两个对等实体之间发送的数据包**\n\n![服务和协议](http://ozar6ogjb.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png)\n\n用编程语言来说的话，服务就好像是面向对象语言中的抽象数据类型或者对象。\n\n## 传输层","source":"_posts/计算机网络读书笔记（一）.md","raw":"---\ntitle: 计算机网络读书笔记（一）\ndate: 2017-12-04 15:29\ncomments: true\nlayout: post\ntags: [读书笔记]\ncategories: [读书笔记,网络]\n---\n\n\n\n## 服务原语\n\n\n\n| 原语         | 含义              |\n| :--------- | :-------------- |\n| LISTEN     | 阻塞操作，等待入境连接请求   |\n| CONNECT    | 与等待中的对等实体建立连接   |\n| ACCEPT     | 接受来自对等实体的入境连接请求 |\n| RECEIVE    | 阻塞操作，等待入境报文     |\n| SEND       | 给对等实体发送一个报文     |\n| DISCONNECT | 终止一个连接          |\n\n\n\n## 服务和协议\n\n服务和协议是两个截然不同的概念。\n\n**服务：**\n\n是指某一层向它上一层提供的一组原语（操作）。服务定义了该层准备代表其用户执行哪些操作，但是它不会去考虑如何实现这些操作。低层是服务提供者，上层是服务用户。\n\n\n\n**协议：**\n\n协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。\n\n\n\n**服务涉及层与层之间的接口！！！！那么，协议设计不同机器上两个对等实体之间发送的数据包**\n\n![服务和协议](http://ozar6ogjb.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png)\n\n用编程语言来说的话，服务就好像是面向对象语言中的抽象数据类型或者对象。\n\n## 传输层","slug":"计算机网络读书笔记（一）","published":1,"updated":"2018-05-14T15:01:42.517Z","photos":[],"link":"","_id":"cjollnbwo0095unfydh1t3cec","content":"<h2 id=\"服务原语\"><a href=\"#服务原语\" class=\"headerlink\" title=\"服务原语\"></a>服务原语</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">原语</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">LISTEN</td>\n<td style=\"text-align:left\">阻塞操作，等待入境连接请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONNECT</td>\n<td style=\"text-align:left\">与等待中的对等实体建立连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ACCEPT</td>\n<td style=\"text-align:left\">接受来自对等实体的入境连接请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RECEIVE</td>\n<td style=\"text-align:left\">阻塞操作，等待入境报文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SEND</td>\n<td style=\"text-align:left\">给对等实体发送一个报文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DISCONNECT</td>\n<td style=\"text-align:left\">终止一个连接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"服务和协议\"><a href=\"#服务和协议\" class=\"headerlink\" title=\"服务和协议\"></a>服务和协议</h2><p>服务和协议是两个截然不同的概念。</p>\n<p><strong>服务：</strong></p>\n<p>是指某一层向它上一层提供的一组原语（操作）。服务定义了该层准备代表其用户执行哪些操作，但是它不会去考虑如何实现这些操作。低层是服务提供者，上层是服务用户。</p>\n<p><strong>协议：</strong></p>\n<p>协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。</p>\n<p><strong>服务涉及层与层之间的接口！！！！那么，协议设计不同机器上两个对等实体之间发送的数据包</strong></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png\" alt=\"服务和协议\"></p>\n<p>用编程语言来说的话，服务就好像是面向对象语言中的抽象数据类型或者对象。</p>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"服务原语\"><a href=\"#服务原语\" class=\"headerlink\" title=\"服务原语\"></a>服务原语</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">原语</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">LISTEN</td>\n<td style=\"text-align:left\">阻塞操作，等待入境连接请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONNECT</td>\n<td style=\"text-align:left\">与等待中的对等实体建立连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ACCEPT</td>\n<td style=\"text-align:left\">接受来自对等实体的入境连接请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RECEIVE</td>\n<td style=\"text-align:left\">阻塞操作，等待入境报文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SEND</td>\n<td style=\"text-align:left\">给对等实体发送一个报文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DISCONNECT</td>\n<td style=\"text-align:left\">终止一个连接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"服务和协议\"><a href=\"#服务和协议\" class=\"headerlink\" title=\"服务和协议\"></a>服务和协议</h2><p>服务和协议是两个截然不同的概念。</p>\n<p><strong>服务：</strong></p>\n<p>是指某一层向它上一层提供的一组原语（操作）。服务定义了该层准备代表其用户执行哪些操作，但是它不会去考虑如何实现这些操作。低层是服务提供者，上层是服务用户。</p>\n<p><strong>协议：</strong></p>\n<p>协议是一组规则，规定了同一层上对等实体之间所交换的数据包或者报文的格式和含义。</p>\n<p><strong>服务涉及层与层之间的接口！！！！那么，协议设计不同机器上两个对等实体之间发送的数据包</strong></p>\n<p><img src=\"http://ozar6ogjb.bkt.clouddn.com/%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%8D%8F%E8%AE%AE.png\" alt=\"服务和协议\"></p>\n<p>用编程语言来说的话，服务就好像是面向对象语言中的抽象数据类型或者对象。</p>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2>"},{"title":"多说挂了好久。现在换成来必力","date":"2017-07-23T01:30:55.000Z","comments":1,"layout":"post","_content":"\n# 多说已挂，将评论迁移到来必力\n\n有很多可替代的方案\n\n- [网易云跟帖](https://gentie.163.com/info.html)\n- [畅言](http://changyan.kuaizhan.com/)\n- [友言](http://www.uyan.cc/)\n- [Disqus](www.disqus.com)\n- [来必力](https://livere.com/)\n\n<!--more-->\n\n还有许多评论功能就不一一举例了.\n\n## 具体说下该如何迁移\n\n因为我是hexo搭建的博客，然后我用的主题是next。\n\n打开`来必力`官网，注册完毕。\n\n登陆后我们来到管理页面。\n\n之后再点击代码管理，我们将会看见一堆代码。\n\n![laibili](/images/laibili.png)\n\n我们在代码中找到data-uid：“xxxxxxxxxx”。\n\n这段将是我们要用的uid。\n\n打开主题文件下的`_config.yml`我们\n\n`livere_uid: #your livere_uid`\n\n![pinglun](/images/pinglun.png)\n\n之后`hexo clean && hexo g -d`即可","source":"_posts/评论功能迁移.md","raw":"---\ntitle: 多说挂了好久。现在换成来必力\ndate: 2017-07-23 9:30:55\ncomments: true\nlayout: post\ntags: [hexo,git]\ncategories: Technology\n---\n\n# 多说已挂，将评论迁移到来必力\n\n有很多可替代的方案\n\n- [网易云跟帖](https://gentie.163.com/info.html)\n- [畅言](http://changyan.kuaizhan.com/)\n- [友言](http://www.uyan.cc/)\n- [Disqus](www.disqus.com)\n- [来必力](https://livere.com/)\n\n<!--more-->\n\n还有许多评论功能就不一一举例了.\n\n## 具体说下该如何迁移\n\n因为我是hexo搭建的博客，然后我用的主题是next。\n\n打开`来必力`官网，注册完毕。\n\n登陆后我们来到管理页面。\n\n之后再点击代码管理，我们将会看见一堆代码。\n\n![laibili](/images/laibili.png)\n\n我们在代码中找到data-uid：“xxxxxxxxxx”。\n\n这段将是我们要用的uid。\n\n打开主题文件下的`_config.yml`我们\n\n`livere_uid: #your livere_uid`\n\n![pinglun](/images/pinglun.png)\n\n之后`hexo clean && hexo g -d`即可","slug":"评论功能迁移","published":1,"updated":"2017-07-29T06:34:41.000Z","photos":[],"link":"","_id":"cjollnbws0099unfy33qjhmod","content":"<h1 id=\"多说已挂，将评论迁移到来必力\"><a href=\"#多说已挂，将评论迁移到来必力\" class=\"headerlink\" title=\"多说已挂，将评论迁移到来必力\"></a>多说已挂，将评论迁移到来必力</h1><p>有很多可替代的方案</p>\n<ul>\n<li><a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a></li>\n<li><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a></li>\n<li><a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言</a></li>\n<li><a href=\"www.disqus.com\">Disqus</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力</a></li>\n</ul>\n<a id=\"more\"></a>\n<p>还有许多评论功能就不一一举例了.</p>\n<h2 id=\"具体说下该如何迁移\"><a href=\"#具体说下该如何迁移\" class=\"headerlink\" title=\"具体说下该如何迁移\"></a>具体说下该如何迁移</h2><p>因为我是hexo搭建的博客，然后我用的主题是next。</p>\n<p>打开<code>来必力</code>官网，注册完毕。</p>\n<p>登陆后我们来到管理页面。</p>\n<p>之后再点击代码管理，我们将会看见一堆代码。</p>\n<p><img src=\"/images/laibili.png\" alt=\"laibili\"></p>\n<p>我们在代码中找到data-uid：“xxxxxxxxxx”。</p>\n<p>这段将是我们要用的uid。</p>\n<p>打开主题文件下的<code>_config.yml</code>我们</p>\n<p><code>livere_uid: #your livere_uid</code></p>\n<p><img src=\"/images/pinglun.png\" alt=\"pinglun\"></p>\n<p>之后<code>hexo clean &amp;&amp; hexo g -d</code>即可</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"多说已挂，将评论迁移到来必力\"><a href=\"#多说已挂，将评论迁移到来必力\" class=\"headerlink\" title=\"多说已挂，将评论迁移到来必力\"></a>多说已挂，将评论迁移到来必力</h1><p>有很多可替代的方案</p>\n<ul>\n<li><a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a></li>\n<li><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"noopener\">畅言</a></li>\n<li><a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"noopener\">友言</a></li>\n<li><a href=\"www.disqus.com\">Disqus</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力</a></li>\n</ul>","more":"<p>还有许多评论功能就不一一举例了.</p>\n<h2 id=\"具体说下该如何迁移\"><a href=\"#具体说下该如何迁移\" class=\"headerlink\" title=\"具体说下该如何迁移\"></a>具体说下该如何迁移</h2><p>因为我是hexo搭建的博客，然后我用的主题是next。</p>\n<p>打开<code>来必力</code>官网，注册完毕。</p>\n<p>登陆后我们来到管理页面。</p>\n<p>之后再点击代码管理，我们将会看见一堆代码。</p>\n<p><img src=\"/images/laibili.png\" alt=\"laibili\"></p>\n<p>我们在代码中找到data-uid：“xxxxxxxxxx”。</p>\n<p>这段将是我们要用的uid。</p>\n<p>打开主题文件下的<code>_config.yml</code>我们</p>\n<p><code>livere_uid: #your livere_uid</code></p>\n<p><img src=\"/images/pinglun.png\" alt=\"pinglun\"></p>\n<p>之后<code>hexo clean &amp;&amp; hexo g -d</code>即可</p>"},{"title":"设计模式之工厂模式js和ts实现","date":"2018-04-12T13:21:15.484Z","comments":1,"layout":"post","_content":"\n# 简单工厂\n\n简单来说就是：由一个对象决定创建某一种产品对象类的实例。\n\nJs:\n\n```javascript\nfunction Book(name, price, type){\n    let a = new Object();\n    a.name = name;\n    a.price = price;\n    a.type = type;\n    \n    a.getName = function() {\n        console.log(this.name);\n    }\n    a.getPrice = function() {\n        console.log(this.price);\n    }\n    a.getType = function() {\n        console.log(this.type)\n    }\n    return a;\n}\nvar b = Book(\"Js\", 14, \"语言书籍\");\nb.getName();\n```\n<!--more-->\nTs:\n\n```typescript\nenum BookType{\n    Js,\n    Ts,\n}\n\ninterface BookAction{\n    read();\n}\n\nabstract class Book implements BookAction{ // 抽象产品 - 书\n    abstract read();\n}\n\nclass JSbook extends Book{ //具体产品 - Jsbook\n    read(){\n        console.log('js book.');\n    }\n}\n\nclass Tsbook extends Book{ //具体产品 - Tsbook\n    read(){\n        console.log('ts book.');\n    }\n}\n\nclass BookFactory{\n\n    static createBook(type: BookType): Book{\n        switch(type){\n            case BookType.Js:\n                return new JSbook();\n            case BookType.Ts:\n                return new Tsbook();\n            default:\n                throw Error('not support book');\n        }\n    }\n}\n\nBookFactory.createBook(BookType.Js).read();\nBookFactory.createBook(BookType.Ts).read();\n```\n\n\n\n# 工厂方法模式\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n\n\nJS:\n\n```javascript\nvar Factory = function(type, content){\n        var s = new Factory(type, content)\n        return s;\n}\n\nFactory.prototype = {\n    Book: function(content){\n    \tconsole.log(this.content)\n\t},\n    Note: function(content){\n        console.log(this.content)\n    }\n}\n\nFactory('Book', 'Hello, i\\'m a book');\n```\n\n","source":"_posts/设计模式之工厂模式.md","raw":"---\ntitle: 设计模式之工厂模式js和ts实现\ndate: 2018-04-12 21：20\ncomments: true\nlayout: post\ntags: [JavaScript, 设计模式]\ncategories: 设计模式\n---\n\n# 简单工厂\n\n简单来说就是：由一个对象决定创建某一种产品对象类的实例。\n\nJs:\n\n```javascript\nfunction Book(name, price, type){\n    let a = new Object();\n    a.name = name;\n    a.price = price;\n    a.type = type;\n    \n    a.getName = function() {\n        console.log(this.name);\n    }\n    a.getPrice = function() {\n        console.log(this.price);\n    }\n    a.getType = function() {\n        console.log(this.type)\n    }\n    return a;\n}\nvar b = Book(\"Js\", 14, \"语言书籍\");\nb.getName();\n```\n<!--more-->\nTs:\n\n```typescript\nenum BookType{\n    Js,\n    Ts,\n}\n\ninterface BookAction{\n    read();\n}\n\nabstract class Book implements BookAction{ // 抽象产品 - 书\n    abstract read();\n}\n\nclass JSbook extends Book{ //具体产品 - Jsbook\n    read(){\n        console.log('js book.');\n    }\n}\n\nclass Tsbook extends Book{ //具体产品 - Tsbook\n    read(){\n        console.log('ts book.');\n    }\n}\n\nclass BookFactory{\n\n    static createBook(type: BookType): Book{\n        switch(type){\n            case BookType.Js:\n                return new JSbook();\n            case BookType.Ts:\n                return new Tsbook();\n            default:\n                throw Error('not support book');\n        }\n    }\n}\n\nBookFactory.createBook(BookType.Js).read();\nBookFactory.createBook(BookType.Ts).read();\n```\n\n\n\n# 工厂方法模式\n\n通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。\n\n\n\nJS:\n\n```javascript\nvar Factory = function(type, content){\n        var s = new Factory(type, content)\n        return s;\n}\n\nFactory.prototype = {\n    Book: function(content){\n    \tconsole.log(this.content)\n\t},\n    Note: function(content){\n        console.log(this.content)\n    }\n}\n\nFactory('Book', 'Hello, i\\'m a book');\n```\n\n","slug":"设计模式之工厂模式","published":1,"updated":"2018-04-12T14:36:45.226Z","photos":[],"link":"","_id":"cjollnbwv009dunfyp5yp7gaj","content":"<h1 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h1><p>简单来说就是：由一个对象决定创建某一种产品对象类的实例。</p>\n<p>Js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Book</span>(<span class=\"params\">name, price, type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    a.name = name;</span><br><span class=\"line\">    a.price = price;</span><br><span class=\"line\">    a.type = type;</span><br><span class=\"line\">    </span><br><span class=\"line\">    a.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.getType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = Book(<span class=\"string\">\"Js\"</span>, <span class=\"number\">14</span>, <span class=\"string\">\"语言书籍\"</span>);</span><br><span class=\"line\">b.getName();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Ts:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> BookType&#123;</span><br><span class=\"line\">    Js,</span><br><span class=\"line\">    Ts,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> BookAction&#123;</span><br><span class=\"line\">    read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Book <span class=\"keyword\">implements</span> BookAction&#123; <span class=\"comment\">// 抽象产品 - 书</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> JSbook <span class=\"keyword\">extends</span> Book&#123; <span class=\"comment\">//具体产品 - Jsbook</span></span><br><span class=\"line\">    read()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'js book.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tsbook <span class=\"keyword\">extends</span> Book&#123; <span class=\"comment\">//具体产品 - Tsbook</span></span><br><span class=\"line\">    read()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ts book.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> BookFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> createBook(<span class=\"keyword\">type</span>: BookType): Book&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> BookType.Js:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JSbook();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> BookType.Ts:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tsbook();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not support book'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BookFactory.createBook(BookType.Js).read();</span><br><span class=\"line\">BookFactory.createBook(BookType.Ts).read();</span><br></pre></td></tr></table></figure>\n<h1 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h1><p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>JS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Factory(type, content)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Factory.prototype = &#123;</span><br><span class=\"line\">    Book: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.content)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    Note: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Factory(<span class=\"string\">'Book'</span>, <span class=\"string\">'Hello, i\\'m a book'</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h1><p>简单来说就是：由一个对象决定创建某一种产品对象类的实例。</p>\n<p>Js:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Book</span>(<span class=\"params\">name, price, type</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">    a.name = name;</span><br><span class=\"line\">    a.price = price;</span><br><span class=\"line\">    a.type = type;</span><br><span class=\"line\">    </span><br><span class=\"line\">    a.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.getPrice = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.getType = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.type)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = Book(<span class=\"string\">\"Js\"</span>, <span class=\"number\">14</span>, <span class=\"string\">\"语言书籍\"</span>);</span><br><span class=\"line\">b.getName();</span><br></pre></td></tr></table></figure>","more":"<p>Ts:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> BookType&#123;</span><br><span class=\"line\">    Js,</span><br><span class=\"line\">    Ts,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> BookAction&#123;</span><br><span class=\"line\">    read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Book <span class=\"keyword\">implements</span> BookAction&#123; <span class=\"comment\">// 抽象产品 - 书</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> read();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> JSbook <span class=\"keyword\">extends</span> Book&#123; <span class=\"comment\">//具体产品 - Jsbook</span></span><br><span class=\"line\">    read()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'js book.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Tsbook <span class=\"keyword\">extends</span> Book&#123; <span class=\"comment\">//具体产品 - Tsbook</span></span><br><span class=\"line\">    read()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'ts book.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> BookFactory&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> createBook(<span class=\"keyword\">type</span>: BookType): Book&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> BookType.Js:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JSbook();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> BookType.Ts:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Tsbook();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'not support book'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BookFactory.createBook(BookType.Js).read();</span><br><span class=\"line\">BookFactory.createBook(BookType.Ts).read();</span><br></pre></td></tr></table></figure>\n<h1 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h1><p>通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p>\n<p>JS:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Factory = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Factory(type, content)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Factory.prototype = &#123;</span><br><span class=\"line\">    Book: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.content)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    Note: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Factory(<span class=\"string\">'Book'</span>, <span class=\"string\">'Hello, i\\'m a book'</span>);</span><br></pre></td></tr></table></figure>"},{"title":"部署 Kubernetes 集群","date":"2018-11-14T14:24:00.000Z","comments":1,"layout":"post","_content":"\n## 禁用 swap\n```\nsudo swapoff -a\nsudo vim /etc/fstab\n注释掉swap那一行\n```\n\n## 安装\n默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，\n以下是安装 kubeadm kubelet kubectl 流程：\n```shell\napt-get update && apt-get install -y apt-transport-https ca-certificates curl\ncurl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -\ncat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n\napt-get update\napt-get install -y kubelet kubeadm kubectl\napt-mark hold kubelet kubeadm kubectl\n```\n\n## 初始化\n\nKubernetes 集群的初始化可以分为三个步骤\n\n- 在 Master 上运行控制平面 (Control Plane)\n- 将 Node 加入到集群中\n- 安装 Pod 网络的附加组件\n<!--more-->\n### Master\nkubeadm 1.12 使用的是 v1alpha3 API，这里的定义包含了 InitConfiguration 和 ClusterConfiguration 两部分。\n\n**kubeadmInit.yml**:\n```\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: InitConfiguration\nnodeRegistration:\n  kubeletExtraArgs:\n    # 从 Aliyun Registry 拉取基础镜像\n    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1\n---\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: ClusterConfiguration\n# 从 Aliyun Registry 拉取 Control Plane 镜像\nimageRepository: registry.aliyuncs.com/google_containers\n# 使用确定的 Kubernetes 版本，避免初始化时从 https://dl.k8s.io/release/stable-1.12.txt 读取\nkubernetesVersion: v1.12.2\nnetworking:\n  # 如使用 flannel 组件应增加如下配置\n  podSubnet: 10.244.0.0/16\n  serviceSubnet: 10.96.0.0/12\n```\nkubeadm 将自动下载镜像，以 Static Pod 方式运行 Control Plane。\n\n```\nkubeadm init --config kubeadmInit.yml\n```\n\n![](https://1mu-test.oss-cn-hangzhou.aliyuncs.com/1mu-test/kubeadmInitRes.png)\n这就是初始化成功之后的log，并且界面上会输出一条 kubeadm join 命令，将其记录到本地，稍后会用于 Node 加入集群。命令示例如下\n```\nkubeadm join --token <token> <master-ip>:<master-port> --discovery-token-ca-cert-hash sha256:<hash>\n```\n### 访问集群\n可以参照 kubeadm 初始化后输出的说明，增加使用 kubectl 访问 Kubernetes 集群所需的配置。\n```\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n这时可以使用 `kubectl -n kube-system get pods` 查看到已部署的 Control Plane Pod。\n\n### Node\n在Node机子上，我们需要去做安装工作(安装 kubeadm kubelet kubectl)。\n之后用之前那个join后的参数去代替以下`<xxx>`\n**NodeJoin.yml**:\n```shell\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: JoinConfiguration\ndiscoveryTokenAPIServers:\n- <master-ip>:<master-port>\ndiscoveryTokenCACertHashes:\n- sha256:<hash>\nnodeRegistration:\n  kubeletExtraArgs:\n    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1\ntoken: <token>\n```\n\n然后我们只用输入以下命令\n```\nkubeadm join --config NodeJoin.yml\n```\n运行成功后，我们可以在 Master 上使用 kubectl get nodes 查看到已加入集群的 Node。\n### Pod Network\n\n在完成前面两步后，通过 kubectl get nodes 我们可以看到 Master 和 Node 状态是 NotReady，这是因为缺少[ Pod Network 附加组件](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network)。\n现在部署的 Pod 不会被分配 IP，会维持在 `ContainerCreating `状态。比如通过 `kubectl -n kube-system get pods -l k8s-app=kube-dns `查看到的 CoreDNS Pod。\n可以选择任意一款支持 CNI 的网络组件，这里使用 calico 作为示例，在 Master 上运行如下命令。\n```\nkubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml\nkubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n```\n待网络组件安装完成后，再次运行 kubectl -n kube-system get pods -l k8s-app=kube-dns 可以看到 CoreDNS Pod 已经变为 Running 状态。\n\n## 测试\n### 验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network\n```\n# 部署一个 Nginx Deployment，包含两个 Pod\n# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\nkubectl create deployment nginx --image=nginx:alpine\nkubectl scale deployment nginx --replicas=2\n\n# 待启动后，两个 Nginx Pod 应该是 Running 状态，并且各自分配有 10.244 开头的集群内 IP\nkubectl get pods -l app=nginx -o wide\n# 结果示例\nNAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          73m   192.168.1.2   zihao   <none>\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          72m   192.168.1.3   zihao   <none>\n```\n### 验证 kube-proxy\n```\n# 以 NodePort 方式对外提供服务\n# https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/\nkubectl expose deployment nginx --port=80 --type=NodePort\n\n# Nginx 服务应该得到一个 10.96 开头的集群内 IP，以及集群外可访问的 Port\nkubectl get services nginx\n# 结果示例\nNAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE\nnginx   NodePort   10.100.177.202   <none>        80:32551/TCP   96m\n\n# 可以通过任意 NodeIP:Port 在集群外部访问这个服务\ncurl http://node-ip:32630\n```\n\n### 验证 dns, pod network\n```\n# 启动一个 Busybox 部署，并进入其内部\n# 如果没有出现提示符，按下回车键\nkubectl run -it curl --image=radial/busyboxplus:curl\n\n# 输入命令 nslookup nginx 应可以正确解析出集群内的 IP，证明 DNS 服务正常\n[ root@curl-5cc7b478b6-7zxlq:/ ]$ nslookup nginx\n# 结果示例\n# Server:    10.96.0.10\n# Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local\n#\n# Name:      nginx\n# Address 1: 10.98.222.155 nginx.default.svc.cluster.local\n\n# 输入命令 curl nginx 应可以正确返回 Nginx 首页，证明 kube-proxy 正常\n[ root@curl-5cc7b478b6-7zxlq:/ ]$ curl http://nginx/\n```","source":"_posts/部署 Kubernetes 集群.md","raw":"---\ntitle: 部署 Kubernetes 集群\ndate: 2018-11-14 22:24:00\ncomments: true\nlayout: post\ntags: [docker, Kubernetes]\ncategories: docker\n---\n\n## 禁用 swap\n```\nsudo swapoff -a\nsudo vim /etc/fstab\n注释掉swap那一行\n```\n\n## 安装\n默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，\n以下是安装 kubeadm kubelet kubectl 流程：\n```shell\napt-get update && apt-get install -y apt-transport-https ca-certificates curl\ncurl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -\ncat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main\nEOF\n\napt-get update\napt-get install -y kubelet kubeadm kubectl\napt-mark hold kubelet kubeadm kubectl\n```\n\n## 初始化\n\nKubernetes 集群的初始化可以分为三个步骤\n\n- 在 Master 上运行控制平面 (Control Plane)\n- 将 Node 加入到集群中\n- 安装 Pod 网络的附加组件\n<!--more-->\n### Master\nkubeadm 1.12 使用的是 v1alpha3 API，这里的定义包含了 InitConfiguration 和 ClusterConfiguration 两部分。\n\n**kubeadmInit.yml**:\n```\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: InitConfiguration\nnodeRegistration:\n  kubeletExtraArgs:\n    # 从 Aliyun Registry 拉取基础镜像\n    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1\n---\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: ClusterConfiguration\n# 从 Aliyun Registry 拉取 Control Plane 镜像\nimageRepository: registry.aliyuncs.com/google_containers\n# 使用确定的 Kubernetes 版本，避免初始化时从 https://dl.k8s.io/release/stable-1.12.txt 读取\nkubernetesVersion: v1.12.2\nnetworking:\n  # 如使用 flannel 组件应增加如下配置\n  podSubnet: 10.244.0.0/16\n  serviceSubnet: 10.96.0.0/12\n```\nkubeadm 将自动下载镜像，以 Static Pod 方式运行 Control Plane。\n\n```\nkubeadm init --config kubeadmInit.yml\n```\n\n![](https://1mu-test.oss-cn-hangzhou.aliyuncs.com/1mu-test/kubeadmInitRes.png)\n这就是初始化成功之后的log，并且界面上会输出一条 kubeadm join 命令，将其记录到本地，稍后会用于 Node 加入集群。命令示例如下\n```\nkubeadm join --token <token> <master-ip>:<master-port> --discovery-token-ca-cert-hash sha256:<hash>\n```\n### 访问集群\n可以参照 kubeadm 初始化后输出的说明，增加使用 kubectl 访问 Kubernetes 集群所需的配置。\n```\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```\n这时可以使用 `kubectl -n kube-system get pods` 查看到已部署的 Control Plane Pod。\n\n### Node\n在Node机子上，我们需要去做安装工作(安装 kubeadm kubelet kubectl)。\n之后用之前那个join后的参数去代替以下`<xxx>`\n**NodeJoin.yml**:\n```shell\napiVersion: kubeadm.k8s.io/v1alpha3\nkind: JoinConfiguration\ndiscoveryTokenAPIServers:\n- <master-ip>:<master-port>\ndiscoveryTokenCACertHashes:\n- sha256:<hash>\nnodeRegistration:\n  kubeletExtraArgs:\n    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1\ntoken: <token>\n```\n\n然后我们只用输入以下命令\n```\nkubeadm join --config NodeJoin.yml\n```\n运行成功后，我们可以在 Master 上使用 kubectl get nodes 查看到已加入集群的 Node。\n### Pod Network\n\n在完成前面两步后，通过 kubectl get nodes 我们可以看到 Master 和 Node 状态是 NotReady，这是因为缺少[ Pod Network 附加组件](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network)。\n现在部署的 Pod 不会被分配 IP，会维持在 `ContainerCreating `状态。比如通过 `kubectl -n kube-system get pods -l k8s-app=kube-dns `查看到的 CoreDNS Pod。\n可以选择任意一款支持 CNI 的网络组件，这里使用 calico 作为示例，在 Master 上运行如下命令。\n```\nkubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml\nkubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml\n```\n待网络组件安装完成后，再次运行 kubectl -n kube-system get pods -l k8s-app=kube-dns 可以看到 CoreDNS Pod 已经变为 Running 状态。\n\n## 测试\n### 验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network\n```\n# 部署一个 Nginx Deployment，包含两个 Pod\n# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\nkubectl create deployment nginx --image=nginx:alpine\nkubectl scale deployment nginx --replicas=2\n\n# 待启动后，两个 Nginx Pod 应该是 Running 状态，并且各自分配有 10.244 开头的集群内 IP\nkubectl get pods -l app=nginx -o wide\n# 结果示例\nNAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE\nnginx-65d5c4f7cc-khzn8   1/1     Running   0          73m   192.168.1.2   zihao   <none>\nnginx-65d5c4f7cc-v7x49   1/1     Running   0          72m   192.168.1.3   zihao   <none>\n```\n### 验证 kube-proxy\n```\n# 以 NodePort 方式对外提供服务\n# https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/\nkubectl expose deployment nginx --port=80 --type=NodePort\n\n# Nginx 服务应该得到一个 10.96 开头的集群内 IP，以及集群外可访问的 Port\nkubectl get services nginx\n# 结果示例\nNAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE\nnginx   NodePort   10.100.177.202   <none>        80:32551/TCP   96m\n\n# 可以通过任意 NodeIP:Port 在集群外部访问这个服务\ncurl http://node-ip:32630\n```\n\n### 验证 dns, pod network\n```\n# 启动一个 Busybox 部署，并进入其内部\n# 如果没有出现提示符，按下回车键\nkubectl run -it curl --image=radial/busyboxplus:curl\n\n# 输入命令 nslookup nginx 应可以正确解析出集群内的 IP，证明 DNS 服务正常\n[ root@curl-5cc7b478b6-7zxlq:/ ]$ nslookup nginx\n# 结果示例\n# Server:    10.96.0.10\n# Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local\n#\n# Name:      nginx\n# Address 1: 10.98.222.155 nginx.default.svc.cluster.local\n\n# 输入命令 curl nginx 应可以正确返回 Nginx 首页，证明 kube-proxy 正常\n[ root@curl-5cc7b478b6-7zxlq:/ ]$ curl http://nginx/\n```","slug":"部署 Kubernetes 集群","published":1,"updated":"2018-11-14T14:25:38.994Z","photos":[],"link":"","_id":"cjollnbwy009hunfy4q44hj9h","content":"<h2 id=\"禁用-swap\"><a href=\"#禁用-swap\" class=\"headerlink\" title=\"禁用 swap\"></a>禁用 swap</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\">注释掉swap那一行</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，<br>以下是安装 kubeadm kubelet kubectl 流程：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install -y apt-transport-https ca-certificates curl</span><br><span class=\"line\">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class=\"line\">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y kubelet kubeadm kubectl</span><br><span class=\"line\">apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>Kubernetes 集群的初始化可以分为三个步骤</p>\n<ul>\n<li>在 Master 上运行控制平面 (Control Plane)</li>\n<li>将 Node 加入到集群中</li>\n<li>安装 Pod 网络的附加组件<a id=\"more\"></a>\n<h3 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h3>kubeadm 1.12 使用的是 v1alpha3 API，这里的定义包含了 InitConfiguration 和 ClusterConfiguration 两部分。</li>\n</ul>\n<p><strong>kubeadmInit.yml</strong>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    # 从 Aliyun Registry 拉取基础镜像</span><br><span class=\"line\">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\"># 从 Aliyun Registry 拉取 Control Plane 镜像</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class=\"line\"># 使用确定的 Kubernetes 版本，避免初始化时从 https://dl.k8s.io/release/stable-1.12.txt 读取</span><br><span class=\"line\">kubernetesVersion: v1.12.2</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  # 如使用 flannel 组件应增加如下配置</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure></p>\n<p>kubeadm 将自动下载镜像，以 Static Pod 方式运行 Control Plane。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config kubeadmInit.yml</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://1mu-test.oss-cn-hangzhou.aliyuncs.com/1mu-test/kubeadmInitRes.png\" alt=\"\"><br>这就是初始化成功之后的log，并且界面上会输出一条 kubeadm join 命令，将其记录到本地，稍后会用于 Node 加入集群。命令示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问集群\"><a href=\"#访问集群\" class=\"headerlink\" title=\"访问集群\"></a>访问集群</h3><p>可以参照 kubeadm 初始化后输出的说明，增加使用 kubectl 访问 Kubernetes 集群所需的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p>\n<p>这时可以使用 <code>kubectl -n kube-system get pods</code> 查看到已部署的 Control Plane Pod。</p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>在Node机子上，我们需要去做安装工作(安装 kubeadm kubelet kubectl)。<br>之后用之前那个join后的参数去代替以下<code>&lt;xxx&gt;</code><br><strong>NodeJoin.yml</strong>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: JoinConfiguration</span><br><span class=\"line\">discoveryTokenAPIServers:</span><br><span class=\"line\">- &lt;master-ip&gt;:&lt;master-port&gt;</span><br><span class=\"line\">discoveryTokenCACertHashes:</span><br><span class=\"line\">- sha256:&lt;hash&gt;</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class=\"line\">token: &lt;token&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们只用输入以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --config NodeJoin.yml</span><br></pre></td></tr></table></figure></p>\n<p>运行成功后，我们可以在 Master 上使用 kubectl get nodes 查看到已加入集群的 Node。</p>\n<h3 id=\"Pod-Network\"><a href=\"#Pod-Network\" class=\"headerlink\" title=\"Pod Network\"></a>Pod Network</h3><p>在完成前面两步后，通过 kubectl get nodes 我们可以看到 Master 和 Node 状态是 NotReady，这是因为缺少<a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network\" target=\"_blank\" rel=\"noopener\"> Pod Network 附加组件</a>。<br>现在部署的 Pod 不会被分配 IP，会维持在 <code>ContainerCreating</code>状态。比如通过 <code>kubectl -n kube-system get pods -l k8s-app=kube-dns</code>查看到的 CoreDNS Pod。<br>可以选择任意一款支持 CNI 的网络组件，这里使用 calico 作为示例，在 Master 上运行如下命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br></pre></td></tr></table></figure></p>\n<p>待网络组件安装完成后，再次运行 kubectl -n kube-system get pods -l k8s-app=kube-dns 可以看到 CoreDNS Pod 已经变为 Running 状态。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network\"><a href=\"#验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network\" class=\"headerlink\" title=\"验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network\"></a>验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 部署一个 Nginx Deployment，包含两个 Pod</span><br><span class=\"line\"># https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</span><br><span class=\"line\">kubectl create deployment nginx --image=nginx:alpine</span><br><span class=\"line\">kubectl scale deployment nginx --replicas=2</span><br><span class=\"line\"></span><br><span class=\"line\"># 待启动后，两个 Nginx Pod 应该是 Running 状态，并且各自分配有 10.244 开头的集群内 IP</span><br><span class=\"line\">kubectl get pods -l app=nginx -o wide</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          73m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          72m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证-kube-proxy\"><a href=\"#验证-kube-proxy\" class=\"headerlink\" title=\"验证 kube-proxy\"></a>验证 kube-proxy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以 NodePort 方式对外提供服务</span><br><span class=\"line\"># https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class=\"line\"></span><br><span class=\"line\"># Nginx 服务应该得到一个 10.96 开头的集群内 IP，以及集群外可访问的 Port</span><br><span class=\"line\">kubectl get services nginx</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\">NAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">nginx   NodePort   10.100.177.202   &lt;none&gt;        80:32551/TCP   96m</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以通过任意 NodeIP:Port 在集群外部访问这个服务</span><br><span class=\"line\">curl http://node-ip:32630</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证-dns-pod-network\"><a href=\"#验证-dns-pod-network\" class=\"headerlink\" title=\"验证 dns, pod network\"></a>验证 dns, pod network</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动一个 Busybox 部署，并进入其内部</span><br><span class=\"line\"># 如果没有出现提示符，按下回车键</span><br><span class=\"line\">kubectl run -it curl --image=radial/busyboxplus:curl</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入命令 nslookup nginx 应可以正确解析出集群内的 IP，证明 DNS 服务正常</span><br><span class=\"line\">[ root@curl-5cc7b478b6-7zxlq:/ ]$ nslookup nginx</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\"># Server:    10.96.0.10</span><br><span class=\"line\"># Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># Name:      nginx</span><br><span class=\"line\"># Address 1: 10.98.222.155 nginx.default.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入命令 curl nginx 应可以正确返回 Nginx 首页，证明 kube-proxy 正常</span><br><span class=\"line\">[ root@curl-5cc7b478b6-7zxlq:/ ]$ curl http://nginx/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"禁用-swap\"><a href=\"#禁用-swap\" class=\"headerlink\" title=\"禁用 swap\"></a>禁用 swap</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo swapoff -a</span><br><span class=\"line\">sudo vim /etc/fstab</span><br><span class=\"line\">注释掉swap那一行</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>默认安装了docker-ce=18.06.0~ce~3-0~ubuntu，<br>以下是安装 kubeadm kubelet kubectl 流程：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update &amp;&amp; apt-get install -y apt-transport-https ca-certificates curl</span><br><span class=\"line\">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class=\"line\">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class=\"line\">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">apt-get install -y kubelet kubeadm kubectl</span><br><span class=\"line\">apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>Kubernetes 集群的初始化可以分为三个步骤</p>\n<ul>\n<li>在 Master 上运行控制平面 (Control Plane)</li>\n<li>将 Node 加入到集群中</li>\n<li>安装 Pod 网络的附加组件","more":"<h3 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h3>kubeadm 1.12 使用的是 v1alpha3 API，这里的定义包含了 InitConfiguration 和 ClusterConfiguration 两部分。</li>\n</ul>\n<p><strong>kubeadmInit.yml</strong>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: InitConfiguration</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    # 从 Aliyun Registry 拉取基础镜像</span><br><span class=\"line\">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: ClusterConfiguration</span><br><span class=\"line\"># 从 Aliyun Registry 拉取 Control Plane 镜像</span><br><span class=\"line\">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class=\"line\"># 使用确定的 Kubernetes 版本，避免初始化时从 https://dl.k8s.io/release/stable-1.12.txt 读取</span><br><span class=\"line\">kubernetesVersion: v1.12.2</span><br><span class=\"line\">networking:</span><br><span class=\"line\">  # 如使用 flannel 组件应增加如下配置</span><br><span class=\"line\">  podSubnet: 10.244.0.0/16</span><br><span class=\"line\">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure></p>\n<p>kubeadm 将自动下载镜像，以 Static Pod 方式运行 Control Plane。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init --config kubeadmInit.yml</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://1mu-test.oss-cn-hangzhou.aliyuncs.com/1mu-test/kubeadmInitRes.png\" alt=\"\"><br>这就是初始化成功之后的log，并且界面上会输出一条 kubeadm join 命令，将其记录到本地，稍后会用于 Node 加入集群。命令示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --token &lt;token&gt; &lt;master-ip&gt;:&lt;master-port&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"访问集群\"><a href=\"#访问集群\" class=\"headerlink\" title=\"访问集群\"></a>访问集群</h3><p>可以参照 kubeadm 初始化后输出的说明，增加使用 kubectl 访问 Kubernetes 集群所需的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p $HOME/.kube</span><br><span class=\"line\">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class=\"line\">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p>\n<p>这时可以使用 <code>kubectl -n kube-system get pods</code> 查看到已部署的 Control Plane Pod。</p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>在Node机子上，我们需要去做安装工作(安装 kubeadm kubelet kubectl)。<br>之后用之前那个join后的参数去代替以下<code>&lt;xxx&gt;</code><br><strong>NodeJoin.yml</strong>:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apiVersion: kubeadm.k8s.io/v1alpha3</span><br><span class=\"line\">kind: JoinConfiguration</span><br><span class=\"line\">discoveryTokenAPIServers:</span><br><span class=\"line\">- &lt;master-ip&gt;:&lt;master-port&gt;</span><br><span class=\"line\">discoveryTokenCACertHashes:</span><br><span class=\"line\">- sha256:&lt;hash&gt;</span><br><span class=\"line\">nodeRegistration:</span><br><span class=\"line\">  kubeletExtraArgs:</span><br><span class=\"line\">    pod-infra-container-image: registry.aliyuncs.com/google_containers/pause-amd64:3.1</span><br><span class=\"line\">token: &lt;token&gt;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们只用输入以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm join --config NodeJoin.yml</span><br></pre></td></tr></table></figure></p>\n<p>运行成功后，我们可以在 Master 上使用 kubectl get nodes 查看到已加入集群的 Node。</p>\n<h3 id=\"Pod-Network\"><a href=\"#Pod-Network\" class=\"headerlink\" title=\"Pod Network\"></a>Pod Network</h3><p>在完成前面两步后，通过 kubectl get nodes 我们可以看到 Master 和 Node 状态是 NotReady，这是因为缺少<a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network\" target=\"_blank\" rel=\"noopener\"> Pod Network 附加组件</a>。<br>现在部署的 Pod 不会被分配 IP，会维持在 <code>ContainerCreating</code>状态。比如通过 <code>kubectl -n kube-system get pods -l k8s-app=kube-dns</code>查看到的 CoreDNS Pod。<br>可以选择任意一款支持 CNI 的网络组件，这里使用 calico 作为示例，在 Master 上运行如下命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml</span><br><span class=\"line\">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml</span><br></pre></td></tr></table></figure></p>\n<p>待网络组件安装完成后，再次运行 kubectl -n kube-system get pods -l k8s-app=kube-dns 可以看到 CoreDNS Pod 已经变为 Running 状态。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network\"><a href=\"#验证-kube-apiserver-kube-controller-manager-kube-scheduler-pod-network\" class=\"headerlink\" title=\"验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network\"></a>验证 kube-apiserver, kube-controller-manager, kube-scheduler, pod network</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 部署一个 Nginx Deployment，包含两个 Pod</span><br><span class=\"line\"># https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</span><br><span class=\"line\">kubectl create deployment nginx --image=nginx:alpine</span><br><span class=\"line\">kubectl scale deployment nginx --replicas=2</span><br><span class=\"line\"></span><br><span class=\"line\"># 待启动后，两个 Nginx Pod 应该是 Running 状态，并且各自分配有 10.244 开头的集群内 IP</span><br><span class=\"line\">kubectl get pods -l app=nginx -o wide</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\">NAME                     READY   STATUS    RESTARTS   AGE   IP            NODE    NOMINATED NODE</span><br><span class=\"line\">nginx-65d5c4f7cc-khzn8   1/1     Running   0          73m   192.168.1.2   zihao   &lt;none&gt;</span><br><span class=\"line\">nginx-65d5c4f7cc-v7x49   1/1     Running   0          72m   192.168.1.3   zihao   &lt;none&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证-kube-proxy\"><a href=\"#验证-kube-proxy\" class=\"headerlink\" title=\"验证 kube-proxy\"></a>验证 kube-proxy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以 NodePort 方式对外提供服务</span><br><span class=\"line\"># https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/</span><br><span class=\"line\">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class=\"line\"></span><br><span class=\"line\"># Nginx 服务应该得到一个 10.96 开头的集群内 IP，以及集群外可访问的 Port</span><br><span class=\"line\">kubectl get services nginx</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\">NAME    TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">nginx   NodePort   10.100.177.202   &lt;none&gt;        80:32551/TCP   96m</span><br><span class=\"line\"></span><br><span class=\"line\"># 可以通过任意 NodeIP:Port 在集群外部访问这个服务</span><br><span class=\"line\">curl http://node-ip:32630</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证-dns-pod-network\"><a href=\"#验证-dns-pod-network\" class=\"headerlink\" title=\"验证 dns, pod network\"></a>验证 dns, pod network</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动一个 Busybox 部署，并进入其内部</span><br><span class=\"line\"># 如果没有出现提示符，按下回车键</span><br><span class=\"line\">kubectl run -it curl --image=radial/busyboxplus:curl</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入命令 nslookup nginx 应可以正确解析出集群内的 IP，证明 DNS 服务正常</span><br><span class=\"line\">[ root@curl-5cc7b478b6-7zxlq:/ ]$ nslookup nginx</span><br><span class=\"line\"># 结果示例</span><br><span class=\"line\"># Server:    10.96.0.10</span><br><span class=\"line\"># Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class=\"line\">#</span><br><span class=\"line\"># Name:      nginx</span><br><span class=\"line\"># Address 1: 10.98.222.155 nginx.default.svc.cluster.local</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入命令 curl nginx 应可以正确返回 Nginx 首页，证明 kube-proxy 正常</span><br><span class=\"line\">[ root@curl-5cc7b478b6-7zxlq:/ ]$ curl http://nginx/</span><br></pre></td></tr></table></figure>"},{"title":"配置SSH Key+Next主题以及个性化改动","date":"2017-03-20T13:10:55.000Z","comments":1,"layout":"post","_content":"\nGit SSH Key 生成步骤\n==\nGit是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。\n\n- 第一次使用要设置Git的user name 和email\n ```shell\n$ git config --global user.name\n ```\n\n ```shell\n $ git config --global user.email\n ```\n\n <!--more-->\n- 查看你是否已经拥有密钥\n ```shell\n $cd ~/.ssh\n ```\n 如果没有的话就不会有此文件，有的话就会备份删除掉\n\n- 生成密钥\n ```shell\n $ ssh-keygen -t rsa -C “user.email”\n ```\n 你将会遇到以下情况的处理：\n ```shell\n Generating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):  直接回车\nEnter passphrase (empty for no passphrase):               直接回车\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.  公钥\nYour public key has been saved in /root/.ssh/id_rsa.pub.  私钥\nThe key fingerprint is:\n4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53 \n ```\n就是按3次回车，密码为空！\n最后你会得到两个文件：`id_rsa`和`id_rsa.pub`\n - 把密钥加到Github或者码云或者Coding的SSH上\n ![Github](/images/github.png)\n 我们需要把`id_rsa.pub`中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。\n - 测试SSH\nGithub：\n```shell\n$ssh -T git@github.com\n```\n码云：\n```shell\n$ssh -T git@git.oschina.net\n```\nCoding:\n```shell\n$ssh -T git@coding.net\n```\n- 若返回则配置成功\ngithub:\n```shell\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\n```\n码云：`Welcome to Git@OSC, yourname!`\nCoding：`Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ] `\n那么配置好，我们就可以把Hexo部署到Git上了\n```shell\n$hexo deploy\n```\n\nHexo之Next\n==\n\n - Hexo有很多主题，有大道至简的`maupassant` 也有`casper`还有`uno`。但是我还是最喜欢[next](http://theme-next.iissnan.com/)的风格。\n\n\n安装Next\n======\n\n安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：\n```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n还有一种方法是下载稳定版本\n\n - 前往Next版本[发布页面](https://github.com/iissnan/hexo-theme-next/releases)\n - 一直下拉找到`Source code(zip)`点击即可下载\n - 之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为`next`。\n\n启用Next\n--\n\n - 你需要打开你的站点目录找到`_config.yml`这个文件，记住不是themes下next中的`_config.yml`。\n - 我们需要在站点文件`_config.yml`中`ctrl+F`打入`theme`字段，并将其值改为`next`：\n```shell\ntheme:next\n```\n\n验证主题是否生成完成\n--\n首先我们要右击你的站点然后选择`Git Bash Here`，并开启调试模式。\n```shell\n$ hexo s --debug\n```\n命令行出现：\n```shell\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n那么我们就可以在网址上输入`http://0.0.0.0:4000`去查看效果，检查站点是否正确运行。\n\nNext各种细节\n==\n\n主题设定\n--\nScheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。\n\n - Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n - Mist - Muse 的紧凑版本，整洁有序的单栏外观\n - Pisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件（theme/next下的`_config.yml`），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。\n```shell\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n```\n还有更多的小东西大家可以去[Next官方文档](https://github.com/iissnan/hexo-theme-next/releases)看。比如说\n\n - 菜单，\n - 侧栏，\n - 头像，\n - 作者昵称，\n - 站点描述，\n - 第三方服务等。\n\nNext中foot更改\n-----------\n![foot](/images/foot.jpg)我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。\n我们需要打开`next`下的`layout`接着打开`_partials`下的`footer.swig`。\n然后我们要把其中红框里的删除。\n![foot1](/images/foot1.png)\n紧接着我们回到`next`下，找到`languages`，打开`zh-Hans.yml`。\n![foot2](/images/foot2.png)\n我们可以改成如下：\n```shell\nfooter:\n  powered: \"个人专属 \"\n  theme: Adherent\n```\n看大家的想法自己随意发挥！\n好啦，我要去研究SEO了！！\n祝大家建博成功\n\n","source":"_posts/配置SSH Key+Next主题以及个性化改动.md","raw":"---\ntitle: 配置SSH Key+Next主题以及个性化改动\ndate: 2017-03-20 21:10:55\ncomments: true\nlayout: post\ntags: [hexo,git]\ncategories: Technology\n---\n\nGit SSH Key 生成步骤\n==\nGit是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。\n\n- 第一次使用要设置Git的user name 和email\n ```shell\n$ git config --global user.name\n ```\n\n ```shell\n $ git config --global user.email\n ```\n\n <!--more-->\n- 查看你是否已经拥有密钥\n ```shell\n $cd ~/.ssh\n ```\n 如果没有的话就不会有此文件，有的话就会备份删除掉\n\n- 生成密钥\n ```shell\n $ ssh-keygen -t rsa -C “user.email”\n ```\n 你将会遇到以下情况的处理：\n ```shell\n Generating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):  直接回车\nEnter passphrase (empty for no passphrase):               直接回车\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.  公钥\nYour public key has been saved in /root/.ssh/id_rsa.pub.  私钥\nThe key fingerprint is:\n4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53 \n ```\n就是按3次回车，密码为空！\n最后你会得到两个文件：`id_rsa`和`id_rsa.pub`\n - 把密钥加到Github或者码云或者Coding的SSH上\n ![Github](/images/github.png)\n 我们需要把`id_rsa.pub`中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。\n - 测试SSH\nGithub：\n```shell\n$ssh -T git@github.com\n```\n码云：\n```shell\n$ssh -T git@git.oschina.net\n```\nCoding:\n```shell\n$ssh -T git@coding.net\n```\n- 若返回则配置成功\ngithub:\n```shell\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\n```\n码云：`Welcome to Git@OSC, yourname!`\nCoding：`Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ] `\n那么配置好，我们就可以把Hexo部署到Git上了\n```shell\n$hexo deploy\n```\n\nHexo之Next\n==\n\n - Hexo有很多主题，有大道至简的`maupassant` 也有`casper`还有`uno`。但是我还是最喜欢[next](http://theme-next.iissnan.com/)的风格。\n\n\n安装Next\n======\n\n安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：\n```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n还有一种方法是下载稳定版本\n\n - 前往Next版本[发布页面](https://github.com/iissnan/hexo-theme-next/releases)\n - 一直下拉找到`Source code(zip)`点击即可下载\n - 之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为`next`。\n\n启用Next\n--\n\n - 你需要打开你的站点目录找到`_config.yml`这个文件，记住不是themes下next中的`_config.yml`。\n - 我们需要在站点文件`_config.yml`中`ctrl+F`打入`theme`字段，并将其值改为`next`：\n```shell\ntheme:next\n```\n\n验证主题是否生成完成\n--\n首先我们要右击你的站点然后选择`Git Bash Here`，并开启调试模式。\n```shell\n$ hexo s --debug\n```\n命令行出现：\n```shell\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n那么我们就可以在网址上输入`http://0.0.0.0:4000`去查看效果，检查站点是否正确运行。\n\nNext各种细节\n==\n\n主题设定\n--\nScheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。\n\n - Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n - Mist - Muse 的紧凑版本，整洁有序的单栏外观\n - Pisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件（theme/next下的`_config.yml`），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。\n```shell\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n```\n还有更多的小东西大家可以去[Next官方文档](https://github.com/iissnan/hexo-theme-next/releases)看。比如说\n\n - 菜单，\n - 侧栏，\n - 头像，\n - 作者昵称，\n - 站点描述，\n - 第三方服务等。\n\nNext中foot更改\n-----------\n![foot](/images/foot.jpg)我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。\n我们需要打开`next`下的`layout`接着打开`_partials`下的`footer.swig`。\n然后我们要把其中红框里的删除。\n![foot1](/images/foot1.png)\n紧接着我们回到`next`下，找到`languages`，打开`zh-Hans.yml`。\n![foot2](/images/foot2.png)\n我们可以改成如下：\n```shell\nfooter:\n  powered: \"个人专属 \"\n  theme: Adherent\n```\n看大家的想法自己随意发挥！\n好啦，我要去研究SEO了！！\n祝大家建博成功\n\n","slug":"配置SSH Key+Next主题以及个性化改动","published":1,"updated":"2018-04-30T03:57:37.288Z","photos":[],"link":"","_id":"cjollnbx0009lunfy6squzprl","content":"<h1 id=\"Git-SSH-Key-生成步骤\"><a href=\"#Git-SSH-Key-生成步骤\" class=\"headerlink\" title=\"Git SSH Key 生成步骤\"></a>Git SSH Key 生成步骤</h1><p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。</p>\n<ul>\n<li><p>第一次使用要设置Git的user name 和email</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>查看你是否已经拥有密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/.ssh</span></span><br></pre></td></tr></table></figure>\n<p>如果没有的话就不会有此文件，有的话就会备份删除掉</p>\n</li>\n<li><p>生成密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C “user.email”</span></span><br></pre></td></tr></table></figure>\n<p>你将会遇到以下情况的处理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa):  直接回车</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):               直接回车</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.  公钥</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.  私钥</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就是按3次回车，密码为空！<br>最后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p>\n<ul>\n<li>把密钥加到Github或者码云或者Coding的SSH上<br><img src=\"/images/github.png\" alt=\"Github\"><br>我们需要把<code>id_rsa.pub</code>中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。</li>\n<li>测试SSH<br>Github：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@github.com</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@git.oschina.net</span></span><br></pre></td></tr></table></figure></p>\n<p>Coding:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@coding.net</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>若返回则配置成功<br>github:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<code>Welcome to Git@OSC, yourname!</code><br>Coding：<code>Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]</code><br>那么配置好，我们就可以把Hexo部署到Git上了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo deploy</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Hexo之Next\"><a href=\"#Hexo之Next\" class=\"headerlink\" title=\"Hexo之Next\"></a>Hexo之Next</h1><ul>\n<li>Hexo有很多主题，有大道至简的<code>maupassant</code> 也有<code>casper</code>还有<code>uno</code>。但是我还是最喜欢<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next</a>的风格。</li>\n</ul>\n<h1 id=\"安装Next\"><a href=\"#安装Next\" class=\"headerlink\" title=\"安装Next\"></a>安装Next</h1><p>安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> your-hexo-site</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure></p>\n<p>还有一种方法是下载稳定版本</p>\n<ul>\n<li>前往Next版本<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">发布页面</a></li>\n<li>一直下拉找到<code>Source code(zip)</code>点击即可下载</li>\n<li>之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为<code>next</code>。</li>\n</ul>\n<h2 id=\"启用Next\"><a href=\"#启用Next\" class=\"headerlink\" title=\"启用Next\"></a>启用Next</h2><ul>\n<li>你需要打开你的站点目录找到<code>_config.yml</code>这个文件，记住不是themes下next中的<code>_config.yml</code>。</li>\n<li>我们需要在站点文件<code>_config.yml</code>中<code>ctrl+F</code>打入<code>theme</code>字段，并将其值改为<code>next</code>：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme:next</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"验证主题是否生成完成\"><a href=\"#验证主题是否生成完成\" class=\"headerlink\" title=\"验证主题是否生成完成\"></a>验证主题是否生成完成</h2><p>首先我们要右击你的站点然后选择<code>Git Bash Here</code>，并开启调试模式。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s --debug</span></span><br></pre></td></tr></table></figure></p>\n<p>命令行出现：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>\n<p>那么我们就可以在网址上输入<code>http://0.0.0.0:4000</code>去查看效果，检查站点是否正确运行。</p>\n<h1 id=\"Next各种细节\"><a href=\"#Next各种细节\" class=\"headerlink\" title=\"Next各种细节\"></a>Next各种细节</h1><h2 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h2><p>Scheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件（theme/next下的<code>_config.yml</code>），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还有更多的小东西大家可以去<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">Next官方文档</a>看。比如说</p>\n<ul>\n<li>菜单，</li>\n<li>侧栏，</li>\n<li>头像，</li>\n<li>作者昵称，</li>\n<li>站点描述，</li>\n<li>第三方服务等。</li>\n</ul>\n<h2 id=\"Next中foot更改\"><a href=\"#Next中foot更改\" class=\"headerlink\" title=\"Next中foot更改\"></a>Next中foot更改</h2><p><img src=\"/images/foot.jpg\" alt=\"foot\">我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。<br>我们需要打开<code>next</code>下的<code>layout</code>接着打开<code>_partials</code>下的<code>footer.swig</code>。<br>然后我们要把其中红框里的删除。<br><img src=\"/images/foot1.png\" alt=\"foot1\"><br>紧接着我们回到<code>next</code>下，找到<code>languages</code>，打开<code>zh-Hans.yml</code>。<br><img src=\"/images/foot2.png\" alt=\"foot2\"><br>我们可以改成如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\">  powered: \"个人专属 \"</span><br><span class=\"line\">  theme: Adherent</span><br></pre></td></tr></table></figure></p>\n<p>看大家的想法自己随意发挥！<br>好啦，我要去研究SEO了！！<br>祝大家建博成功</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git-SSH-Key-生成步骤\"><a href=\"#Git-SSH-Key-生成步骤\" class=\"headerlink\" title=\"Git SSH Key 生成步骤\"></a>Git SSH Key 生成步骤</h1><p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。</p>\n<ul>\n<li><p>第一次使用要设置Git的user name 和email</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.name</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git config --global user.email</span></span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>查看你是否已经拥有密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"><span class=\"built_in\">cd</span> ~/.ssh</span></span><br></pre></td></tr></table></figure>\n<p>如果没有的话就不会有此文件，有的话就会备份删除掉</p>\n</li>\n<li><p>生成密钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C “user.email”</span></span><br></pre></td></tr></table></figure>\n<p>你将会遇到以下情况的处理：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa):  直接回车</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):               直接回车</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.  公钥</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.  私钥</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就是按3次回车，密码为空！<br>最后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p>\n<ul>\n<li>把密钥加到Github或者码云或者Coding的SSH上<br><img src=\"/images/github.png\" alt=\"Github\"><br>我们需要把<code>id_rsa.pub</code>中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。</li>\n<li>测试SSH<br>Github：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@github.com</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@git.oschina.net</span></span><br></pre></td></tr></table></figure></p>\n<p>Coding:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">ssh -T git@coding.net</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>若返回则配置成功<br>github:<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</span><br><span class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class=\"line\">Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<code>Welcome to Git@OSC, yourname!</code><br>Coding：<code>Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]</code><br>那么配置好，我们就可以把Hexo部署到Git上了<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">hexo deploy</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Hexo之Next\"><a href=\"#Hexo之Next\" class=\"headerlink\" title=\"Hexo之Next\"></a>Hexo之Next</h1><ul>\n<li>Hexo有很多主题，有大道至简的<code>maupassant</code> 也有<code>casper</code>还有<code>uno</code>。但是我还是最喜欢<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"noopener\">next</a>的风格。</li>\n</ul>\n<h1 id=\"安装Next\"><a href=\"#安装Next\" class=\"headerlink\" title=\"安装Next\"></a>安装Next</h1><p>安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> your-hexo-site</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure></p>\n<p>还有一种方法是下载稳定版本</p>\n<ul>\n<li>前往Next版本<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">发布页面</a></li>\n<li>一直下拉找到<code>Source code(zip)</code>点击即可下载</li>\n<li>之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为<code>next</code>。</li>\n</ul>\n<h2 id=\"启用Next\"><a href=\"#启用Next\" class=\"headerlink\" title=\"启用Next\"></a>启用Next</h2><ul>\n<li>你需要打开你的站点目录找到<code>_config.yml</code>这个文件，记住不是themes下next中的<code>_config.yml</code>。</li>\n<li>我们需要在站点文件<code>_config.yml</code>中<code>ctrl+F</code>打入<code>theme</code>字段，并将其值改为<code>next</code>：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme:next</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"验证主题是否生成完成\"><a href=\"#验证主题是否生成完成\" class=\"headerlink\" title=\"验证主题是否生成完成\"></a>验证主题是否生成完成</h2><p>首先我们要右击你的站点然后选择<code>Git Bash Here</code>，并开启调试模式。<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo s --debug</span></span><br></pre></td></tr></table></figure></p>\n<p>命令行出现：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p>\n<p>那么我们就可以在网址上输入<code>http://0.0.0.0:4000</code>去查看效果，检查站点是否正确运行。</p>\n<h1 id=\"Next各种细节\"><a href=\"#Next各种细节\" class=\"headerlink\" title=\"Next各种细节\"></a>Next各种细节</h1><h2 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h2><p>Scheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件（theme/next下的<code>_config.yml</code>），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Muse</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">scheme: Mist</span></span><br><span class=\"line\">scheme: Pisces</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还有更多的小东西大家可以去<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"noopener\">Next官方文档</a>看。比如说</p>\n<ul>\n<li>菜单，</li>\n<li>侧栏，</li>\n<li>头像，</li>\n<li>作者昵称，</li>\n<li>站点描述，</li>\n<li>第三方服务等。</li>\n</ul>\n<h2 id=\"Next中foot更改\"><a href=\"#Next中foot更改\" class=\"headerlink\" title=\"Next中foot更改\"></a>Next中foot更改</h2><p><img src=\"/images/foot.jpg\" alt=\"foot\">我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。<br>我们需要打开<code>next</code>下的<code>layout</code>接着打开<code>_partials</code>下的<code>footer.swig</code>。<br>然后我们要把其中红框里的删除。<br><img src=\"/images/foot1.png\" alt=\"foot1\"><br>紧接着我们回到<code>next</code>下，找到<code>languages</code>，打开<code>zh-Hans.yml</code>。<br><img src=\"/images/foot2.png\" alt=\"foot2\"><br>我们可以改成如下：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\">  powered: \"个人专属 \"</span><br><span class=\"line\">  theme: Adherent</span><br></pre></td></tr></table></figure></p>\n<p>看大家的想法自己随意发挥！<br>好啦，我要去研究SEO了！！<br>祝大家建博成功</p>"},{"title":"配置阿里云服务器之Docker服务","date":"2018-04-30T04:00:00.000Z","updated":"2018-05-06T15:51:00.000Z","comments":1,"layout":"post","_content":"\n# 配置阿里云服务器之Docker服务\n\n阿里云搜索容器镜像服务。[网址地址](https://cr.console.aliyun.com/)\n\n具体操作看别人的博文:[博文地址](https://yq.aliyun.com/articles/70756)\n下面讲一点使用docker注意事项和上传至阿里云\n<!--more-->\n## 保存容器\n我们进到容器里一顿`apt update && apt install 巴拉巴拉`\n但是只要`exit`一`pull`就发现所有做的都没了。\n原来我是没`commit`\n命令如下：\n`docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]`\n\nOPTIONS:\n* --author , -a 作者\n* --change , -c 将Docker file指令应用于创建的映像\n* --message , -m 提交信息\n* --pause , -p 在提交期间暂停容器\n## 因为我得是私有镜像仓库可能会有以下情况：\n![docker-push](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png)\n如果出现这种情况那么我们可以直接pull该镜像即可\n\n为什么要有Docker file？\n他可以快速创建自定义的Docker镜像。\n具体就是能让我们自定义一个镜像不会给别人感觉是黑箱操作。我们任何RUN操作都是大家看的见的。他们知道我们这个镜像里装了什么东西，这不就是我们所想要的透明吗！\nDockerfile官网的最佳实践：[最佳实践](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n\n## 配置mongo镜像\n步骤很简单\n1. docker pull mongo\n2. docker tag mongo registry.cn-hangzhou.aliyuncs.com/xxxxxxx\n3. docker run -t --name database --net networkName -p 49155:27017 -v /data/db:/data/db --log-opt max-size=64m --log-opt max-file=10 registry.cn-hangzhou.aliyuncs.com/xxxxx\n  当然你可能会问那个`--net` 是个什么玩意儿。\n  这可是个宝贝哇。\n  当我们有多个容器互相需要连接时，在以前的`docker` 我们是用 `link` 现在我们只需要`docker create network networkName `\n  之后我们只要run相互之间有关联的容器加上`--net networkName` 就ok啦！\n  **当然你有多个容器之间需要互相连接，推荐使用 Docker Compose。**\n## 自定义自己的服务端镜像\n我们就自定义一个跑后端的吧\n1. docker pull node:8.9.4-alpine   //该镜像体积很小\n2. docker tag node registry.cn-hangzhou.aliyuncs.com/xxxxxxx\n3. 写个Dockerfile吧！\n```shell\nFROM registry.cn-hangzhou.aliyuncs.com/xxxxx\n\nRUN mkdir -p /usr/src/app\n\nCOPY . /usr/src/app\n\nWORKDIR /usr/src/app\n\nCMD npm run start:server\n\nEXPOSE 4040\n```\n4. 然后写点`docker run balbalbal`啊之类的脚本这样我们就能很方便的使用啦。\n## 遇到的一些小问题\n![image:12467E92-6292-4307-AFAA-5085E0CF5E43-737-000068B410D30946/docker-mongo-url.png](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/docker-mongo-url.png)\n这种情况我去Stack Overflow上瞅了瞅。就是一天！！！！\n发现一个0赞的答案。。。我把。。。。\n```javascript\n'mongodb://127.0.0.1:27017'\nto\n'mongodb://database:27017'\n// 容器名\n```\n\n他居然就work了。。。。\n我真的是。。。","source":"_posts/配置阿里云服务器之Docker服务.md","raw":"---\ntitle: 配置阿里云服务器之Docker服务\ndate: 2018-04-30 12:00:00\nupdated: 2018-05-06 23:51:00\ncomments: true\nlayout: post\ntags: [docker]\ncategories: [阿里云服务的使用、docker]\n---\n\n# 配置阿里云服务器之Docker服务\n\n阿里云搜索容器镜像服务。[网址地址](https://cr.console.aliyun.com/)\n\n具体操作看别人的博文:[博文地址](https://yq.aliyun.com/articles/70756)\n下面讲一点使用docker注意事项和上传至阿里云\n<!--more-->\n## 保存容器\n我们进到容器里一顿`apt update && apt install 巴拉巴拉`\n但是只要`exit`一`pull`就发现所有做的都没了。\n原来我是没`commit`\n命令如下：\n`docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]`\n\nOPTIONS:\n* --author , -a 作者\n* --change , -c 将Docker file指令应用于创建的映像\n* --message , -m 提交信息\n* --pause , -p 在提交期间暂停容器\n## 因为我得是私有镜像仓库可能会有以下情况：\n![docker-push](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png)\n如果出现这种情况那么我们可以直接pull该镜像即可\n\n为什么要有Docker file？\n他可以快速创建自定义的Docker镜像。\n具体就是能让我们自定义一个镜像不会给别人感觉是黑箱操作。我们任何RUN操作都是大家看的见的。他们知道我们这个镜像里装了什么东西，这不就是我们所想要的透明吗！\nDockerfile官网的最佳实践：[最佳实践](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)\n\n## 配置mongo镜像\n步骤很简单\n1. docker pull mongo\n2. docker tag mongo registry.cn-hangzhou.aliyuncs.com/xxxxxxx\n3. docker run -t --name database --net networkName -p 49155:27017 -v /data/db:/data/db --log-opt max-size=64m --log-opt max-file=10 registry.cn-hangzhou.aliyuncs.com/xxxxx\n  当然你可能会问那个`--net` 是个什么玩意儿。\n  这可是个宝贝哇。\n  当我们有多个容器互相需要连接时，在以前的`docker` 我们是用 `link` 现在我们只需要`docker create network networkName `\n  之后我们只要run相互之间有关联的容器加上`--net networkName` 就ok啦！\n  **当然你有多个容器之间需要互相连接，推荐使用 Docker Compose。**\n## 自定义自己的服务端镜像\n我们就自定义一个跑后端的吧\n1. docker pull node:8.9.4-alpine   //该镜像体积很小\n2. docker tag node registry.cn-hangzhou.aliyuncs.com/xxxxxxx\n3. 写个Dockerfile吧！\n```shell\nFROM registry.cn-hangzhou.aliyuncs.com/xxxxx\n\nRUN mkdir -p /usr/src/app\n\nCOPY . /usr/src/app\n\nWORKDIR /usr/src/app\n\nCMD npm run start:server\n\nEXPOSE 4040\n```\n4. 然后写点`docker run balbalbal`啊之类的脚本这样我们就能很方便的使用啦。\n## 遇到的一些小问题\n![image:12467E92-6292-4307-AFAA-5085E0CF5E43-737-000068B410D30946/docker-mongo-url.png](https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/docker-mongo-url.png)\n这种情况我去Stack Overflow上瞅了瞅。就是一天！！！！\n发现一个0赞的答案。。。我把。。。。\n```javascript\n'mongodb://127.0.0.1:27017'\nto\n'mongodb://database:27017'\n// 容器名\n```\n\n他居然就work了。。。。\n我真的是。。。","slug":"配置阿里云服务器之Docker服务","published":1,"photos":[],"link":"","_id":"cjollnbx6009punfyd9vfl1vp","content":"<h1 id=\"配置阿里云服务器之Docker服务\"><a href=\"#配置阿里云服务器之Docker服务\" class=\"headerlink\" title=\"配置阿里云服务器之Docker服务\"></a>配置阿里云服务器之Docker服务</h1><p>阿里云搜索容器镜像服务。<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">网址地址</a></p>\n<p>具体操作看别人的博文:<a href=\"https://yq.aliyun.com/articles/70756\" target=\"_blank\" rel=\"noopener\">博文地址</a><br>下面讲一点使用docker注意事项和上传至阿里云<br><a id=\"more\"></a></p>\n<h2 id=\"保存容器\"><a href=\"#保存容器\" class=\"headerlink\" title=\"保存容器\"></a>保存容器</h2><p>我们进到容器里一顿<code>apt update &amp;&amp; apt install 巴拉巴拉</code><br>但是只要<code>exit</code>一<code>pull</code>就发现所有做的都没了。<br>原来我是没<code>commit</code><br>命令如下：<br><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p>\n<p>OPTIONS:</p>\n<ul>\n<li>–author , -a 作者</li>\n<li>–change , -c 将Docker file指令应用于创建的映像</li>\n<li>–message , -m 提交信息</li>\n<li>–pause , -p 在提交期间暂停容器<h2 id=\"因为我得是私有镜像仓库可能会有以下情况：\"><a href=\"#因为我得是私有镜像仓库可能会有以下情况：\" class=\"headerlink\" title=\"因为我得是私有镜像仓库可能会有以下情况：\"></a>因为我得是私有镜像仓库可能会有以下情况：</h2><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png\" alt=\"docker-push\"><br>如果出现这种情况那么我们可以直接pull该镜像即可</li>\n</ul>\n<p>为什么要有Docker file？<br>他可以快速创建自定义的Docker镜像。<br>具体就是能让我们自定义一个镜像不会给别人感觉是黑箱操作。我们任何RUN操作都是大家看的见的。他们知道我们这个镜像里装了什么东西，这不就是我们所想要的透明吗！<br>Dockerfile官网的最佳实践：<a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener\">最佳实践</a></p>\n<h2 id=\"配置mongo镜像\"><a href=\"#配置mongo镜像\" class=\"headerlink\" title=\"配置mongo镜像\"></a>配置mongo镜像</h2><p>步骤很简单</p>\n<ol>\n<li>docker pull mongo</li>\n<li>docker tag mongo registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li>\n<li>docker run -t –name database –net networkName -p 49155:27017 -v /data/db:/data/db –log-opt max-size=64m –log-opt max-file=10 registry.cn-hangzhou.aliyuncs.com/xxxxx<br>当然你可能会问那个<code>--net</code> 是个什么玩意儿。<br>这可是个宝贝哇。<br>当我们有多个容器互相需要连接时，在以前的<code>docker</code> 我们是用 <code>link</code> 现在我们只需要<code>docker create network networkName</code><br>之后我们只要run相互之间有关联的容器加上<code>--net networkName</code> 就ok啦！<br><strong>当然你有多个容器之间需要互相连接，推荐使用 Docker Compose。</strong><h2 id=\"自定义自己的服务端镜像\"><a href=\"#自定义自己的服务端镜像\" class=\"headerlink\" title=\"自定义自己的服务端镜像\"></a>自定义自己的服务端镜像</h2>我们就自定义一个跑后端的吧</li>\n<li>docker pull node:8.9.4-alpine   //该镜像体积很小</li>\n<li>docker tag node registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li>\n<li><p>写个Dockerfile吧！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM registry.cn-hangzhou.aliyuncs.com/xxxxx</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">CMD npm run start:server</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4040</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后写点<code>docker run balbalbal</code>啊之类的脚本这样我们就能很方便的使用啦。</p>\n<h2 id=\"遇到的一些小问题\"><a href=\"#遇到的一些小问题\" class=\"headerlink\" title=\"遇到的一些小问题\"></a>遇到的一些小问题</h2><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/docker-mongo-url.png\" alt=\"image:12467E92-6292-4307-AFAA-5085E0CF5E43-737-000068B410D30946/docker-mongo-url.png\"><br>这种情况我去Stack Overflow上瞅了瞅。就是一天！！！！<br>发现一个0赞的答案。。。我把。。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'mongodb://127.0.0.1:27017'</span></span><br><span class=\"line\">to</span><br><span class=\"line\"><span class=\"string\">'mongodb://database:27017'</span></span><br><span class=\"line\"><span class=\"comment\">// 容器名</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>他居然就work了。。。。<br>我真的是。。。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"配置阿里云服务器之Docker服务\"><a href=\"#配置阿里云服务器之Docker服务\" class=\"headerlink\" title=\"配置阿里云服务器之Docker服务\"></a>配置阿里云服务器之Docker服务</h1><p>阿里云搜索容器镜像服务。<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener\">网址地址</a></p>\n<p>具体操作看别人的博文:<a href=\"https://yq.aliyun.com/articles/70756\" target=\"_blank\" rel=\"noopener\">博文地址</a><br>下面讲一点使用docker注意事项和上传至阿里云<br>","more":"</p>\n<h2 id=\"保存容器\"><a href=\"#保存容器\" class=\"headerlink\" title=\"保存容器\"></a>保存容器</h2><p>我们进到容器里一顿<code>apt update &amp;&amp; apt install 巴拉巴拉</code><br>但是只要<code>exit</code>一<code>pull</code>就发现所有做的都没了。<br>原来我是没<code>commit</code><br>命令如下：<br><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p>\n<p>OPTIONS:</p>\n<ul>\n<li>–author , -a 作者</li>\n<li>–change , -c 将Docker file指令应用于创建的映像</li>\n<li>–message , -m 提交信息</li>\n<li>–pause , -p 在提交期间暂停容器<h2 id=\"因为我得是私有镜像仓库可能会有以下情况：\"><a href=\"#因为我得是私有镜像仓库可能会有以下情况：\" class=\"headerlink\" title=\"因为我得是私有镜像仓库可能会有以下情况：\"></a>因为我得是私有镜像仓库可能会有以下情况：</h2><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/dockerpusherror.png\" alt=\"docker-push\"><br>如果出现这种情况那么我们可以直接pull该镜像即可</li>\n</ul>\n<p>为什么要有Docker file？<br>他可以快速创建自定义的Docker镜像。<br>具体就是能让我们自定义一个镜像不会给别人感觉是黑箱操作。我们任何RUN操作都是大家看的见的。他们知道我们这个镜像里装了什么东西，这不就是我们所想要的透明吗！<br>Dockerfile官网的最佳实践：<a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener\">最佳实践</a></p>\n<h2 id=\"配置mongo镜像\"><a href=\"#配置mongo镜像\" class=\"headerlink\" title=\"配置mongo镜像\"></a>配置mongo镜像</h2><p>步骤很简单</p>\n<ol>\n<li>docker pull mongo</li>\n<li>docker tag mongo registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li>\n<li>docker run -t –name database –net networkName -p 49155:27017 -v /data/db:/data/db –log-opt max-size=64m –log-opt max-file=10 registry.cn-hangzhou.aliyuncs.com/xxxxx<br>当然你可能会问那个<code>--net</code> 是个什么玩意儿。<br>这可是个宝贝哇。<br>当我们有多个容器互相需要连接时，在以前的<code>docker</code> 我们是用 <code>link</code> 现在我们只需要<code>docker create network networkName</code><br>之后我们只要run相互之间有关联的容器加上<code>--net networkName</code> 就ok啦！<br><strong>当然你有多个容器之间需要互相连接，推荐使用 Docker Compose。</strong><h2 id=\"自定义自己的服务端镜像\"><a href=\"#自定义自己的服务端镜像\" class=\"headerlink\" title=\"自定义自己的服务端镜像\"></a>自定义自己的服务端镜像</h2>我们就自定义一个跑后端的吧</li>\n<li>docker pull node:8.9.4-alpine   //该镜像体积很小</li>\n<li>docker tag node registry.cn-hangzhou.aliyuncs.com/xxxxxxx</li>\n<li><p>写个Dockerfile吧！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM registry.cn-hangzhou.aliyuncs.com/xxxxx</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /usr/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">CMD npm run start:server</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 4040</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后写点<code>docker run balbalbal</code>啊之类的脚本这样我们就能很方便的使用啦。</p>\n<h2 id=\"遇到的一些小问题\"><a href=\"#遇到的一些小问题\" class=\"headerlink\" title=\"遇到的一些小问题\"></a>遇到的一些小问题</h2><p><img src=\"https://blogaaaaxzh.oss-cn-hangzhou.aliyuncs.com/docker-mongo-url.png\" alt=\"image:12467E92-6292-4307-AFAA-5085E0CF5E43-737-000068B410D30946/docker-mongo-url.png\"><br>这种情况我去Stack Overflow上瞅了瞅。就是一天！！！！<br>发现一个0赞的答案。。。我把。。。。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'mongodb://127.0.0.1:27017'</span></span><br><span class=\"line\">to</span><br><span class=\"line\"><span class=\"string\">'mongodb://database:27017'</span></span><br><span class=\"line\"><span class=\"comment\">// 容器名</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>他居然就work了。。。。<br>我真的是。。。</p>"},{"title":"同源与跨域资源共享","date":"2018-03-23T12:53:35.483Z","comments":1,"layout":"post","_content":"\n说到跨域，我们需要先说说什么是同源策略。\n\n## 同源策略\n\n浏览器安全的基石是\"同源政策\"（[same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy)）。\n\n也就是说要满足以下条件：\n\n>1. 协议相同\n>2. 域名相同\n>3. 端口相同\n\n也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的**源**。\n\n同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。\n\n<!--more-->\n\n如果非同源，共有三种行为受到限制：\n\n> 1. Cookie、LocalStorage 和 IndexDB 无法读取。\n> 2.  DOM 无法获得。\n> 3.  AJAX 请求不能发送。\n\n同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。\n\n但是有些的跨域请求是被允许的比如：\n\n* `<script>`标签\n* `<link>`标签\n* `<img>`标签\n* `<a>`标签\n* `<video>`和 `<audio>`嵌入多媒体资源。\n* `<iframe>`与`<frame>`\n\n## CORS跨域资源共享\n\n那么为了解决这个问题，CORS横空出世！\n\nIE8可以通过XDomainRequest对象支持CORS。\n\n其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。\n\n跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。\n\n\n\n其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。\n\nCORS分简单请求和非简单请求，满足以下条件就为简单请求：\n\n[简单请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n\n## HTTP 响应首部字段\n\n### Access-Control-Allow-Origin\n\n根据Reuqest请求头中的*Origin*来判断该请求的资源是否可以被共享。\n\n### Access-Control-Allow-Credentials\n\n该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。\n\n### Access-Control-Expose-Headers\n\n让服务器把允许浏览器访问的头放入白名单\n\n在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头\n\n### Access-Control-Allow-Credentials\n\n指定了当浏览器的`credentials`设置为true时是否允许浏览器读取response的内容。\n\n所以我们需要**附带身份凭证的请求**:\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true; \n```\n\n我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。\n\n## HTTP请求首部字段\n\n用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。\n\n* Origin\n* Access-Control-Request-Method\n* Access-Control-Request-Headers\n\n> 参考[MDN-HTTP请求首部字段](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)","source":"_posts/跨域资源共享.md","raw":"---\ntitle: 同源与跨域资源共享\ndate: 2018-03-23 20：56\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之旅\n---\n\n说到跨域，我们需要先说说什么是同源策略。\n\n## 同源策略\n\n浏览器安全的基石是\"同源政策\"（[same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy)）。\n\n也就是说要满足以下条件：\n\n>1. 协议相同\n>2. 域名相同\n>3. 端口相同\n\n也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的**源**。\n\n同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。\n\n<!--more-->\n\n如果非同源，共有三种行为受到限制：\n\n> 1. Cookie、LocalStorage 和 IndexDB 无法读取。\n> 2.  DOM 无法获得。\n> 3.  AJAX 请求不能发送。\n\n同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。\n\n但是有些的跨域请求是被允许的比如：\n\n* `<script>`标签\n* `<link>`标签\n* `<img>`标签\n* `<a>`标签\n* `<video>`和 `<audio>`嵌入多媒体资源。\n* `<iframe>`与`<frame>`\n\n## CORS跨域资源共享\n\n那么为了解决这个问题，CORS横空出世！\n\nIE8可以通过XDomainRequest对象支持CORS。\n\n其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。\n\n跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。\n\n\n\n其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。\n\nCORS分简单请求和非简单请求，满足以下条件就为简单请求：\n\n[简单请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)\n\n## HTTP 响应首部字段\n\n### Access-Control-Allow-Origin\n\n根据Reuqest请求头中的*Origin*来判断该请求的资源是否可以被共享。\n\n### Access-Control-Allow-Credentials\n\n该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。\n\n### Access-Control-Expose-Headers\n\n让服务器把允许浏览器访问的头放入白名单\n\n在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头\n\n### Access-Control-Allow-Credentials\n\n指定了当浏览器的`credentials`设置为true时是否允许浏览器读取response的内容。\n\n所以我们需要**附带身份凭证的请求**:\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true; \n```\n\n我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。\n\n## HTTP请求首部字段\n\n用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。\n\n* Origin\n* Access-Control-Request-Method\n* Access-Control-Request-Headers\n\n> 参考[MDN-HTTP请求首部字段](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS)","slug":"跨域资源共享","published":1,"updated":"2018-03-26T13:53:48.550Z","photos":[],"link":"","_id":"cjollnbxb009tunfyh1ophuhn","content":"<p>说到跨域，我们需要先说说什么是同源策略。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>浏览器安全的基石是”同源政策”（<a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">same-origin policy</a>）。</p>\n<p>也就是说要满足以下条件：</p>\n<blockquote>\n<ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ol>\n</blockquote>\n<p>也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。</p>\n<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>\n<a id=\"more\"></a>\n<p>如果非同源，共有三种行为受到限制：</p>\n<blockquote>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n</blockquote>\n<p>同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。</p>\n<p>但是有些的跨域请求是被允许的比如：</p>\n<ul>\n<li><code>&lt;script&gt;</code>标签</li>\n<li><code>&lt;link&gt;</code>标签</li>\n<li><code>&lt;img&gt;</code>标签</li>\n<li><code>&lt;a&gt;</code>标签</li>\n<li><code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>嵌入多媒体资源。</li>\n<li><code>&lt;iframe&gt;</code>与<code>&lt;frame&gt;</code></li>\n</ul>\n<h2 id=\"CORS跨域资源共享\"><a href=\"#CORS跨域资源共享\" class=\"headerlink\" title=\"CORS跨域资源共享\"></a>CORS跨域资源共享</h2><p>那么为了解决这个问题，CORS横空出世！</p>\n<p>IE8可以通过XDomainRequest对象支持CORS。</p>\n<p>其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。</p>\n<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p>\n<p>其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>\n<p>CORS分简单请求和非简单请求，满足以下条件就为简单请求：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">简单请求</a></p>\n<h2 id=\"HTTP-响应首部字段\"><a href=\"#HTTP-响应首部字段\" class=\"headerlink\" title=\"HTTP 响应首部字段\"></a>HTTP 响应首部字段</h2><h3 id=\"Access-Control-Allow-Origin\"><a href=\"#Access-Control-Allow-Origin\" class=\"headerlink\" title=\"Access-Control-Allow-Origin\"></a>Access-Control-Allow-Origin</h3><p>根据Reuqest请求头中的<em>Origin</em>来判断该请求的资源是否可以被共享。</p>\n<h3 id=\"Access-Control-Allow-Credentials\"><a href=\"#Access-Control-Allow-Credentials\" class=\"headerlink\" title=\"Access-Control-Allow-Credentials\"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p>\n<h3 id=\"Access-Control-Expose-Headers\"><a href=\"#Access-Control-Expose-Headers\" class=\"headerlink\" title=\"Access-Control-Expose-Headers\"></a>Access-Control-Expose-Headers</h3><p>让服务器把允许浏览器访问的头放入白名单</p>\n<p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p>\n<h3 id=\"Access-Control-Allow-Credentials-1\"><a href=\"#Access-Control-Allow-Credentials-1\" class=\"headerlink\" title=\"Access-Control-Allow-Credentials\"></a>Access-Control-Allow-Credentials</h3><p>指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。</p>\n<p>所以我们需要<strong>附带身份凭证的请求</strong>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>\n<h2 id=\"HTTP请求首部字段\"><a href=\"#HTTP请求首部字段\" class=\"headerlink\" title=\"HTTP请求首部字段\"></a>HTTP请求首部字段</h2><p>用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p>\n<ul>\n<li>Origin</li>\n<li>Access-Control-Request-Method</li>\n<li>Access-Control-Request-Headers</li>\n</ul>\n<blockquote>\n<p>参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">MDN-HTTP请求首部字段</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>说到跨域，我们需要先说说什么是同源策略。</p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>浏览器安全的基石是”同源政策”（<a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\" target=\"_blank\" rel=\"noopener\">same-origin policy</a>）。</p>\n<p>也就是说要满足以下条件：</p>\n<blockquote>\n<ol>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ol>\n</blockquote>\n<p>也就是说，如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的<strong>源</strong>。</p>\n<p>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。</p>","more":"<p>如果非同源，共有三种行为受到限制：</p>\n<blockquote>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n</blockquote>\n<p>同源策略是对XMLHTTPRequest的一种约束。所以有时候我们想要去获取别的消息，我们需要跨过同源策略。</p>\n<p>但是有些的跨域请求是被允许的比如：</p>\n<ul>\n<li><code>&lt;script&gt;</code>标签</li>\n<li><code>&lt;link&gt;</code>标签</li>\n<li><code>&lt;img&gt;</code>标签</li>\n<li><code>&lt;a&gt;</code>标签</li>\n<li><code>&lt;video&gt;</code>和 <code>&lt;audio&gt;</code>嵌入多媒体资源。</li>\n<li><code>&lt;iframe&gt;</code>与<code>&lt;frame&gt;</code></li>\n</ul>\n<h2 id=\"CORS跨域资源共享\"><a href=\"#CORS跨域资源共享\" class=\"headerlink\" title=\"CORS跨域资源共享\"></a>CORS跨域资源共享</h2><p>那么为了解决这个问题，CORS横空出世！</p>\n<p>IE8可以通过XDomainRequest对象支持CORS。</p>\n<p>其他浏览器我们都可以通过XMLHttpRequest对象支持CORS。</p>\n<p>跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p>\n<p>其实CORS背后的思想就是，使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功，还是应该失败。</p>\n<p>CORS分简单请求和非简单请求，满足以下条件就为简单请求：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">简单请求</a></p>\n<h2 id=\"HTTP-响应首部字段\"><a href=\"#HTTP-响应首部字段\" class=\"headerlink\" title=\"HTTP 响应首部字段\"></a>HTTP 响应首部字段</h2><h3 id=\"Access-Control-Allow-Origin\"><a href=\"#Access-Control-Allow-Origin\" class=\"headerlink\" title=\"Access-Control-Allow-Origin\"></a>Access-Control-Allow-Origin</h3><p>根据Reuqest请求头中的<em>Origin</em>来判断该请求的资源是否可以被共享。</p>\n<h3 id=\"Access-Control-Allow-Credentials\"><a href=\"#Access-Control-Allow-Credentials\" class=\"headerlink\" title=\"Access-Control-Allow-Credentials\"></a>Access-Control-Allow-Credentials</h3><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。</p>\n<h3 id=\"Access-Control-Expose-Headers\"><a href=\"#Access-Control-Expose-Headers\" class=\"headerlink\" title=\"Access-Control-Expose-Headers\"></a>Access-Control-Expose-Headers</h3><p>让服务器把允许浏览器访问的头放入白名单</p>\n<p>在跨域访问时，XMLHttpRequest对象的getResponseHeader()方法只能拿到一些最基本的响应头，Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma，如果要访问其他头，则需要服务器设置本响应头</p>\n<h3 id=\"Access-Control-Allow-Credentials-1\"><a href=\"#Access-Control-Allow-Credentials-1\" class=\"headerlink\" title=\"Access-Control-Allow-Credentials\"></a>Access-Control-Allow-Credentials</h3><p>指定了当浏览器的<code>credentials</code>设置为true时是否允许浏览器读取response的内容。</p>\n<p>所以我们需要<strong>附带身份凭证的请求</strong>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">xhr.withCredentials = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>我们不这样去做处理的话，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。</p>\n<h2 id=\"HTTP请求首部字段\"><a href=\"#HTTP请求首部字段\" class=\"headerlink\" title=\"HTTP请求首部字段\"></a>HTTP请求首部字段</h2><p>用于发起跨域请求的首部字段，其实这些字段都不用我们去手动设置。当我们使用 XMLHttpRequest 对象发起跨域请求时，它们已经被设置就绪。</p>\n<ul>\n<li>Origin</li>\n<li>Access-Control-Request-Method</li>\n<li>Access-Control-Request-Headers</li>\n</ul>\n<blockquote>\n<p>参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS\" target=\"_blank\" rel=\"noopener\">MDN-HTTP请求首部字段</a></p>\n</blockquote>"},{"title":"Promise && Generator && Async","date":"2017-08-01T11:35:44.000Z","comments":1,"layout":"post","_content":"\n# 异步操作\n\n# 回调函数\n\nJavaScript 语言对异步编程的实现，就是回调函数。**所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。**它的英语名字 callback，直译过来就是\"**重新调用**\"。\n\n读取文件进行处理，是这样写的:\n\n```javascript\nfs.readFile('/etc/passwd', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n\n\n<!--more-->\n\n上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。\n\n**为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？**\n\n设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。\n\n```JavaScript\nfs.readFile(filePath, function(err, data) {  \n    if (err) {\n        //handle the error\n    }\n    // use the data object\n});\n```\n\n> 原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。\n\n## 那么我们可以用Promise来解决\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。\n\n```javascript\nfs.readFile(fileA, function (err, data) {\n  fs.readFile(fileB, function (err, data) {\n    // ...\n  });\n});\n```\n\n\n\n如果依次读取多个文件，就会出现多重嵌套。代码就横向发展\n\nPromise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。\n\n```javascript\nvar readFile = require('fs-readfile-promise');\n\nreadFile(fileA)\n.then(function(data){\n  console.log(data.toString());\n})\n.then(function(){\n  return readFile(fileB);\n})\n.then(function(data){\n  console.log(data.toString());\n})\n.catch(function(err) {\n  console.log(err);\n});\n```\n\n\n\n我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。\n\n## 那么我们就要用到Generator函数\n\n我们可以这样去理解协程:\n\n```\ndota2游戏开始了,你开始操刀祈求者--卡尔.\n这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.\n你游戏才玩到一半,但是又不得不去执行你老妈的指令.\n没办法,你只好敲击F12选择了暂停游戏.\n紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.\n你开始了自己的3杀/4杀/5杀之旅,很舒服.\n```\n\n> - 协程A(游戏开始)开始执行\n> - 协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)\n> - (收好后)协程B交还执行权\n> - 协程A(敲击F12游戏继续)恢复执行\n\n用代码来说:\n\n```javascript\nfunction play(){\n  //...\n  var f = yield dota2;\n  //...\n}\n```\n\n上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。\n\n# Generator函数概念\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n```javascript\nfunction* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n```\n\n\n\n其他的概念可以看我上篇[Generator函数概念](http://adherentman.cn/Generator.html)\n\n# Thunk 函数\n\n编译器的\"传名调用\"实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。\n\n```javascript\nfunction f(m){\n  return m * 2;     \n}\n\nf(x + 5);\n\n// 等同于\n\nvar thunk = function () {\n  return x + 5;\n};\n\nfunction f(thunk){\n  return thunk() * 2;\n}\n```\n\n\n\n上面代码中，函数 f 的参数 被thunk函数替换了.\n\n**这就是 Thunk 函数的定义，它是\"传名调用\"的一种实现策略，用来替换某个表达式。**\n\n# 终极武器----Async函数\n\n**异步编程的最高境界，就是根本不用关心它是不是异步。**\n\nasync 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。\n\n**所谓async函数，其实是Generator函数的语法糖。**\n\n前文有一个 Generator 函数，依次读取两个文件。\n\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName){\n  return new Promise(function (resolve, reject){\n    fs.readFile(fileName, function(error, data){\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* (){\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n写成 async 函数，就是下面这样。\n\n```javascript\nvar asyncReadFile = async function (){\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。\n\n## async 函数的优点\n\nasync 函数对 Generator 函数的改进，体现在以下三点。\n\n**（1）内置执行器。** Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n\n```javascript\nvar result = asyncReadFile();\n```\n\n\n\n **(2)** 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.\n\n**（3）更好的语义。** async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n**（4）更广的适用性。** co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n**(5）**返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。\n\n## 实现原理\n\n`async`函数的实现就是将`Generator`函数和自动执行器包装在一个函数中。如下代码：\n\n```JavaScript\nasync function fn(args) {\n    // ...\n}\n\n// 等同于 \nfunction fn(args) {\n  return spawn(function*() {\n    // ...\n  })\n}\n// 自动执行器\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF()\n      } catch(e) {\n        return reject(e)\n      }\n      if (next.done) {\n        return resolve(next.value)\n      }\n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v) })\n      },function(e) {\n        step(function() { return gen.throw(e) })\n      })\n    }\n    step(function() { return gen.next(undefined) })\n  })\n}\n```\n\n## async函数用法\n\n（1）`async`函数返回一个`Promise`对象，可以是`then()`方法添加回调函数。\n（2）当函数执行时，一旦遇到`await()`就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个延迟输出结果的例子：\n\n```JavaScript\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms)\n  console.log(value)\n}\n\n// 延迟500ms后输出 \"Hello World!\"\nasyncPrint('Hello World!', 500)\n```\n\n## Async 后面是一个promise，await 后面也要跟一个promise\n\n## 注意事项\n\n（1）`await`命令后面的`Promise`对象，运行结果可能是`reject`，所以最好把`await`命令放在`try...catch`代码块中。\n\n（2）`await`命令只能用在`async`函数中，用在普通函数中会报错。\n\n（3）`ES6`将`await`增加为保留字。如果使用这个词作为标识符，在`ES5`中是合法的，但是`ES6`会抛出 `SyntaxError`（语法错误）。\n\n# 参考\n\n阮一峰 《ES6标准入门》","source":"_posts/异步.md","raw":"---\ntitle: Promise && Generator && Async\ndate: 2017-08-01 19：45\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之旅\n---\n\n# 异步操作\n\n# 回调函数\n\nJavaScript 语言对异步编程的实现，就是回调函数。**所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。**它的英语名字 callback，直译过来就是\"**重新调用**\"。\n\n读取文件进行处理，是这样写的:\n\n```javascript\nfs.readFile('/etc/passwd', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n\n\n<!--more-->\n\n上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。\n\n**为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？**\n\n设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。\n\n```JavaScript\nfs.readFile(filePath, function(err, data) {  \n    if (err) {\n        //handle the error\n    }\n    // use the data object\n});\n```\n\n> 原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。\n\n## 那么我们可以用Promise来解决\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。\n\n```javascript\nfs.readFile(fileA, function (err, data) {\n  fs.readFile(fileB, function (err, data) {\n    // ...\n  });\n});\n```\n\n\n\n如果依次读取多个文件，就会出现多重嵌套。代码就横向发展\n\nPromise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。\n\n```javascript\nvar readFile = require('fs-readfile-promise');\n\nreadFile(fileA)\n.then(function(data){\n  console.log(data.toString());\n})\n.then(function(){\n  return readFile(fileB);\n})\n.then(function(data){\n  console.log(data.toString());\n})\n.catch(function(err) {\n  console.log(err);\n});\n```\n\n\n\n我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。\n\n## 那么我们就要用到Generator函数\n\n我们可以这样去理解协程:\n\n```\ndota2游戏开始了,你开始操刀祈求者--卡尔.\n这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.\n你游戏才玩到一半,但是又不得不去执行你老妈的指令.\n没办法,你只好敲击F12选择了暂停游戏.\n紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.\n你开始了自己的3杀/4杀/5杀之旅,很舒服.\n```\n\n> - 协程A(游戏开始)开始执行\n> - 协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)\n> - (收好后)协程B交还执行权\n> - 协程A(敲击F12游戏继续)恢复执行\n\n用代码来说:\n\n```javascript\nfunction play(){\n  //...\n  var f = yield dota2;\n  //...\n}\n```\n\n上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。\n\n# Generator函数概念\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n```javascript\nfunction* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n```\n\n\n\n其他的概念可以看我上篇[Generator函数概念](http://adherentman.cn/Generator.html)\n\n# Thunk 函数\n\n编译器的\"传名调用\"实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。\n\n```javascript\nfunction f(m){\n  return m * 2;     \n}\n\nf(x + 5);\n\n// 等同于\n\nvar thunk = function () {\n  return x + 5;\n};\n\nfunction f(thunk){\n  return thunk() * 2;\n}\n```\n\n\n\n上面代码中，函数 f 的参数 被thunk函数替换了.\n\n**这就是 Thunk 函数的定义，它是\"传名调用\"的一种实现策略，用来替换某个表达式。**\n\n# 终极武器----Async函数\n\n**异步编程的最高境界，就是根本不用关心它是不是异步。**\n\nasync 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。\n\n**所谓async函数，其实是Generator函数的语法糖。**\n\n前文有一个 Generator 函数，依次读取两个文件。\n\n```javascript\nvar fs = require('fs');\n\nvar readFile = function (fileName){\n  return new Promise(function (resolve, reject){\n    fs.readFile(fileName, function(error, data){\n      if (error) reject(error);\n      resolve(data);\n    });\n  });\n};\n\nvar gen = function* (){\n  var f1 = yield readFile('/etc/fstab');\n  var f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n写成 async 函数，就是下面这样。\n\n```javascript\nvar asyncReadFile = async function (){\n  var f1 = await readFile('/etc/fstab');\n  var f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n```\n\n\n\n一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。\n\n## async 函数的优点\n\nasync 函数对 Generator 函数的改进，体现在以下三点。\n\n**（1）内置执行器。** Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n\n```javascript\nvar result = asyncReadFile();\n```\n\n\n\n **(2)** 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.\n\n**（3）更好的语义。** async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n**（4）更广的适用性。** co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n**(5）**返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。\n\n## 实现原理\n\n`async`函数的实现就是将`Generator`函数和自动执行器包装在一个函数中。如下代码：\n\n```JavaScript\nasync function fn(args) {\n    // ...\n}\n\n// 等同于 \nfunction fn(args) {\n  return spawn(function*() {\n    // ...\n  })\n}\n// 自动执行器\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF()\n      } catch(e) {\n        return reject(e)\n      }\n      if (next.done) {\n        return resolve(next.value)\n      }\n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v) })\n      },function(e) {\n        step(function() { return gen.throw(e) })\n      })\n    }\n    step(function() { return gen.next(undefined) })\n  })\n}\n```\n\n## async函数用法\n\n（1）`async`函数返回一个`Promise`对象，可以是`then()`方法添加回调函数。\n（2）当函数执行时，一旦遇到`await()`就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个延迟输出结果的例子：\n\n```JavaScript\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms)\n  console.log(value)\n}\n\n// 延迟500ms后输出 \"Hello World!\"\nasyncPrint('Hello World!', 500)\n```\n\n## Async 后面是一个promise，await 后面也要跟一个promise\n\n## 注意事项\n\n（1）`await`命令后面的`Promise`对象，运行结果可能是`reject`，所以最好把`await`命令放在`try...catch`代码块中。\n\n（2）`await`命令只能用在`async`函数中，用在普通函数中会报错。\n\n（3）`ES6`将`await`增加为保留字。如果使用这个词作为标识符，在`ES5`中是合法的，但是`ES6`会抛出 `SyntaxError`（语法错误）。\n\n# 参考\n\n阮一峰 《ES6标准入门》","slug":"异步","published":1,"updated":"2017-12-13T13:42:50.654Z","photos":[],"link":"","_id":"cjollnbxd009xunfyvj4r0ym4","content":"<h1 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h1><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong>它的英语名字 callback，直译过来就是”<strong>重新调用</strong>“。</p>\n<p>读取文件进行处理，是这样写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'/etc/passwd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。</p>\n<p><strong>为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？</strong></p>\n<p>设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle the error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// use the data object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。</p>\n</blockquote>\n<h2 id=\"那么我们可以用Promise来解决\"><a href=\"#那么我们可以用Promise来解决\" class=\"headerlink\" title=\"那么我们可以用Promise来解决\"></a>那么我们可以用Promise来解决</h2><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(fileA, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile(fileB, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果依次读取多个文件，就会出现多重嵌套。代码就横向发展</p>\n<p>Promise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-readfile-promise'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(fileA)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> readFile(fileB);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。</p>\n<h2 id=\"那么我们就要用到Generator函数\"><a href=\"#那么我们就要用到Generator函数\" class=\"headerlink\" title=\"那么我们就要用到Generator函数\"></a>那么我们就要用到Generator函数</h2><p>我们可以这样去理解协程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dota2游戏开始了,你开始操刀祈求者--卡尔.</span><br><span class=\"line\">这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.</span><br><span class=\"line\">你游戏才玩到一半,但是又不得不去执行你老妈的指令.</span><br><span class=\"line\">没办法,你只好敲击F12选择了暂停游戏.</span><br><span class=\"line\">紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.</span><br><span class=\"line\">你开始了自己的3杀/4杀/5杀之旅,很舒服.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>协程A(游戏开始)开始执行</li>\n<li>协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)</li>\n<li>(收好后)协程B交还执行权</li>\n<li>协程A(敲击F12游戏继续)恢复执行</li>\n</ul>\n</blockquote>\n<p>用代码来说:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"keyword\">yield</span> dota2;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。</p>\n<h1 id=\"Generator函数概念\"><a href=\"#Generator函数概念\" class=\"headerlink\" title=\"Generator函数概念\"></a>Generator函数概念</h1><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的概念可以看我上篇<a href=\"http://adherentman.cn/Generator.html\" target=\"_blank\" rel=\"noopener\">Generator函数概念</a></p>\n<h1 id=\"Thunk-函数\"><a href=\"#Thunk-函数\" class=\"headerlink\" title=\"Thunk 函数\"></a>Thunk 函数</h1><p>编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(x + <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">thunk</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thunk() * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数 f 的参数 被thunk函数替换了.</p>\n<p><strong>这就是 Thunk 函数的定义，它是”传名调用”的一种实现策略，用来替换某个表达式。</strong></p>\n<h1 id=\"终极武器—-Async函数\"><a href=\"#终极武器—-Async函数\" class=\"headerlink\" title=\"终极武器—-Async函数\"></a>终极武器—-Async函数</h1><p><strong>异步编程的最高境界，就是根本不用关心它是不是异步。</strong></p>\n<p>async 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。</p>\n<p><strong>所谓async函数，其实是Generator函数的语法糖。</strong></p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>写成 async 函数，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p>\n<h2 id=\"async-函数的优点\"><a href=\"#async-函数的优点\" class=\"headerlink\" title=\"async 函数的优点\"></a>async 函数的优点</h2><p>async 函数对 Generator 函数的改进，体现在以下三点。</p>\n<p><strong>（1）内置执行器。</strong> Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = asyncReadFile();</span><br></pre></td></tr></table></figure>\n<p> <strong>(2)</strong> 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.</p>\n<p><strong>（3）更好的语义。</strong> async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>\n<p><strong>（4）更广的适用性。</strong> co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<p><strong>(5）</strong>返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><code>async</code>函数的实现就是将<code>Generator</code>函数和自动执行器包装在一个函数中。如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自动执行器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = nextF()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v) &#125;)</span><br><span class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e) &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>) &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h2><p>（1）<code>async</code>函数返回一个<code>Promise</code>对象，可以是<code>then()</code>方法添加回调函数。<br>（2）当函数执行时，一旦遇到<code>await()</code>就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>\n<p>下面是一个延迟输出结果的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> timeout(ms)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 延迟500ms后输出 \"Hello World!\"</span></span><br><span class=\"line\">asyncPrint(<span class=\"string\">'Hello World!'</span>, <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async-后面是一个promise，await-后面也要跟一个promise\"><a href=\"#Async-后面是一个promise，await-后面也要跟一个promise\" class=\"headerlink\" title=\"Async 后面是一个promise，await 后面也要跟一个promise\"></a>Async 后面是一个promise，await 后面也要跟一个promise</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>reject</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p>\n<p>（2）<code>await</code>命令只能用在<code>async</code>函数中，用在普通函数中会报错。</p>\n<p>（3）<code>ES6</code>将<code>await</code>增加为保留字。如果使用这个词作为标识符，在<code>ES5</code>中是合法的，但是<code>ES6</code>会抛出 <code>SyntaxError</code>（语法错误）。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>阮一峰 《ES6标准入门》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h1><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong>它的英语名字 callback，直译过来就是”<strong>重新调用</strong>“。</p>\n<p>读取文件进行处理，是这样写的:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'/etc/passwd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","more":"<p>上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。</p>\n<p><strong>为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？</strong></p>\n<p>设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//handle the error</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// use the data object</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。</p>\n</blockquote>\n<h2 id=\"那么我们可以用Promise来解决\"><a href=\"#那么我们可以用Promise来解决\" class=\"headerlink\" title=\"那么我们可以用Promise来解决\"></a>那么我们可以用Promise来解决</h2><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(fileA, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  fs.readFile(fileB, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果依次读取多个文件，就会出现多重嵌套。代码就横向发展</p>\n<p>Promise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-readfile-promise'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">readFile(fileA)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> readFile(fileB);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。</p>\n<h2 id=\"那么我们就要用到Generator函数\"><a href=\"#那么我们就要用到Generator函数\" class=\"headerlink\" title=\"那么我们就要用到Generator函数\"></a>那么我们就要用到Generator函数</h2><p>我们可以这样去理解协程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dota2游戏开始了,你开始操刀祈求者--卡尔.</span><br><span class=\"line\">这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.</span><br><span class=\"line\">你游戏才玩到一半,但是又不得不去执行你老妈的指令.</span><br><span class=\"line\">没办法,你只好敲击F12选择了暂停游戏.</span><br><span class=\"line\">紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.</span><br><span class=\"line\">你开始了自己的3杀/4杀/5杀之旅,很舒服.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>协程A(游戏开始)开始执行</li>\n<li>协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)</li>\n<li>(收好后)协程B交还执行权</li>\n<li>协程A(敲击F12游戏继续)恢复执行</li>\n</ul>\n</blockquote>\n<p>用代码来说:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"keyword\">yield</span> dota2;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。</p>\n<h1 id=\"Generator函数概念\"><a href=\"#Generator函数概念\" class=\"headerlink\" title=\"Generator函数概念\"></a>Generator函数概念</h1><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他的概念可以看我上篇<a href=\"http://adherentman.cn/Generator.html\" target=\"_blank\" rel=\"noopener\">Generator函数概念</a></p>\n<h1 id=\"Thunk-函数\"><a href=\"#Thunk-函数\" class=\"headerlink\" title=\"Thunk 函数\"></a>Thunk 函数</h1><p>编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;     </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(x + <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">thunk</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thunk() * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数 f 的参数 被thunk函数替换了.</p>\n<p><strong>这就是 Thunk 函数的定义，它是”传名调用”的一种实现策略，用来替换某个表达式。</strong></p>\n<h1 id=\"终极武器—-Async函数\"><a href=\"#终极武器—-Async函数\" class=\"headerlink\" title=\"终极武器—-Async函数\"></a>终极武器—-Async函数</h1><p><strong>异步编程的最高境界，就是根本不用关心它是不是异步。</strong></p>\n<p>async 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。</p>\n<p><strong>所谓async函数，其实是Generator函数的语法糖。</strong></p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>写成 async 函数，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p>\n<h2 id=\"async-函数的优点\"><a href=\"#async-函数的优点\" class=\"headerlink\" title=\"async 函数的优点\"></a>async 函数的优点</h2><p>async 函数对 Generator 函数的改进，体现在以下三点。</p>\n<p><strong>（1）内置执行器。</strong> Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = asyncReadFile();</span><br></pre></td></tr></table></figure>\n<p> <strong>(2)</strong> 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.</p>\n<p><strong>（3）更好的语义。</strong> async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>\n<p><strong>（4）更广的适用性。</strong> co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<p><strong>(5）</strong>返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><code>async</code>函数的实现就是将<code>Generator</code>函数和自动执行器包装在一个函数中。如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 自动执行器</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> next = nextF()</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reject(e)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v) &#125;)</span><br><span class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e) &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>) &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h2><p>（1）<code>async</code>函数返回一个<code>Promise</code>对象，可以是<code>then()</code>方法添加回调函数。<br>（2）当函数执行时，一旦遇到<code>await()</code>就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>\n<p>下面是一个延迟输出结果的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> timeout(ms)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 延迟500ms后输出 \"Hello World!\"</span></span><br><span class=\"line\">asyncPrint(<span class=\"string\">'Hello World!'</span>, <span class=\"number\">500</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Async-后面是一个promise，await-后面也要跟一个promise\"><a href=\"#Async-后面是一个promise，await-后面也要跟一个promise\" class=\"headerlink\" title=\"Async 后面是一个promise，await 后面也要跟一个promise\"></a>Async 后面是一个promise，await 后面也要跟一个promise</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>reject</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p>\n<p>（2）<code>await</code>命令只能用在<code>async</code>函数中，用在普通函数中会报错。</p>\n<p>（3）<code>ES6</code>将<code>await</code>增加为保留字。如果使用这个词作为标识符，在<code>ES5</code>中是合法的，但是<code>ES6</code>会抛出 <code>SyntaxError</code>（语法错误）。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>阮一峰 《ES6标准入门》</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjollnbkq0003unfybmd0qqo7","category_id":"cjollnbla0006unfy7a859659","_id":"cjollnbm3000hunfyi8lv7a1k"},{"post_id":"cjollnbl40005unfyqj1rb3kn","category_id":"cjollnblv000dunfyb33zp55y","_id":"cjollnbma000nunfyitfc7i7z"},{"post_id":"cjollnblk0009unfytd20jzv9","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbmh000sunfybwk25pks"},{"post_id":"cjollnblr000bunfyf714xcph","category_id":"cjollnbmb000ounfyuigzopjn","_id":"cjollnbmr0010unfyregscyra"},{"post_id":"cjollnblt000cunfyhwqje51x","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbn00017unfyufig8eoz"},{"post_id":"cjollnblw000funfy7giuanrr","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbnq001dunfykxnz1tnj"},{"post_id":"cjollnbmw0014unfyg0hwgqwi","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbnw001iunfycms6conw"},{"post_id":"cjollnblz000gunfysl0jy20p","category_id":"cjollnbmz0016unfy7bi97c4y","_id":"cjollnbo4001munfyxsryuc5d"},{"post_id":"cjollnbnw001junfyyc2sgb1e","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbof001tunfynoxeedd6"},{"post_id":"cjollnbm5000lunfyhwr8lc3w","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnboo001yunfy5djnxq1y"},{"post_id":"cjollnbm8000munfyyv24ydhf","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbor0022unfyjlp0sfyi"},{"post_id":"cjollnbod001sunfya5ogbjkf","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnboz0026unfy8lqfhi10"},{"post_id":"cjollnbon001xunfyedzwqv3y","category_id":"cjollnbmb000ounfyuigzopjn","_id":"cjollnbp8002aunfyobtvuc81"},{"post_id":"cjollnbmc000qunfyzvhafpyt","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbph002eunfyy962qlsb"},{"post_id":"cjollnbou0025unfyvdwf084g","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbpk002hunfyr0qlujj1"},{"post_id":"cjollnbmf000runfy9h3gu97a","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbpn002munfym0p8v908"},{"post_id":"cjollnbp00028unfy0uk8w493","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbpr002punfyj7exhhx5"},{"post_id":"cjollnbpa002dunfy83pof69i","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbpv002uunfyy6qskl5d"},{"post_id":"cjollnbmi000vunfyumes9lrw","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbpx002xunfywhrrc4j0"},{"post_id":"cjollnbpj002gunfypo9lpu05","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbq20032unfyaal3nfrg"},{"post_id":"cjollnbpm002lunfyqd5fu0qk","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbq70035unfyd0np4lw4"},{"post_id":"cjollnbmn000xunfywrztm30d","category_id":"cjollnbpl002iunfy4htxizcf","_id":"cjollnbqb0039unfyj2pfj6gm"},{"post_id":"cjollnbpo002ounfyia15w09d","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbqf003dunfy8qn9og5d"},{"post_id":"cjollnbps002tunfyz14u3yna","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbqk003hunfyqmua6ugt"},{"post_id":"cjollnbms0011unfyv5j1f38k","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbqn003lunfyomz8tt39"},{"post_id":"cjollnbpw002wunfyzz9s72e3","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbqu003punfymth03md3"},{"post_id":"cjollnbpy0030unfyzwy4zup0","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbqy003tunfymnelio5j"},{"post_id":"cjollnbn10018unfy1yf72rsq","category_id":"cjollnbpy002zunfylsv9g6no","_id":"cjollnbr7003xunfyqhb04ipm"},{"post_id":"cjollnbnl001bunfy87zy01hy","category_id":"cjollnbpy002zunfylsv9g6no","_id":"cjollnbrd0041unfyey7orjg4"},{"post_id":"cjollnbns001eunfy04z8l4am","category_id":"cjollnbpy002zunfylsv9g6no","_id":"cjollnbrg0044unfycrp4z6bg"},{"post_id":"cjollnbqu003sunfyuh3nj9ui","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbs00049unfyubyxor5m"},{"post_id":"cjollnbo1001lunfyaaqg80mx","category_id":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbs3004cunfy94x29r3o"},{"post_id":"cjollnbo6001qunfyh470zc7o","category_id":"cjollnbr6003wunfyzdzyk03r","_id":"cjollnbs7004hunfy8uw6ulrs"},{"post_id":"cjollnbrw0048unfykh7xnlra","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbsb004kunfyvz7po7ou"},{"post_id":"cjollnbop0020unfy3jeryop8","category_id":"cjollnbrh0045unfysrbibn7p","_id":"cjollnbsj004punfy1ks6iwrh"},{"post_id":"cjollnbq50034unfybvqdmpkw","category_id":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbsk004uunfyi4n2ry4d"},{"post_id":"cjollnbq80037unfybfdgnsyx","category_id":"cjollnbrh0045unfysrbibn7p","_id":"cjollnbsq0050unfyy7rncggl"},{"post_id":"cjollnbso004yunfya9lz7qfd","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbsy0058unfyh477yupb"},{"post_id":"cjollnbqd003cunfyxv8rmk4i","category_id":"cjollnbsk004tunfybx2cbted","_id":"cjollnbt3005dunfydz8719tj"},{"post_id":"cjollnbsv0055unfykqc05ygo","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbt4005gunfyjot8g74y"},{"post_id":"cjollnbqf003funfyb8kuanl4","category_id":"cjollnbsr0052unfyjawdjwl7","_id":"cjollnbt6005lunfyzz2knayg"},{"post_id":"cjollnbql003kunfyhwhkebdo","category_id":"cjollnbsk004tunfybx2cbted","_id":"cjollnbtf005punfylagp36s7"},{"post_id":"cjollnbqp003nunfyfhqyr86o","category_id":"cjollnbr6003wunfyzdzyk03r","_id":"cjollnbtj005vunfyii4gavek"},{"post_id":"cjollnbtf005sunfycueglly4","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbtq0062unfy4o8n6xen"},{"post_id":"cjollnbqz003vunfyqlxjclc1","category_id":"cjollnbtd005ounfyabeg7vqg","_id":"cjollnbts0066unfygzj8gbjc"},{"post_id":"cjollnbr80040unfytt4muytb","category_id":"cjollnbtk005wunfyo6dobtbg","_id":"cjollnbtu006bunfys5jmg5ks"},{"post_id":"cjollnbrd0043unfycrboatlv","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbtz006junfyg9yu0cmb"},{"post_id":"cjollnbtu006cunfy8dycqrjb","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbu3006ounfyil7iy08g"},{"post_id":"cjollnbtw006gunfyy0kioyaw","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbu5006runfyutahmknn"},{"post_id":"cjollnbs1004bunfy6n7f1h3w","category_id":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbua006wunfywa3fawyu"},{"post_id":"cjollnbs1004bunfy6n7f1h3w","category_id":"cjollnbtv006dunfyke7navub","_id":"cjollnbug006zunfy2n9siyqw"},{"post_id":"cjollnbty006iunfykytldnd2","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbui0073unfyvtu8vbzb"},{"post_id":"cjollnbu2006nunfy51n4yo3f","category_id":"cjollnbtk005wunfyo6dobtbg","_id":"cjollnbuk0077unfyk4bwvpmp"},{"post_id":"cjollnbs4004gunfya4mns08d","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbur007bunfypktva5ls"},{"post_id":"cjollnbu3006qunfyn8mhu0kb","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbut007funfy8lh7tsa6"},{"post_id":"cjollnbs8004junfybx8m3rqp","category_id":"cjollnbtd005ounfyabeg7vqg","_id":"cjollnbuw007junfyrle9xadu"},{"post_id":"cjollnbue006yunfyhemifege","category_id":"cjollnbrh0045unfysrbibn7p","_id":"cjollnbv3007nunfyvzo83xkb"},{"post_id":"cjollnbuh0072unfymwmap3wb","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbv5007runfyi6zpadaa"},{"post_id":"cjollnbsg004ounfy2pmpjc1f","category_id":"cjollnbtd005ounfyabeg7vqg","_id":"cjollnbvg007vunfy9h4uybwh"},{"post_id":"cjollnbul007aunfykoxsomyg","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbvi007zunfyoj2e38ma"},{"post_id":"cjollnbsj004runfykt7xbxxd","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbvk0083unfyn3wc36up"},{"post_id":"cjollnbus007eunfyoztjgbjc","category_id":"cjollnbr6003wunfyzdzyk03r","_id":"cjollnbw10087unfy2fu347dk"},{"post_id":"cjollnbuu007iunfydrd67pw0","category_id":"cjollnblv000dunfyb33zp55y","_id":"cjollnbw7008aunfyqbye4dx1"},{"post_id":"cjollnbsk004wunfy8zl5jwu3","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbwa008funfyiqcku6oj"},{"post_id":"cjollnbux007munfyzmj6nouh","category_id":"cjollnblv000dunfyb33zp55y","_id":"cjollnbwc008iunfyfj42so3t"},{"post_id":"cjollnbv4007qunfybdn5lowm","category_id":"cjollnblv000dunfyb33zp55y","_id":"cjollnbwd008nunfyf7im18dp"},{"post_id":"cjollnbsq0051unfy2tu4a6db","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbwf008qunfyrdbayn7t"},{"post_id":"cjollnbvf007uunfyn4fdpm0y","category_id":"cjollnbtq0064unfyk8ybkybc","_id":"cjollnbwh008vunfybtj8y2h5"},{"post_id":"cjollnbvh007yunfyjxthcyhl","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbwj008yunfy8jdym84r"},{"post_id":"cjollnbsw0057unfy8k7lnyrd","category_id":"cjollnbvg007wunfycpkh41ff","_id":"cjollnbwn0092unfygtuqs765"},{"post_id":"cjollnbvl0086unfyjvetb3gx","category_id":"cjollnbsk004tunfybx2cbted","_id":"cjollnbwp0096unfytlcqqb3i"},{"post_id":"cjollnbt2005cunfyut4odv4e","category_id":"cjollnbvk0084unfyoyioo15q","_id":"cjollnbwu009aunfythjiq2d0"},{"post_id":"cjollnbw20089unfypft3y9xe","category_id":"cjollnbnt001funfywd72xfuf","_id":"cjollnbww009eunfyda0fp8o5"},{"post_id":"cjollnbt3005funfyi16dstua","category_id":"cjollnbw8008dunfyrnvoq0h5","_id":"cjollnbwz009iunfyxjd6hpp8"},{"post_id":"cjollnbwe008punfyw1uwk630","category_id":"cjollnblv000dunfyb33zp55y","_id":"cjollnbx2009munfyombsq66d"},{"post_id":"cjollnbt6005kunfypu325yqw","category_id":"cjollnbvk0084unfyoyioo15q","_id":"cjollnbx9009qunfyd24pxdmk"},{"post_id":"cjollnbwg008tunfy52mw5xki","category_id":"cjollnbr6003wunfyzdzyk03r","_id":"cjollnbxc009uunfyl0twi2tu"},{"post_id":"cjollnbwi008xunfyh0dmwudm","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbxe009yunfy12dllibz"},{"post_id":"cjollnbt8005nunfyhjxofevr","category_id":"cjollnbwh008uunfy3ls6l1td","_id":"cjollnbxg00a1unfyyt2uhie9"},{"post_id":"cjollnbwl0091unfyzh9wlfl8","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnbxg00a3unfyoib9poki"},{"post_id":"cjollnbti005uunfyw85z1wc2","category_id":"cjollnbwo0093unfyly871o1h","_id":"cjollnbxi00a6unfy7puxcp8o"},{"post_id":"cjollnbws0099unfy33qjhmod","category_id":"cjollnbrh0045unfysrbibn7p","_id":"cjollnbxi00a9unfyxwrj45pv"},{"post_id":"cjollnbtl005yunfyh3onw8d6","category_id":"cjollnbwo0093unfyly871o1h","_id":"cjollnbxn00acunfy3gbydt8w"},{"post_id":"cjollnbwy009hunfy4q44hj9h","category_id":"cjollnbsk004tunfybx2cbted","_id":"cjollnbxq00afunfyud8lixia"},{"post_id":"cjollnbx0009lunfy6squzprl","category_id":"cjollnbrh0045unfysrbibn7p","_id":"cjollnbxr00aiunfy69agaqms"},{"post_id":"cjollnbtn0061unfyhnza7hbm","category_id":"cjollnbwz009junfymfw7rmzr","_id":"cjollnbxr00alunfy78s0gv29"},{"post_id":"cjollnbxb009tunfyh1ophuhn","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbxs00aounfyzyg1clfu"},{"post_id":"cjollnbxd009xunfyvj4r0ym4","category_id":"cjollnbm4000iunfyhn3ml0vi","_id":"cjollnbxt00arunfyjbw7sla4"},{"post_id":"cjollnbtr0065unfy8goihiu3","category_id":"cjollnbxa009sunfyz162toc5","_id":"cjollnbxt00auunfymowl5n6j"},{"post_id":"cjollnbtt0069unfyl9djuzqi","category_id":"cjollnbqs003ounfy01wysf3z","_id":"cjollnbxu00axunfyup4xwagg"},{"post_id":"cjollnbtt0069unfyl9djuzqi","category_id":"cjollnbxf00a0unfy5al3axoo","_id":"cjollnbxu00b0unfyv6zegy9l"},{"post_id":"cjollnbu8006vunfy0s3r6s5u","category_id":"cjollnbxi00a7unfy798395cl","_id":"cjollnbxv00b3unfywdpveijs"},{"post_id":"cjollnbuj0076unfydp01vd53","category_id":"cjollnbxa009sunfyz162toc5","_id":"cjollnbxv00b5unfyr7nkhecr"},{"post_id":"cjollnbvj0082unfyauhsz7lz","category_id":"cjollnbxr00ajunfye01k4uho","_id":"cjollnbxw00b8unfyuvc35ty8"},{"post_id":"cjollnbw8008eunfytgyenf5g","category_id":"cjollnbxr00ajunfye01k4uho","_id":"cjollnbxw00bbunfyti2ou1i9"},{"post_id":"cjollnbwc008lunfy4mn1z1i4","category_id":"cjollnbxt00awunfy8rmzeutg","_id":"cjollnbxy00beunfy59xz81o5"},{"post_id":"cjollnbwo0095unfydh1t3cec","category_id":"cjollnbp60029unfyl4fet972","_id":"cjollnby000bhunfytp5tjphx"},{"post_id":"cjollnbwo0095unfydh1t3cec","category_id":"cjollnbxv00b2unfyb0e94zl1","_id":"cjollnby900bkunfys9wx6yrl"},{"post_id":"cjollnbwv009dunfyp5yp7gaj","category_id":"cjollnbxw00b9unfy9fyhkx7q","_id":"cjollnbya00bmunfy31vtp5fd"},{"post_id":"cjollnbx6009punfyd9vfl1vp","category_id":"cjollnbxy00bfunfyb29v2zi7","_id":"cjollnbyd00bqunfyi15nui4t"}],"PostTag":[{"post_id":"cjollnblw000funfy7giuanrr","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbm5000kunfy3m7vgx40"},{"post_id":"cjollnbkq0003unfybmd0qqo7","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbmn000wunfy1cw7v2hm"},{"post_id":"cjollnbkq0003unfybmd0qqo7","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbmr000yunfygh6eec5w"},{"post_id":"cjollnbkq0003unfybmd0qqo7","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbmv0013unfywppm2xcw"},{"post_id":"cjollnbkq0003unfybmd0qqo7","tag_id":"cjollnbmb000punfya6nnnzbo","_id":"cjollnbmz0015unfyawbdx9z4"},{"post_id":"cjollnbl40005unfyqj1rb3kn","tag_id":"cjollnbmh000uunfyd5fpg7j2","_id":"cjollnbn3001aunfy66piprpp"},{"post_id":"cjollnbmw0014unfyg0hwgqwi","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbnq001cunfy0k6jxr4i"},{"post_id":"cjollnblk0009unfytd20jzv9","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbnw001hunfy9vxj7lb8"},{"post_id":"cjollnblr000bunfyf714xcph","tag_id":"cjollnbn30019unfyog5zef52","_id":"cjollnbo1001kunfyfcbwio75"},{"post_id":"cjollnbnw001junfyyc2sgb1e","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbo5001punfysq67ekg4"},{"post_id":"cjollnblt000cunfyhwqje51x","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbod001runfyn5wkj5hf"},{"post_id":"cjollnblt000cunfyhwqje51x","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbom001wunfy9in0vtnz"},{"post_id":"cjollnbo6001qunfyh470zc7o","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbop001zunfy2q6bftku"},{"post_id":"cjollnbo6001qunfyh470zc7o","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbou0023unfylsm7c6my"},{"post_id":"cjollnblz000gunfysl0jy20p","tag_id":"cjollnbo4001ounfyn61o9i3a","_id":"cjollnboz0027unfy8b9m571b"},{"post_id":"cjollnbod001sunfya5ogbjkf","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbp9002bunfyfln5y3fs"},{"post_id":"cjollnbod001sunfya5ogbjkf","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbpi002funfypoyxwo6y"},{"post_id":"cjollnbon001xunfyedzwqv3y","tag_id":"cjollnbn30019unfyog5zef52","_id":"cjollnbpl002junfy7styczot"},{"post_id":"cjollnbm5000lunfyhwr8lc3w","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbpo002nunfy5aoc0zy1"},{"post_id":"cjollnbou0025unfyvdwf084g","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbpr002qunfyzfcm54sk"},{"post_id":"cjollnbm8000munfyyv24ydhf","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbpv002vunfygiv4ye0d"},{"post_id":"cjollnbp00028unfy0uk8w493","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbpx002yunfyjayxaoei"},{"post_id":"cjollnbpa002dunfy83pof69i","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbq50033unfypmdy8y8q"},{"post_id":"cjollnbmc000qunfyzvhafpyt","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbq80036unfyvep3x2hg"},{"post_id":"cjollnbpj002gunfypo9lpu05","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbqc003bunfygg7qgwhz"},{"post_id":"cjollnbpm002lunfyqd5fu0qk","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbqf003eunfyjubbhpr6"},{"post_id":"cjollnbmf000runfy9h3gu97a","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbqk003junfy1z5ljer9"},{"post_id":"cjollnbpo002ounfyia15w09d","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbqn003munfyxndf8ys2"},{"post_id":"cjollnbps002tunfyz14u3yna","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbqu003runfy8ewznyju"},{"post_id":"cjollnbpw002wunfyzz9s72e3","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbqz003uunfy15f8se1d"},{"post_id":"cjollnbmi000vunfyumes9lrw","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbr7003yunfy5pik4rbn"},{"post_id":"cjollnbpy0030unfyzwy4zup0","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbrd0042unfyfl0yb271"},{"post_id":"cjollnbmn000xunfywrztm30d","tag_id":"cjollnbq20031unfyr32h8yq0","_id":"cjollnbrv0046unfyeifrlnkn"},{"post_id":"cjollnbms0011unfyv5j1f38k","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbs1004aunfyisnnojt7"},{"post_id":"cjollnbqp003nunfyfhqyr86o","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbs3004dunfyrefbe9j1"},{"post_id":"cjollnbqp003nunfyfhqyr86o","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbs7004iunfyfm5xa4b4"},{"post_id":"cjollnbqu003sunfyuh3nj9ui","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbsf004lunfypgykaw7t"},{"post_id":"cjollnbqu003sunfyuh3nj9ui","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbsj004qunfylwu6vegl"},{"post_id":"cjollnbn10018unfy1yf72rsq","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbsk004sunfywpu0dvsl"},{"post_id":"cjollnbn10018unfy1yf72rsq","tag_id":"cjollnbqu003qunfyopwtdxr4","_id":"cjollnbsn004xunfyqrufvkls"},{"post_id":"cjollnbrd0043unfycrboatlv","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbsp004zunfybxfhld8j"},{"post_id":"cjollnbrd0043unfycrboatlv","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbsu0054unfy3sykz4qn"},{"post_id":"cjollnbrw0048unfykh7xnlra","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbsw0056unfyh3p4f6gt"},{"post_id":"cjollnbnl001bunfy87zy01hy","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbsz005bunfy0non81rx"},{"post_id":"cjollnbnl001bunfy87zy01hy","tag_id":"cjollnbqu003qunfyopwtdxr4","_id":"cjollnbt3005eunfyw8gadjxl"},{"post_id":"cjollnbns001eunfy04z8l4am","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbt6005junfyidqzet36"},{"post_id":"cjollnbns001eunfy04z8l4am","tag_id":"cjollnbqu003qunfyopwtdxr4","_id":"cjollnbt7005munfyjuta2v1c"},{"post_id":"cjollnbsj004runfykt7xbxxd","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbtf005qunfy8mnv4pqs"},{"post_id":"cjollnbsk004wunfy8zl5jwu3","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbth005tunfyrord99ds"},{"post_id":"cjollnbso004yunfya9lz7qfd","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbtk005xunfybvy73x63"},{"post_id":"cjollnbo1001lunfyaaqg80mx","tag_id":"cjollnbsk004vunfy47tp2rdg","_id":"cjollnbtm0060unfy7dp3mz2o"},{"post_id":"cjollnbsq0051unfy2tu4a6db","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbtq0063unfy0gren8vh"},{"post_id":"cjollnbsq0051unfy2tu4a6db","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbtt0068unfy6edad0qh"},{"post_id":"cjollnbsv0055unfykqc05ygo","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbtu006aunfymind54x8"},{"post_id":"cjollnbtf005sunfycueglly4","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbtw006funfyg9ms3zfq"},{"post_id":"cjollnbti005uunfyw85z1wc2","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbty006hunfybfmof5o7"},{"post_id":"cjollnbtl005yunfyh3onw8d6","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbu1006munfy9iimkrl8"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnbsr0053unfy16t09pcv","_id":"cjollnbu3006punfy9nhrbk4j"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnbsz005aunfyhg1s04qz","_id":"cjollnbu7006tunfy5jl4el7q"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbue006xunfyrpcb383q"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnbt5005iunfyhtb97xno","_id":"cjollnbuh0071unfy89t8im6n"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnbtf005runfyhe2nlkt6","_id":"cjollnbui0075unfy5os4yk56"},{"post_id":"cjollnbop0020unfy3jeryop8","tag_id":"cjollnbtm005zunfyvwbgutv3","_id":"cjollnbuk0079unfy1z51ep0u"},{"post_id":"cjollnbtt0069unfyl9djuzqi","tag_id":"cjollnbtt0067unfyskn2wexx","_id":"cjollnbus007dunfyn7je930p"},{"post_id":"cjollnbtt0069unfyl9djuzqi","tag_id":"cjollnbsk004vunfy47tp2rdg","_id":"cjollnbut007hunfytk93e8rl"},{"post_id":"cjollnbtu006cunfy8dycqrjb","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbuw007lunfy765zwfae"},{"post_id":"cjollnbtu006cunfy8dycqrjb","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbv4007punfy6jtb249w"},{"post_id":"cjollnbtw006gunfyy0kioyaw","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbve007tunfyotwf5lqp"},{"post_id":"cjollnbq50034unfybvqdmpkw","tag_id":"cjollnbtt0067unfyskn2wexx","_id":"cjollnbvg007xunfyqv5voknx"},{"post_id":"cjollnbq50034unfybvqdmpkw","tag_id":"cjollnbsk004vunfy47tp2rdg","_id":"cjollnbvi0080unfyqgx6ctg7"},{"post_id":"cjollnbty006iunfykytldnd2","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbvl0085unfy2ud724ja"},{"post_id":"cjollnbq80037unfybfdgnsyx","tag_id":"cjollnbu0006lunfynhrme5gn","_id":"cjollnbw10088unfyjj0se0pq"},{"post_id":"cjollnbq80037unfybfdgnsyx","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbw8008cunfy3g7tbknc"},{"post_id":"cjollnbq80037unfybfdgnsyx","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbwa008gunfyq2cyduf5"},{"post_id":"cjollnbq80037unfybfdgnsyx","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbwc008kunfyuxbzu14i"},{"post_id":"cjollnbu3006qunfyn8mhu0kb","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbwe008ounfym0hr9ari"},{"post_id":"cjollnbu8006vunfy0s3r6s5u","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbwf008sunfyh6zskmh0"},{"post_id":"cjollnbue006yunfyhemifege","tag_id":"cjollnbmh000uunfyd5fpg7j2","_id":"cjollnbwi008wunfyvzjt9bhu"},{"post_id":"cjollnbuh0072unfymwmap3wb","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbwk0090unfydx97dsqz"},{"post_id":"cjollnbuj0076unfydp01vd53","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbwo0094unfydsi55iwu"},{"post_id":"cjollnbuj0076unfydp01vd53","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbwq0098unfy92p7s22c"},{"post_id":"cjollnbqd003cunfyxv8rmk4i","tag_id":"cjollnbu8006uunfy96zdu7w0","_id":"cjollnbwu009cunfyu6kaajv7"},{"post_id":"cjollnbqd003cunfyxv8rmk4i","tag_id":"cjollnbui0074unfyjlj94l8u","_id":"cjollnbwx009gunfyn3j77wvm"},{"post_id":"cjollnbul007aunfykoxsomyg","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbwz009kunfyaw2958ve"},{"post_id":"cjollnbus007eunfyoztjgbjc","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbx5009nunfy4n63fej4"},{"post_id":"cjollnbqf003funfyb8kuanl4","tag_id":"cjollnbur007cunfydiptp4e2","_id":"cjollnbxa009runfyv6477vqp"},{"post_id":"cjollnbql003kunfyhwhkebdo","tag_id":"cjollnbu8006uunfy96zdu7w0","_id":"cjollnbxc009vunfyi59j16js"},{"post_id":"cjollnbv4007qunfybdn5lowm","tag_id":"cjollnbmh000uunfyd5fpg7j2","_id":"cjollnbxf009zunfyo9370xrp"},{"post_id":"cjollnbqz003vunfyqlxjclc1","tag_id":"cjollnbv7007sunfy0zml7ikl","_id":"cjollnbxg00a2unfykmk6t3ut"},{"post_id":"cjollnbvh007yunfyjxthcyhl","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbxh00a5unfybuxon2hm"},{"post_id":"cjollnbvl0086unfyjvetb3gx","tag_id":"cjollnbu8006uunfy96zdu7w0","_id":"cjollnbxi00a8unfy5rad0t5a"},{"post_id":"cjollnbr80040unfytt4muytb","tag_id":"cjollnbvi0081unfy1rb0qn3u","_id":"cjollnbxl00abunfyal77pb9f"},{"post_id":"cjollnbw20089unfypft3y9xe","tag_id":"cjollnbol001vunfy91ejtfwk","_id":"cjollnbxp00aeunfyvj21fepr"},{"post_id":"cjollnbs1004bunfy6n7f1h3w","tag_id":"cjollnbsk004vunfy47tp2rdg","_id":"cjollnbxq00ahunfyvoc2is3x"},{"post_id":"cjollnbs1004bunfy6n7f1h3w","tag_id":"cjollnbwc008junfytdau07gv","_id":"cjollnbxr00akunfy4i8o3bwm"},{"post_id":"cjollnbs4004gunfya4mns08d","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbxr00anunfy11fufnwf"},{"post_id":"cjollnbs4004gunfya4mns08d","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbxs00apunfyampvpku4"},{"post_id":"cjollnbs4004gunfya4mns08d","tag_id":"cjollnbwf008runfyainrwb3j","_id":"cjollnbxt00asunfyi1shknpf"},{"post_id":"cjollnbwi008xunfyh0dmwudm","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbxt00avunfymw83uus7"},{"post_id":"cjollnbwl0091unfyzh9wlfl8","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbxu00ayunfyx7j2m7lz"},{"post_id":"cjollnbs8004junfybx8m3rqp","tag_id":"cjollnbv7007sunfy0zml7ikl","_id":"cjollnbxu00b1unfy4xvzkusr"},{"post_id":"cjollnbwo0095unfydh1t3cec","tag_id":"cjollnbps002sunfyn5qd9wd4","_id":"cjollnbxv00b4unfy6wdcgxek"},{"post_id":"cjollnbws0099unfy33qjhmod","tag_id":"cjollnbu0006lunfynhrme5gn","_id":"cjollnbxw00b7unfycsv4so3r"},{"post_id":"cjollnbws0099unfy33qjhmod","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbxw00baunfypatdvfjk"},{"post_id":"cjollnbsg004ounfy2pmpjc1f","tag_id":"cjollnbv7007sunfy0zml7ikl","_id":"cjollnbxx00bdunfym2nhuewf"},{"post_id":"cjollnbwy009hunfy4q44hj9h","tag_id":"cjollnbu8006uunfy96zdu7w0","_id":"cjollnby000bgunfyctyu5pbm"},{"post_id":"cjollnbwy009hunfy4q44hj9h","tag_id":"cjollnbui0074unfyjlj94l8u","_id":"cjollnby400bjunfyo18u2e0w"},{"post_id":"cjollnbsw0057unfy8k7lnyrd","tag_id":"cjollnbwx009funfybbckr3u7","_id":"cjollnby900blunfy6u3qdakf"},{"post_id":"cjollnbx0009lunfy6squzprl","tag_id":"cjollnbu0006lunfynhrme5gn","_id":"cjollnbyc00bounfygqq0lewx"},{"post_id":"cjollnbx0009lunfy6squzprl","tag_id":"cjollnbm4000junfyq0flwyuh","_id":"cjollnbyd00bpunfydb3be6z8"},{"post_id":"cjollnbx6009punfyd9vfl1vp","tag_id":"cjollnbu8006uunfy96zdu7w0","_id":"cjollnbye00bsunfynzofimxy"},{"post_id":"cjollnbt2005cunfyut4odv4e","tag_id":"cjollnbwf008runfyainrwb3j","_id":"cjollnbye00btunfykjztp10g"},{"post_id":"cjollnbxb009tunfyh1ophuhn","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbye00bvunfyk40xw9c7"},{"post_id":"cjollnbxd009xunfyvj4r0ym4","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbyg00bwunfymjzdorhz"},{"post_id":"cjollnbxd009xunfyvj4r0ym4","tag_id":"cjollnblv000eunfy5xay6xll","_id":"cjollnbyr00byunfyb21fj2sh"},{"post_id":"cjollnbt3005funfyi16dstua","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbys00bzunfyx5z1njkc"},{"post_id":"cjollnbt3005funfyi16dstua","tag_id":"cjollnbxc009wunfyfni9f6cx","_id":"cjollnbys00c0unfykhgham9z"},{"post_id":"cjollnbt6005kunfypu325yqw","tag_id":"cjollnbwf008runfyainrwb3j","_id":"cjollnbys00c2unfytpzushsp"},{"post_id":"cjollnbt8005nunfyhjxofevr","tag_id":"cjollnbxj00aaunfyu9i1um8n","_id":"cjollnbyu00c3unfyrr5nixg2"},{"post_id":"cjollnbtn0061unfyhnza7hbm","tag_id":"cjollnbxq00agunfy5z8ktxfb","_id":"cjollnbyy00c4unfyoow5n8uf"},{"post_id":"cjollnbtr0065unfy8goihiu3","tag_id":"cjollnbxr00amunfyg7apg7u0","_id":"cjollnbyy00c5unfy1qhj1093"},{"post_id":"cjollnbu2006nunfy51n4yo3f","tag_id":"cjollnbvi0081unfy1rb0qn3u","_id":"cjollnbyy00c6unfy0j313jp0"},{"post_id":"cjollnbuu007iunfydrd67pw0","tag_id":"cjollnbxu00azunfyxu5waxgt","_id":"cjollnbyy00c7unfy3igv3oig"},{"post_id":"cjollnbux007munfyzmj6nouh","tag_id":"cjollnbxu00azunfyxu5waxgt","_id":"cjollnbyy00c8unfyygyrajn5"},{"post_id":"cjollnbvf007uunfyn4fdpm0y","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbyz00c9unfyorj0ypdo"},{"post_id":"cjollnbvf007uunfyn4fdpm0y","tag_id":"cjollnbqk003iunfyy74qrlgs","_id":"cjollnbyz00caunfy8x7gj8rp"},{"post_id":"cjollnbvf007uunfyn4fdpm0y","tag_id":"cjollnbwf008runfyainrwb3j","_id":"cjollnbyz00cbunfy35hq21kr"},{"post_id":"cjollnbvj0082unfyauhsz7lz","tag_id":"cjollnby000biunfy2hxheykv","_id":"cjollnbyz00ccunfyuer8eqia"},{"post_id":"cjollnbw8008eunfytgyenf5g","tag_id":"cjollnby000biunfy2hxheykv","_id":"cjollnbyz00cdunfyx8j1nxhj"},{"post_id":"cjollnbwc008lunfy4mn1z1i4","tag_id":"cjollnbyd00brunfyz5s5avsk","_id":"cjollnbyz00ceunfy4zzxk2ab"},{"post_id":"cjollnbwe008punfyw1uwk630","tag_id":"cjollnbxu00azunfyxu5waxgt","_id":"cjollnbyz00cfunfyjcvw119r"},{"post_id":"cjollnbwg008tunfy52mw5xki","tag_id":"cjollnbyp00bxunfy9ova1ztf","_id":"cjollnbyz00cgunfy1zt873qk"},{"post_id":"cjollnbwg008tunfy52mw5xki","tag_id":"cjollnbtm005zunfyvwbgutv3","_id":"cjollnbz000chunfylgnqery9"},{"post_id":"cjollnbwv009dunfyp5yp7gaj","tag_id":"cjollnble0007unfysmqz0ebn","_id":"cjollnbz000ciunfy4j0ok3d4"},{"post_id":"cjollnbwv009dunfyp5yp7gaj","tag_id":"cjollnbys00c1unfy5qd55504","_id":"cjollnbz000cjunfysnlhlquq"}],"Tag":[{"name":"JavaScript","_id":"cjollnble0007unfysmqz0ebn"},{"name":"node.js","_id":"cjollnblv000eunfy5xay6xll"},{"name":"git","_id":"cjollnbm4000junfyq0flwyuh"},{"name":"php","_id":"cjollnbmb000punfya6nnnzbo"},{"name":"生活","_id":"cjollnbmh000uunfyd5fpg7j2"},{"name":"GraphQL","_id":"cjollnbn30019unfyog5zef52"},{"name":"C++","_id":"cjollnbo4001ounfyn61o9i3a"},{"name":"CSS","_id":"cjollnbol001vunfy91ejtfwk"},{"name":"读书笔记","_id":"cjollnbps002sunfyn5qd9wd4"},{"name":"计算机网络","_id":"cjollnbq20031unfyr32h8yq0"},{"name":"React","_id":"cjollnbqk003iunfyy74qrlgs"},{"name":"Draft.js","_id":"cjollnbqu003qunfyopwtdxr4"},{"name":"数据库","_id":"cjollnbsk004vunfy47tp2rdg"},{"name":"C","_id":"cjollnbsr0053unfy16t09pcv"},{"name":"Java","_id":"cjollnbsz005aunfyhg1s04qz"},{"name":"Python","_id":"cjollnbt5005iunfyhtb97xno"},{"name":"PHP","_id":"cjollnbtf005runfyhe2nlkt6"},{"name":"go","_id":"cjollnbtm005zunfyvwbgutv3"},{"name":"Mongodb","_id":"cjollnbtt0067unfyskn2wexx"},{"name":"hexo","_id":"cjollnbu0006lunfynhrme5gn"},{"name":"docker","_id":"cjollnbu8006uunfy96zdu7w0"},{"name":"Kubernetes","_id":"cjollnbui0074unfyjlj94l8u"},{"name":"Koa2","_id":"cjollnbur007cunfydiptp4e2"},{"name":"React Native","_id":"cjollnbv7007sunfy0zml7ikl"},{"name":"前端工具","_id":"cjollnbvi0081unfy1rb0qn3u"},{"name":"PostgreSQL","_id":"cjollnbwc008junfytdau07gv"},{"name":"Webpack","_id":"cjollnbwf008runfyainrwb3j"},{"name":"Typescript","_id":"cjollnbwx009funfybbckr3u7"},{"name":"Vue.js","_id":"cjollnbxc009wunfyfni9f6cx"},{"name":"Html","_id":"cjollnbxj00aaunfyu9i1um8n"},{"name":"机器学习","_id":"cjollnbxq00agunfy5z8ktxfb"},{"name":"Linux","_id":"cjollnbxr00amunfyg7apg7u0"},{"name":"English","_id":"cjollnbxu00azunfyxu5waxgt"},{"name":"小程序","_id":"cjollnby000biunfy2hxheykv"},{"name":"数据结构与算法","_id":"cjollnbyd00brunfyz5s5avsk"},{"name":"TypeScript","_id":"cjollnbyp00bxunfy9ova1ztf"},{"name":"设计模式","_id":"cjollnbys00c1unfy5qd55504"}]}}