{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/foot.jpg","path":"images/foot.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/2017fazhang.png","path":"images/2017fazhang.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/foot1.png","path":"images/foot1.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/foot2.png","path":"images/foot2.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/qianduan.png","path":"images/qianduan.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/houduan.png","path":"images/houduan.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/DevOps.png","path":"images/DevOps.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d49ae19d22a73addf3f49bd439031d0533fe603d","modified":1503155478000},{"_id":"source/CNAME","hash":"7c83710291696c0dda9cbeee62275b7b8a26f7ec","modified":1492956993000},{"_id":"source/baidu_verify_OzrT2xXp2S.html","hash":"bbbdeae097e2736ba6abbca07d0bef8f90793979","modified":1494132236000},{"_id":"source/googlec48318aba92c2f4e.html","hash":"0ce6f245d022abfe850f23ab097c3c5df9a82589","modified":1494142452000},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1490078350000},{"_id":"themes/next/.DS_Store","hash":"ff47c15a9883b6e043b9968cef59cec56673b279","modified":1500729618000},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1490078350000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1490078350000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1490078350000},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1490078350000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1490078350000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1490078350000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1490078350000},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1490078350000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1490078350000},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1490078350000},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1490078350000},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1490078350000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1490078350000},{"_id":"themes/next/_config.yml","hash":"849b735f6e510113bcdf8cacdd5cc1036a36d6f7","modified":1501312711000},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1490078350000},{"_id":"source/about/index.md","hash":"46bb65bd057a618a8fe7c83e35cbca7d970ef499","modified":1492956014000},{"_id":"source/about/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1493218203000},{"_id":"source/_posts/2017Web程序员技术发展路线图.md","hash":"1c0fd8b5b5f9537f755283fab6f4095f587864d0","modified":1493218130000},{"_id":"source/_posts/.DS_Store","hash":"f59a7785a4c22a7f04e57b8a201732254f26cb0b","modified":1496989951000},{"_id":"source/_posts/CO函数，异步.md","hash":"83b1715f6c7d421fddf29be24c189be5b241dbaa","modified":1503068511000},{"_id":"source/_posts/E-R图.md","hash":"3a389906868e3de3b48f422bb29134665d0fac3a","modified":1500278814000},{"_id":"source/_posts/Generator.md","hash":"2a68ee7d6e1b4f07c1cd9c838c2f6e2f6b5df2d8","modified":1501587509000},{"_id":"source/_posts/Es6箭头函数.md","hash":"1eff1af213136d26d81b1be5451876ffbd53e0d5","modified":1501245714000},{"_id":"source/_posts/Express.md","hash":"0f5d9d50987063a692cc3a0e9984e82c78c32940","modified":1502120479000},{"_id":"source/_posts/GraphQL.md","hash":"7e27325457ba433cb2a364947768577ccf5cf866","modified":1502535055000},{"_id":"source/_posts/Hello World.md","hash":"77a13fbd7b8c42f44c2ee6b8d7dba37e32922ede","modified":1501245750000},{"_id":"source/_posts/JavaScript作用域.md","hash":"f829e56d583e91562c0ee4b6cdee674906b67310","modified":1495431856000},{"_id":"source/_posts/JavaScript函数.md","hash":"649f73c8b4e27a89d2a93c4537b32c4776a33f8a","modified":1502894623000},{"_id":"source/_posts/JavaScript——16道算法题.md","hash":"86430bc3ac1963954d3488e716650f599ab87d1a","modified":1495341436000},{"_id":"source/_posts/JavaScript变量.md","hash":"f92eb5be74f5b9602dc7cfe72de543119c2a8e01","modified":1495792141000},{"_id":"source/_posts/Javascript对象.md","hash":"61cd63713d8306bc28aefe8a888ee4ef591377fa","modified":1502285674000},{"_id":"source/_posts/Node.js+hexo部署博客.md","hash":"6e4e54edb9a79484d72d2bc40dd7e308b89f5d2a","modified":1501245789000},{"_id":"source/_posts/JavaScript闭包.md","hash":"ea00889bf321823216b2cb6aa29d3b4dbdcffac8","modified":1495792044000},{"_id":"source/_posts/JavaScript基本概念copy.md","hash":"d33e32d4240d4079e61eb0df4294a276cef0deb6","modified":1495792157000},{"_id":"source/_posts/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.md","hash":"461c912257311d893befa3f7ba5de7be6bc9b1ab","modified":1493218071000},{"_id":"source/_posts/Node.md","hash":"982ad9b9870c6a406ff7bee341ef77512ca87448","modified":1501245640000},{"_id":"source/_posts/React Native环境配置.md","hash":"4f77a44cd568c327c1c0a210e4bc114d937523c9","modified":1502693720000},{"_id":"source/_posts/Promise.md","hash":"bf97a85d7b17bda2903fe9d3779caded324c4026","modified":1501310516000},{"_id":"source/_posts/React-State与Props的小心思.md","hash":"857b21dcd058b90a8a55635a17600b90a795a6fb","modified":1500907064000},{"_id":"source/_posts/React-Router.md","hash":"e59541bd5527a6f33de0b1d6ebd1fbbf3960ed11","modified":1502693609000},{"_id":"source/_posts/Vue.js小记.md","hash":"48eedf1bef68f547158719ac11e982a450aec7e1","modified":1495787852000},{"_id":"source/_posts/mongodb.md","hash":"8a96def6881216068d007cbc55ddedf4adfdd6a4","modified":1501245424000},{"_id":"source/_posts/git.md","hash":"13ee7104e8f9f9057abfa9dc08cc28048bc89bee","modified":1502363083000},{"_id":"source/_posts/redux.md","hash":"c99dd4c9aa433d59c06cd5428d63256815b9dc47","modified":1501464218000},{"_id":"source/_posts/yewu.md","hash":"ecb125f7cfd6577483b26d616b0f33054bcba620","modified":1501161686000},{"_id":"source/_posts/初入React.md","hash":"c407ec6fee57d36b3e189993364935720601ab68","modified":1500907072000},{"_id":"source/_posts/支付宝小程序.md","hash":"d6890fc79b3e7ccd7d8c876299ace75b4b45d025","modified":1503233656000},{"_id":"source/_posts/前端面试题.md","hash":"c2dc7636ce2e2bd89bad9e6e4bc3e97fb8d66106","modified":1494140269000},{"_id":"source/_posts/异步.md","hash":"015bfaa2f20c3477b5afb621d713fd6e1e89b745","modified":1503068454000},{"_id":"source/_posts/评论功能迁移.md","hash":"ebf72e589e2c4f3874933a0fcda243b03f0c45e7","modified":1501310081000},{"_id":"source/categories/index.md","hash":"214970ddd36a877662fc17aa14e90d2f016e624d","modified":1490101124000},{"_id":"source/guestbook/index.md","hash":"c7dc6965e5e4dea7b81b9da0a9d31ff7cc4c5cb3","modified":1490084936000},{"_id":"source/_posts/配置SSH Key+Next主题以及个性化改动.md","hash":"26654608da0650c791d1904764950a71964517de","modified":1490085988000},{"_id":"source/tags/index.md","hash":"4cafe7f1cd23cd9fbd213b000e8cf10dae5b2020","modified":1490101080000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490078350000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490078328000},{"_id":"themes/next/.git/index","hash":"f42da01a94a2ccdab9195a1726059f2a9848a2a5","modified":1494140834000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1490078350000},{"_id":"themes/next/.git/packed-refs","hash":"a6c089ddbe636f0bbd4b8bf1466df8a5baa08087","modified":1490078350000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1490078350000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1490078350000},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1490078350000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1490078350000},{"_id":"themes/next/source/404.html","hash":"1a6b6737e1388f126b46e689e547d9c77e0aa199","modified":1490084986000},{"_id":"themes/next/source/.DS_Store","hash":"2ce7cf764cf2f2b21eb0221d5a95c294bbae6616","modified":1491887004000},{"_id":"themes/next/scripts/.DS_Store","hash":"a5731119d81749861a294fc01ae0b982ed943cab","modified":1500772217000},{"_id":"themes/next/layout/.DS_Store","hash":"20728815e4511808d07b252e46c6548ec125a08b","modified":1494141887000},{"_id":"themes/next/layout/_layout.swig","hash":"1dc354c74b965827bca18971ce9d3d25a57de96f","modified":1490078350000},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1490078350000},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1490078350000},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1490078350000},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1490078350000},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1490078350000},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1490078350000},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1490078350000},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1490078350000},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1490078350000},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1490078350000},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1490078350000},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1490078350000},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1490078350000},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1490078350000},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1490078350000},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1490078350000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0711265351d8b2e8995ce2f5ceee37aca65a9cf2","modified":1490084890000},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1490078350000},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1490078350000},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1490078350000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1490078352000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1490078352000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1490078352000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490078328000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490078328000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490078328000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490078328000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490078328000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490078328000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490078328000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490078328000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490078328000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490078328000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490078328000},{"_id":"themes/next/.git/logs/HEAD","hash":"81d3d117554a3695502a84c079ebb15677f06d0d","modified":1490078350000},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1490078350000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1490078350000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1490078350000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1490078350000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1490078350000},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1490078350000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1490078352000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1490078352000},{"_id":"themes/next/source/images/1.jpg","hash":"7b3d944143eebcffe3716b09d5218fdfb0bc033f","modified":1490021830000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490078352000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490078352000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490078352000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490078352000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490078352000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490078352000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490078352000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490078352000},{"_id":"themes/next/source/images/foot.jpg","hash":"26ff05810cc21c7c862ff9258b24c3176c0dc19f","modified":1490085260000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490078352000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1490078352000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490078352000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1490078352000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490078350000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490078350000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1490078350000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1490078350000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490078352000},{"_id":"themes/next/layout/_macro/post.swig","hash":"80a6186160c1c1c60d81e3b6be942c24aa2ff276","modified":1490078350000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1490078350000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1490078350000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1490078350000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"22e4450975e9e5090ab97662f0054301416ef74e","modified":1490083758000},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1490078350000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1490078350000},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1490078350000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1490078350000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fe8e5c9f840e8643c95c2c8b4510083aa24c2002","modified":1490078350000},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"fe57e46857718bcaefef1aa6a7df3a92035ce156","modified":1494141033000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1490078350000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1490078350000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1490078350000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1490078350000},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"28afe8ae0c11128aaf3cc4ab1f3c929a1e9f1300","modified":1494141921000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1490078350000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1490078350000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1490078350000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1490078350000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078352000},{"_id":"themes/next/source/images/2017fazhang.png","hash":"91c746ed0a6e2258c632014f1e3aa5efbbc2da74","modified":1490156538000},{"_id":"themes/next/source/images/foot1.png","hash":"9bf9504549e821c8d40e14d3487e67904f5bc4b5","modified":1490085574000},{"_id":"themes/next/source/images/foot2.png","hash":"09125634b4292bdf18919dd504ce451d86b44b04","modified":1490085834000},{"_id":"themes/next/source/images/github.png","hash":"82b0d7ed2e383a3ed51f3606540943f5b7362cc0","modified":1490021830000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078350000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490078350000},{"_id":"themes/next/.git/refs/heads/master","hash":"3eff92199830a0fecad19ac7ba8a61657e8a1f24","modified":1490078350000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1490078352000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1490078352000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1490078352000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1490078352000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1490078352000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1490078352000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490078352000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1490078352000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1490078352000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1490078352000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1490078352000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1490078352000},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1490078352000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1490078352000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1490078352000},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1490078352000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1490078352000},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1490078352000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1490078352000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1490078350000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1490078350000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1490078350000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1490078350000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1490078350000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1490078350000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1490078350000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1490078350000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1490078350000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1490078350000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1490078350000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1490078350000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1490078350000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1490078350000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1490078350000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1490078350000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1490078350000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1490078352000},{"_id":"themes/next/source/images/qianduan.png","hash":"71ba8c2767d784670a5027a5fe33624fcddabbd9","modified":1490156528000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"81d3d117554a3695502a84c079ebb15677f06d0d","modified":1490078350000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1490078350000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1490078352000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1490078352000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1490078352000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1490078352000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1490078352000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dd763e86a3bfd9820e49cffce0d9c593489af9d4","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1490078352000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1490078352000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1490078352000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1490078352000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1490078352000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1490078350000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1490078350000},{"_id":"themes/next/.git/objects/pack/pack-cd5e340d07fa8735669825a4e9223f5c749ca60d.idx","hash":"a83450fe00e24e16a503cca7e3e77b38f9561e88","modified":1490078350000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490078352000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1490078352000},{"_id":"themes/next/source/images/houduan.png","hash":"0ab37ba9715f115a792c192704512d4c99b4472a","modified":1490156548000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490078352000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"81d3d117554a3695502a84c079ebb15677f06d0d","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1490078350000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490078352000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1490078352000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1490078352000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490078352000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490078352000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1490078352000},{"_id":"themes/next/source/images/DevOps.png","hash":"f9012772ddb557bd3d44f9d7443369aab84228f3","modified":1490156650000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1490078352000},{"_id":"themes/next/source/images/alipay.png","hash":"ec60bbf9c1c70ab41ea099914a80ae3ec00a31c3","modified":1490021832000},{"_id":"themes/next/source/images/wechatpay.png","hash":"cc2d0f0d7609f867f3c898d4b0a00e871fe538d8","modified":1490021832000},{"_id":"themes/next/.git/objects/pack/pack-cd5e340d07fa8735669825a4e9223f5c749ca60d.pack","hash":"5233c189d0bc9d3d713edf09a389a11f73793631","modified":1490078350000},{"_id":"public/baidu_urls.txt","hash":"437ac9d40292a72ccf18e3054925566a49cb3da7","modified":1503235036156},{"_id":"public/baidusitemap.xml","hash":"35383ac3f3fe96c9e07257f895d93efa3c4364a7","modified":1503235036186},{"_id":"public/atom.xml","hash":"a5d2c1d84802753908bd01374edfefea10cf5b03","modified":1503235036186},{"_id":"public/search.xml","hash":"7842fc0fffd2ee56b863a213ff553d13eb85ae92","modified":1503235036186},{"_id":"public/sitemap.xml","hash":"9066f93aa3cc56b52de2d93cd4b324812db229c6","modified":1503235036186},{"_id":"public/baidu_verify_OzrT2xXp2S.html","hash":"a9b7913cd352df36418efaa7801e25945cbb225e","modified":1503235037163},{"_id":"public/googlec48318aba92c2f4e.html","hash":"4b743ce30b62a389eb3e76d57a1b9d7a29a25a63","modified":1503235037168},{"_id":"public/about.html","hash":"afd33b65f0dc51ac32dd83bcc21e17396c9d267a","modified":1503235037168},{"_id":"public/categories/index.html","hash":"e0da423ab4e468f173841d2913b3a763281ae941","modified":1503235037168},{"_id":"public/tags/index.html","hash":"3c910932c7c37205a54a642e2e6dac44e127c4b3","modified":1503235037168},{"_id":"public/guestbook/index.html","hash":"aac9cf5b1771195daab9ae8a8d7ce0359c73fb8e","modified":1503235037168},{"_id":"public/CO函数，异步.html","hash":"3da84a7c199d9b749f6806908aedd14205856d53","modified":1503235037168},{"_id":"public/React Native环境配置.html","hash":"8aa481cf5d6423c57a99f04b85319910eadffc47","modified":1503235037168},{"_id":"public/Javascript对象.html","hash":"77f5302b1492ef88ac6871cbc27f943d8cf7449d","modified":1503235037168},{"_id":"public/异步.html","hash":"8b702606c5ab8e15d4fdd0ab541fd58680bccf84","modified":1503235037168},{"_id":"public/redux.html","hash":"0489565af3428ef992e310a19205994f58582c5c","modified":1503235037169},{"_id":"public/Express.html","hash":"2eefbbb62562cc3c5b71ca7929322d35f634ef05","modified":1503235037169},{"_id":"public/JavaScript函数.html","hash":"6070e100be61b731619645e7d3e2b6cd8bad343a","modified":1503235037169},{"_id":"public/Generator.html","hash":"3a893a16909f7bce20e0fd124ddaf7751bdd910e","modified":1503235037169},{"_id":"public/Promise.html","hash":"92e438b3d13deb7d62266b9c1f66e018a1597c5f","modified":1503235037169},{"_id":"public/Node.html","hash":"c8683e5d1f164ceeeba7d68f5231299349f59e6e","modified":1503235037169},{"_id":"public/mongodb.html","hash":"1fe102e76bbcdec6a233de6f552b09120d8863e7","modified":1503235037169},{"_id":"public/yewu.html","hash":"0c24f8fa7f828c9fcf8b1a503bd6fa23f6a1ece1","modified":1503235037169},{"_id":"public/git.html","hash":"1683e7bb72f31255e1509c6cde6d456065240602","modified":1503235037169},{"_id":"public/评论功能迁移.html","hash":"43a3aba12a05428711153bb51f2a291dc7f68b3a","modified":1503235037169},{"_id":"public/GraphQL.html","hash":"f31d255817e40e96c516b37635a085b8ba2fe081","modified":1503235037169},{"_id":"public/React-Router.html","hash":"aacb270795fc5cb4003d98868bf254db8bc62053","modified":1503235037169},{"_id":"public/E-R图.html","hash":"04df0aa9ff7ff295b75c0342b07b255e4e4b0bdd","modified":1503235037169},{"_id":"public/React-State与Props的小心思.html","hash":"c4448a9e341e95d616c76cf06bfaa6776de04f70","modified":1503235037169},{"_id":"public/JavaScript闭包.html","hash":"39f12672c255fa9847dc9e04ecd765ebe985379b","modified":1503235037169},{"_id":"public/JavaScript作用域.html","hash":"417b68f38869f227867eb46ef90adbac9cb90a42","modified":1503235037169},{"_id":"public/JavaScript——16道算法题.html","hash":"b761cab8a009985fa48a25016b5ede2699a54c6d","modified":1503235037169},{"_id":"public/前端面试题.html","hash":"fde6c41466ce106f5545d7084f67f69322126e39","modified":1503235037170},{"_id":"public/Vue.js小记.html","hash":"e9940761c0e4f48c1c408de502d1ca9fcb0edce4","modified":1503235037170},{"_id":"public/初入React.html","hash":"29cad1527e80eea40c76af5d55852e267a431c0f","modified":1503235037170},{"_id":"public/Es6箭头函数.html","hash":"8791b746a52b5ead110d5b88e90c7cb4b8f3fb50","modified":1503235037170},{"_id":"public/JavaScript变量.html","hash":"d77b394c4f257a6b320fa1684792acbc9b86bdbe","modified":1503235037170},{"_id":"public/JavaScript基本概念copy.html","hash":"fcdf4e69a7eda52e9afd3e59b3240913137c8902","modified":1503235037170},{"_id":"public/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.html","hash":"242ecbd172141b36793f4b0430cf68e05c445469","modified":1503235037170},{"_id":"public/2017Web程序员技术发展路线图.html","hash":"b4d1f21ac379d89d3d51486439481b7ea6a221dd","modified":1503235037170},{"_id":"public/配置SSH Key+Next主题以及个性化改动.html","hash":"ccd4ff987eae0d0c2af62ee32edf92f4f661e934","modified":1503235037170},{"_id":"public/Node.js+hexo部署博客.html","hash":"9f019fdae35f7bc63674a08c681db1d7f27b520a","modified":1503235037170},{"_id":"public/Hello World.html","hash":"f03710c87698b29bcd1f6cc604bf424cd9e91227","modified":1503235037170},{"_id":"public/archives/index.html","hash":"13bfb83b502d16b5485315916d8c048e3f8f3fc3","modified":1503235037170},{"_id":"public/archives/page/2/index.html","hash":"b9b9649b2c932692a5dfc3a7a0d4a45b5ff52fce","modified":1503235037170},{"_id":"public/archives/page/3/index.html","hash":"73893a4617b87d1df02594e32d4946b36cfafdf2","modified":1503235037170},{"_id":"public/archives/2017/index.html","hash":"a0733602e063d42b90dfe5b440d7c50f108c95fe","modified":1503235037170},{"_id":"public/archives/2017/page/2/index.html","hash":"30d08595d5381e320f9c2f84e3b1e30e959ecfe4","modified":1503235037170},{"_id":"public/archives/2017/page/3/index.html","hash":"a99927097563dd4dbe0a406b5ed585ad1d88d2c1","modified":1503235037170},{"_id":"public/archives/2017/04/index.html","hash":"0114914a79971572cc5c645e9b29bbbbc8c81b86","modified":1503235037170},{"_id":"public/archives/2017/03/index.html","hash":"11789a4c79afff79be5168cfa124dfb21dcee4ff","modified":1503235037170},{"_id":"public/archives/2017/05/index.html","hash":"90b283c10f995be30201281f81c6f2dd127248fd","modified":1503235037170},{"_id":"public/archives/2017/06/index.html","hash":"c725828c51f215b1b75b3886421ae6b47f858320","modified":1503235037170},{"_id":"public/archives/2017/07/index.html","hash":"c9c5da7639083d6448371ce8405d7e834be5d01f","modified":1503235037171},{"_id":"public/archives/2017/page/4/index.html","hash":"53019dbc60702713fc4d2c83dcf4f18d7fabe4cd","modified":1503235037171},{"_id":"public/archives/page/4/index.html","hash":"d25abaad7454653bffde5e7d84b50b1e8d6ddb1b","modified":1503235037171},{"_id":"public/categories/前端/index.html","hash":"43903ea82daed573b8358ded4c63585b67d01fc6","modified":1503235037171},{"_id":"public/categories/Javascript修仙之路/index.html","hash":"320145e00057ff6af9a6dda2c61ee8e6c3be1463","modified":1503235037171},{"_id":"public/archives/2017/07/page/2/index.html","hash":"7961611566259d1f6a5813db95b6ccb12b218b34","modified":1503235037171},{"_id":"public/categories/Node-js/index.html","hash":"645adbfe80c4ebd3947caa037c40627a38dbc841","modified":1503235037171},{"_id":"public/categories/GraphQL/index.html","hash":"4d3d481ba3e0dd709257ace35a9b63e6c547feb7","modified":1503235037171},{"_id":"public/categories/Technology/index.html","hash":"d4b276665a3dc32f7a281b11053922d30417443e","modified":1503235037171},{"_id":"public/categories/Javascript基础/index.html","hash":"85ee03c8ff8d41f23b18895314bfeb7449d8acf2","modified":1503235037171},{"_id":"public/categories/数据库/index.html","hash":"a64f38da06db2c8abca39da8e5af0435133a58b4","modified":1503235037171},{"_id":"public/categories/React/index.html","hash":"cfcdade21da9f813ca551e7a07fc53eb1714fe96","modified":1503235037171},{"_id":"public/categories/Vue/index.html","hash":"f4845926e04c24d3bc99ede8cbf042adf6c6122d","modified":1503235037171},{"_id":"public/categories/数据库-Mongodb/index.html","hash":"771dbec8c1fb5b203f479f975308b573be620040","modified":1503235037171},{"_id":"public/categories/git/index.html","hash":"73666eabc781139fed17df2d7feb10aecedaf8ec","modified":1503235037171},{"_id":"public/index.html","hash":"9d53cd8d2d90151c39fb1b013f5d11eb148a77ab","modified":1503235037171},{"_id":"public/page/2/index.html","hash":"0075b48ac383b5810456d932d63b8016a06fb84b","modified":1503235037171},{"_id":"public/page/3/index.html","hash":"adf504ba119342eba27ae87682994dfe0449ae09","modified":1503235037171},{"_id":"public/tags/JavaScript/index.html","hash":"22f55f5d93506bcefa24e6ed22f19c1bdb330e33","modified":1503235037171},{"_id":"public/page/4/index.html","hash":"1e36dc608803ff9e4f0dcc94dc0da09de44032d4","modified":1503235037171},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"20a9c69947d18a136b3a0f1903df6f46bab7a57b","modified":1503235037171},{"_id":"public/支付宝小程序.html","hash":"d96529c602550bb4a872674604cad2bb8e95d1cd","modified":1503235037255},{"_id":"public/categories/小程序/index.html","hash":"a4c3c8b8d161a4fa5ece238cc8d306b3c748602c","modified":1503235037256},{"_id":"public/tags/node-js/index.html","hash":"539b85db9761de6b2cee0dec1a204e26ddb7e394","modified":1503235037256},{"_id":"public/archives/2017/08/index.html","hash":"6d219cc91ed1752f1905c49cf0e322786e539cc0","modified":1503235037256},{"_id":"public/tags/git/index.html","hash":"06ca11706242335c085a77e7a4689c3b8cd313f3","modified":1503235037256},{"_id":"public/tags/php/index.html","hash":"4d1379b511221fe24107e9681382dd2470cfa789","modified":1503235037256},{"_id":"public/tags/数据库/index.html","hash":"f58ca1bde16ac0ee4464461147736b0a7f926d85","modified":1503235037256},{"_id":"public/tags/C/index.html","hash":"1aaee233c937cae73a927fe8acfc335a04cc7b78","modified":1503235037256},{"_id":"public/tags/GraphQL/index.html","hash":"2a3cde11c90fe4708320ac5d324e7af41b58b644","modified":1503235037256},{"_id":"public/tags/Java/index.html","hash":"d3e6da5868758c4eb5e1d76fe044d0a0f677acdd","modified":1503235037257},{"_id":"public/tags/PHP/index.html","hash":"4ce7795252297ec9adcf785c4d001c4f9c15bc25","modified":1503235037257},{"_id":"public/tags/Python/index.html","hash":"e02a65c50ca1da643528211bb43654d7219c223e","modified":1503235037257},{"_id":"public/tags/JavaScript/page/3/index.html","hash":"073aff5003023fad5a1163da75c33b94696bc4b8","modified":1503235037257},{"_id":"public/tags/javascript/index.html","hash":"b968d97114229ab495697ad22256614e07791a88","modified":1503235037257},{"_id":"public/tags/go/index.html","hash":"a0ac1bd720fe152edd93e109c09a678df9b01f5f","modified":1503235037257},{"_id":"public/tags/hexo/index.html","hash":"626dc36e69565429bb6824e8497eda44633b828d","modified":1503235037257},{"_id":"public/tags/React/index.html","hash":"c5b5bdf48a56c253e804125fac027d7157555f2d","modified":1503235037257},{"_id":"public/tags/React-Native/index.html","hash":"c3e688d894c42118a42e6d99bad5bba271ca13bb","modified":1503235037257},{"_id":"public/tags/Android/index.html","hash":"42c44b51c306d1dc48ac1f423437d176337a9989","modified":1503235037257},{"_id":"public/tags/iOS/index.html","hash":"86cefb2cdb91a7f810fd5c76031681763e84f6f9","modified":1503235037257},{"_id":"public/tags/Webpack/index.html","hash":"4e1d207f54afe1b686f6a7da136f2245ee2511ac","modified":1503235037257},{"_id":"public/tags/Vue-js/index.html","hash":"bb09eb21c7f7351f80504c940233816d8345dcc6","modified":1503235037257},{"_id":"public/tags/Mongodb/index.html","hash":"2db3b5b9001f8c7f49bacdc1519b72d3d0145202","modified":1503235037257},{"_id":"public/categories/React-React-Native-iOS-Android/index.html","hash":"1060e5028bb4baf7decbd1b44eb902b7a4001ff5","modified":1503235037257},{"_id":"public/tags/生活/index.html","hash":"0c985500c288ba23976e7907ef46c4ca6d1dd59d","modified":1503235037257},{"_id":"public/tags/JavaScrip/index.html","hash":"ad6dfc6e05bdd24feebe263b6d34808d0c073182","modified":1503235037265},{"_id":"public/tags/小程序/index.html","hash":"4a5abde97723572d0ca83c2db7afd353db7ea735","modified":1503235037265},{"_id":"public/CNAME","hash":"7c83710291696c0dda9cbeee62275b7b8a26f7ec","modified":1503235037265},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1503235037265},{"_id":"public/images/1.jpg","hash":"7b3d944143eebcffe3716b09d5218fdfb0bc033f","modified":1503235037265},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503235037266},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503235037266},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503235037266},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503235037266},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503235037266},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503235037266},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503235037266},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503235037267},{"_id":"public/images/foot.jpg","hash":"26ff05810cc21c7c862ff9258b24c3176c0dc19f","modified":1503235037267},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503235037267},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503235037267},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503235037267},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503235037267},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503235037267},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503235037267},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503235037267},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503235037267},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503235037267},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503235037267},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503235037268},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503235037268},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503235037268},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503235037268},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503235037268},{"_id":"public/images/2017fazhang.png","hash":"91c746ed0a6e2258c632014f1e3aa5efbbc2da74","modified":1503235038084},{"_id":"public/images/foot1.png","hash":"9bf9504549e821c8d40e14d3487e67904f5bc4b5","modified":1503235038087},{"_id":"public/images/foot2.png","hash":"09125634b4292bdf18919dd504ce451d86b44b04","modified":1503235038102},{"_id":"public/images/github.png","hash":"82b0d7ed2e383a3ed51f3606540943f5b7362cc0","modified":1503235038102},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503235038102},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503235038103},{"_id":"public/404.html","hash":"e462c6ab6787046755e455ef795948385735361d","modified":1503235038110},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503235038110},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503235038110},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1503235038111},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1503235038111},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1503235038111},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1503235038111},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1503235038111},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1503235038111},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1503235038111},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1503235038111},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1503235038111},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1503235038111},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1503235038111},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1503235038111},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1503235038111},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1503235038111},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1503235038111},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1503235038111},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1503235038111},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1503235038111},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1503235038112},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503235038112},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1503235038112},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1503235038112},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1503235038112},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1503235038112},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1503235038112},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1503235038112},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1503235038112},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1503235038112},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1503235038112},{"_id":"public/css/main.css","hash":"c31be6b2a704a756cb72a9368048c9046004ba1a","modified":1503235038112},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1503235038112},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503235038112},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1503235038112},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1503235038112},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1503235038112},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1503235038112},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1503235038112},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1503235038112},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1503235038112},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1503235038113},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503235038113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503235038113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503235038113},{"_id":"public/images/qianduan.png","hash":"71ba8c2767d784670a5027a5fe33624fcddabbd9","modified":1503235038124},{"_id":"public/images/houduan.png","hash":"0ab37ba9715f115a792c192704512d4c99b4472a","modified":1503235038130},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503235038134},{"_id":"public/images/DevOps.png","hash":"f9012772ddb557bd3d44f9d7443369aab84228f3","modified":1503235038137},{"_id":"public/images/alipay.png","hash":"ec60bbf9c1c70ab41ea099914a80ae3ec00a31c3","modified":1503235038156},{"_id":"public/images/wechatpay.png","hash":"cc2d0f0d7609f867f3c898d4b0a00e871fe538d8","modified":1503235038167}],"Category":[{"name":"前端","_id":"cj6krbq390006g3fy64r3n7e6"},{"name":"Javascript修仙之路","_id":"cj6krbq3g000dg3fym16cxvlj"},{"name":"数据库","_id":"cj6krbq3l000jg3fy4xbpcac8"},{"name":"Node.js","_id":"cj6krbq3z0013g3fy2vfkt4mq"},{"name":"GraphQL","_id":"cj6krbq44001cg3fy42wr2044"},{"name":"Technology","_id":"cj6krbq4a001kg3fy8egzb1xu"},{"name":"Javascript基础","_id":"cj6krbq4e001sg3fyxpd2dx2t"},{"name":"React,React Native,iOS,Android","_id":"cj6krbq580038g3fyuo0x6if0"},{"name":"React","_id":"cj6krbq59003fg3fymktmnqfn"},{"name":"Vue","_id":"cj6krbq5b003rg3fy9jtqhok4"},{"name":"数据库,Mongodb","_id":"cj6krbq5b003wg3fy39re394v"},{"name":"git","_id":"cj6krbq5c0041g3fyl65a2vzm"},{"name":"小程序","_id":"cj6krbq5f004fg3fywc2p1me4"}],"Data":[],"Page":[{"_content":"OzrT2xXp2S","source":"baidu_verify_OzrT2xXp2S.html","raw":"OzrT2xXp2S","date":"2017-05-07T04:44:13.000Z","updated":"2017-05-07T04:43:56.000Z","path":"baidu_verify_OzrT2xXp2S.html","title":"","comments":1,"layout":"page","_id":"cj6krbq0v0000g3fyj2a614lf","content":"OzrT2xXp2S","site":{"data":{}},"excerpt":"","more":"OzrT2xXp2S"},{"_content":"google-site-verification: googlec48318aba92c2f4e.html","source":"googlec48318aba92c2f4e.html","raw":"google-site-verification: googlec48318aba92c2f4e.html","date":"2017-05-07T07:34:27.000Z","updated":"2017-05-07T07:34:12.000Z","path":"googlec48318aba92c2f4e.html","title":"","comments":1,"layout":"page","_id":"cj6krbq0y0001g3fylz72nknp","content":"google-site-verification: googlec48318aba92c2f4e.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlec48318aba92c2f4e.html"},{"title":"关于","date":"2017-03-19T05:24:31.000Z","comments":0,"layout":"page","_content":"东扯扯西扯扯！\n<!--more-->\n\n----------\n\n关于我\n---\n\n|               |                        |\n| :-----------: | ---------------------- |\n|  昵称-Nickname  | XuZiHao/壮壮/Adherent    |\n| 属性-Attribute  | 汉子 摩羯                  |\n| 坐标-Coordinate | Beijing     Zhejiang   |\n|  目前-Present   | 大二在读                   |\n|   技能-Skills   | html/css/js/java/linux |\n|  语言-Language  | 普通话/温州话/English        |\n\n\n关于本站\n----\n\n|              |                                          |\n| :----------: | ---------------------------------------- |\n|   博名-Blog    | Aherent                                  |\n| 诞生日-Birthday | 2017-3-18                                |\n| 家庭地址-Address | [www.adherentman.cn](http://www.adherentman.cn/) |\n|  宗旨-Purpose  | 做记录、分享                                   |\n\n\n想法\n--\n\n我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。\n到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。\n大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！\n\n成长路上所得荣誉\n--------\n\n- 幼儿园多次得到小红花\n- 2017／4 北京市蓝桥杯C/C++软件设计大赛 **三等奖**\n- 2016/12 北京吉利学院软件设计大赛（C语言） **一等奖**\n- 2016/11 北京吉利学院网络设计大赛 **二等奖**\n\n\n\n项目\n--\n\n- xxx网站\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-03-19 13:24:31\ncomments: false\nlayout: page\npermalink: about\n---\n东扯扯西扯扯！\n<!--more-->\n\n----------\n\n关于我\n---\n\n|               |                        |\n| :-----------: | ---------------------- |\n|  昵称-Nickname  | XuZiHao/壮壮/Adherent    |\n| 属性-Attribute  | 汉子 摩羯                  |\n| 坐标-Coordinate | Beijing     Zhejiang   |\n|  目前-Present   | 大二在读                   |\n|   技能-Skills   | html/css/js/java/linux |\n|  语言-Language  | 普通话/温州话/English        |\n\n\n关于本站\n----\n\n|              |                                          |\n| :----------: | ---------------------------------------- |\n|   博名-Blog    | Aherent                                  |\n| 诞生日-Birthday | 2017-3-18                                |\n| 家庭地址-Address | [www.adherentman.cn](http://www.adherentman.cn/) |\n|  宗旨-Purpose  | 做记录、分享                                   |\n\n\n想法\n--\n\n我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。\n到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。\n大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！\n\n成长路上所得荣誉\n--------\n\n- 幼儿园多次得到小红花\n- 2017／4 北京市蓝桥杯C/C++软件设计大赛 **三等奖**\n- 2016/12 北京吉利学院软件设计大赛（C语言） **一等奖**\n- 2016/11 北京吉利学院网络设计大赛 **二等奖**\n\n\n\n项目\n--\n\n- xxx网站\n\n\n","updated":"2017-04-23T14:00:14.000Z","path":"about.html","_id":"cj6krbq320003g3fy7njplam4","content":"<p>东扯扯西扯扯！<br><a id=\"more\"></a></p>\n<hr>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">昵称-Nickname</td>\n<td>XuZiHao/壮壮/Adherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">属性-Attribute</td>\n<td>汉子 摩羯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">坐标-Coordinate</td>\n<td>Beijing     Zhejiang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目前-Present</td>\n<td>大二在读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技能-Skills</td>\n<td>html/css/js/java/linux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语言-Language</td>\n<td>普通话/温州话/English</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">博名-Blog</td>\n<td>Aherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">诞生日-Birthday</td>\n<td>2017-3-18</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">家庭地址-Address</td>\n<td><a href=\"http://www.adherentman.cn/\" target=\"_blank\" rel=\"external\">www.adherentman.cn</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">宗旨-Purpose</td>\n<td>做记录、分享</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。<br>到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。<br>大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！</p>\n<h2 id=\"成长路上所得荣誉\"><a href=\"#成长路上所得荣誉\" class=\"headerlink\" title=\"成长路上所得荣誉\"></a>成长路上所得荣誉</h2><ul>\n<li>幼儿园多次得到小红花</li>\n<li>2017／4 北京市蓝桥杯C/C++软件设计大赛 <strong>三等奖</strong></li>\n<li>2016/12 北京吉利学院软件设计大赛（C语言） <strong>一等奖</strong></li>\n<li>2016/11 北京吉利学院网络设计大赛 <strong>二等奖</strong></li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li>xxx网站</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>东扯扯西扯扯！<br>","more":"</p>\n<hr>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">昵称-Nickname</td>\n<td>XuZiHao/壮壮/Adherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">属性-Attribute</td>\n<td>汉子 摩羯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">坐标-Coordinate</td>\n<td>Beijing     Zhejiang</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目前-Present</td>\n<td>大二在读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技能-Skills</td>\n<td>html/css/js/java/linux</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">语言-Language</td>\n<td>普通话/温州话/English</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">博名-Blog</td>\n<td>Aherent</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">诞生日-Birthday</td>\n<td>2017-3-18</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">家庭地址-Address</td>\n<td><a href=\"http://www.adherentman.cn/\" target=\"_blank\" rel=\"external\">www.adherentman.cn</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">宗旨-Purpose</td>\n<td>做记录、分享</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"想法\"><a href=\"#想法\" class=\"headerlink\" title=\"想法\"></a>想法</h2><p>我这人优点少缺点多，爱捣鼓。小时候家里用着256M内存的电脑，为了玩游戏（当时游戏配置基本要512M）我可自行就对电脑硬件、软件查询。在网上寻找可以让游戏流畅的方法。百度了半天，按方法做了半天（删除一些垃圾文件）。游戏还是不流畅，电脑开机倒是速度提高了。从此走上了对电脑一发不可收拾的热情。<br>到了大学毅然的选择了计算机专业。才发现了一个全新的计算机世界。<br>大一看了各种知乎大牛的建议做个属于自己的博客。所以我一直有做一个博客的想法，但是身为懒癌患者又次次觉得困难所以放弃了。终于在2017-3-17晚上灵光一发，早闻hexo的大法，就来建博客来监督日常学习，此博可以把平常自己所遇到bug的解决方案、遇到的问题都可以记录下来，在以后的日子里也许遇到了可以点开自己的记录迅速解决问题，最重要的是！可以与大家分享自己所遇到问题的解决之道！我相信在14亿人口中，总有人会遇到类似的问题！！</p>\n<h2 id=\"成长路上所得荣誉\"><a href=\"#成长路上所得荣誉\" class=\"headerlink\" title=\"成长路上所得荣誉\"></a>成长路上所得荣誉</h2><ul>\n<li>幼儿园多次得到小红花</li>\n<li>2017／4 北京市蓝桥杯C/C++软件设计大赛 <strong>三等奖</strong></li>\n<li>2016/12 北京吉利学院软件设计大赛（C语言） <strong>一等奖</strong></li>\n<li>2016/11 北京吉利学院网络设计大赛 <strong>二等奖</strong></li>\n</ul>\n<h2 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h2><ul>\n<li>xxx网站</li>\n</ul>"},{"title":"分类","date":"2017-03-21T06:54:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-21 14:54:10\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-21T12:58:44.000Z","path":"categories/index.html","layout":"page","_id":"cj6krbq370005g3fy4gmkkti3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言","date":"2017-03-21T08:28:36.000Z","_content":"","source":"guestbook/index.md","raw":"---\ntitle: 留言\ndate: 2017-03-21 16:28:36\n---\n","updated":"2017-03-21T08:28:56.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"cj6krbq3c0009g3fyo3xdqq49","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-21T06:53:51.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-21 14:53:51\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-21T12:58:00.000Z","path":"tags/index.html","layout":"page","_id":"cj6krbq3e000bg3fycwsxljgd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017Web程序员技术发展路线图","date":"2017-03-22T04:31:52.000Z","comments":1,"layout":"post","_content":"这个是国外一个工程师的总结，在知乎上的[前端技术文章精选专栏](https://zhuanlan.zhihu.com/p/25897612)看见的，看着实用转来到这。\n\n> 2017 年 Web 开发工程师技术发展路线图\n\n下面的脑图展现了前端、后端以及 devops 技术栈的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。\n<!--more-->\n\n简介\n==\n![2017发展](/images/2017fazhang.png)\n\n前端开发工程师路线图\n--\n![前端](/images/qianduan.png)\n\n后端开发工程师路线图\n--\n对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！\n![后端](/images/houduan.png)\n\nDevOps\n--\n\n![DevOps](/images/DevOps.png)\n\n[GitHub链接:][1]\n  [1] : kamranahmedse/developer-roadmap","source":"_posts/2017Web程序员技术发展路线图.md","raw":"---\ntitle: 2017Web程序员技术发展路线图\ndate: 2017-03-22 12:31:52\ncomments: true\nlayout: post\ncategories: 前端\ntags: [JavaScript,node.js,git,php]\n---\n这个是国外一个工程师的总结，在知乎上的[前端技术文章精选专栏](https://zhuanlan.zhihu.com/p/25897612)看见的，看着实用转来到这。\n\n> 2017 年 Web 开发工程师技术发展路线图\n\n下面的脑图展现了前端、后端以及 devops 技术栈的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。\n<!--more-->\n\n简介\n==\n![2017发展](/images/2017fazhang.png)\n\n前端开发工程师路线图\n--\n![前端](/images/qianduan.png)\n\n后端开发工程师路线图\n--\n对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！\n![后端](/images/houduan.png)\n\nDevOps\n--\n\n![DevOps](/images/DevOps.png)\n\n[GitHub链接:][1]\n  [1] : kamranahmedse/developer-roadmap","slug":"2017Web程序员技术发展路线图","published":1,"updated":"2017-04-26T14:48:50.000Z","photos":[],"link":"","_id":"cj6krbq2y0002g3fy0xcmum5j","content":"<p>这个是国外一个工程师的总结，在知乎上的<a href=\"https://zhuanlan.zhihu.com/p/25897612\" target=\"_blank\" rel=\"external\">前端技术文章精选专栏</a>看见的，看着实用转来到这。</p>\n<blockquote>\n<p>2017 年 Web 开发工程师技术发展路线图</p>\n</blockquote>\n<p>下面的脑图展现了前端、后端以及 devops 技术栈的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。<br><a id=\"more\"></a></p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"/images/2017fazhang.png\" alt=\"2017发展\"></p>\n<h2 id=\"前端开发工程师路线图\"><a href=\"#前端开发工程师路线图\" class=\"headerlink\" title=\"前端开发工程师路线图\"></a>前端开发工程师路线图</h2><p><img src=\"/images/qianduan.png\" alt=\"前端\"></p>\n<h2 id=\"后端开发工程师路线图\"><a href=\"#后端开发工程师路线图\" class=\"headerlink\" title=\"后端开发工程师路线图\"></a>后端开发工程师路线图</h2><p>对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！<br><img src=\"/images/houduan.png\" alt=\"后端\"></p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p><img src=\"/images/DevOps.png\" alt=\"DevOps\"></p>\n<p>[GitHub链接:][1]<br>  [1] : kamranahmedse/developer-roadmap</p>\n","site":{"data":{}},"excerpt":"<p>这个是国外一个工程师的总结，在知乎上的<a href=\"https://zhuanlan.zhihu.com/p/25897612\" target=\"_blank\" rel=\"external\">前端技术文章精选专栏</a>看见的，看着实用转来到这。</p>\n<blockquote>\n<p>2017 年 Web 开发工程师技术发展路线图</p>\n</blockquote>\n<p>下面的脑图展现了前端、后端以及 devops 技术栈的发展路线图，作者起初做这份技术发展脑图是给初学者和学生们准备的。<br>","more":"</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><img src=\"/images/2017fazhang.png\" alt=\"2017发展\"></p>\n<h2 id=\"前端开发工程师路线图\"><a href=\"#前端开发工程师路线图\" class=\"headerlink\" title=\"前端开发工程师路线图\"></a>前端开发工程师路线图</h2><p><img src=\"/images/qianduan.png\" alt=\"前端\"></p>\n<h2 id=\"后端开发工程师路线图\"><a href=\"#后端开发工程师路线图\" class=\"headerlink\" title=\"后端开发工程师路线图\"></a>后端开发工程师路线图</h2><p>对于后端方面的技术，原作者表示比较喜欢和看好Nodejs、PHP7 以及 Ruby ，我自己觉得在国内来说 Nodejs 和 React Native 是目前很多前端开发工程师热衷探索的技术，而 Ruby 技术在国内始终不温不火，PHP技术比较传统。建议初学者们还是选择岗位更多的技术栈学习，当然如果你有自己喜欢的技术栈，那就可以暂时不考虑市场因素！<br><img src=\"/images/houduan.png\" alt=\"后端\"></p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p><img src=\"/images/DevOps.png\" alt=\"DevOps\"></p>\n<p>[GitHub链接:][1]<br>  [1] : kamranahmedse/developer-roadmap</p>"},{"title":"CO函数，异步","date":"2017-08-18T15:01:50.000Z","comments":1,"layout":"post","_content":"\n# CO函数库\n\n[co 函数库](https://github.com/tj/co)是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。\n\n有一个 Generator 函数，用于依次读取两个文件。\n\n> ```JavaScript\n> var gen = function* (){\n>   var f1 = yield readFile('/etc/fstab');\n>   var f2 = yield readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n**co 函数库可以让你不用编写 Generator 函数的执行器。**\n\n> ```JavaScript\n> var co = require('co');\n> co(gen);\n> ```\n\n上面代码中，Generator 函数只要传入 co 函数，就会自动执行。\n\nco 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n\n> ```JavaScript\n> co(gen).then(function (){\n>   console.log('Generator 函数执行完成');\n> })\n> ```\n\n\n\n## co 函数库的源码\n\nco 就是上面那个自动执行器的扩展，它的[源码](https://github.com/tj/co/blob/master/index.js)只有几十行，非常简单。\n\n首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>   });\n> }\n> ```\n\n在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>     if (typeof gen === 'function') gen = gen.call(ctx);\n>     if (!gen || typeof gen.next !== 'function') return resolve(gen);\n>   });\n> }\n> ```\n\n接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>     if (typeof gen === 'function') gen = gen.call(ctx);\n>     if (!gen || typeof gen.next !== 'function') return resolve(gen);\n>\n>     onFulfilled();\n>     function onFulfilled(res) {\n>       var ret;\n>       try {\n>         ret = gen.next(res);\n>       } catch (e) {\n>         return reject(e);\n>       }\n>       next(ret);\n>     }    \n>   });\n> }\n> ```\n\n最后，就是关键的 next 函数，它会反复调用自身。\n\n> ```JavaScript\n> function next(ret) {\n>   if (ret.done) return resolve(ret.value);\n>   var value = toPromise.call(ctx, ret.value);\n>   if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n>   return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n>         + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n>     }\n> });\n> ```\n\n上面代码中，next 函数的内部代码，一共只有四行命令。\n\n> 第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。\n>\n> 第二行，确保每一步的返回值，是 Promise 对象。\n>\n> 第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。\n>\n> 第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。\n\n## 并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面。\n\n> ```JavaScript\n> co(function* (){\n>   var values = [n1,n2,n3];\n>   yield values.map(somethingAsync);\n> });\n> function* somethingAsync(x){\n>   return y\n> };\n> ```\n\n# ","source":"_posts/CO函数，异步.md","raw":"---\ntitle: CO函数，异步\ndate: 2017-08-18 23：02\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之路\n---\n\n# CO函数库\n\n[co 函数库](https://github.com/tj/co)是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。\n\n有一个 Generator 函数，用于依次读取两个文件。\n\n> ```JavaScript\n> var gen = function* (){\n>   var f1 = yield readFile('/etc/fstab');\n>   var f2 = yield readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n**co 函数库可以让你不用编写 Generator 函数的执行器。**\n\n> ```JavaScript\n> var co = require('co');\n> co(gen);\n> ```\n\n上面代码中，Generator 函数只要传入 co 函数，就会自动执行。\n\nco 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。\n\n> ```JavaScript\n> co(gen).then(function (){\n>   console.log('Generator 函数执行完成');\n> })\n> ```\n\n\n\n## co 函数库的源码\n\nco 就是上面那个自动执行器的扩展，它的[源码](https://github.com/tj/co/blob/master/index.js)只有几十行，非常简单。\n\n首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>   });\n> }\n> ```\n\n在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>     if (typeof gen === 'function') gen = gen.call(ctx);\n>     if (!gen || typeof gen.next !== 'function') return resolve(gen);\n>   });\n> }\n> ```\n\n接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。\n\n> ```JavaScript\n> function co(gen) {\n>   var ctx = this;\n>\n>   return new Promise(function(resolve, reject) {\n>     if (typeof gen === 'function') gen = gen.call(ctx);\n>     if (!gen || typeof gen.next !== 'function') return resolve(gen);\n>\n>     onFulfilled();\n>     function onFulfilled(res) {\n>       var ret;\n>       try {\n>         ret = gen.next(res);\n>       } catch (e) {\n>         return reject(e);\n>       }\n>       next(ret);\n>     }    \n>   });\n> }\n> ```\n\n最后，就是关键的 next 函数，它会反复调用自身。\n\n> ```JavaScript\n> function next(ret) {\n>   if (ret.done) return resolve(ret.value);\n>   var value = toPromise.call(ctx, ret.value);\n>   if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n>   return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n>         + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n>     }\n> });\n> ```\n\n上面代码中，next 函数的内部代码，一共只有四行命令。\n\n> 第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。\n>\n> 第二行，确保每一步的返回值，是 Promise 对象。\n>\n> 第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。\n>\n> 第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。\n\n## 并发的异步操作\n\nco 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。\n\n这时，要把并发的操作都放在数组或对象里面。\n\n> ```JavaScript\n> co(function* (){\n>   var values = [n1,n2,n3];\n>   yield values.map(somethingAsync);\n> });\n> function* somethingAsync(x){\n>   return y\n> };\n> ```\n\n# ","slug":"CO函数，异步","published":1,"updated":"2017-08-18T15:01:51.000Z","photos":[],"link":"","_id":"cj6krbq320004g3fy3w2yd2er","content":"<h1 id=\"CO函数库\"><a href=\"#CO函数库\" class=\"headerlink\" title=\"CO函数库\"></a>CO函数库</h1><p><a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"external\">co 函数库</a>是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。</p>\n<p>有一个 Generator 函数，用于依次读取两个文件。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>co 函数库可以让你不用编写 Generator 函数的执行器。</strong></p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\">&gt; co(gen);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，Generator 函数只要传入 co 函数，就会自动执行。</p>\n<p>co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; co(gen).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generator 函数执行完成'</span>);</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"co-函数库的源码\"><a href=\"#co-函数库的源码\" class=\"headerlink\" title=\"co 函数库的源码\"></a>co 函数库的源码</h2><p>co 就是上面那个自动执行器的扩展，它的<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"external\">源码</a>只有几十行，非常简单。</p>\n<p>首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     onFulfilled();</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">var</span> ret;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         ret = gen.next(res);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span> reject(e);</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;       next(ret);</div><div class=\"line\">&gt;     &#125;    </div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>最后，就是关键的 next 函数，它会反复调用自身。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (ret.done) <span class=\"keyword\">return</span> resolve(ret.value);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> value = toPromise.call(ctx, ret.value);</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (value &amp;&amp; isPromise(value)) <span class=\"keyword\">return</span> value.then(onFulfilled, onRejected);</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'You may only yield a function, promise, generator, array, or object, '</span></div><div class=\"line\">&gt;         + <span class=\"string\">'but the following object was passed: \"'</span> + <span class=\"built_in\">String</span>(ret.value) + <span class=\"string\">'\"'</span>));</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，next 函数的内部代码，一共只有四行命令。</p>\n<blockquote>\n<p>第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。</p>\n<p>第二行，确保每一步的返回值，是 Promise 对象。</p>\n<p>第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。</p>\n<p>第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。</p>\n</blockquote>\n<h2 id=\"并发的异步操作\"><a href=\"#并发的异步操作\" class=\"headerlink\" title=\"并发的异步操作\"></a>并发的异步操作</h2><p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p>\n<p>这时，要把并发的操作都放在数组或对象里面。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> values = [n1,n2,n3];</div><div class=\"line\">&gt;   <span class=\"keyword\">yield</span> values.map(somethingAsync);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">somethingAsync</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> y</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p># </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CO函数库\"><a href=\"#CO函数库\" class=\"headerlink\" title=\"CO函数库\"></a>CO函数库</h1><p><a href=\"https://github.com/tj/co\" target=\"_blank\" rel=\"external\">co 函数库</a>是著名程序员 TJ Holowaychuk 于2013年6月发布的一个小工具，用于 Generator 函数的自动执行。</p>\n<p>有一个 Generator 函数，用于依次读取两个文件。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>co 函数库可以让你不用编写 Generator 函数的执行器。</strong></p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">'co'</span>);</div><div class=\"line\">&gt; co(gen);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，Generator 函数只要传入 co 函数，就会自动执行。</p>\n<p>co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; co(gen).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Generator 函数执行完成'</span>);</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"co-函数库的源码\"><a href=\"#co-函数库的源码\" class=\"headerlink\" title=\"co 函数库的源码\"></a>co 函数库的源码</h2><p>co 就是上面那个自动执行器的扩展，它的<a href=\"https://github.com/tj/co/blob/master/index.js\" target=\"_blank\" rel=\"external\">源码</a>只有几十行，非常简单。</p>\n<p>首先，co 函数接受 Generator 函数作为参数，返回一个 Promise 对象。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>在返回的 Promise 对象里面，co 先检查参数 gen 是否为 Generator 函数。如果是，就执行该函数，得到一个内部指针对象；如果不是就返回，并将 Promise 对象的状态改为 resolved 。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>接着，co 将 Generator 函数的内部指针对象的 next 方法，包装成 onFulefilled 函数。这主要是为了能够捕捉抛出的错误。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">co</span>(<span class=\"params\">gen</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">'function'</span>) gen = gen.call(ctx);</div><div class=\"line\">&gt;     <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.next !== <span class=\"string\">'function'</span>) <span class=\"keyword\">return</span> resolve(gen);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;     onFulfilled();</div><div class=\"line\">&gt;     <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onFulfilled</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">var</span> ret;</div><div class=\"line\">&gt;       <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">&gt;         ret = gen.next(res);</div><div class=\"line\">&gt;       &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">&gt;         <span class=\"keyword\">return</span> reject(e);</div><div class=\"line\">&gt;       &#125;</div><div class=\"line\">&gt;       next(ret);</div><div class=\"line\">&gt;     &#125;    </div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>最后，就是关键的 next 函数，它会反复调用自身。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\">ret</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (ret.done) <span class=\"keyword\">return</span> resolve(ret.value);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> value = toPromise.call(ctx, ret.value);</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (value &amp;&amp; isPromise(value)) <span class=\"keyword\">return</span> value.then(onFulfilled, onRejected);</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> onRejected(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'You may only yield a function, promise, generator, array, or object, '</span></div><div class=\"line\">&gt;         + <span class=\"string\">'but the following object was passed: \"'</span> + <span class=\"built_in\">String</span>(ret.value) + <span class=\"string\">'\"'</span>));</div><div class=\"line\">&gt;     &#125;</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，next 函数的内部代码，一共只有四行命令。</p>\n<blockquote>\n<p>第一行，检查当前是否为 Generator 函数的最后一步，如果是就返回。</p>\n<p>第二行，确保每一步的返回值，是 Promise 对象。</p>\n<p>第三行，使用 then 方法，为返回值加上回调函数，然后通过 onFulfilled 函数再次调用 next 函数。</p>\n<p>第四行，在参数不符合要求的情况下（参数非 Thunk 函数和 Promise 对象），将 Promise 对象的状态改为 rejected，从而终止执行。</p>\n</blockquote>\n<h2 id=\"并发的异步操作\"><a href=\"#并发的异步操作\" class=\"headerlink\" title=\"并发的异步操作\"></a>并发的异步操作</h2><p>co 支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p>\n<p>这时，要把并发的操作都放在数组或对象里面。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> values = [n1,n2,n3];</div><div class=\"line\">&gt;   <span class=\"keyword\">yield</span> values.map(somethingAsync);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">somethingAsync</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> y</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p># </p>\n"},{"title":"数据库E-R图","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# E-R图\n\nE-R图是指实体-关系-属性三个基本概括数据的基本结构.\n\n强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。\n\n<!--more-->\n\n- ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。\n\n\n\n- ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。\n\n\n\n- ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。\n\n","source":"_posts/E-R图.md","raw":"---\ntitle: 数据库E-R图\ndate: 2017-7-17 16：05\ncomments: true\nlayout: post\ntags: [数据库]\ncategories: 数据库\n---\n\n# E-R图\n\nE-R图是指实体-关系-属性三个基本概括数据的基本结构.\n\n强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。\n\n<!--more-->\n\n- ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。\n\n\n\n- ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。\n\n\n\n- ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。\n\n","slug":"E-R图","published":1,"updated":"2017-07-17T08:06:54.000Z","photos":[],"link":"","_id":"cj6krbq3b0008g3fyhy1kse1y","content":"<h1 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h1><p>E-R图是指实体-关系-属性三个基本概括数据的基本结构.</p>\n<p>强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。</p>\n<a id=\"more\"></a>\n<ul>\n<li>ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。</li>\n</ul>\n<ul>\n<li>ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</li>\n</ul>\n<ul>\n<li>ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"E-R图\"><a href=\"#E-R图\" class=\"headerlink\" title=\"E-R图\"></a>E-R图</h1><p>E-R图是指实体-关系-属性三个基本概括数据的基本结构.</p>\n<p>强调ER模型设计的两大内容：一是将需求通过ER表达，另一个是将ER转换为关系模型。ER图是从实践归纳出来的理论方法，可以重新指导实践行为，既可以作为理解和表达用户数据需求的手段，同时也构成如何生成关系模型的依据。</p>","more":"<ul>\n<li>ER图的实体（entity）即数据模型中的数据对象，例如人、学生、音乐都可以作为一个数据对象，用长方体来表示，每个实体都有自己的实体成员（entity member）或者说实体对象（entity instance），例如学生实体里包括张三、李四等，实体成员（entity member）/实体实例（entity instance） 不需要出现在ER图中。</li>\n</ul>\n<ul>\n<li>ER图的属性（attribute）即数据对象所具有的属性，例如学生具有姓名、学号、年级等属性，用椭圆形表示，属性分为唯一属性（ unique attribute）和非唯一属性，唯一属性指的是唯一可用来标识该实体实例或者成员的属性，用下划线表示，一般来讲实体都至少有一个唯一属性。</li>\n</ul>\n<ul>\n<li>ER图的关系（relationship）用来表现数据对象与数据对象之间的联系，例如学生的实体和成绩表的实体之间有一定的联系，每个学生都有自己的成绩表，这就是一种关系，关系用菱形来表示。</li>\n</ul>"},{"title":"Generator函数","date":"2017-07-29T06:21:06.000Z","comments":1,"layout":"post","_content":"\n# Generator函数\n\nGenerator最大的特点就是定义的函数可以被暂停执行.\n\n## 作用\n\n迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.\n\nasync generator/iterator \n\n> 摘自MDN\n\n**生成器**对象是由一个 [generator function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*) 返回的,并且它符合[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)和[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)。\n\n> 摘自ES6标准入门\n\n可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.\n\n<!--more-->\n\n```javascript\nfunction* hi(){\nyield 'nihao';\nyield 'hello';\nreturn 'ending';\n}\nvar hw = hi();\nhw.next();\nhw.next();\nhw.next();\n```\n\n![generator](/images/generator.png)\n\n\n\n> 通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。\n\n\n\n在`Generator函数`返回的遍历器对象只有调用`next方法`才会遍历下一个内部状态,所以yield语句就是**暂停标志**.\n\n- yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.\n\n```JavaScript\nfunction* add(){\n  yield 123+123;\n}\n//在上面代码里123+123不去求值.当有next();时,才去求值\n```\n\n1. 每个yield将代码分割成两个部分，需要执行两次next才能执行完。\n2. yield其实由两个动作组成，**输入** + **输出**（输入在输出前面），每次执行next，代码会暂停在yield **输出**执行后，其它的语句不再执行（**很重要**）。\n\n## for...of循环\n\n可以自动遍历generator函数,不用去调用next方法.\n\n```javascript\nfunction* foo(){\n  yiled 1;\n  yiled 2;\n  yiled 3;\n  yiled 4;\n  yiled 5;\n  return 6;\n}\nfor(let v of foo()){\n  console.log(v);\n}\n//1 2 3 4 5\n```\n\n# Generator函数的数据交换和错误处理\n\n`next()`方法返回值的`value`属性，是`Generator`函数向外输出的数据；`next()`方法还可以接受参数，向`Generator`函数体内输入数据。\n\n```JavaScript\nfunction* gen(x) {\n    var y = yield x + 2;\n    return y;\n} \n\nvar g = gen(1);\ng.next()      // { value: 3, done: false }\ng.next(2)     // { value: 2, done: true }\n```\n\n`Generator`函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\n```\nfunction* gen(x) {\n    try {\n        var y = yield x + 2\n    } catch(e) {\n        console.log(e)\n    }\n    return y\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n```\n\n上面代码的最后一行，`Generator`函数体外，使用指针对象的`throw`方法抛出的错误，可以被函数体内的`try...catch` 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。","source":"_posts/Generator.md","raw":"---\ntitle: Generator函数\ndate: 2017-07-29 14：27\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之路\n---\n\n# Generator函数\n\nGenerator最大的特点就是定义的函数可以被暂停执行.\n\n## 作用\n\n迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.\n\nasync generator/iterator \n\n> 摘自MDN\n\n**生成器**对象是由一个 [generator function](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*) 返回的,并且它符合[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)和[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator)。\n\n> 摘自ES6标准入门\n\n可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.\n\n<!--more-->\n\n```javascript\nfunction* hi(){\nyield 'nihao';\nyield 'hello';\nreturn 'ending';\n}\nvar hw = hi();\nhw.next();\nhw.next();\nhw.next();\n```\n\n![generator](/images/generator.png)\n\n\n\n> 通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。\n\n\n\n在`Generator函数`返回的遍历器对象只有调用`next方法`才会遍历下一个内部状态,所以yield语句就是**暂停标志**.\n\n- yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.\n\n```JavaScript\nfunction* add(){\n  yield 123+123;\n}\n//在上面代码里123+123不去求值.当有next();时,才去求值\n```\n\n1. 每个yield将代码分割成两个部分，需要执行两次next才能执行完。\n2. yield其实由两个动作组成，**输入** + **输出**（输入在输出前面），每次执行next，代码会暂停在yield **输出**执行后，其它的语句不再执行（**很重要**）。\n\n## for...of循环\n\n可以自动遍历generator函数,不用去调用next方法.\n\n```javascript\nfunction* foo(){\n  yiled 1;\n  yiled 2;\n  yiled 3;\n  yiled 4;\n  yiled 5;\n  return 6;\n}\nfor(let v of foo()){\n  console.log(v);\n}\n//1 2 3 4 5\n```\n\n# Generator函数的数据交换和错误处理\n\n`next()`方法返回值的`value`属性，是`Generator`函数向外输出的数据；`next()`方法还可以接受参数，向`Generator`函数体内输入数据。\n\n```JavaScript\nfunction* gen(x) {\n    var y = yield x + 2;\n    return y;\n} \n\nvar g = gen(1);\ng.next()      // { value: 3, done: false }\ng.next(2)     // { value: 2, done: true }\n```\n\n`Generator`函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。\n\n```\nfunction* gen(x) {\n    try {\n        var y = yield x + 2\n    } catch(e) {\n        console.log(e)\n    }\n    return y\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n```\n\n上面代码的最后一行，`Generator`函数体外，使用指针对象的`throw`方法抛出的错误，可以被函数体内的`try...catch` 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。","slug":"Generator","published":1,"updated":"2017-08-01T11:38:29.000Z","photos":[],"link":"","_id":"cj6krbq3d000ag3fysr9irxf3","content":"<h1 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h1><p>Generator最大的特点就是定义的函数可以被暂停执行.</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.</p>\n<p>async generator/iterator </p>\n<blockquote>\n<p>摘自MDN</p>\n</blockquote>\n<p><strong>生成器</strong>对象是由一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"external\">generator function</a> 返回的,并且它符合<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"external\">可迭代协议</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator\" target=\"_blank\" rel=\"external\">迭代器协议</a>。</p>\n<blockquote>\n<p>摘自ES6标准入门</p>\n</blockquote>\n<p>可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'nihao'</span>;</div><div class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> hw = hi();</div><div class=\"line\">hw.next();</div><div class=\"line\">hw.next();</div><div class=\"line\">hw.next();</div></pre></td></tr></table></figure>\n<p><img src=\"/images/generator.png\" alt=\"generator\"></p>\n<blockquote>\n<p>通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。</p>\n</blockquote>\n<p>在<code>Generator函数</code>返回的遍历器对象只有调用<code>next方法</code>才会遍历下一个内部状态,所以yield语句就是<strong>暂停标志</strong>.</p>\n<ul>\n<li>yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">123</span>+<span class=\"number\">123</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在上面代码里123+123不去求值.当有next();时,才去求值</span></div></pre></td></tr></table></figure>\n<ol>\n<li>每个yield将代码分割成两个部分，需要执行两次next才能执行完。</li>\n<li>yield其实由两个动作组成，<strong>输入</strong> + <strong>输出</strong>（输入在输出前面），每次执行next，代码会暂停在yield <strong>输出</strong>执行后，其它的语句不再执行（<strong>很重要</strong>）。</li>\n</ol>\n<h2 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h2><p>可以自动遍历generator函数,不用去调用next方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  yiled <span class=\"number\">1</span>;</div><div class=\"line\">  yiled <span class=\"number\">2</span>;</div><div class=\"line\">  yiled <span class=\"number\">3</span>;</div><div class=\"line\">  yiled <span class=\"number\">4</span>;</div><div class=\"line\">  yiled <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1 2 3 4 5</span></div></pre></td></tr></table></figure>\n<h1 id=\"Generator函数的数据交换和错误处理\"><a href=\"#Generator函数的数据交换和错误处理\" class=\"headerlink\" title=\"Generator函数的数据交换和错误处理\"></a>Generator函数的数据交换和错误处理</h1><p><code>next()</code>方法返回值的<code>value</code>属性，是<code>Generator</code>函数向外输出的数据；<code>next()</code>方法还可以接受参数，向<code>Generator</code>函数体内输入数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> y;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>);</div><div class=\"line\">g.next()      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></div><div class=\"line\">g.next(<span class=\"number\">2</span>)     <span class=\"comment\">// &#123; value: 2, done: true &#125;</span></div></pre></td></tr></table></figure>\n<p><code>Generator</code>函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* gen(x) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var y = yield x + 2</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">        console.log(e)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var g = gen(1);</div><div class=\"line\">g.next();</div><div class=\"line\">g.throw(&apos;出错了&apos;);</div></pre></td></tr></table></figure>\n<p>上面代码的最后一行，<code>Generator</code>函数体外，使用指针对象的<code>throw</code>方法抛出的错误，可以被函数体内的<code>try...catch</code> 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Generator函数\"><a href=\"#Generator函数\" class=\"headerlink\" title=\"Generator函数\"></a>Generator函数</h1><p>Generator最大的特点就是定义的函数可以被暂停执行.</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>迭代器 iterator, infinite range, 可以暂停函数, lazy evaluation, 用来实现 async/await 啊, 棒棒哒.</p>\n<p>async generator/iterator </p>\n<blockquote>\n<p>摘自MDN</p>\n</blockquote>\n<p><strong>生成器</strong>对象是由一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\" target=\"_blank\" rel=\"external\">generator function</a> 返回的,并且它符合<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"external\">可迭代协议</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterator\" target=\"_blank\" rel=\"external\">迭代器协议</a>。</p>\n<blockquote>\n<p>摘自ES6标准入门</p>\n</blockquote>\n<p>可以把它理解成一个状态机,封装了多个内部状态.还是一个遍历器对象生成函数.</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hi</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'nihao'</span>;</div><div class=\"line\"><span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> hw = hi();</div><div class=\"line\">hw.next();</div><div class=\"line\">hw.next();</div><div class=\"line\">hw.next();</div></pre></td></tr></table></figure>\n<p><img src=\"/images/generator.png\" alt=\"generator\"></p>\n<blockquote>\n<p>通过gen.next()取得的输出是一个对象，包含value和done两个属性，其中value是真正返回的值，而done则用来标识Generator是否已经执行完毕。因为自然数生成器是一个无限循环，所以不存在done: true的情况。</p>\n</blockquote>\n<p>在<code>Generator函数</code>返回的遍历器对象只有调用<code>next方法</code>才会遍历下一个内部状态,所以yield语句就是<strong>暂停标志</strong>.</p>\n<ul>\n<li>yield语句后面的表达式,只有当调用到next方法,内部指针指向该语句时才会执行.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">add</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">123</span>+<span class=\"number\">123</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//在上面代码里123+123不去求值.当有next();时,才去求值</span></div></pre></td></tr></table></figure>\n<ol>\n<li>每个yield将代码分割成两个部分，需要执行两次next才能执行完。</li>\n<li>yield其实由两个动作组成，<strong>输入</strong> + <strong>输出</strong>（输入在输出前面），每次执行next，代码会暂停在yield <strong>输出</strong>执行后，其它的语句不再执行（<strong>很重要</strong>）。</li>\n</ol>\n<h2 id=\"for…of循环\"><a href=\"#for…of循环\" class=\"headerlink\" title=\"for…of循环\"></a>for…of循环</h2><p>可以自动遍历generator函数,不用去调用next方法.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  yiled <span class=\"number\">1</span>;</div><div class=\"line\">  yiled <span class=\"number\">2</span>;</div><div class=\"line\">  yiled <span class=\"number\">3</span>;</div><div class=\"line\">  yiled <span class=\"number\">4</span>;</div><div class=\"line\">  yiled <span class=\"number\">5</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">6</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> foo())&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1 2 3 4 5</span></div></pre></td></tr></table></figure>\n<h1 id=\"Generator函数的数据交换和错误处理\"><a href=\"#Generator函数的数据交换和错误处理\" class=\"headerlink\" title=\"Generator函数的数据交换和错误处理\"></a>Generator函数的数据交换和错误处理</h1><p><code>next()</code>方法返回值的<code>value</code>属性，是<code>Generator</code>函数向外输出的数据；<code>next()</code>方法还可以接受参数，向<code>Generator</code>函数体内输入数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> y;</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> g = gen(<span class=\"number\">1</span>);</div><div class=\"line\">g.next()      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></div><div class=\"line\">g.next(<span class=\"number\">2</span>)     <span class=\"comment\">// &#123; value: 2, done: true &#125;</span></div></pre></td></tr></table></figure>\n<p><code>Generator</code>函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function* gen(x) &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        var y = yield x + 2</div><div class=\"line\">    &#125; catch(e) &#123;</div><div class=\"line\">        console.log(e)</div><div class=\"line\">    &#125;</div><div class=\"line\">    return y</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var g = gen(1);</div><div class=\"line\">g.next();</div><div class=\"line\">g.throw(&apos;出错了&apos;);</div></pre></td></tr></table></figure>\n<p>上面代码的最后一行，<code>Generator</code>函数体外，使用指针对象的<code>throw</code>方法抛出的错误，可以被函数体内的<code>try...catch</code> 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</p>"},{"title":"ES6箭头函数","date":"2017-04-27T07:29:00.000Z","comments":1,"layout":"post","_content":"简单地说，\n\n```javascript\nvar a = x => x;\n//\nvar a =function(x){\n  return x;\n};\n```\n\n这个就是最简单的箭头函数。\n\n<!--more-->\n\n接着如果箭头函数不需要参数或者多个参数的话，\n\n```JavaScript\nvar a = () => 1;\n//\nvar a =function(){\n  return 1;\n};\n或者\nvar a = _ =>1;\n```\n\n```javascript\nvar sum = (num1,num2) =>num1 +num2;\n//\nvar sum =function(num1,num2){\n  return num1+num2;\n};\n```\n\n**箭头函数没有自己的`this`**，\n\n```javascript\n(function (){\n  return [\n    (()=> this.x).bind({x :'inner'})()\n  ]\n}).call({x :'outer'});\n//['outer']\n```\n\n所以`bind`的方法无效。并且`call()`,`apply()`,也无效。\n\n**MDN上的**\n\n```javascript\nvar adder = {\n  base : 1,\n    \n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };\n            \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n\n\n\n\n\n\n","source":"_posts/Es6箭头函数.md","raw":"---\ntitle: ES6箭头函数\ndate: 2017-04-27 15:29\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之路\n---\n简单地说，\n\n```javascript\nvar a = x => x;\n//\nvar a =function(x){\n  return x;\n};\n```\n\n这个就是最简单的箭头函数。\n\n<!--more-->\n\n接着如果箭头函数不需要参数或者多个参数的话，\n\n```JavaScript\nvar a = () => 1;\n//\nvar a =function(){\n  return 1;\n};\n或者\nvar a = _ =>1;\n```\n\n```javascript\nvar sum = (num1,num2) =>num1 +num2;\n//\nvar sum =function(num1,num2){\n  return num1+num2;\n};\n```\n\n**箭头函数没有自己的`this`**，\n\n```javascript\n(function (){\n  return [\n    (()=> this.x).bind({x :'inner'})()\n  ]\n}).call({x :'outer'});\n//['outer']\n```\n\n所以`bind`的方法无效。并且`call()`,`apply()`,也无效。\n\n**MDN上的**\n\n```javascript\nvar adder = {\n  base : 1,\n    \n  add : function(a) {\n    var f = v => v + this.base;\n    return f(a);\n  },\n\n  addThruCall: function(a) {\n    var f = v => v + this.base;\n    var b = {\n      base : 2\n    };\n            \n    return f.call(b, a);\n  }\n};\n\nconsole.log(adder.add(1));         // 输出 2\nconsole.log(adder.addThruCall(1)); // 仍然输出 2（而不是3 ——译者注）\n```\n\n\n\n\n\n\n\n","slug":"Es6箭头函数","published":1,"updated":"2017-07-28T12:41:54.000Z","photos":[],"link":"","_id":"cj6krbq3f000cg3fyiavusz38","content":"<p>简单地说，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个就是最简单的箭头函数。</p>\n<a id=\"more\"></a>\n<p>接着如果箭头函数不需要参数或者多个参数的话，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">或者</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span><span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span>num1 +num2;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>箭头函数没有自己的<code>this</code></strong>，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [</div><div class=\"line\">    <span class=\"function\">(<span class=\"params\">(</span>)=&gt;</span> <span class=\"keyword\">this</span>.x).bind(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'inner'</span>&#125;)()</div><div class=\"line\">  ]</div><div class=\"line\">&#125;).call(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'outer'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//['outer']</span></div></pre></td></tr></table></figure>\n<p>所以<code>bind</code>的方法无效。并且<code>call()</code>,<code>apply()</code>,也无效。</p>\n<p><strong>MDN上的</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> adder = &#123;</div><div class=\"line\">  <span class=\"attr\">base</span> : <span class=\"number\">1</span>,</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</div><div class=\"line\">    <span class=\"keyword\">return</span> f(a);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">addThruCall</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</div><div class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</div><div class=\"line\">      <span class=\"attr\">base</span> : <span class=\"number\">2</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">            </div><div class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>简单地说，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这个就是最简单的箭头函数。</p>","more":"<p>接着如果箭头函数不需要参数或者多个参数的话，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> a =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">或者</div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"params\">_</span> =&gt;</span><span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span>num1 +num2;</div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"keyword\">var</span> sum =<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> num1+num2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>箭头函数没有自己的<code>this</code></strong>，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [</div><div class=\"line\">    <span class=\"function\">(<span class=\"params\">(</span>)=&gt;</span> <span class=\"keyword\">this</span>.x).bind(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'inner'</span>&#125;)()</div><div class=\"line\">  ]</div><div class=\"line\">&#125;).call(&#123;<span class=\"attr\">x</span> :<span class=\"string\">'outer'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//['outer']</span></div></pre></td></tr></table></figure>\n<p>所以<code>bind</code>的方法无效。并且<code>call()</code>,<code>apply()</code>,也无效。</p>\n<p><strong>MDN上的</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> adder = &#123;</div><div class=\"line\">  <span class=\"attr\">base</span> : <span class=\"number\">1</span>,</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</div><div class=\"line\">    <span class=\"keyword\">return</span> f(a);</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  <span class=\"attr\">addThruCall</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v + <span class=\"keyword\">this</span>.base;</div><div class=\"line\">    <span class=\"keyword\">var</span> b = &#123;</div><div class=\"line\">      <span class=\"attr\">base</span> : <span class=\"number\">2</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">            </div><div class=\"line\">    <span class=\"keyword\">return</span> f.call(b, a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(adder.add(<span class=\"number\">1</span>));         <span class=\"comment\">// 输出 2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(adder.addThruCall(<span class=\"number\">1</span>)); <span class=\"comment\">// 仍然输出 2（而不是3 ——译者注）</span></div></pre></td></tr></table></figure>"},{"title":"初入Express","date":"2017-07-30T02:33:26.000Z","comments":1,"layout":"post","_content":"\n# Express\n\n## expressjs里的请求参数，4.x里只有3种(都引用官方例子) \n\n- req.params\n- req.body\n- req.query\n\n### req.params\n\n```javascript\napp.get('/user/:id',function(req,res){\n  \tres.send('user' + req.parms.id);\n});\n```\n\n就是取带冒号的参数.\n\n<!--more-->\n\n### req.body\n\n```JavaScript\nvar app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer'); \n\napp.use(bodyParser.json()); // 用于解析application / json\napp.use(bodyParser.urlencoded({ extended: true })); // 用于解析 application/x-www-form-urlencoded\napp.use(multer()); // 用于解析多部分/表单数据\n\napp.post('/', function (req, res) {\n  console.log(req.body);\n  res.json(req.body);\n})\n```\n\n- req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.\n\n### req.query\n\n```javascript\n// GET /search?q=tobi+ferret\nreq.query.q\n// => \"tobi ferret\"\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nreq.query.order\n// => \"desc\"\n\nreq.query.shoe.color\n// => \"blue\"\n\nreq.query.shoe.type\n// => \"converse\"\n```\n\n","source":"_posts/Express.md","raw":"---\ntitle: 初入Express\ndate: 2017-07-30 10:33:26\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Node.js\n---\n\n# Express\n\n## expressjs里的请求参数，4.x里只有3种(都引用官方例子) \n\n- req.params\n- req.body\n- req.query\n\n### req.params\n\n```javascript\napp.get('/user/:id',function(req,res){\n  \tres.send('user' + req.parms.id);\n});\n```\n\n就是取带冒号的参数.\n\n<!--more-->\n\n### req.body\n\n```JavaScript\nvar app = require('express')();\nvar bodyParser = require('body-parser');\nvar multer = require('multer'); \n\napp.use(bodyParser.json()); // 用于解析application / json\napp.use(bodyParser.urlencoded({ extended: true })); // 用于解析 application/x-www-form-urlencoded\napp.use(multer()); // 用于解析多部分/表单数据\n\napp.post('/', function (req, res) {\n  console.log(req.body);\n  res.json(req.body);\n})\n```\n\n- req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.\n\n### req.query\n\n```javascript\n// GET /search?q=tobi+ferret\nreq.query.q\n// => \"tobi ferret\"\n\n// GET /shoes?order=desc&shoe[color]=blue&shoe[type]=converse\nreq.query.order\n// => \"desc\"\n\nreq.query.shoe.color\n// => \"blue\"\n\nreq.query.shoe.type\n// => \"converse\"\n```\n\n","slug":"Express","published":1,"updated":"2017-08-07T15:41:19.000Z","photos":[],"link":"","_id":"cj6krbq3g000fg3fyxfehr5ut","content":"<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><h2 id=\"expressjs里的请求参数，4-x里只有3种-都引用官方例子\"><a href=\"#expressjs里的请求参数，4-x里只有3种-都引用官方例子\" class=\"headerlink\" title=\"expressjs里的请求参数，4.x里只有3种(都引用官方例子)\"></a>expressjs里的请求参数，4.x里只有3种(都引用官方例子)</h2><ul>\n<li>req.params</li>\n<li>req.body</li>\n<li>req.query</li>\n</ul>\n<h3 id=\"req-params\"><a href=\"#req-params\" class=\"headerlink\" title=\"req.params\"></a>req.params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  \tres.send(<span class=\"string\">'user'</span> + req.parms.id);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>就是取带冒号的参数.</p>\n<a id=\"more\"></a>\n<h3 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>); </div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser.json()); <span class=\"comment\">// 用于解析application / json</span></div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">true</span> &#125;)); <span class=\"comment\">// 用于解析 application/x-www-form-urlencoded</span></div><div class=\"line\">app.use(multer()); <span class=\"comment\">// 用于解析多部分/表单数据</span></div><div class=\"line\"></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</div><div class=\"line\">  res.json(req.body);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.</li>\n</ul>\n<h3 id=\"req-query\"><a href=\"#req-query\" class=\"headerlink\" title=\"req.query\"></a>req.query</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GET /search?q=tobi+ferret</span></div><div class=\"line\">req.query.q</div><div class=\"line\"><span class=\"comment\">// =&gt; \"tobi ferret\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></div><div class=\"line\">req.query.order</div><div class=\"line\"><span class=\"comment\">// =&gt; \"desc\"</span></div><div class=\"line\"></div><div class=\"line\">req.query.shoe.color</div><div class=\"line\"><span class=\"comment\">// =&gt; \"blue\"</span></div><div class=\"line\"></div><div class=\"line\">req.query.shoe.type</div><div class=\"line\"><span class=\"comment\">// =&gt; \"converse\"</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Express\"><a href=\"#Express\" class=\"headerlink\" title=\"Express\"></a>Express</h1><h2 id=\"expressjs里的请求参数，4-x里只有3种-都引用官方例子\"><a href=\"#expressjs里的请求参数，4-x里只有3种-都引用官方例子\" class=\"headerlink\" title=\"expressjs里的请求参数，4.x里只有3种(都引用官方例子)\"></a>expressjs里的请求参数，4.x里只有3种(都引用官方例子)</h2><ul>\n<li>req.params</li>\n<li>req.body</li>\n<li>req.query</li>\n</ul>\n<h3 id=\"req-params\"><a href=\"#req-params\" class=\"headerlink\" title=\"req.params\"></a>req.params</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/user/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">  \tres.send(<span class=\"string\">'user'</span> + req.parms.id);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>就是取带冒号的参数.</p>","more":"<h3 id=\"req-body\"><a href=\"#req-body\" class=\"headerlink\" title=\"req.body\"></a>req.body</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> multer = <span class=\"built_in\">require</span>(<span class=\"string\">'multer'</span>); </div><div class=\"line\"></div><div class=\"line\">app.use(bodyParser.json()); <span class=\"comment\">// 用于解析application / json</span></div><div class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">true</span> &#125;)); <span class=\"comment\">// 用于解析 application/x-www-form-urlencoded</span></div><div class=\"line\">app.use(multer()); <span class=\"comment\">// 用于解析多部分/表单数据</span></div><div class=\"line\"></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(req.body);</div><div class=\"line\">  res.json(req.body);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>req.body一定是post请求.但是在express里面依赖中间件bodyparser,不然req.body都没有.</li>\n</ul>\n<h3 id=\"req-query\"><a href=\"#req-query\" class=\"headerlink\" title=\"req.query\"></a>req.query</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GET /search?q=tobi+ferret</span></div><div class=\"line\">req.query.q</div><div class=\"line\"><span class=\"comment\">// =&gt; \"tobi ferret\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse</span></div><div class=\"line\">req.query.order</div><div class=\"line\"><span class=\"comment\">// =&gt; \"desc\"</span></div><div class=\"line\"></div><div class=\"line\">req.query.shoe.color</div><div class=\"line\"><span class=\"comment\">// =&gt; \"blue\"</span></div><div class=\"line\"></div><div class=\"line\">req.query.shoe.type</div><div class=\"line\"><span class=\"comment\">// =&gt; \"converse\"</span></div></pre></td></tr></table></figure>"},{"title":"GraphQL基本操作","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# GraphQL()\n\n强类型\n\n也就是说，你可以查询值类型：`Int`, `Float`, `String`, `Boolean`和`ID`\n\nGraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。\n\n你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。\n\n## 操作(operation)\n\n**操作（Operations）**\n\nGraphQL 规范支持两种操作：\n\n- query：仅获取数据（fetch）的只读请求\n- mutation：获取数据后还有写操作的请求\n\n```json\nquery{\n    clent(id:1){\n      id\n      name\n  }\n}\n```\n- client 是查询的operation\n- (id:1)包含了传入给Query的参数\n- 查询包含id和name字段,这些字段也是我们希望查询可以返回的.\n\n<!--more-->\n\nserver会给这个查询返回什么：\n\n```json\n{\n  \"data\": {\n    \"client\": {\n      \"id\": \"1\",\n      \"name\": \"Uncle Charlie\"\n    }\n  }\n}\n```\n\nserver会返回一个JSON串。这个JSON的schema和查询的基本一致。\n\n## 变量(Variable)\n\n```json\nquery($clientId: Int) {\n  client(id: $clientId) {\n    name\n    dob\n  }\n\n  purchases(client_id: $clientId) {\n    date\n    quantity\n    total\n    product {\n      name\n      price\n      product_category {\n        name\n      }\n    }\n    client {\n      name\n      dob\n    }\n  }\n}\n```\n\n```json\n{\n  \"clientId\": 1\n}\n```\n\n# Graphql的schema下\n\n```\nschema{\t\n\n\tquery: Query,\n\n\tmutation: Mutation,\n\n}\n```\n\n## Mutation（修改）\n\n增、删、改一类的operation在GraphQL里统称为**变异（mutation，即修改数据）**\n\nGraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：\n\nmutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：\n\n请求结束时 theNumber 的值会是 2。\n\n- create_client增加\n\n```json\nmutation {\n  create_client (\n    name: \"查理大叔\"\n    dob: \"2017/01/28\"\n  ) {\n    id \n    name\n    dob\n  }\n}\n```\n\n- update_client更新\n\n```json\nmutation {\n  update_client (\n    id: 5\n    dob: \"1990/01/01\"\n  ) {\n    id\n    name\n    dob\n  }\n}\n```\n\n- destroy_client删除\n\n```json\nmutation {\n  destroy_client(id: 5) {\n    name \n    dob\n  }\n}\n```\n\n# 修改数据\n\n就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：\n\n```\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { //!表示必须填写的查询条件  \n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n{\n  \"ep\": \"JEDI\",\n  \"review\": {\n    \"stars\": 5,\n    \"commentary\": \"This is a great movie!\"\n  }\n}\n```\n\n需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。\n\n## 强类型\n\n由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。\n\n## Fragments(组合)\n\nGraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：\n\n```json\n{\n  me {\n    name\n    friends {\n      name\n      events {\n        name\n      }\n    }\n  }\n}\n```\n\n可以转换成这样：\n\n```json\n{\n  me {\n    name\n    friends {\n      ...firendFragment\n    }\n  }\n}\n\nfragment friendFragment on User {\n  name\n  events {\n    name\n  }\n}\n```\n\n上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。\n\n\n\n简单的说，GraphQL 是一种**描述请求数据方法的语法**，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：\n\n- 它允许客户端指定具体所需的数据。\n- 它让从多个数据源汇总取数据变得更简单。\n- 它使用了类型系统来描述数据。\n\n一个 GraphQL API 主要由三个部分组成：**schema（类型）**，**queries（查询）** 以及 **resolvers（解析器）**。\n\n\n\n# Arguments(参数)\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n    }\n  }\n}\n```\n\n当然在字段里我们也可以传参数.\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT//or METER)\n  }\n}\n```\n\n```JavaScript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 5.6430448 // or 1.72\n    }\n  }\n}\n```\n\n# Aliases(别名)\n\n```json\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n```json\n{\n  \"data\": {\n    \"empireHero\": {\n      \"name\": \"Luke Skywalker\"\n    },\n    \"jediHero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n## Variables(变量)\n\n当我们开始使用变量的时候,我们需要做三件事情\n\n> 1. Replace the static value in the query with `$variableName`\n> 2. Declare `$variableName` as one of the variables accepted by the query\n> 3. Pass `variableName: value` in the separate, transport-specific (usually JSON) variables dictionary\n\n1. 用`$` 替换查询中的静态值\n2. 将`$` 声明为查询接受变量之一\n3. 通常传递json.\n\n```javascript\nquery\nHeroNameAndFriends(\n\t$episode: Episode,\n\t){\n\thero(\n\tepisode: $episode\n){\n\tname\n \tfriends{\n  \tname\n \t}\n  }\n}\n\n//variables\n{\n  \"episode\": \"JEDI\"\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n# fields\n\nFields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数\n\n# Root fields & resolvers\n\n```\nQuery: {\n  human(obj, args, context) {\n    return context.db.loadHumanByID(args.id).then(\n      userData => new Human(userData)\n    )\n  }\n}\n```\n\nobj上一个对象，其对于根查询类型的字段通常不被使用\n\nargs提供给GraphQL查询中的字段的参数。\n\ncontext提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。\n\n\n\n","source":"_posts/GraphQL.md","raw":"---\ntitle: GraphQL基本操作\ndate: 2017-07-22 21：16\ncomments: true\nlayout: post\ntags: [GraphQL]\ncategories: GraphQL\n---\n\n# GraphQL()\n\n强类型\n\n也就是说，你可以查询值类型：`Int`, `Float`, `String`, `Boolean`和`ID`\n\nGraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。\n\n你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。\n\n## 操作(operation)\n\n**操作（Operations）**\n\nGraphQL 规范支持两种操作：\n\n- query：仅获取数据（fetch）的只读请求\n- mutation：获取数据后还有写操作的请求\n\n```json\nquery{\n    clent(id:1){\n      id\n      name\n  }\n}\n```\n- client 是查询的operation\n- (id:1)包含了传入给Query的参数\n- 查询包含id和name字段,这些字段也是我们希望查询可以返回的.\n\n<!--more-->\n\nserver会给这个查询返回什么：\n\n```json\n{\n  \"data\": {\n    \"client\": {\n      \"id\": \"1\",\n      \"name\": \"Uncle Charlie\"\n    }\n  }\n}\n```\n\nserver会返回一个JSON串。这个JSON的schema和查询的基本一致。\n\n## 变量(Variable)\n\n```json\nquery($clientId: Int) {\n  client(id: $clientId) {\n    name\n    dob\n  }\n\n  purchases(client_id: $clientId) {\n    date\n    quantity\n    total\n    product {\n      name\n      price\n      product_category {\n        name\n      }\n    }\n    client {\n      name\n      dob\n    }\n  }\n}\n```\n\n```json\n{\n  \"clientId\": 1\n}\n```\n\n# Graphql的schema下\n\n```\nschema{\t\n\n\tquery: Query,\n\n\tmutation: Mutation,\n\n}\n```\n\n## Mutation（修改）\n\n增、删、改一类的operation在GraphQL里统称为**变异（mutation，即修改数据）**\n\nGraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：\n\nmutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：\n\n请求结束时 theNumber 的值会是 2。\n\n- create_client增加\n\n```json\nmutation {\n  create_client (\n    name: \"查理大叔\"\n    dob: \"2017/01/28\"\n  ) {\n    id \n    name\n    dob\n  }\n}\n```\n\n- update_client更新\n\n```json\nmutation {\n  update_client (\n    id: 5\n    dob: \"1990/01/01\"\n  ) {\n    id\n    name\n    dob\n  }\n}\n```\n\n- destroy_client删除\n\n```json\nmutation {\n  destroy_client(id: 5) {\n    name \n    dob\n  }\n}\n```\n\n# 修改数据\n\n就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：\n\n```\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) { //!表示必须填写的查询条件  \n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n{\n  \"ep\": \"JEDI\",\n  \"review\": {\n    \"stars\": 5,\n    \"commentary\": \"This is a great movie!\"\n  }\n}\n```\n\n需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。\n\n## 强类型\n\n由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。\n\n## Fragments(组合)\n\nGraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：\n\n```json\n{\n  me {\n    name\n    friends {\n      name\n      events {\n        name\n      }\n    }\n  }\n}\n```\n\n可以转换成这样：\n\n```json\n{\n  me {\n    name\n    friends {\n      ...firendFragment\n    }\n  }\n}\n\nfragment friendFragment on User {\n  name\n  events {\n    name\n  }\n}\n```\n\n上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。\n\n\n\n简单的说，GraphQL 是一种**描述请求数据方法的语法**，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：\n\n- 它允许客户端指定具体所需的数据。\n- 它让从多个数据源汇总取数据变得更简单。\n- 它使用了类型系统来描述数据。\n\n一个 GraphQL API 主要由三个部分组成：**schema（类型）**，**queries（查询）** 以及 **resolvers（解析器）**。\n\n\n\n# Arguments(参数)\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n    }\n  }\n}\n```\n\n当然在字段里我们也可以传参数.\n\n```JavaScript\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT//or METER)\n  }\n}\n```\n\n```JavaScript\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 5.6430448 // or 1.72\n    }\n  }\n}\n```\n\n# Aliases(别名)\n\n```json\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n```\n\n```json\n{\n  \"data\": {\n    \"empireHero\": {\n      \"name\": \"Luke Skywalker\"\n    },\n    \"jediHero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n## Variables(变量)\n\n当我们开始使用变量的时候,我们需要做三件事情\n\n> 1. Replace the static value in the query with `$variableName`\n> 2. Declare `$variableName` as one of the variables accepted by the query\n> 3. Pass `variableName: value` in the separate, transport-specific (usually JSON) variables dictionary\n\n1. 用`$` 替换查询中的静态值\n2. 将`$` 声明为查询接受变量之一\n3. 通常传递json.\n\n```javascript\nquery\nHeroNameAndFriends(\n\t$episode: Episode,\n\t){\n\thero(\n\tepisode: $episode\n){\n\tname\n \tfriends{\n  \tname\n \t}\n  }\n}\n\n//variables\n{\n  \"episode\": \"JEDI\"\n}\n```\n\n```javascript\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n\n\n# fields\n\nFields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数\n\n# Root fields & resolvers\n\n```\nQuery: {\n  human(obj, args, context) {\n    return context.db.loadHumanByID(args.id).then(\n      userData => new Human(userData)\n    )\n  }\n}\n```\n\nobj上一个对象，其对于根查询类型的字段通常不被使用\n\nargs提供给GraphQL查询中的字段的参数。\n\ncontext提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。\n\n\n\n","slug":"GraphQL","published":1,"updated":"2017-08-12T10:50:55.000Z","photos":[],"link":"","_id":"cj6krbq3j000ig3fy8wivws0h","content":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL()\"></a>GraphQL()</h1><p>强类型</p>\n<p>也就是说，你可以查询值类型：<code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>和<code>ID</code></p>\n<p>GraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。</p>\n<p>你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。</p>\n<h2 id=\"操作-operation\"><a href=\"#操作-operation\" class=\"headerlink\" title=\"操作(operation)\"></a>操作(operation)</h2><p><strong>操作（Operations）</strong></p>\n<p>GraphQL 规范支持两种操作：</p>\n<ul>\n<li>query：仅获取数据（fetch）的只读请求</li>\n<li>mutation：获取数据后还有写操作的请求</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">query&#123;</div><div class=\"line\">    clent(id:1)&#123;</div><div class=\"line\">      id</div><div class=\"line\">      name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>client 是查询的operation</li>\n<li>(id:1)包含了传入给Query的参数</li>\n<li>查询包含id和name字段,这些字段也是我们希望查询可以返回的.</li>\n</ul>\n<a id=\"more\"></a>\n<p>server会给这个查询返回什么：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"client\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Uncle Charlie\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>server会返回一个JSON串。这个JSON的schema和查询的基本一致。</p>\n<h2 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量(Variable)\"></a>变量(Variable)</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">query($clientId: Int) &#123;</div><div class=\"line\">  client(id: $clientId) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  purchases(client_id: $clientId) &#123;</div><div class=\"line\">    date</div><div class=\"line\">    quantity</div><div class=\"line\">    total</div><div class=\"line\">    product &#123;</div><div class=\"line\">      name</div><div class=\"line\">      price</div><div class=\"line\">      product_category &#123;</div><div class=\"line\">        name</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    client &#123;</div><div class=\"line\">      name</div><div class=\"line\">      dob</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"clientId\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Graphql的schema下\"><a href=\"#Graphql的schema下\" class=\"headerlink\" title=\"Graphql的schema下\"></a>Graphql的schema下</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">schema&#123;\t</div><div class=\"line\"></div><div class=\"line\">\tquery: Query,</div><div class=\"line\"></div><div class=\"line\">\tmutation: Mutation,</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Mutation（修改）\"><a href=\"#Mutation（修改）\" class=\"headerlink\" title=\"Mutation（修改）\"></a>Mutation（修改）</h2><p>增、删、改一类的operation在GraphQL里统称为<strong>变异（mutation，即修改数据）</strong></p>\n<p>GraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：</p>\n<p>mutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：</p>\n<p>请求结束时 theNumber 的值会是 2。</p>\n<ul>\n<li>create_client增加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  create_client (</div><div class=\"line\">    name: \"查理大叔\"</div><div class=\"line\">    dob: \"2017/01/28\"</div><div class=\"line\">  ) &#123;</div><div class=\"line\">    id </div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>update_client更新</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  update_client (</div><div class=\"line\">    id: 5</div><div class=\"line\">    dob: \"1990/01/01\"</div><div class=\"line\">  ) &#123;</div><div class=\"line\">    id</div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>destroy_client删除</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  destroy_client(id: 5) &#123;</div><div class=\"line\">    name </div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123; //!表示必须填写的查询条件  </div><div class=\"line\">  createReview(episode: $ep, review: $review) &#123;</div><div class=\"line\">    stars</div><div class=\"line\">    commentary</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;ep&quot;: &quot;JEDI&quot;,</div><div class=\"line\">  &quot;review&quot;: &#123;</div><div class=\"line\">    &quot;stars&quot;: 5,</div><div class=\"line\">    &quot;commentary&quot;: &quot;This is a great movie!&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。</p>\n<h2 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h2><p>由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。</p>\n<h2 id=\"Fragments-组合\"><a href=\"#Fragments-组合\" class=\"headerlink\" title=\"Fragments(组合)\"></a>Fragments(组合)</h2><p>GraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  me &#123;</div><div class=\"line\">    name</div><div class=\"line\">    friends &#123;</div><div class=\"line\">      name</div><div class=\"line\">      events &#123;</div><div class=\"line\">        name</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以转换成这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  me &#123;</div><div class=\"line\">    name</div><div class=\"line\">    friends &#123;</div><div class=\"line\">      ...firendFragment</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fragment friendFragment on User &#123;</div><div class=\"line\">  name</div><div class=\"line\">  events &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。</p>\n<p>简单的说，GraphQL 是一种<strong>描述请求数据方法的语法</strong>，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：</p>\n<ul>\n<li>它允许客户端指定具体所需的数据。</li>\n<li>它让从多个数据源汇总取数据变得更简单。</li>\n<li>它使用了类型系统来描述数据。</li>\n</ul>\n<p>一个 GraphQL API 主要由三个部分组成：<strong>schema（类型）</strong>，<strong>queries（查询）</strong> 以及 <strong>resolvers（解析器）</strong>。</p>\n<h1 id=\"Arguments-参数\"><a href=\"#Arguments-参数\" class=\"headerlink\" title=\"Arguments(参数)\"></a>Arguments(参数)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    height</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">1.72</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然在字段里我们也可以传参数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    height(unit: FOOT<span class=\"comment\">//or METER)</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">5.6430448</span> <span class=\"comment\">// or 1.72</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Aliases-别名\"><a href=\"#Aliases-别名\" class=\"headerlink\" title=\"Aliases(别名)\"></a>Aliases(别名)</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  empireHero: hero(episode: EMPIRE) &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">  jediHero: hero(episode: JEDI) &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"empireHero\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"jediHero\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h2><p>当我们开始使用变量的时候,我们需要做三件事情</p>\n<blockquote>\n<ol>\n<li>Replace the static value in the query with <code>$variableName</code></li>\n<li>Declare <code>$variableName</code> as one of the variables accepted by the query</li>\n<li>Pass <code>variableName: value</code> in the separate, transport-specific (usually JSON) variables dictionary</li>\n</ol>\n</blockquote>\n<ol>\n<li>用<code>$</code> 替换查询中的静态值</li>\n<li>将<code>$</code> 声明为查询接受变量之一</li>\n<li>通常传递json.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">query</div><div class=\"line\">HeroNameAndFriends(</div><div class=\"line\">\t$episode: Episode,</div><div class=\"line\">\t)&#123;</div><div class=\"line\">\thero(</div><div class=\"line\">\tepisode: $episode</div><div class=\"line\">)&#123;</div><div class=\"line\">\tname</div><div class=\"line\"> \tfriends&#123;</div><div class=\"line\">  \tname</div><div class=\"line\"> \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//variables</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"episode\"</span>: <span class=\"string\">\"JEDI\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"hero\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span>,</div><div class=\"line\">      <span class=\"string\">\"friends\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Han Solo\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Leia Organa\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"fields\"><a href=\"#fields\" class=\"headerlink\" title=\"fields\"></a>fields</h1><p>Fields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数</p>\n<h1 id=\"Root-fields-amp-resolvers\"><a href=\"#Root-fields-amp-resolvers\" class=\"headerlink\" title=\"Root fields &amp; resolvers\"></a>Root fields &amp; resolvers</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query: &#123;</div><div class=\"line\">  human(obj, args, context) &#123;</div><div class=\"line\">    return context.db.loadHumanByID(args.id).then(</div><div class=\"line\">      userData =&gt; new Human(userData)</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>obj上一个对象，其对于根查询类型的字段通常不被使用</p>\n<p>args提供给GraphQL查询中的字段的参数。</p>\n<p>context提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL()\"></a>GraphQL()</h1><p>强类型</p>\n<p>也就是说，你可以查询值类型：<code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>和<code>ID</code></p>\n<p>GraphQL不是像MySQL或Redis这样直接面向数据的接口，而是面向你已经存在的应用代码的接口。</p>\n<p>你可以把GraphQL看作是为了调用应用服务器上的方法的一些内嵌的RPC。</p>\n<h2 id=\"操作-operation\"><a href=\"#操作-operation\" class=\"headerlink\" title=\"操作(operation)\"></a>操作(operation)</h2><p><strong>操作（Operations）</strong></p>\n<p>GraphQL 规范支持两种操作：</p>\n<ul>\n<li>query：仅获取数据（fetch）的只读请求</li>\n<li>mutation：获取数据后还有写操作的请求</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">query&#123;</div><div class=\"line\">    clent(id:1)&#123;</div><div class=\"line\">      id</div><div class=\"line\">      name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>client 是查询的operation</li>\n<li>(id:1)包含了传入给Query的参数</li>\n<li>查询包含id和name字段,这些字段也是我们希望查询可以返回的.</li>\n</ul>","more":"<p>server会给这个查询返回什么：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"client\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Uncle Charlie\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>server会返回一个JSON串。这个JSON的schema和查询的基本一致。</p>\n<h2 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量(Variable)\"></a>变量(Variable)</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">query($clientId: Int) &#123;</div><div class=\"line\">  client(id: $clientId) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  purchases(client_id: $clientId) &#123;</div><div class=\"line\">    date</div><div class=\"line\">    quantity</div><div class=\"line\">    total</div><div class=\"line\">    product &#123;</div><div class=\"line\">      name</div><div class=\"line\">      price</div><div class=\"line\">      product_category &#123;</div><div class=\"line\">        name</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    client &#123;</div><div class=\"line\">      name</div><div class=\"line\">      dob</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"clientId\"</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Graphql的schema下\"><a href=\"#Graphql的schema下\" class=\"headerlink\" title=\"Graphql的schema下\"></a>Graphql的schema下</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">schema&#123;\t</div><div class=\"line\"></div><div class=\"line\">\tquery: Query,</div><div class=\"line\"></div><div class=\"line\">\tmutation: Mutation,</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Mutation（修改）\"><a href=\"#Mutation（修改）\" class=\"headerlink\" title=\"Mutation（修改）\"></a>Mutation（修改）</h2><p>增、删、改一类的operation在GraphQL里统称为<strong>变异（mutation，即修改数据）</strong></p>\n<p>GraphQL中将对数据的修改操作称为 mutation。在 GraphQL Schema 中按照如下形式来定义一个 mutation：</p>\n<p>mutation 查询和普通查询请求（query）的重要区别在于 mutation 操作是序列化执行的。例如 GraphQL 规范中给出的示例，服务器一定会序列化处理下面的 mutation 请求：</p>\n<p>请求结束时 theNumber 的值会是 2。</p>\n<ul>\n<li>create_client增加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  create_client (</div><div class=\"line\">    name: \"查理大叔\"</div><div class=\"line\">    dob: \"2017/01/28\"</div><div class=\"line\">  ) &#123;</div><div class=\"line\">    id </div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>update_client更新</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  update_client (</div><div class=\"line\">    id: 5</div><div class=\"line\">    dob: \"1990/01/01\"</div><div class=\"line\">  ) &#123;</div><div class=\"line\">    id</div><div class=\"line\">    name</div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>destroy_client删除</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation &#123;</div><div class=\"line\">  destroy_client(id: 5) &#123;</div><div class=\"line\">    name </div><div class=\"line\">    dob</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h1><p>就像Rest以PUT／POST约定为修改服务器端数据一样，Mutations操作在GraphQL的意义就是修改数据库。就像官网中的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) &#123; //!表示必须填写的查询条件  </div><div class=\"line\">  createReview(episode: $ep, review: $review) &#123;</div><div class=\"line\">    stars</div><div class=\"line\">    commentary</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;ep&quot;: &quot;JEDI&quot;,</div><div class=\"line\">  &quot;review&quot;: &#123;</div><div class=\"line\">    &quot;stars&quot;: 5,</div><div class=\"line\">    &quot;commentary&quot;: &quot;This is a great movie!&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>需要注意的是，为了保证mutation操作不冲突，mutation只能序列执行。而query可以并行。</p>\n<h2 id=\"强类型\"><a href=\"#强类型\" class=\"headerlink\" title=\"强类型\"></a>强类型</h2><p>由于 GraphQL 是一个强类型语言，所以它可以在执行查询之前检查每个查询语句是否满足事先设定的 schema，符合则合法，如果查询语句不合法则不进行查询。</p>\n<h2 id=\"Fragments-组合\"><a href=\"#Fragments-组合\" class=\"headerlink\" title=\"Fragments(组合)\"></a>Fragments(组合)</h2><p>GraphQL 可以组合使用查询。比如可以定义一种叫 fragment 的东西，就是查询片断，然后我们可以在不同的地方重复的去使用查询。比如下面的这个例子：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  me &#123;</div><div class=\"line\">    name</div><div class=\"line\">    friends &#123;</div><div class=\"line\">      name</div><div class=\"line\">      events &#123;</div><div class=\"line\">        name</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以转换成这样：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  me &#123;</div><div class=\"line\">    name</div><div class=\"line\">    friends &#123;</div><div class=\"line\">      ...firendFragment</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fragment friendFragment on User &#123;</div><div class=\"line\">  name</div><div class=\"line\">  events &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面定义了一个叫 friendFragment 的查询片断，它返回用户朋友的名字，还有参加的活动的名字，然后我们可以在其它的查询里面使用这个查询片断。</p>\n<p>简单的说，GraphQL 是一种<strong>描述请求数据方法的语法</strong>，通常用于客户端从服务端加载数据。GraphQL 有以下三个主要特征：</p>\n<ul>\n<li>它允许客户端指定具体所需的数据。</li>\n<li>它让从多个数据源汇总取数据变得更简单。</li>\n<li>它使用了类型系统来描述数据。</li>\n</ul>\n<p>一个 GraphQL API 主要由三个部分组成：<strong>schema（类型）</strong>，<strong>queries（查询）</strong> 以及 <strong>resolvers（解析器）</strong>。</p>\n<h1 id=\"Arguments-参数\"><a href=\"#Arguments-参数\" class=\"headerlink\" title=\"Arguments(参数)\"></a>Arguments(参数)</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    height</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">1.72</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当然在字段里我们也可以传参数.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  human(id: <span class=\"string\">\"1000\"</span>) &#123;</div><div class=\"line\">    name</div><div class=\"line\">    height(unit: FOOT<span class=\"comment\">//or METER)</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"human\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span>,</div><div class=\"line\">      <span class=\"string\">\"height\"</span>: <span class=\"number\">5.6430448</span> <span class=\"comment\">// or 1.72</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Aliases-别名\"><a href=\"#Aliases-别名\" class=\"headerlink\" title=\"Aliases(别名)\"></a>Aliases(别名)</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  empireHero: hero(episode: EMPIRE) &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">  jediHero: hero(episode: JEDI) &#123;</div><div class=\"line\">    name</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"empireHero\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"jediHero\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Variables-变量\"><a href=\"#Variables-变量\" class=\"headerlink\" title=\"Variables(变量)\"></a>Variables(变量)</h2><p>当我们开始使用变量的时候,我们需要做三件事情</p>\n<blockquote>\n<ol>\n<li>Replace the static value in the query with <code>$variableName</code></li>\n<li>Declare <code>$variableName</code> as one of the variables accepted by the query</li>\n<li>Pass <code>variableName: value</code> in the separate, transport-specific (usually JSON) variables dictionary</li>\n</ol>\n</blockquote>\n<ol>\n<li>用<code>$</code> 替换查询中的静态值</li>\n<li>将<code>$</code> 声明为查询接受变量之一</li>\n<li>通常传递json.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">query</div><div class=\"line\">HeroNameAndFriends(</div><div class=\"line\">\t$episode: Episode,</div><div class=\"line\">\t)&#123;</div><div class=\"line\">\thero(</div><div class=\"line\">\tepisode: $episode</div><div class=\"line\">)&#123;</div><div class=\"line\">\tname</div><div class=\"line\"> \tfriends&#123;</div><div class=\"line\">  \tname</div><div class=\"line\"> \t&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//variables</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"episode\"</span>: <span class=\"string\">\"JEDI\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"data\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"hero\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"name\"</span>: <span class=\"string\">\"R2-D2\"</span>,</div><div class=\"line\">      <span class=\"string\">\"friends\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Luke Skywalker\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Han Solo\"</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Leia Organa\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"fields\"><a href=\"#fields\" class=\"headerlink\" title=\"fields\"></a>fields</h1><p>Fields就是客户端要求GraphQL返回的数据说明，一个Fields也可以包含参数</p>\n<h1 id=\"Root-fields-amp-resolvers\"><a href=\"#Root-fields-amp-resolvers\" class=\"headerlink\" title=\"Root fields &amp; resolvers\"></a>Root fields &amp; resolvers</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Query: &#123;</div><div class=\"line\">  human(obj, args, context) &#123;</div><div class=\"line\">    return context.db.loadHumanByID(args.id).then(</div><div class=\"line\">      userData =&gt; new Human(userData)</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>obj上一个对象，其对于根查询类型的字段通常不被使用</p>\n<p>args提供给GraphQL查询中的字段的参数。</p>\n<p>context提供给每个解析器并保存重要的上下文信息（如当前登录的用户）或访问数据库的值。</p>"},{"title":"Hello, World!","date":"2017-03-19T13:10:55.000Z","comments":1,"layout":"post","_content":"## Hello World ##\n\n\n- **Hello World**\n\n> 第一篇就和大家打个招呼！\n\n- 多种语言的`Hello World`\n  <!--more-->\n- C\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, World\");\n    return 0;\n}\n```\n- Java\n```java\n    public class HelloWorld{\n        public static void main(String[] args){\n            System.out.println(\"Hello World!\");\n        }\n    }\n```\n\n- Javascript\n```javascript\nconsole.log(\"Hello, World!\");\n```\n- Python\n```python\n    print(\"Hello, World!\")\n```\n- PHP\n```php\necho 'Hello,World!';\n```\n\n\n- Go\n```go\npackage main\nimport \"fmt\"\nfunc main(){\n    fmt.Print(\"Hello, World!\");\n}\n```\n\n\n\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n \n\n \n\n\n\n\n\n","source":"_posts/Hello World.md","raw":"---\ntitle: Hello, World!\ndate: 2017-03-19 21:10:55\ncomments: true\nlayout: post\ntags: [C,Java,JavaScript,Python,PHP,go]\ncategories: Technology\n---\n## Hello World ##\n\n\n- **Hello World**\n\n> 第一篇就和大家打个招呼！\n\n- 多种语言的`Hello World`\n  <!--more-->\n- C\n```c\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello, World\");\n    return 0;\n}\n```\n- Java\n```java\n    public class HelloWorld{\n        public static void main(String[] args){\n            System.out.println(\"Hello World!\");\n        }\n    }\n```\n\n- Javascript\n```javascript\nconsole.log(\"Hello, World!\");\n```\n- Python\n```python\n    print(\"Hello, World!\")\n```\n- PHP\n```php\necho 'Hello,World!';\n```\n\n\n- Go\n```go\npackage main\nimport \"fmt\"\nfunc main(){\n    fmt.Print(\"Hello, World!\");\n}\n```\n\n\n\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n \n\n \n\n\n\n\n\n","slug":"Hello World","published":1,"updated":"2017-07-28T12:42:30.000Z","photos":[],"link":"","_id":"cj6krbq3m000mg3fyupktbu9j","content":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li><strong>Hello World</strong></li>\n</ul>\n<blockquote>\n<p>第一篇就和大家打个招呼！</p>\n</blockquote>\n<ul>\n<li>多种语言的<code>Hello World</code><a id=\"more\"></a></li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello,World!'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    fmt.Print(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li><strong>Hello World</strong></li>\n</ul>\n<blockquote>\n<p>第一篇就和大家打个招呼！</p>\n</blockquote>\n<ul>\n<li>多种语言的<code>Hello World</code>","more":"</li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello, World\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello, World!\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print(<span class=\"string\">\"Hello, World!\"</span>)</div></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello,World!'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    fmt.Print(<span class=\"string\">\"Hello, World!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<script type=\"text/javascript\">\n    setTimeout(function(){\n        console.log(\"I Love Mu\");\n        alert(\"Hello, World!\");\n    }, 5000);\n</script>"},{"title":"JavaScript作用域与作用域链","date":"2017-05-18T09:37:54.000Z","comments":1,"layout":"post","_content":"\n# Javascript作用域与作用域链\n\n## 作用域\n\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。\n\n### 变量作用域\n\n##### 全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\n\n```javascript\nvar l=\"我是全局变量\";\t\t\t//声明了一个全局变量\nfunction scope(){\t\t\n  var l=\"我是局部变量\";\t\t//声明了一个同名的局部变量\n  return l;\n}\nscope()\t\t\t\t\t//输出“我是局部变量”\n```\n\n##### <!--more -->\n\n在函数内声明变量前不加`var`就是一个全局变量。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n \tl=\"我还是全局变量\";\t\t\t//改变了全局变量\n\tm=\"我是一个新的全局变量\";\t  \t //声明了一个新的全局变量\n\treturn [l,m];\n}\nscope()\t\t\t\t\t\t   //输出\"我是一个新的全局变量\"\nl\nm\n```\n\n##### 在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n  var l=\"我是局部变量\";\n  function scope1(){\n    var l=\"我是一个新的局部变量\";\t\t\t//嵌套作用域内的局部变量\n    return l;\t\t\t\t\t\t  //返回当前作用域内的值\n  }\n  return scope1();\n}\nscope();\t\t\t\t\t\t\t //嵌套作用域\n\n```\n\n### 函数作用域和声明提前\n\n函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。\n\n变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。\n\n```javascript\nfunction func() {\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        func();\n```\n\n再看看下面这个例子：\n\n```javascript\nvar num=2;\nfunction func() {\n            var num;\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        console.log(num);\t\t\t\t//输出2\n        func();\n```\n\n## 作用域链\n\n**用途：**\n\n保证对**执行环境有权访问**的**所有变量和函数的有序访问**。\n\n作用域链上有两个对象。\n\n- 第一个是定义函数参数和局部变量的对象\n- 第二个是全局对象\n\n当定义一个函数时，它实际上保存一个作用域链。\n\n**高程三下这个例子就特别好**\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n  var anotherColor = \"red\";\n  \n  function swapColors(){\n    var tempColor = anotherColor;\n    anotherColor = color;\n    color = tempColor;\n    //能访问 color、anotherColor、tempColor。\n  }\n  swapColors();\t\t\t//能访问color、anotherColor不能访问tempColor。\n}\nchangeColor();\t\t\t//只能访问color\n```\n\n`changeColor()`的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问`swapColor()`的环境。\n\n那么在`swapColors()`的作用域链中又3个对象：`swapColors()`的变量对象、`changeColor()`的变量对象和全局变量对象。","source":"_posts/JavaScript作用域.md","raw":"---\ntitle: JavaScript作用域与作用域链\ndate: 2017-05-18 17：37\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# Javascript作用域与作用域链\n\n## 作用域\n\n简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。\n\n### 变量作用域\n\n##### 全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\n\n```javascript\nvar l=\"我是全局变量\";\t\t\t//声明了一个全局变量\nfunction scope(){\t\t\n  var l=\"我是局部变量\";\t\t//声明了一个同名的局部变量\n  return l;\n}\nscope()\t\t\t\t\t//输出“我是局部变量”\n```\n\n##### <!--more -->\n\n在函数内声明变量前不加`var`就是一个全局变量。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n \tl=\"我还是全局变量\";\t\t\t//改变了全局变量\n\tm=\"我是一个新的全局变量\";\t  \t //声明了一个新的全局变量\n\treturn [l,m];\n}\nscope()\t\t\t\t\t\t   //输出\"我是一个新的全局变量\"\nl\nm\n```\n\n##### 在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\n\n```javascript\nvar l=\"我是全局变量\";\nfunction scope(){\n  var l=\"我是局部变量\";\n  function scope1(){\n    var l=\"我是一个新的局部变量\";\t\t\t//嵌套作用域内的局部变量\n    return l;\t\t\t\t\t\t  //返回当前作用域内的值\n  }\n  return scope1();\n}\nscope();\t\t\t\t\t\t\t //嵌套作用域\n\n```\n\n### 函数作用域和声明提前\n\n函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。\n\n变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。\n\n```javascript\nfunction func() {\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        func();\n```\n\n再看看下面这个例子：\n\n```javascript\nvar num=2;\nfunction func() {\n            var num;\n            console.log(num);           //输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的\n            var num = 1;                //声明num 在整个函数体func内都有定义\n            console.log(num);           //输出：1\n        }\n        console.log(num);\t\t\t\t//输出2\n        func();\n```\n\n## 作用域链\n\n**用途：**\n\n保证对**执行环境有权访问**的**所有变量和函数的有序访问**。\n\n作用域链上有两个对象。\n\n- 第一个是定义函数参数和局部变量的对象\n- 第二个是全局对象\n\n当定义一个函数时，它实际上保存一个作用域链。\n\n**高程三下这个例子就特别好**\n\n```javascript\nvar color = \"blue\";\n\nfunction changeColor(){\n  var anotherColor = \"red\";\n  \n  function swapColors(){\n    var tempColor = anotherColor;\n    anotherColor = color;\n    color = tempColor;\n    //能访问 color、anotherColor、tempColor。\n  }\n  swapColors();\t\t\t//能访问color、anotherColor不能访问tempColor。\n}\nchangeColor();\t\t\t//只能访问color\n```\n\n`changeColor()`的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问`swapColor()`的环境。\n\n那么在`swapColors()`的作用域链中又3个对象：`swapColors()`的变量对象、`changeColor()`的变量对象和全局变量对象。","slug":"JavaScript作用域","published":1,"updated":"2017-05-22T05:44:16.000Z","photos":[],"link":"","_id":"cj6krbq3n000og3fykwpn6hua","content":"<h1 id=\"Javascript作用域与作用域链\"><a href=\"#Javascript作用域与作用域链\" class=\"headerlink\" title=\"Javascript作用域与作用域链\"></a>Javascript作用域与作用域链</h1><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><h5 id=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"><a href=\"#全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\" class=\"headerlink\" title=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"></a>全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;\t\t\t<span class=\"comment\">//声明了一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;\t\t</div><div class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;\t\t<span class=\"comment\">//声明了一个同名的局部变量</span></div><div class=\"line\">  <span class=\"keyword\">return</span> l;</div><div class=\"line\">&#125;</div><div class=\"line\">scope()\t\t\t\t\t<span class=\"comment\">//输出“我是局部变量”</span></div></pre></td></tr></table></figure>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h5><p>在函数内声明变量前不加<code>var</code>就是一个全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> \tl=<span class=\"string\">\"我还是全局变量\"</span>;\t\t\t<span class=\"comment\">//改变了全局变量</span></div><div class=\"line\">\tm=<span class=\"string\">\"我是一个新的全局变量\"</span>;\t  \t <span class=\"comment\">//声明了一个新的全局变量</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> [l,m];</div><div class=\"line\">&#125;</div><div class=\"line\">scope()\t\t\t\t\t\t   <span class=\"comment\">//输出\"我是一个新的全局变量\"</span></div><div class=\"line\">l</div><div class=\"line\">m</div></pre></td></tr></table></figure>\n<h5 id=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"><a href=\"#在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\" class=\"headerlink\" title=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"></a>在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是一个新的局部变量\"</span>;\t\t\t<span class=\"comment\">//嵌套作用域内的局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l;\t\t\t\t\t\t  <span class=\"comment\">//返回当前作用域内的值</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> scope1();</div><div class=\"line\">&#125;</div><div class=\"line\">scope();\t\t\t\t\t\t\t <span class=\"comment\">//嵌套作用域</span></div></pre></td></tr></table></figure>\n<h3 id=\"函数作用域和声明提前\"><a href=\"#函数作用域和声明提前\" class=\"headerlink\" title=\"函数作用域和声明提前\"></a>函数作用域和声明提前</h3><p>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。</p>\n<p>变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></div><div class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        func();</div></pre></td></tr></table></figure>\n<p>再看看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> num;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></div><div class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(num);\t\t\t\t<span class=\"comment\">//输出2</span></div><div class=\"line\">        func();</div></pre></td></tr></table></figure>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>用途：</strong></p>\n<p>保证对<strong>执行环境有权访问</strong>的<strong>所有变量和函数的有序访问</strong>。</p>\n<p>作用域链上有两个对象。</p>\n<ul>\n<li>第一个是定义函数参数和局部变量的对象</li>\n<li>第二个是全局对象</li>\n</ul>\n<p>当定义一个函数时，它实际上保存一个作用域链。</p>\n<p><strong>高程三下这个例子就特别好</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> tempColor = anotherColor;</div><div class=\"line\">    anotherColor = color;</div><div class=\"line\">    color = tempColor;</div><div class=\"line\">    <span class=\"comment\">//能访问 color、anotherColor、tempColor。</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  swapColors();\t\t\t<span class=\"comment\">//能访问color、anotherColor不能访问tempColor。</span></div><div class=\"line\">&#125;</div><div class=\"line\">changeColor();\t\t\t<span class=\"comment\">//只能访问color</span></div></pre></td></tr></table></figure>\n<p><code>changeColor()</code>的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问<code>swapColor()</code>的环境。</p>\n<p>那么在<code>swapColors()</code>的作用域链中又3个对象：<code>swapColors()</code>的变量对象、<code>changeColor()</code>的变量对象和全局变量对象。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Javascript作用域与作用域链\"><a href=\"#Javascript作用域与作用域链\" class=\"headerlink\" title=\"Javascript作用域与作用域链\"></a>Javascript作用域与作用域链</h1><h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p>\n<h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><h5 id=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"><a href=\"#全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\" class=\"headerlink\" title=\"全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。\"></a>全局变量拥有全局作用域。在JavaScript任何地方都是有定义的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;\t\t\t<span class=\"comment\">//声明了一个全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;\t\t</div><div class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;\t\t<span class=\"comment\">//声明了一个同名的局部变量</span></div><div class=\"line\">  <span class=\"keyword\">return</span> l;</div><div class=\"line\">&#125;</div><div class=\"line\">scope()\t\t\t\t\t<span class=\"comment\">//输出“我是局部变量”</span></div></pre></td></tr></table></figure>\n<h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h5><p>在函数内声明变量前不加<code>var</code>就是一个全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> \tl=<span class=\"string\">\"我还是全局变量\"</span>;\t\t\t<span class=\"comment\">//改变了全局变量</span></div><div class=\"line\">\tm=<span class=\"string\">\"我是一个新的全局变量\"</span>;\t  \t <span class=\"comment\">//声明了一个新的全局变量</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> [l,m];</div><div class=\"line\">&#125;</div><div class=\"line\">scope()\t\t\t\t\t\t   <span class=\"comment\">//输出\"我是一个新的全局变量\"</span></div><div class=\"line\">l</div><div class=\"line\">m</div></pre></td></tr></table></figure>\n<h5 id=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"><a href=\"#在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\" class=\"headerlink\" title=\"在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。\"></a>在函数内声明的变量只在函数内有定义，它们是局部变量，作用域是局部性的。</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> l=<span class=\"string\">\"我是全局变量\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是局部变量\"</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scope1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> l=<span class=\"string\">\"我是一个新的局部变量\"</span>;\t\t\t<span class=\"comment\">//嵌套作用域内的局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> l;\t\t\t\t\t\t  <span class=\"comment\">//返回当前作用域内的值</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> scope1();</div><div class=\"line\">&#125;</div><div class=\"line\">scope();\t\t\t\t\t\t\t <span class=\"comment\">//嵌套作用域</span></div></pre></td></tr></table></figure>\n<h3 id=\"函数作用域和声明提前\"><a href=\"#函数作用域和声明提前\" class=\"headerlink\" title=\"函数作用域和声明提前\"></a>函数作用域和声明提前</h3><p>函数作用域是指在函数内声明的所有变量在函数体内始终是可见的。只是改变函数内部。</p>\n<p>变量在声明它们的函数体以及这个函数体嵌套的任意的函数体内都是有定义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></div><div class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        func();</div></pre></td></tr></table></figure>\n<p>再看看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> num;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span></div><div class=\"line\">            <span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;                <span class=\"comment\">//声明num 在整个函数体func内都有定义</span></div><div class=\"line\">            <span class=\"built_in\">console</span>.log(num);           <span class=\"comment\">//输出：1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(num);\t\t\t\t<span class=\"comment\">//输出2</span></div><div class=\"line\">        func();</div></pre></td></tr></table></figure>\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><p><strong>用途：</strong></p>\n<p>保证对<strong>执行环境有权访问</strong>的<strong>所有变量和函数的有序访问</strong>。</p>\n<p>作用域链上有两个对象。</p>\n<ul>\n<li>第一个是定义函数参数和局部变量的对象</li>\n<li>第二个是全局对象</li>\n</ul>\n<p>当定义一个函数时，它实际上保存一个作用域链。</p>\n<p><strong>高程三下这个例子就特别好</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> color = <span class=\"string\">\"blue\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> anotherColor = <span class=\"string\">\"red\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swapColors</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> tempColor = anotherColor;</div><div class=\"line\">    anotherColor = color;</div><div class=\"line\">    color = tempColor;</div><div class=\"line\">    <span class=\"comment\">//能访问 color、anotherColor、tempColor。</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  swapColors();\t\t\t<span class=\"comment\">//能访问color、anotherColor不能访问tempColor。</span></div><div class=\"line\">&#125;</div><div class=\"line\">changeColor();\t\t\t<span class=\"comment\">//只能访问color</span></div></pre></td></tr></table></figure>\n<p><code>changeColor()</code>的作用域链中只包含2个对象：它自己的变量对象和全局变量对象。所以它不能访问<code>swapColor()</code>的环境。</p>\n<p>那么在<code>swapColors()</code>的作用域链中又3个对象：<code>swapColors()</code>的变量对象、<code>changeColor()</code>的变量对象和全局变量对象。</p>"},{"title":"JavaScript函数","date":"2017-08-16T14:45:00.000Z","comments":1,"layout":"post","_content":"\n# JavaScript函数\n\n在JavaScript中，函数是一等公民。","source":"_posts/JavaScript函数.md","raw":"---\ntitle: JavaScript函数\ndate: 2017-08-16 22:45\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# JavaScript函数\n\n在JavaScript中，函数是一等公民。","slug":"JavaScript函数","published":1,"updated":"2017-08-16T14:43:43.000Z","photos":[],"link":"","_id":"cj6krbq3r000sg3fyg34amcu1","content":"<h1 id=\"JavaScript函数\"><a href=\"#JavaScript函数\" class=\"headerlink\" title=\"JavaScript函数\"></a>JavaScript函数</h1><p>在JavaScript中，函数是一等公民。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript函数\"><a href=\"#JavaScript函数\" class=\"headerlink\" title=\"JavaScript函数\"></a>JavaScript函数</h1><p>在JavaScript中，函数是一等公民。</p>\n"},{"title":"JavaScript——16道算法题","date":"2017-05-15T05:19:00.000Z","comments":1,"layout":"post","_content":"\n# Let‘s go\n\n#### 1.Reverse a String \n\n翻转字符串\n\n先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\n你的结果必须得是一个字符串\n\n这是一些对你有帮助的资源:\n\n- [Global String Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [Array.reverse()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n\n- [Array.join()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n> `reverseString(\"hello\")` 应该返回 `\"olleh\"`.\n\n```javascript\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nreverseString(\"hello\");\n\n```\n\n<!-- more -->\n\n#### 2.Factorialize a Number\n\n计算一个整数的阶乘\n\n如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。\n\n阶乘通常简写成 `n!`\n\n例如: `5! = 1 * 2 * 3 * 4 * 5 = 120`\n\n这是一些对你有帮助的资源:\n\n- [Arithmetic Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)\n\n> `factorialize(5)` 应该返回 120.\n\n```javascript\nfunction factorialize(num) {\n  if(num<0){\n    return -1; \n  }else if(num ===0||num===1){\n    return 1;\n  }else{\n  return (num*factorialize(num-1));\n  }\n}\nfactorialize(5);\n\n```\n\n#### 3.Check for Palindromes \n\n如果给定的字符串是回文，返回`true`，反之，返回`false`。\n\n如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。\n\n**注意**你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。\n\n函数参数的值可以为`\"racecar\"`，`\"RaceCar\"`和`\"race CAR\"`。\n\n这是一些对你有帮助的资源:\n\n- [String.replace()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n\n- [String.toLowerCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n\n> `palindrome(\"race car\")` 应该返回 true.\n>\n> `palindrome(\"not a palindrome\")` 应该返回 false.\n\n```javascript\nfunction palindrome(str) {\n  // Good luck!\n  var re = /[\\W_]/g;\n  var slo=str.toLowerCase().replace(re,\"\");\n  var slow=slo.split('').reverse().join('');\n  if(slo==slow){\n  return true;}\n  else{\n    return false;\n  }\n}\npalindrome(\"我爱你\");\n\n```\n\n#### 4.Find the Longest Word in a String \n\n找到提供的句子中最长的单词，并计算它的长度。\n\n函数的返回值应该是一个数字。\n\n这是一些对你有帮助的资源:\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [String.length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n\n> `findLongestWord(\"The quick brown fox jumped over the lazy dog\")` 应该返回 6.\n\n```javascript\nfunction findLongestWord(str) {\n  var arr=str.split(' ');\n  var long=0;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i].length>long){\n      long=arr[i].length;\n    }\n  }\n  return long;\n}\n\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\");\n\n```\n\n\n\n#### 5.Title Case a Sentence\n\n确保字符串的每个单词首字母都大写，其余部分小写。\n\n像'the'和'of'这样的连接符同理。\n\n这是一些对你有帮助的资源:\n\n[String.split](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n> `titleCase(\"I'm a little tea pot\")` 应该返回 \"I'm A Little Tea Pot\".\n\n```javascript\nfunction titleCase(str) {\n  var arr=str.toLowerCase().split(' ');\n  var l=[];\n  for(var i=0;i<arr.length;i++){\n    var str1=arr[i].slice(0,1).toUpperCase()+arr[i].slice(1);\n    l.push(str1);\n  }\n  return l.join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n```\n\n- 首先我们需要把这个字符串的每一项都变成小写字母并转换成数组\n- 创建一个保存新的空数组\n- 用遍历数组的长度。之后我们把每一项数组的第一个字母用`slice()`变成大写。\n- 再`push`到空的数组里。\n- 最后用`join()`数组返回字符串。\n\n#### 6.Return Largest Numbers in Arrays\n\n右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。\n\n提示：你可以用for循环来迭代数组，并通过`arr[i]`的方式来访问数组的每个元素。\n\n这是一些对你有帮助的资源:\n\n- [Comparison Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n\n> `largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])` 应该返回 `[27,5,39,1001]`.\n\n**第一种方法**\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n var l=[];\n  for(var i=0;i<arr.length;i++){\n    arr[i].sort(function(a,b){return b-a});\n  }\n  l.push(arr[i][0]);\n}\nreturn l;\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```\n\n**第二种方法**\n\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n  var temp = [];\n  for(var i = 0; i < arr.length; i++){\n    var l = arr[i].reduce(function(prev,cur,index,array){\n      return prev > cur ? prev : cur;\n    });\n    temp.push(l);\n  }\n  return temp;\n}\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```","source":"_posts/JavaScript——16道算法题.md","raw":"---\ntitle: JavaScript——16道算法题\ndate: 2017-05-15 13：07\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之路\n---\n\n# Let‘s go\n\n#### 1.Reverse a String \n\n翻转字符串\n\n先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\n你的结果必须得是一个字符串\n\n这是一些对你有帮助的资源:\n\n- [Global String Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String)\n\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [Array.reverse()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse)\n\n\n- [Array.join()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n> `reverseString(\"hello\")` 应该返回 `\"olleh\"`.\n\n```javascript\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\nreverseString(\"hello\");\n\n```\n\n<!-- more -->\n\n#### 2.Factorialize a Number\n\n计算一个整数的阶乘\n\n如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。\n\n阶乘通常简写成 `n!`\n\n例如: `5! = 1 * 2 * 3 * 4 * 5 = 120`\n\n这是一些对你有帮助的资源:\n\n- [Arithmetic Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators)\n\n> `factorialize(5)` 应该返回 120.\n\n```javascript\nfunction factorialize(num) {\n  if(num<0){\n    return -1; \n  }else if(num ===0||num===1){\n    return 1;\n  }else{\n  return (num*factorialize(num-1));\n  }\n}\nfactorialize(5);\n\n```\n\n#### 3.Check for Palindromes \n\n如果给定的字符串是回文，返回`true`，反之，返回`false`。\n\n如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。\n\n**注意**你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。\n\n函数参数的值可以为`\"racecar\"`，`\"RaceCar\"`和`\"race CAR\"`。\n\n这是一些对你有帮助的资源:\n\n- [String.replace()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\n\n\n- [String.toLowerCase()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\n\n> `palindrome(\"race car\")` 应该返回 true.\n>\n> `palindrome(\"not a palindrome\")` 应该返回 false.\n\n```javascript\nfunction palindrome(str) {\n  // Good luck!\n  var re = /[\\W_]/g;\n  var slo=str.toLowerCase().replace(re,\"\");\n  var slow=slo.split('').reverse().join('');\n  if(slo==slow){\n  return true;}\n  else{\n    return false;\n  }\n}\npalindrome(\"我爱你\");\n\n```\n\n#### 4.Find the Longest Word in a String \n\n找到提供的句子中最长的单词，并计算它的长度。\n\n函数的返回值应该是一个数字。\n\n这是一些对你有帮助的资源:\n\n- [String.split()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n\n- [String.length](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length)\n\n> `findLongestWord(\"The quick brown fox jumped over the lazy dog\")` 应该返回 6.\n\n```javascript\nfunction findLongestWord(str) {\n  var arr=str.split(' ');\n  var long=0;\n  for(var i=0;i<arr.length;i++){\n    if(arr[i].length>long){\n      long=arr[i].length;\n    }\n  }\n  return long;\n}\n\nfindLongestWord(\"The quick brown fox jumped over the lazy dog\");\n\n```\n\n\n\n#### 5.Title Case a Sentence\n\n确保字符串的每个单词首字母都大写，其余部分小写。\n\n像'the'和'of'这样的连接符同理。\n\n这是一些对你有帮助的资源:\n\n[String.split](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split)\n\n> `titleCase(\"I'm a little tea pot\")` 应该返回 \"I'm A Little Tea Pot\".\n\n```javascript\nfunction titleCase(str) {\n  var arr=str.toLowerCase().split(' ');\n  var l=[];\n  for(var i=0;i<arr.length;i++){\n    var str1=arr[i].slice(0,1).toUpperCase()+arr[i].slice(1);\n    l.push(str1);\n  }\n  return l.join(' ');\n}\n\ntitleCase(\"I'm a little tea pot\");\n```\n\n- 首先我们需要把这个字符串的每一项都变成小写字母并转换成数组\n- 创建一个保存新的空数组\n- 用遍历数组的长度。之后我们把每一项数组的第一个字母用`slice()`变成大写。\n- 再`push`到空的数组里。\n- 最后用`join()`数组返回字符串。\n\n#### 6.Return Largest Numbers in Arrays\n\n右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。\n\n提示：你可以用for循环来迭代数组，并通过`arr[i]`的方式来访问数组的每个元素。\n\n这是一些对你有帮助的资源:\n\n- [Comparison Operators](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)\n\n> `largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])` 应该返回 `[27,5,39,1001]`.\n\n**第一种方法**\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n var l=[];\n  for(var i=0;i<arr.length;i++){\n    arr[i].sort(function(a,b){return b-a});\n  }\n  l.push(arr[i][0]);\n}\nreturn l;\n\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```\n\n**第二种方法**\n\n```javascript\nfunction largestOfFour(arr) {\n  // You can do this!\n  var temp = [];\n  for(var i = 0; i < arr.length; i++){\n    var l = arr[i].reduce(function(prev,cur,index,array){\n      return prev > cur ? prev : cur;\n    });\n    temp.push(l);\n  }\n  return temp;\n}\nlargestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);\n```","slug":"JavaScript——16道算法题","published":1,"updated":"2017-05-21T04:37:16.000Z","photos":[],"link":"","_id":"cj6krbq3t000ug3fypmi5epcl","content":"<h1 id=\"Let‘s-go\"><a href=\"#Let‘s-go\" class=\"headerlink\" title=\"Let‘s go\"></a>Let‘s go</h1><h4 id=\"1-Reverse-a-String\"><a href=\"#1-Reverse-a-String\" class=\"headerlink\" title=\"1.Reverse a String\"></a>1.Reverse a String</h4><p>翻转字符串</p>\n<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>\n<p>你的结果必须得是一个字符串</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"external\">Global String Object</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"external\">Array.reverse()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\" rel=\"external\">Array.join()</a></li>\n</ul>\n<blockquote>\n<p><code>reverseString(&quot;hello&quot;)</code> 应该返回 <code>&quot;olleh&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"2-Factorialize-a-Number\"><a href=\"#2-Factorialize-a-Number\" class=\"headerlink\" title=\"2.Factorialize a Number\"></a>2.Factorialize a Number</h4><p>计算一个整数的阶乘</p>\n<p>如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。</p>\n<p>阶乘通常简写成 <code>n!</code></p>\n<p>例如: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\" target=\"_blank\" rel=\"external\">Arithmetic Operators</a></li>\n</ul>\n<blockquote>\n<p><code>factorialize(5)</code> 应该返回 120.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorialize</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num ===<span class=\"number\">0</span>||num===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (num*factorialize(num<span class=\"number\">-1</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">factorialize(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-Check-for-Palindromes\"><a href=\"#3-Check-for-Palindromes\" class=\"headerlink\" title=\"3.Check for Palindromes\"></a>3.Check for Palindromes</h4><p>如果给定的字符串是回文，返回<code>true</code>，反之，返回<code>false</code>。</p>\n<p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p>\n<p><strong>注意</strong>你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。</p>\n<p>函数参数的值可以为<code>&quot;racecar&quot;</code>，<code>&quot;RaceCar&quot;</code>和<code>&quot;race CAR&quot;</code>。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"external\">String.replace()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\" target=\"_blank\" rel=\"external\">String.toLowerCase()</a></li>\n</ul>\n<blockquote>\n<p><code>palindrome(&quot;race car&quot;)</code> 应该返回 true.</p>\n<p><code>palindrome(&quot;not a palindrome&quot;)</code> 应该返回 false.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Good luck!</span></div><div class=\"line\">  <span class=\"keyword\">var</span> re = <span class=\"regexp\">/[\\W_]/g</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> slo=str.toLowerCase().replace(re,<span class=\"string\">\"\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> slow=slo.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(slo==slow)&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">palindrome(<span class=\"string\">\"我爱你\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-Find-the-Longest-Word-in-a-String\"><a href=\"#4-Find-the-Longest-Word-in-a-String\" class=\"headerlink\" title=\"4.Find the Longest Word in a String\"></a>4.Find the Longest Word in a String</h4><p>找到提供的句子中最长的单词，并计算它的长度。</p>\n<p>函数的返回值应该是一个数字。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length\" target=\"_blank\" rel=\"external\">String.length</a></li>\n</ul>\n<blockquote>\n<p><code>findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;)</code> 应该返回 6.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr=str.split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> long=<span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr[i].length&gt;long)&#123;</div><div class=\"line\">      long=arr[i].length;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> long;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"5-Title-Case-a-Sentence\"><a href=\"#5-Title-Case-a-Sentence\" class=\"headerlink\" title=\"5.Title Case a Sentence\"></a>5.Title Case a Sentence</h4><p>确保字符串的每个单词首字母都大写，其余部分小写。</p>\n<p>像’the’和’of’这样的连接符同理。</p>\n<p>这是一些对你有帮助的资源:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split</a></p>\n<blockquote>\n<p><code>titleCase(&quot;I&#39;m a little tea pot&quot;)</code> 应该返回 “I’m A Little Tea Pot”.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr=str.toLowerCase().split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> l=[];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> str1=arr[i].slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase()+arr[i].slice(<span class=\"number\">1</span>);</div><div class=\"line\">    l.push(str1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> l.join(<span class=\"string\">' '</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>首先我们需要把这个字符串的每一项都变成小写字母并转换成数组</li>\n<li>创建一个保存新的空数组</li>\n<li>用遍历数组的长度。之后我们把每一项数组的第一个字母用<code>slice()</code>变成大写。</li>\n<li>再<code>push</code>到空的数组里。</li>\n<li>最后用<code>join()</code>数组返回字符串。</li>\n</ul>\n<h4 id=\"6-Return-Largest-Numbers-in-Arrays\"><a href=\"#6-Return-Largest-Numbers-in-Arrays\" class=\"headerlink\" title=\"6.Return Largest Numbers in Arrays\"></a>6.Return Largest Numbers in Arrays</h4><p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</p>\n<p>提示：你可以用for循环来迭代数组，并通过<code>arr[i]</code>的方式来访问数组的每个元素。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"external\">Comparison Operators</a></li>\n</ul>\n<blockquote>\n<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27,5,39,1001]</code>.</p>\n</blockquote>\n<p><strong>第一种方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// You can do this!</span></div><div class=\"line\"> <span class=\"keyword\">var</span> l=[];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    arr[i].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b-a&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  l.push(arr[i][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> l;</div><div class=\"line\"></div><div class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</div></pre></td></tr></table></figure></p>\n<p><strong>第二种方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// You can do this!</span></div><div class=\"line\">  <span class=\"keyword\">var</span> temp = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> l = arr[i].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev,cur,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    temp.push(l);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> temp;</div><div class=\"line\">&#125;</div><div class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"Let‘s-go\"><a href=\"#Let‘s-go\" class=\"headerlink\" title=\"Let‘s go\"></a>Let‘s go</h1><h4 id=\"1-Reverse-a-String\"><a href=\"#1-Reverse-a-String\" class=\"headerlink\" title=\"1.Reverse a String\"></a>1.Reverse a String</h4><p>翻转字符串</p>\n<p>先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</p>\n<p>你的结果必须得是一个字符串</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\" target=\"_blank\" rel=\"external\">Global String Object</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"external\">Array.reverse()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" target=\"_blank\" rel=\"external\">Array.join()</a></li>\n</ul>\n<blockquote>\n<p><code>reverseString(&quot;hello&quot;)</code> 应该返回 <code>&quot;olleh&quot;</code>.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</div></pre></td></tr></table></figure>","more":"<h4 id=\"2-Factorialize-a-Number\"><a href=\"#2-Factorialize-a-Number\" class=\"headerlink\" title=\"2.Factorialize a Number\"></a>2.Factorialize a Number</h4><p>计算一个整数的阶乘</p>\n<p>如果用字母n来代表一个整数，阶乘代表着所有小于或等于n的整数的乘积。</p>\n<p>阶乘通常简写成 <code>n!</code></p>\n<p>例如: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code></p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\" target=\"_blank\" rel=\"external\">Arithmetic Operators</a></li>\n</ul>\n<blockquote>\n<p><code>factorialize(5)</code> 应该返回 120.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorialize</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; </div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num ===<span class=\"number\">0</span>||num===<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (num*factorialize(num<span class=\"number\">-1</span>));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">factorialize(<span class=\"number\">5</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-Check-for-Palindromes\"><a href=\"#3-Check-for-Palindromes\" class=\"headerlink\" title=\"3.Check for Palindromes\"></a>3.Check for Palindromes</h4><p>如果给定的字符串是回文，返回<code>true</code>，反之，返回<code>false</code>。</p>\n<p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p>\n<p><strong>注意</strong>你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。</p>\n<p>函数参数的值可以为<code>&quot;racecar&quot;</code>，<code>&quot;RaceCar&quot;</code>和<code>&quot;race CAR&quot;</code>。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" target=\"_blank\" rel=\"external\">String.replace()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\" target=\"_blank\" rel=\"external\">String.toLowerCase()</a></li>\n</ul>\n<blockquote>\n<p><code>palindrome(&quot;race car&quot;)</code> 应该返回 true.</p>\n<p><code>palindrome(&quot;not a palindrome&quot;)</code> 应该返回 false.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">palindrome</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// Good luck!</span></div><div class=\"line\">  <span class=\"keyword\">var</span> re = <span class=\"regexp\">/[\\W_]/g</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> slo=str.toLowerCase().replace(re,<span class=\"string\">\"\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> slow=slo.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(slo==slow)&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;</div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">palindrome(<span class=\"string\">\"我爱你\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"4-Find-the-Longest-Word-in-a-String\"><a href=\"#4-Find-the-Longest-Word-in-a-String\" class=\"headerlink\" title=\"4.Find the Longest Word in a String\"></a>4.Find the Longest Word in a String</h4><p>找到提供的句子中最长的单词，并计算它的长度。</p>\n<p>函数的返回值应该是一个数字。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split()</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length\" target=\"_blank\" rel=\"external\">String.length</a></li>\n</ul>\n<blockquote>\n<p><code>findLongestWord(&quot;The quick brown fox jumped over the lazy dog&quot;)</code> 应该返回 6.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findLongestWord</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr=str.split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> long=<span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(arr[i].length&gt;long)&#123;</div><div class=\"line\">      long=arr[i].length;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> long;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">findLongestWord(<span class=\"string\">\"The quick brown fox jumped over the lazy dog\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"5-Title-Case-a-Sentence\"><a href=\"#5-Title-Case-a-Sentence\" class=\"headerlink\" title=\"5.Title Case a Sentence\"></a>5.Title Case a Sentence</h4><p>确保字符串的每个单词首字母都大写，其余部分小写。</p>\n<p>像’the’和’of’这样的连接符同理。</p>\n<p>这是一些对你有帮助的资源:</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"external\">String.split</a></p>\n<blockquote>\n<p><code>titleCase(&quot;I&#39;m a little tea pot&quot;)</code> 应该返回 “I’m A Little Tea Pot”.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr=str.toLowerCase().split(<span class=\"string\">' '</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> l=[];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> str1=arr[i].slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>).toUpperCase()+arr[i].slice(<span class=\"number\">1</span>);</div><div class=\"line\">    l.push(str1);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> l.join(<span class=\"string\">' '</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>首先我们需要把这个字符串的每一项都变成小写字母并转换成数组</li>\n<li>创建一个保存新的空数组</li>\n<li>用遍历数组的长度。之后我们把每一项数组的第一个字母用<code>slice()</code>变成大写。</li>\n<li>再<code>push</code>到空的数组里。</li>\n<li>最后用<code>join()</code>数组返回字符串。</li>\n</ul>\n<h4 id=\"6-Return-Largest-Numbers-in-Arrays\"><a href=\"#6-Return-Largest-Numbers-in-Arrays\" class=\"headerlink\" title=\"6.Return Largest Numbers in Arrays\"></a>6.Return Largest Numbers in Arrays</h4><p>右边大数组中包含了4个小数组，分别找到每个小数组中的最大值，然后把它们串联起来，形成一个新数组。</p>\n<p>提示：你可以用for循环来迭代数组，并通过<code>arr[i]</code>的方式来访问数组的每个元素。</p>\n<p>这是一些对你有帮助的资源:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" target=\"_blank\" rel=\"external\">Comparison Operators</a></li>\n</ul>\n<blockquote>\n<p><code>largestOfFour([[13, 27, 18, 26], [4, 5, 1, 3], [32, 35, 37, 39], [1000, 1001, 857, 1]])</code> 应该返回 <code>[27,5,39,1001]</code>.</p>\n</blockquote>\n<p><strong>第一种方法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// You can do this!</span></div><div class=\"line\"> <span class=\"keyword\">var</span> l=[];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</div><div class=\"line\">    arr[i].sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;<span class=\"keyword\">return</span> b-a&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  l.push(arr[i][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> l;</div><div class=\"line\"></div><div class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</div></pre></td></tr></table></figure></p>\n<p><strong>第二种方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">largestOfFour</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// You can do this!</span></div><div class=\"line\">  <span class=\"keyword\">var</span> temp = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> l = arr[i].reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev,cur,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> prev &gt; cur ? prev : cur;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    temp.push(l);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> temp;</div><div class=\"line\">&#125;</div><div class=\"line\">largestOfFour([[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>], [<span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">18</span>, <span class=\"number\">26</span>], [<span class=\"number\">32</span>, <span class=\"number\">35</span>, <span class=\"number\">37</span>, <span class=\"number\">39</span>], [<span class=\"number\">1000</span>, <span class=\"number\">1001</span>, <span class=\"number\">857</span>, <span class=\"number\">1</span>]]);</div></pre></td></tr></table></figure>"},{"title":"JavaScript变量+方法","date":"2017-04-24T05:55:00.000Z","comments":1,"layout":"post","_content":"\n# JavaScript变量+方法\n\nECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。\n\n**基本类型值**指的是简单的数据段，而**引用类型值**指那些可能有多个值构成的对象。\n\n## 传递参数\n\n```javascript\nfunction addTen(num){\n  num +=10;\n  return num;\n}\nvar count =20;\nvar result = addTen(count);\nalert(count); \t\t//20,没变化\nalert(result);\t\t//30\n```\n\n在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行`alert(count);`时`count`只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。\n\n<!--more-->\n\n## 方法\n\n- **split()**\n\n方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。\n\n## 重排序方法\n\n- **reverse()和sort()**\n\n**reverse()**方法会反转数组项的顺序。\n\n```javascript\nvar values = [1,2,3,4,5];\nvalues.reverse();\nalert(values); \t\t\t//5,4,3,2,1\n```\n\n而 **sort()**方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且`sort()`方法会调用每个数组项的`toString()`转型方法，然后去比较得到的字符串。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort();\nalert(values); \t\t//0,1,10,15,5\n```\n\n在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释\n\n```javascript\nfunction compare (value1,value2){\n  if(value1 <value2){\n    return -1; \t\t\t//return 1;\n  }else if(value1 >value2){\n    return 1;\t\t\t//return -1;\n  }else{\n    return 0;\n  }\n}\n```\n\n然后我们再把这个参数传给`sort()`方法即可。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nalert(values); \t\t//0,1,5,10,15\n```\n\n","source":"_posts/JavaScript变量.md","raw":"---\ntitle: JavaScript变量+方法\ndate: 2017-04-24 13:55\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# JavaScript变量+方法\n\nECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。\n\n**基本类型值**指的是简单的数据段，而**引用类型值**指那些可能有多个值构成的对象。\n\n## 传递参数\n\n```javascript\nfunction addTen(num){\n  num +=10;\n  return num;\n}\nvar count =20;\nvar result = addTen(count);\nalert(count); \t\t//20,没变化\nalert(result);\t\t//30\n```\n\n在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行`alert(count);`时`count`只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。\n\n<!--more-->\n\n## 方法\n\n- **split()**\n\n方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。\n\n## 重排序方法\n\n- **reverse()和sort()**\n\n**reverse()**方法会反转数组项的顺序。\n\n```javascript\nvar values = [1,2,3,4,5];\nvalues.reverse();\nalert(values); \t\t\t//5,4,3,2,1\n```\n\n而 **sort()**方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且`sort()`方法会调用每个数组项的`toString()`转型方法，然后去比较得到的字符串。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort();\nalert(values); \t\t//0,1,10,15,5\n```\n\n在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释\n\n```javascript\nfunction compare (value1,value2){\n  if(value1 <value2){\n    return -1; \t\t\t//return 1;\n  }else if(value1 >value2){\n    return 1;\t\t\t//return -1;\n  }else{\n    return 0;\n  }\n}\n```\n\n然后我们再把这个参数传给`sort()`方法即可。\n\n```javascript\nvar values = [0,1,5,10,15];\nvalues.sort(compare);\nalert(values); \t\t//0,1,5,10,15\n```\n\n","slug":"JavaScript变量","published":1,"updated":"2017-05-26T09:49:01.000Z","photos":[],"link":"","_id":"cj6krbq3w000zg3fya8brtdha","content":"<h1 id=\"JavaScript变量-方法\"><a href=\"#JavaScript变量-方法\" class=\"headerlink\" title=\"JavaScript变量+方法\"></a>JavaScript变量+方法</h1><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。</p>\n<p><strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型值</strong>指那些可能有多个值构成的对象。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTen</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">  num +=<span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> num;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> result = addTen(count);</div><div class=\"line\">alert(count); \t\t<span class=\"comment\">//20,没变化</span></div><div class=\"line\">alert(result);\t\t<span class=\"comment\">//30</span></div></pre></td></tr></table></figure>\n<p>在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行<code>alert(count);</code>时<code>count</code>只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。</p>\n<a id=\"more\"></a>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li><strong>split()</strong></li>\n</ul>\n<p>方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。</p>\n<h2 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h2><ul>\n<li><strong>reverse()和sort()</strong></li>\n</ul>\n<p><strong>reverse()</strong>方法会反转数组项的顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\">values.reverse();</div><div class=\"line\">alert(values); \t\t\t<span class=\"comment\">//5,4,3,2,1</span></div></pre></td></tr></table></figure>\n<p>而 <strong>sort()</strong>方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且<code>sort()</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后去比较得到的字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">values.sort();</div><div class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,10,15,5</span></div></pre></td></tr></table></figure>\n<p>在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span> (<span class=\"params\">value1,value2</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(value1 &lt;value2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; \t\t\t<span class=\"comment\">//return 1;</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt;value2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//return -1;</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们再把这个参数传给<code>sort()</code>方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">values.sort(compare);</div><div class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,5,10,15</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript变量-方法\"><a href=\"#JavaScript变量-方法\" class=\"headerlink\" title=\"JavaScript变量+方法\"></a>JavaScript变量+方法</h1><p>ECMAScript变量可能包含两种不同数据类型的值：基本类型值和引用类型值。</p>\n<p><strong>基本类型值</strong>指的是简单的数据段，而<strong>引用类型值</strong>指那些可能有多个值构成的对象。</p>\n<h2 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTen</span>(<span class=\"params\">num</span>)</span>&#123;</div><div class=\"line\">  num +=<span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> num;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> count =<span class=\"number\">20</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> result = addTen(count);</div><div class=\"line\">alert(count); \t\t<span class=\"comment\">//20,没变化</span></div><div class=\"line\">alert(result);\t\t<span class=\"comment\">//30</span></div></pre></td></tr></table></figure>\n<p>在这上面看了高程三的话懵懵懂懂，实际上在说的是，要执行<code>alert(count);</code>时<code>count</code>只是把20复制给参数num，以便20在addTen()中使用，在函数里面num的值确实+10变成了30，但是不影响外部count的变量。</p>","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><ul>\n<li><strong>split()</strong></li>\n</ul>\n<p>方法讲一个字符串对象的每个字符拆出来，并且将每个字符串当数组的每个元素。</p>\n<h2 id=\"重排序方法\"><a href=\"#重排序方法\" class=\"headerlink\" title=\"重排序方法\"></a>重排序方法</h2><ul>\n<li><strong>reverse()和sort()</strong></li>\n</ul>\n<p><strong>reverse()</strong>方法会反转数组项的顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\">values.reverse();</div><div class=\"line\">alert(values); \t\t\t<span class=\"comment\">//5,4,3,2,1</span></div></pre></td></tr></table></figure>\n<p>而 <strong>sort()</strong>方法是按升序排列数组项。——最小的值位于前面，最大的值排在最后面。而且<code>sort()</code>方法会调用每个数组项的<code>toString()</code>转型方法，然后去比较得到的字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">values.sort();</div><div class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,10,15,5</span></div></pre></td></tr></table></figure>\n<p>在字符串的比较时，10则位于5的前面，于是数组的顺序就被修改了。当然改为降序也行参考注释</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span> (<span class=\"params\">value1,value2</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(value1 &lt;value2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; \t\t\t<span class=\"comment\">//return 1;</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(value1 &gt;value2)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">//return -1;</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后我们再把这个参数传给<code>sort()</code>方法即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">values.sort(compare);</div><div class=\"line\">alert(values); \t\t<span class=\"comment\">//0,1,5,10,15</span></div></pre></td></tr></table></figure>"},{"title":"JavaScript对象","date":"2017-08-02T14:30:44.000Z","comments":1,"layout":"post","_content":"\n# Javascript对象\n\n在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。\n\n- JavaScript中的对象是无类型的。\n- 对象是属性的容器，其中每个属性都拥有名字和值。\n- JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。\n\n# 对象字面量\n\n```JavaScript\nvar empty_project = {};\nvar stooge = {\t\t\t\t//对象字面量\n  \"first-name\": \"Jerome\",\n  \"last-name\": \"Howard\"\n};\n```\n\n<!--more-->\n\n一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。\n\n```javascript\nvar flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2014-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival:{\n    IATA: \"LAX\",\n    time: \"2004-09-23 10:42\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。\n\n# 检索\n\n```javascript\nstooge[\"first-name\"] //Jerome\nflight.departure.IATA //SYD\n```\n\n需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。\n\n但是最好用`.`表示法。因为它可读性好。\n\n我们去检索不存在的：\n\n```JavaScript\nstooge[\"middle-name\"]  //undefined\nflight.status          //undefined\n```\n\n||运算符可以用来填充默认值：\n\n```javascript\nvar middle = stooge[\"middle-name\"] || \"(none)\";\nvar status = flight.status || \"unkown\";\n```\n\n如果我们从undefined的成员属性中取值会导致`TypeError`异常。这时候我们可以通过 `&&` 运算符来避免错误。\n\n```Javascript\nflight.equipment \t\t\t\t\t//undefined\nflight.equipment.model\t\t\t\t//throw \"TypeError\"\nflight.equipment && flight.equipment.model \t//undefined\n```\n\n# 更新\n\n对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。\n\n```JavaScript\nstooge['first-name'] = 'Jerome';\n```\n\n\n\n```javascript\nstooge['middle-name'] = 'Lester';\nstooge.nickname = 'Curly';\nflight.equipment = {\n  model: 'Boeing 777'\n};\nflight.status = 'overdue';\n```\n\n那么这些属性全部会扩充到对象中。\n\n# 引用\n\n对象通过引用来传递，他们永远不会被**复制**\n\n```javascript\nvar x = hi;\nx.hello = 'what';\nvar how = hi.hello;\n\t// how为what。\n//因为x和hi是指向同一个对象的引用。\n\nvar a = {},b = {},c = {};\n//a,b,c每个都引用一个不同的对象\na = b = c = {};\n//a,b,c都是引用同一个空对象\n```\n\n# 原型\n\n每个对象都连接一个原型对象，并且可以从中继承属性。\n\n所有通过对象字面量创建的对象都连接到`Object.prototype`，它是JavaScript中的标配对象。\n\n```javascript\nif (typeof Object.beget !== 'function'){\n  Object.create = function (o){\n    var F = function (){};\n    F.prototype = o;\n    return new F();\n  };\n}\nvar another_stooge = Object.create(stooge);\n```\n\nObject增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。\n\n## 原型连接在更新时是不起作用的\n\n```javascript\nanother_stooge['first-name'] = 'Harry';\nanother_stooge['middle-name'] = 'Moses';\nanother_stooge.nickname = 'Moe';\n```\n\n> 原型连接只有在检索值得时候才被用到。\n>\n> 如果我们尝试去获取对象的某个属性值，但对象没有此属性名。\n>\n> JavaScript会从原型对象中获取属性值  ——> 原型对象中没，就回去它原型中寻找 ——>直到最后到达终点Object.prototype。\n>\n> 假如想要的属性不存在于原型链，那么结果就只能是undefined。\n>\n> 以上的过程为委托。\n\n## 原型关系\n\n我们添加一个新的属性到**原型**中，该属性会立即对**所有**基于该原型创建的对象可见。\n\n```javascript\nstooge.profession = 'actor';\nanother_stooge.profession  //'actor\n```\n\n# 反射\n\ntypeof操作符对确定属性的类型很有帮助。\n\n```javascript\ntypeof flight.number\t//number\ntypeof flight.status \t//string\ntypeof flight.arrival \t//object\ntypeof flight.manifest \t//undefined\n```\n\n\n\n原型链中的任何值都会产生值\n\n```javascript\ntypeof flight.toString\t\t//function\ntypeof flight.constructor \t//function\n```\n\n\n\n有两种方法去处理掉这些不需要的属性。\n\n- 第一个是让你的程序做检查并丢弃为函数的属性。\n- 另一个方法是`hasOwnProperty` 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链\n\n```JavaScript\nflight.hasOwnProperty('number')\t\t\t//true\nflight.hasOwnProperty('constructor')\t//true\n```\n\n\n\n# 减少全局变量污染\n\n最小化使用全局变量的方法之一是为你的应用只创建一个**唯一**的全局变量！！\n\n```javascript\nvar MYAPP = {}; \t\t//该变量此时变成你的应用的容器\n\nMYAPP.stooge = {\n  \"first-name\": \"Joe\",\n  \"last-name\": \"Howard\"\n};\nMYAPP.flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2004-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival: {\n    IATA: \"LAX\",\n    time: \"2004-09-23 21:59\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n只要把全局性的资源都纳入一个名称空间之下，你的**程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。**\n\n因为`MYAPP.stooge`指向的是顶层结构。","source":"_posts/Javascript对象.md","raw":"---\ntitle: JavaScript对象\ndate: 2017-08-02 23：00\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# Javascript对象\n\n在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。\n\n- JavaScript中的对象是无类型的。\n- 对象是属性的容器，其中每个属性都拥有名字和值。\n- JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。\n\n# 对象字面量\n\n```JavaScript\nvar empty_project = {};\nvar stooge = {\t\t\t\t//对象字面量\n  \"first-name\": \"Jerome\",\n  \"last-name\": \"Howard\"\n};\n```\n\n<!--more-->\n\n一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。\n\n```javascript\nvar flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2014-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival:{\n    IATA: \"LAX\",\n    time: \"2004-09-23 10:42\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。\n\n# 检索\n\n```javascript\nstooge[\"first-name\"] //Jerome\nflight.departure.IATA //SYD\n```\n\n需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。\n\n但是最好用`.`表示法。因为它可读性好。\n\n我们去检索不存在的：\n\n```JavaScript\nstooge[\"middle-name\"]  //undefined\nflight.status          //undefined\n```\n\n||运算符可以用来填充默认值：\n\n```javascript\nvar middle = stooge[\"middle-name\"] || \"(none)\";\nvar status = flight.status || \"unkown\";\n```\n\n如果我们从undefined的成员属性中取值会导致`TypeError`异常。这时候我们可以通过 `&&` 运算符来避免错误。\n\n```Javascript\nflight.equipment \t\t\t\t\t//undefined\nflight.equipment.model\t\t\t\t//throw \"TypeError\"\nflight.equipment && flight.equipment.model \t//undefined\n```\n\n# 更新\n\n对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。\n\n```JavaScript\nstooge['first-name'] = 'Jerome';\n```\n\n\n\n```javascript\nstooge['middle-name'] = 'Lester';\nstooge.nickname = 'Curly';\nflight.equipment = {\n  model: 'Boeing 777'\n};\nflight.status = 'overdue';\n```\n\n那么这些属性全部会扩充到对象中。\n\n# 引用\n\n对象通过引用来传递，他们永远不会被**复制**\n\n```javascript\nvar x = hi;\nx.hello = 'what';\nvar how = hi.hello;\n\t// how为what。\n//因为x和hi是指向同一个对象的引用。\n\nvar a = {},b = {},c = {};\n//a,b,c每个都引用一个不同的对象\na = b = c = {};\n//a,b,c都是引用同一个空对象\n```\n\n# 原型\n\n每个对象都连接一个原型对象，并且可以从中继承属性。\n\n所有通过对象字面量创建的对象都连接到`Object.prototype`，它是JavaScript中的标配对象。\n\n```javascript\nif (typeof Object.beget !== 'function'){\n  Object.create = function (o){\n    var F = function (){};\n    F.prototype = o;\n    return new F();\n  };\n}\nvar another_stooge = Object.create(stooge);\n```\n\nObject增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。\n\n## 原型连接在更新时是不起作用的\n\n```javascript\nanother_stooge['first-name'] = 'Harry';\nanother_stooge['middle-name'] = 'Moses';\nanother_stooge.nickname = 'Moe';\n```\n\n> 原型连接只有在检索值得时候才被用到。\n>\n> 如果我们尝试去获取对象的某个属性值，但对象没有此属性名。\n>\n> JavaScript会从原型对象中获取属性值  ——> 原型对象中没，就回去它原型中寻找 ——>直到最后到达终点Object.prototype。\n>\n> 假如想要的属性不存在于原型链，那么结果就只能是undefined。\n>\n> 以上的过程为委托。\n\n## 原型关系\n\n我们添加一个新的属性到**原型**中，该属性会立即对**所有**基于该原型创建的对象可见。\n\n```javascript\nstooge.profession = 'actor';\nanother_stooge.profession  //'actor\n```\n\n# 反射\n\ntypeof操作符对确定属性的类型很有帮助。\n\n```javascript\ntypeof flight.number\t//number\ntypeof flight.status \t//string\ntypeof flight.arrival \t//object\ntypeof flight.manifest \t//undefined\n```\n\n\n\n原型链中的任何值都会产生值\n\n```javascript\ntypeof flight.toString\t\t//function\ntypeof flight.constructor \t//function\n```\n\n\n\n有两种方法去处理掉这些不需要的属性。\n\n- 第一个是让你的程序做检查并丢弃为函数的属性。\n- 另一个方法是`hasOwnProperty` 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链\n\n```JavaScript\nflight.hasOwnProperty('number')\t\t\t//true\nflight.hasOwnProperty('constructor')\t//true\n```\n\n\n\n# 减少全局变量污染\n\n最小化使用全局变量的方法之一是为你的应用只创建一个**唯一**的全局变量！！\n\n```javascript\nvar MYAPP = {}; \t\t//该变量此时变成你的应用的容器\n\nMYAPP.stooge = {\n  \"first-name\": \"Joe\",\n  \"last-name\": \"Howard\"\n};\nMYAPP.flight = {\n  airline: \"Oceanic\",\n  number: 815,\n  departure: {\n    IATA: \"SYD\",\n    time: \"2004-09-22 14:55\",\n    city: \"Sydney\"\n  },\n  arrival: {\n    IATA: \"LAX\",\n    time: \"2004-09-23 21:59\",\n    city: \"Los Angeles\"\n  }\n};\n```\n\n只要把全局性的资源都纳入一个名称空间之下，你的**程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。**\n\n因为`MYAPP.stooge`指向的是顶层结构。","slug":"Javascript对象","published":1,"updated":"2017-08-09T13:34:34.000Z","photos":[],"link":"","_id":"cj6krbq3y0011g3fy7jh46o48","content":"<h1 id=\"Javascript对象\"><a href=\"#Javascript对象\" class=\"headerlink\" title=\"Javascript对象\"></a>Javascript对象</h1><p>在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。</p>\n<ul>\n<li>JavaScript中的对象是无类型的。</li>\n<li>对象是属性的容器，其中每个属性都拥有名字和值。</li>\n<li>JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。</li>\n</ul>\n<h1 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> empty_project = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stooge = &#123;\t\t\t\t<span class=\"comment\">//对象字面量</span></div><div class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Jerome\"</span>,</div><div class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> flight = &#123;</div><div class=\"line\">  <span class=\"attr\">airline</span>: <span class=\"string\">\"Oceanic\"</span>,</div><div class=\"line\">  <span class=\"attr\">number</span>: <span class=\"number\">815</span>,</div><div class=\"line\">  <span class=\"attr\">departure</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"SYD\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2014-09-22 14:55\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Sydney\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">arrival</span>:&#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"LAX\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-23 10:42\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Los Angeles\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。</p>\n<h1 id=\"检索\"><a href=\"#检索\" class=\"headerlink\" title=\"检索\"></a>检索</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">\"first-name\"</span>] <span class=\"comment\">//Jerome</span></div><div class=\"line\">flight.departure.IATA <span class=\"comment\">//SYD</span></div></pre></td></tr></table></figure>\n<p>需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。</p>\n<p>但是最好用<code>.</code>表示法。因为它可读性好。</p>\n<p>我们去检索不存在的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">\"middle-name\"</span>]  <span class=\"comment\">//undefined</span></div><div class=\"line\">flight.status          <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>||运算符可以用来填充默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> middle = stooge[<span class=\"string\">\"middle-name\"</span>] || <span class=\"string\">\"(none)\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> status = flight.status || <span class=\"string\">\"unkown\"</span>;</div></pre></td></tr></table></figure>\n<p>如果我们从undefined的成员属性中取值会导致<code>TypeError</code>异常。这时候我们可以通过 <code>&amp;&amp;</code> 运算符来避免错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">flight.equipment \t\t\t\t\t<span class=\"comment\">//undefined</span></div><div class=\"line\">flight.equipment.model\t\t\t\t<span class=\"comment\">//throw \"TypeError\"</span></div><div class=\"line\">flight.equipment &amp;&amp; flight.equipment.model \t<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Jerome'</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Lester'</span>;</div><div class=\"line\">stooge.nickname = <span class=\"string\">'Curly'</span>;</div><div class=\"line\">flight.equipment = &#123;</div><div class=\"line\">  <span class=\"attr\">model</span>: <span class=\"string\">'Boeing 777'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">flight.status = <span class=\"string\">'overdue'</span>;</div></pre></td></tr></table></figure>\n<p>那么这些属性全部会扩充到对象中。</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>对象通过引用来传递，他们永远不会被<strong>复制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = hi;</div><div class=\"line\">x.hello = <span class=\"string\">'what'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> how = hi.hello;</div><div class=\"line\">\t<span class=\"comment\">// how为what。</span></div><div class=\"line\"><span class=\"comment\">//因为x和hi是指向同一个对象的引用。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;,b = &#123;&#125;,c = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//a,b,c每个都引用一个不同的对象</span></div><div class=\"line\">a = b = c = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//a,b,c都是引用同一个空对象</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p>每个对象都连接一个原型对象，并且可以从中继承属性。</p>\n<p>所有通过对象字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.beget !== <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> another_stooge = <span class=\"built_in\">Object</span>.create(stooge);</div></pre></td></tr></table></figure>\n<p>Object增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。</p>\n<h2 id=\"原型连接在更新时是不起作用的\"><a href=\"#原型连接在更新时是不起作用的\" class=\"headerlink\" title=\"原型连接在更新时是不起作用的\"></a>原型连接在更新时是不起作用的</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">another_stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Harry'</span>;</div><div class=\"line\">another_stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Moses'</span>;</div><div class=\"line\">another_stooge.nickname = <span class=\"string\">'Moe'</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原型连接只有在检索值得时候才被用到。</p>\n<p>如果我们尝试去获取对象的某个属性值，但对象没有此属性名。</p>\n<p>JavaScript会从原型对象中获取属性值  ——&gt; 原型对象中没，就回去它原型中寻找 ——&gt;直到最后到达终点Object.prototype。</p>\n<p>假如想要的属性不存在于原型链，那么结果就只能是undefined。</p>\n<p>以上的过程为委托。</p>\n</blockquote>\n<h2 id=\"原型关系\"><a href=\"#原型关系\" class=\"headerlink\" title=\"原型关系\"></a>原型关系</h2><p>我们添加一个新的属性到<strong>原型</strong>中，该属性会立即对<strong>所有</strong>基于该原型创建的对象可见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge.profession = <span class=\"string\">'actor'</span>;</div><div class=\"line\">another_stooge.profession  <span class=\"comment\">//'actor</span></div></pre></td></tr></table></figure>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>typeof操作符对确定属性的类型很有帮助。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> flight.number\t<span class=\"comment\">//number</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.status \t<span class=\"comment\">//string</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.arrival \t<span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.manifest \t<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>原型链中的任何值都会产生值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> flight.toString\t\t<span class=\"comment\">//function</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.constructor \t<span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>有两种方法去处理掉这些不需要的属性。</p>\n<ul>\n<li>第一个是让你的程序做检查并丢弃为函数的属性。</li>\n<li>另一个方法是<code>hasOwnProperty</code> 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">flight.hasOwnProperty(<span class=\"string\">'number'</span>)\t\t\t<span class=\"comment\">//true</span></div><div class=\"line\">flight.hasOwnProperty(<span class=\"string\">'constructor'</span>)\t<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h1 id=\"减少全局变量污染\"><a href=\"#减少全局变量污染\" class=\"headerlink\" title=\"减少全局变量污染\"></a>减少全局变量污染</h1><p>最小化使用全局变量的方法之一是为你的应用只创建一个<strong>唯一</strong>的全局变量！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;; \t\t<span class=\"comment\">//该变量此时变成你的应用的容器</span></div><div class=\"line\"></div><div class=\"line\">MYAPP.stooge = &#123;</div><div class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\">MYAPP.flight = &#123;</div><div class=\"line\">  <span class=\"attr\">airline</span>: <span class=\"string\">\"Oceanic\"</span>,</div><div class=\"line\">  <span class=\"attr\">number</span>: <span class=\"number\">815</span>,</div><div class=\"line\">  <span class=\"attr\">departure</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"SYD\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-22 14:55\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Sydney\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">arrival</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"LAX\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-23 21:59\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Los Angeles\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>只要把全局性的资源都纳入一个名称空间之下，你的<strong>程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。</strong></p>\n<p>因为<code>MYAPP.stooge</code>指向的是顶层结构。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Javascript对象\"><a href=\"#Javascript对象\" class=\"headerlink\" title=\"Javascript对象\"></a>Javascript对象</h1><p>在JavaScript中，数组是对象，函数是对象，正则表达式是对象。那么对象自然也是对象。</p>\n<ul>\n<li>JavaScript中的对象是无类型的。</li>\n<li>对象是属性的容器，其中每个属性都拥有名字和值。</li>\n<li>JavaScript包含一种原型链的特性，允许对象继承另一个对象的属性。</li>\n</ul>\n<h1 id=\"对象字面量\"><a href=\"#对象字面量\" class=\"headerlink\" title=\"对象字面量\"></a>对象字面量</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> empty_project = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stooge = &#123;\t\t\t\t<span class=\"comment\">//对象字面量</span></div><div class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Jerome\"</span>,</div><div class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>","more":"<p>一个对象字面量就是包围在一对花括号中的零或多个“名/值”对。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> flight = &#123;</div><div class=\"line\">  <span class=\"attr\">airline</span>: <span class=\"string\">\"Oceanic\"</span>,</div><div class=\"line\">  <span class=\"attr\">number</span>: <span class=\"number\">815</span>,</div><div class=\"line\">  <span class=\"attr\">departure</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"SYD\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2014-09-22 14:55\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Sydney\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">arrival</span>:&#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"LAX\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-23 10:42\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Los Angeles\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>属性的值可以从包括另一个对象字面量在内的任意表达式中获得。对象是可以嵌套的。</p>\n<h1 id=\"检索\"><a href=\"#检索\" class=\"headerlink\" title=\"检索\"></a>检索</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">\"first-name\"</span>] <span class=\"comment\">//Jerome</span></div><div class=\"line\">flight.departure.IATA <span class=\"comment\">//SYD</span></div></pre></td></tr></table></figure>\n<p>需要检索对象里包含的值，可以采用[ ]后缀中括住一个字符串表达式的方式。</p>\n<p>但是最好用<code>.</code>表示法。因为它可读性好。</p>\n<p>我们去检索不存在的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">\"middle-name\"</span>]  <span class=\"comment\">//undefined</span></div><div class=\"line\">flight.status          <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>||运算符可以用来填充默认值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> middle = stooge[<span class=\"string\">\"middle-name\"</span>] || <span class=\"string\">\"(none)\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> status = flight.status || <span class=\"string\">\"unkown\"</span>;</div></pre></td></tr></table></figure>\n<p>如果我们从undefined的成员属性中取值会导致<code>TypeError</code>异常。这时候我们可以通过 <code>&amp;&amp;</code> 运算符来避免错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">flight.equipment \t\t\t\t\t<span class=\"comment\">//undefined</span></div><div class=\"line\">flight.equipment.model\t\t\t\t<span class=\"comment\">//throw \"TypeError\"</span></div><div class=\"line\">flight.equipment &amp;&amp; flight.equipment.model \t<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>对象里的值可以通过赋值语句来更新。如果属性吗已经存在于对象里，那么这个属性的值会被替换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Jerome'</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Lester'</span>;</div><div class=\"line\">stooge.nickname = <span class=\"string\">'Curly'</span>;</div><div class=\"line\">flight.equipment = &#123;</div><div class=\"line\">  <span class=\"attr\">model</span>: <span class=\"string\">'Boeing 777'</span></div><div class=\"line\">&#125;;</div><div class=\"line\">flight.status = <span class=\"string\">'overdue'</span>;</div></pre></td></tr></table></figure>\n<p>那么这些属性全部会扩充到对象中。</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>对象通过引用来传递，他们永远不会被<strong>复制</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> x = hi;</div><div class=\"line\">x.hello = <span class=\"string\">'what'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> how = hi.hello;</div><div class=\"line\">\t<span class=\"comment\">// how为what。</span></div><div class=\"line\"><span class=\"comment\">//因为x和hi是指向同一个对象的引用。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = &#123;&#125;,b = &#123;&#125;,c = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//a,b,c每个都引用一个不同的对象</span></div><div class=\"line\">a = b = c = &#123;&#125;;</div><div class=\"line\"><span class=\"comment\">//a,b,c都是引用同一个空对象</span></div></pre></td></tr></table></figure>\n<h1 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h1><p>每个对象都连接一个原型对象，并且可以从中继承属性。</p>\n<p>所有通过对象字面量创建的对象都连接到<code>Object.prototype</code>，它是JavaScript中的标配对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.beget !== <span class=\"string\">'function'</span>)&#123;</div><div class=\"line\">  <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> F = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    F.prototype = o;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> another_stooge = <span class=\"built_in\">Object</span>.create(stooge);</div></pre></td></tr></table></figure>\n<p>Object增加一个create方法，这个方法创建一个使用原对象作为其原型的新对象。</p>\n<h2 id=\"原型连接在更新时是不起作用的\"><a href=\"#原型连接在更新时是不起作用的\" class=\"headerlink\" title=\"原型连接在更新时是不起作用的\"></a>原型连接在更新时是不起作用的</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">another_stooge[<span class=\"string\">'first-name'</span>] = <span class=\"string\">'Harry'</span>;</div><div class=\"line\">another_stooge[<span class=\"string\">'middle-name'</span>] = <span class=\"string\">'Moses'</span>;</div><div class=\"line\">another_stooge.nickname = <span class=\"string\">'Moe'</span>;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原型连接只有在检索值得时候才被用到。</p>\n<p>如果我们尝试去获取对象的某个属性值，但对象没有此属性名。</p>\n<p>JavaScript会从原型对象中获取属性值  ——&gt; 原型对象中没，就回去它原型中寻找 ——&gt;直到最后到达终点Object.prototype。</p>\n<p>假如想要的属性不存在于原型链，那么结果就只能是undefined。</p>\n<p>以上的过程为委托。</p>\n</blockquote>\n<h2 id=\"原型关系\"><a href=\"#原型关系\" class=\"headerlink\" title=\"原型关系\"></a>原型关系</h2><p>我们添加一个新的属性到<strong>原型</strong>中，该属性会立即对<strong>所有</strong>基于该原型创建的对象可见。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">stooge.profession = <span class=\"string\">'actor'</span>;</div><div class=\"line\">another_stooge.profession  <span class=\"comment\">//'actor</span></div></pre></td></tr></table></figure>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>typeof操作符对确定属性的类型很有帮助。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> flight.number\t<span class=\"comment\">//number</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.status \t<span class=\"comment\">//string</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.arrival \t<span class=\"comment\">//object</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.manifest \t<span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n<p>原型链中的任何值都会产生值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> flight.toString\t\t<span class=\"comment\">//function</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> flight.constructor \t<span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>有两种方法去处理掉这些不需要的属性。</p>\n<ul>\n<li>第一个是让你的程序做检查并丢弃为函数的属性。</li>\n<li>另一个方法是<code>hasOwnProperty</code> 方法，如果对象拥有独有的属性，它将返回true。不会检查原型链</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">flight.hasOwnProperty(<span class=\"string\">'number'</span>)\t\t\t<span class=\"comment\">//true</span></div><div class=\"line\">flight.hasOwnProperty(<span class=\"string\">'constructor'</span>)\t<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h1 id=\"减少全局变量污染\"><a href=\"#减少全局变量污染\" class=\"headerlink\" title=\"减少全局变量污染\"></a>减少全局变量污染</h1><p>最小化使用全局变量的方法之一是为你的应用只创建一个<strong>唯一</strong>的全局变量！！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MYAPP = &#123;&#125;; \t\t<span class=\"comment\">//该变量此时变成你的应用的容器</span></div><div class=\"line\"></div><div class=\"line\">MYAPP.stooge = &#123;</div><div class=\"line\">  <span class=\"string\">\"first-name\"</span>: <span class=\"string\">\"Joe\"</span>,</div><div class=\"line\">  <span class=\"string\">\"last-name\"</span>: <span class=\"string\">\"Howard\"</span></div><div class=\"line\">&#125;;</div><div class=\"line\">MYAPP.flight = &#123;</div><div class=\"line\">  <span class=\"attr\">airline</span>: <span class=\"string\">\"Oceanic\"</span>,</div><div class=\"line\">  <span class=\"attr\">number</span>: <span class=\"number\">815</span>,</div><div class=\"line\">  <span class=\"attr\">departure</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"SYD\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-22 14:55\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Sydney\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">arrival</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">IATA</span>: <span class=\"string\">\"LAX\"</span>,</div><div class=\"line\">    <span class=\"attr\">time</span>: <span class=\"string\">\"2004-09-23 21:59\"</span>,</div><div class=\"line\">    <span class=\"attr\">city</span>: <span class=\"string\">\"Los Angeles\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>只要把全局性的资源都纳入一个名称空间之下，你的<strong>程序与其他应用程序、组件、类库直接发送冲突的可能性就会显著降低。</strong></p>\n<p>因为<code>MYAPP.stooge</code>指向的是顶层结构。</p>"},{"title":"Node.js+hexo部署博客","date":"2017-03-20T08:10:14.000Z","comments":1,"layout":"post","_content":"\n初衷\n==\n\n想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。\nNode.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。\n现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。\n<!--more-->\n----------\n\n什么是 Hexo？\n---------\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n安装Node\n======\n\n下载安装Node注意事项\n------------\n\n[Node.js](https://nodejs.org)根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。\n\n环境配置\n----\n\n各种都要配置环境，Node也不例外。如果你的文件路径为`D:\\node`也就是你`Node.exe`所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量`在Path`项中加入`D:\\node`这个路径。之后我们win+R打入cmd命令行去执行`npm`命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。\n\n配置国内镜像\n------\n\n在国内可以用[淘宝NPM镜像](http://npm.taobao.org/)，这样各种安装和使用npm快很多而且还可以代替`npm`。你只要运行下面的命令\n```shell\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n同样测试有没有安装好，这次打`cnpm`就行拉，结果显示与上述相同。\n那么以后我们只要执行跟`npm`的命令时我们只要把`npm`替换成`cnpm`就行了！\n\n安装Git\n=====\n\n下载Git程序包\n--------\n\n作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。\n\n- windows下安装[Git SCM](https://git-for-windows.github.io/) \n- Mac下安装[GitSCM](https://git-scm.com/download/mac) \n- Linux and Unix下安装[GitSCM](https://git-scm.com/download/linux)\n- 附上[git使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n环境配置\n----\n\n同样Git也需要环境配置，与Node配置一致。你Git的路径`C:\\Git\\bin`那么在`Path`中就可以这样写`C:\\Git\\bin`。下面要进入重点了！\n\n安装Hexo\n======\n\n[Hexo中文文档](https://hexo.io/zh-cn/docs/)，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。\n```shell\n$ npm install -g hexo-cli\n```\n有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了[淘宝NPM镜像](http://npm.taobao.org/)我们直接使用以下命令：\n```shell\n$ cnpm install -g hexo-cli\n```\nWindows Mac Linux Unix系统编译时遇到的问题则可以去[Hexo中文文档](https://hexo.io/zh-cn/docs/)里面寻找解决办法。\n\n使用Hexo建站\n--------\n\nHexo建站后产生的文件如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。\n\n创建站点\n----\n\n找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。\n```shell\n$ hexo init site\n```\n然后我们再右键`site`文件夹执行以下命令：\n```shell\n$ hexo generate\n```\n这时，我们点开`site`会发现里面有个`public`的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。\n\n自动化部署\n-----\n\nHexo自动Git部署需要安装`hexo-deployer-git`，执行下列命令\n```shell\ncnpm install hexo-deployer-git --save\n```\n然后修改系统配置文件`_config.yml`（不是`themes`子目录下的主题配置文件）。修改`deploy`这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。*注意缩进，*yml中使用缩进表示从属关系，用`-`表示一个序列（可以同时部署到多个仓库）。*这里减号后有一个空格*。以我的项目为例，配置内容如下：\n```yaml\ndeploy:\n- type: git\n  repo: git@git.coding.net:Adherent/Adherent.git\n  branch: coding-pages\n```\n`type`值不用修改，因为这里使用的是git的pages服务，类型就是git。\n`repo`为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考[生成并部署SSH key](http://git.mydoc.io/?t=154712)。\n`branch`为开启pages服务的分支名称。一般的，码云为`osc-pages`，Coding为`coding-pages`，GitHub为`gh-pages`。\n配置好部署信息后，即可用Hexo把静态页面部署到git上了。\n```shell\nhexo deploy\n```\n部署完成后，通过域名，应该就能访问到这些页面了。\n\n部署SSH key\n---------\n\n则可以看我的部署SSH key的文章\n\nPages服务的选择\n==========\n\n都说做编程必须有[GitHub](https://github.com/)而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的[码云](https://git.oschina.net/)或者[Coding](https://coding.net/)以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用[Coding](https://coding.net/help/doc/pages/index.html)。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启\n以我的网站为例，项目地址为[https://coding.net/u/Adherent/p/Adherent/git](https://coding.net/u/Adherent/p/Adherent/git)，开启pages服务的分支名称为`coding-pages`。项目初始化时并没有`codingc-pages`分支，可以等Hexo部署静态文件后再开启pages服务。\n\n添加新文章\n=====\n\n博客建成，那么我们就可以写自己的博文了！执行下列命令：\n```shell\n$ hexo n 文章题目\n```\n以上命令就可以在`source/_posts/目录中生成一个文件名为`文章题目`后缀名为`.md`的文件。\n剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见[Markdown 语法说明 (简体中文版)](http://www.appinn.com/markdown/)\n我推荐一款[Cmd Markdown](https://www.zybuluo.com/cmd/)个人感觉用的还是很舒服的。\n[这是Cmd Markdown的简明语法手册。](https://www.zybuluo.com/chanvee/note/10789)\n然后执行以下命令即可生成新的页面，部署到git。\n```shell\nhexo g -d\n```\n同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。\n```shell\ngit add *\ngit commit -m \"新的文章\"\ngit push\n```\n到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考[文档|Hexo](https://hexo.io/zh-cn/docs/)即可。\n\n参考文章\n====\n\n- [淘宝NPM镜像](http://npm.taobao.org/)\n- [git使用简易指南](http://www.bootcss.com/p/git-guide/)\n- [文档|Hexo](https://hexo.io/zh-cn/docs/)\n- [Cmd Markdown](https://www.zybuluo.com/cmd/)\n- [启蒙](http://www.maoxuner.cn/)\n  `\n\n\n","source":"_posts/Node.js+hexo部署博客.md","raw":"---\ntitle: Node.js+hexo部署博客\ndate: 2017-03-20 16:10:14\ncomments: true\nlayout: post\ntags: [hexo,git,node.js,javascript]\ncategories: Technology\n---\n\n初衷\n==\n\n想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。\nNode.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。\n现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。\n<!--more-->\n----------\n\n什么是 Hexo？\n---------\n\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n安装Node\n======\n\n下载安装Node注意事项\n------------\n\n[Node.js](https://nodejs.org)根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。\n\n环境配置\n----\n\n各种都要配置环境，Node也不例外。如果你的文件路径为`D:\\node`也就是你`Node.exe`所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量`在Path`项中加入`D:\\node`这个路径。之后我们win+R打入cmd命令行去执行`npm`命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。\n\n配置国内镜像\n------\n\n在国内可以用[淘宝NPM镜像](http://npm.taobao.org/)，这样各种安装和使用npm快很多而且还可以代替`npm`。你只要运行下面的命令\n```shell\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n同样测试有没有安装好，这次打`cnpm`就行拉，结果显示与上述相同。\n那么以后我们只要执行跟`npm`的命令时我们只要把`npm`替换成`cnpm`就行了！\n\n安装Git\n=====\n\n下载Git程序包\n--------\n\n作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。\n\n- windows下安装[Git SCM](https://git-for-windows.github.io/) \n- Mac下安装[GitSCM](https://git-scm.com/download/mac) \n- Linux and Unix下安装[GitSCM](https://git-scm.com/download/linux)\n- 附上[git使用简易指南](http://www.bootcss.com/p/git-guide/)\n\n环境配置\n----\n\n同样Git也需要环境配置，与Node配置一致。你Git的路径`C:\\Git\\bin`那么在`Path`中就可以这样写`C:\\Git\\bin`。下面要进入重点了！\n\n安装Hexo\n======\n\n[Hexo中文文档](https://hexo.io/zh-cn/docs/)，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。\n```shell\n$ npm install -g hexo-cli\n```\n有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了[淘宝NPM镜像](http://npm.taobao.org/)我们直接使用以下命令：\n```shell\n$ cnpm install -g hexo-cli\n```\nWindows Mac Linux Unix系统编译时遇到的问题则可以去[Hexo中文文档](https://hexo.io/zh-cn/docs/)里面寻找解决办法。\n\n使用Hexo建站\n--------\n\nHexo建站后产生的文件如下：\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。\n\n创建站点\n----\n\n找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。\n```shell\n$ hexo init site\n```\n然后我们再右键`site`文件夹执行以下命令：\n```shell\n$ hexo generate\n```\n这时，我们点开`site`会发现里面有个`public`的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。\n\n自动化部署\n-----\n\nHexo自动Git部署需要安装`hexo-deployer-git`，执行下列命令\n```shell\ncnpm install hexo-deployer-git --save\n```\n然后修改系统配置文件`_config.yml`（不是`themes`子目录下的主题配置文件）。修改`deploy`这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。*注意缩进，*yml中使用缩进表示从属关系，用`-`表示一个序列（可以同时部署到多个仓库）。*这里减号后有一个空格*。以我的项目为例，配置内容如下：\n```yaml\ndeploy:\n- type: git\n  repo: git@git.coding.net:Adherent/Adherent.git\n  branch: coding-pages\n```\n`type`值不用修改，因为这里使用的是git的pages服务，类型就是git。\n`repo`为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考[生成并部署SSH key](http://git.mydoc.io/?t=154712)。\n`branch`为开启pages服务的分支名称。一般的，码云为`osc-pages`，Coding为`coding-pages`，GitHub为`gh-pages`。\n配置好部署信息后，即可用Hexo把静态页面部署到git上了。\n```shell\nhexo deploy\n```\n部署完成后，通过域名，应该就能访问到这些页面了。\n\n部署SSH key\n---------\n\n则可以看我的部署SSH key的文章\n\nPages服务的选择\n==========\n\n都说做编程必须有[GitHub](https://github.com/)而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的[码云](https://git.oschina.net/)或者[Coding](https://coding.net/)以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用[Coding](https://coding.net/help/doc/pages/index.html)。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启\n以我的网站为例，项目地址为[https://coding.net/u/Adherent/p/Adherent/git](https://coding.net/u/Adherent/p/Adherent/git)，开启pages服务的分支名称为`coding-pages`。项目初始化时并没有`codingc-pages`分支，可以等Hexo部署静态文件后再开启pages服务。\n\n添加新文章\n=====\n\n博客建成，那么我们就可以写自己的博文了！执行下列命令：\n```shell\n$ hexo n 文章题目\n```\n以上命令就可以在`source/_posts/目录中生成一个文件名为`文章题目`后缀名为`.md`的文件。\n剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见[Markdown 语法说明 (简体中文版)](http://www.appinn.com/markdown/)\n我推荐一款[Cmd Markdown](https://www.zybuluo.com/cmd/)个人感觉用的还是很舒服的。\n[这是Cmd Markdown的简明语法手册。](https://www.zybuluo.com/chanvee/note/10789)\n然后执行以下命令即可生成新的页面，部署到git。\n```shell\nhexo g -d\n```\n同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。\n```shell\ngit add *\ngit commit -m \"新的文章\"\ngit push\n```\n到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考[文档|Hexo](https://hexo.io/zh-cn/docs/)即可。\n\n参考文章\n====\n\n- [淘宝NPM镜像](http://npm.taobao.org/)\n- [git使用简易指南](http://www.bootcss.com/p/git-guide/)\n- [文档|Hexo](https://hexo.io/zh-cn/docs/)\n- [Cmd Markdown](https://www.zybuluo.com/cmd/)\n- [启蒙](http://www.maoxuner.cn/)\n  `\n\n\n","slug":"Node.js+hexo部署博客","published":1,"updated":"2017-07-28T12:43:09.000Z","photos":[],"link":"","_id":"cj6krbq400016g3fyy2j30ujy","content":"<h1 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h1><p>想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。<br>Node.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。<br>现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h1 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h1><h2 id=\"下载安装Node注意事项\"><a href=\"#下载安装Node注意事项\" class=\"headerlink\" title=\"下载安装Node注意事项\"></a>下载安装Node注意事项</h2><p><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">Node.js</a>根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>各种都要配置环境，Node也不例外。如果你的文件路径为<code>D:\\node</code>也就是你<code>Node.exe</code>所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量<code>在Path</code>项中加入<code>D:\\node</code>这个路径。之后我们win+R打入cmd命令行去执行<code>npm</code>命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。</p>\n<h2 id=\"配置国内镜像\"><a href=\"#配置国内镜像\" class=\"headerlink\" title=\"配置国内镜像\"></a>配置国内镜像</h2><p>在国内可以用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a>，这样各种安装和使用npm快很多而且还可以代替<code>npm</code>。你只要运行下面的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>同样测试有没有安装好，这次打<code>cnpm</code>就行拉，结果显示与上述相同。<br>那么以后我们只要执行跟<code>npm</code>的命令时我们只要把<code>npm</code>替换成<code>cnpm</code>就行了！</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"下载Git程序包\"><a href=\"#下载Git程序包\" class=\"headerlink\" title=\"下载Git程序包\"></a>下载Git程序包</h2><p>作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。</p>\n<ul>\n<li>windows下安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">Git SCM</a> </li>\n<li>Mac下安装<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"external\">GitSCM</a> </li>\n<li>Linux and Unix下安装<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"external\">GitSCM</a></li>\n<li>附上<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"external\">git使用简易指南</a></li>\n</ul>\n<h2 id=\"环境配置-1\"><a href=\"#环境配置-1\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>同样Git也需要环境配置，与Node配置一致。你Git的路径<code>C:\\Git\\bin</code>那么在<code>Path</code>中就可以这样写<code>C:\\Git\\bin</code>。下面要进入重点了！</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo中文文档</a>，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a>我们直接使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>Windows Mac Linux Unix系统编译时遇到的问题则可以去<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo中文文档</a>里面寻找解决办法。</p>\n<h2 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h2><p>Hexo建站后产生的文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<p>其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init site</div></pre></td></tr></table></figure></p>\n<p>然后我们再右键<code>site</code>文件夹执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure></p>\n<p>这时，我们点开<code>site</code>会发现里面有个<code>public</code>的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。</p>\n<h2 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h2><p>Hexo自动Git部署需要安装<code>hexo-deployer-git</code>，执行下列命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>然后修改系统配置文件<code>_config.yml</code>（不是<code>themes</code>子目录下的主题配置文件）。修改<code>deploy</code>这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。<em>注意缩进，</em>yml中使用缩进表示从属关系，用<code>-</code>表示一个序列（可以同时部署到多个仓库）。<em>这里减号后有一个空格</em>。以我的项目为例，配置内容如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@git.coding.net:Adherent/Adherent.git</span></div><div class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">coding-pages</span></div></pre></td></tr></table></figure></p>\n<p><code>type</code>值不用修改，因为这里使用的是git的pages服务，类型就是git。<br><code>repo</code>为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考<a href=\"http://git.mydoc.io/?t=154712\" target=\"_blank\" rel=\"external\">生成并部署SSH key</a>。<br><code>branch</code>为开启pages服务的分支名称。一般的，码云为<code>osc-pages</code>，Coding为<code>coding-pages</code>，GitHub为<code>gh-pages</code>。<br>配置好部署信息后，即可用Hexo把静态页面部署到git上了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>部署完成后，通过域名，应该就能访问到这些页面了。</p>\n<h2 id=\"部署SSH-key\"><a href=\"#部署SSH-key\" class=\"headerlink\" title=\"部署SSH key\"></a>部署SSH key</h2><p>则可以看我的部署SSH key的文章</p>\n<h1 id=\"Pages服务的选择\"><a href=\"#Pages服务的选择\" class=\"headerlink\" title=\"Pages服务的选择\"></a>Pages服务的选择</h1><p>都说做编程必须有<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的<a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding</a>以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"external\">Coding</a>。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启<br>以我的网站为例，项目地址为<a href=\"https://coding.net/u/Adherent/p/Adherent/git\" target=\"_blank\" rel=\"external\">https://coding.net/u/Adherent/p/Adherent/git</a>，开启pages服务的分支名称为<code>coding-pages</code>。项目初始化时并没有<code>codingc-pages</code>分支，可以等Hexo部署静态文件后再开启pages服务。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>博客建成，那么我们就可以写自己的博文了！执行下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n 文章题目</div></pre></td></tr></table></figure></p>\n<p>以上命令就可以在<code>source/_posts/目录中生成一个文件名为</code>文章题目<code>后缀名为</code>.md`的文件。<br>剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a><br>我推荐一款<a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Cmd Markdown</a>个人感觉用的还是很舒服的。<br><a href=\"https://www.zybuluo.com/chanvee/note/10789\" target=\"_blank\" rel=\"external\">这是Cmd Markdown的简明语法手册。</a><br>然后执行以下命令即可生成新的页面，部署到git。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure></p>\n<p>同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add *</div><div class=\"line\">git commit -m &quot;新的文章&quot;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档|Hexo</a>即可。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a></li>\n<li><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"external\">git使用简易指南</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档|Hexo</a></li>\n<li><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Cmd Markdown</a></li>\n<li><a href=\"http://www.maoxuner.cn/\" target=\"_blank\" rel=\"external\">启蒙</a><br>`</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h1><p>想了很久，还是要弄个博客来勉励自己来督促自己学习去记录。因为学生党，没能抢到腾讯云+阿里云学生优惠，又用过github pages而且挺想用markdown写作，就选择Hexo来搭建自己的博客。也许有人会说为什么不用Jekyll，因为我所用的是windows系统，而且不建议在windows系统下安装Jekyll，还有我准备发展方向是前端。hexo是基于Node.js而Jekyll是基于Ruby所以你懂的！还有我查了一下Hexo是台湾的程序员开发的，原生态支持中文。<br>Node.js+Hexo。是因为我对js的热爱还有因为是台湾同胞的作品，所去选择的。<br>现在我也就把自己搭建流程说一下以及自己遇到的问题着重提一下。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h1 id=\"安装Node\"><a href=\"#安装Node\" class=\"headerlink\" title=\"安装Node\"></a>安装Node</h1><h2 id=\"下载安装Node注意事项\"><a href=\"#下载安装Node注意事项\" class=\"headerlink\" title=\"下载安装Node注意事项\"></a>下载安装Node注意事项</h2><p><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">Node.js</a>根据自己电脑/喜好去选择是否用安装包还是绿色安装！建议路径中不要包含空格或者其他特殊字符，防止出现莫名其妙的错误，最好纯英文。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>各种都要配置环境，Node也不例外。如果你的文件路径为<code>D:\\node</code>也就是你<code>Node.exe</code>所在的位置。回到桌面点击（我是win10，win7,win8方法类似）我的电脑右键-属性-高级系统设置-高级-环境变量<code>在Path</code>项中加入<code>D:\\node</code>这个路径。之后我们win+R打入cmd命令行去执行<code>npm</code>命令，如果没有提示找不到命令，则说明Node安装成功，如果有的话去看看自己是不是环境配置没有配置好。</p>\n<h2 id=\"配置国内镜像\"><a href=\"#配置国内镜像\" class=\"headerlink\" title=\"配置国内镜像\"></a>配置国内镜像</h2><p>在国内可以用<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a>，这样各种安装和使用npm快很多而且还可以代替<code>npm</code>。你只要运行下面的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>同样测试有没有安装好，这次打<code>cnpm</code>就行拉，结果显示与上述相同。<br>那么以后我们只要执行跟<code>npm</code>的命令时我们只要把<code>npm</code>替换成<code>cnpm</code>就行了！</p>\n<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><h2 id=\"下载Git程序包\"><a href=\"#下载Git程序包\" class=\"headerlink\" title=\"下载Git程序包\"></a>下载Git程序包</h2><p>作为萌新最希望能一步一步来，我也就一步一步和大家说，也为了以后自己注意一些Git的小细节。</p>\n<ul>\n<li>windows下安装<a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">Git SCM</a> </li>\n<li>Mac下安装<a href=\"https://git-scm.com/download/mac\" target=\"_blank\" rel=\"external\">GitSCM</a> </li>\n<li>Linux and Unix下安装<a href=\"https://git-scm.com/download/linux\" target=\"_blank\" rel=\"external\">GitSCM</a></li>\n<li>附上<a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"external\">git使用简易指南</a></li>\n</ul>\n<h2 id=\"环境配置-1\"><a href=\"#环境配置-1\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>同样Git也需要环境配置，与Node配置一致。你Git的路径<code>C:\\Git\\bin</code>那么在<code>Path</code>中就可以这样写<code>C:\\Git\\bin</code>。下面要进入重点了！</p>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo中文文档</a>，我们把Hexo两大依赖Node.js和Git都已经安装配置完成。不出问题，那么下面则是水到渠成。接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>有些人会发现执行上面那句下载缓慢还出错，那么因为我们已经用了<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a>我们直接使用以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cnpm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>Windows Mac Linux Unix系统编译时遇到的问题则可以去<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">Hexo中文文档</a>里面寻找解决办法。</p>\n<h2 id=\"使用Hexo建站\"><a href=\"#使用Hexo建站\" class=\"headerlink\" title=\"使用Hexo建站\"></a>使用Hexo建站</h2><p>Hexo建站后产生的文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└── themes</div></pre></td></tr></table></figure></p>\n<p>其中最重要的是_config.yml这是网站的配置信息，我们可以在里面配置大部分的参数。去让我们的博客变得更加个性化。</p>\n<h2 id=\"创建站点\"><a href=\"#创建站点\" class=\"headerlink\" title=\"创建站点\"></a>创建站点</h2><p>找一个你自己想放你项目的目录，按住Shift然后在空白处右击打开Git Bash here执行下列命令，Hexo则会在指定的文件夹中新建所需要的文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init site</div></pre></td></tr></table></figure></p>\n<p>然后我们再右键<code>site</code>文件夹执行以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure></p>\n<p>这时，我们点开<code>site</code>会发现里面有个<code>public</code>的目录。这里面就是网站的静态文件。我们可以手动的把这些静态文件纳入git的仓库接着推送到开启page服务的分支上或者发布到Web服务器上。但是我还是推荐你们用Hexo的自动化部署。</p>\n<h2 id=\"自动化部署\"><a href=\"#自动化部署\" class=\"headerlink\" title=\"自动化部署\"></a>自动化部署</h2><p>Hexo自动Git部署需要安装<code>hexo-deployer-git</code>，执行下列命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>然后修改系统配置文件<code>_config.yml</code>（不是<code>themes</code>子目录下的主题配置文件）。修改<code>deploy</code>这一项的值，按照以下格式配置。如果没有这一项，直接在文件末尾添加即可。<em>注意缩进，</em>yml中使用缩进表示从属关系，用<code>-</code>表示一个序列（可以同时部署到多个仓库）。<em>这里减号后有一个空格</em>。以我的项目为例，配置内容如下：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">- type:</span> <span class=\"string\">git</span></div><div class=\"line\"><span class=\"attr\">  repo:</span> <span class=\"string\">git@git.coding.net:Adherent/Adherent.git</span></div><div class=\"line\"><span class=\"attr\">  branch:</span> <span class=\"string\">coding-pages</span></div></pre></td></tr></table></figure></p>\n<p><code>type</code>值不用修改，因为这里使用的是git的pages服务，类型就是git。<br><code>repo</code>为仓库地址，为了方便部署（免输账号密码），使用的是ssh协议的仓库地址。这需要配置ssh秘钥，具体参考<a href=\"http://git.mydoc.io/?t=154712\" target=\"_blank\" rel=\"external\">生成并部署SSH key</a>。<br><code>branch</code>为开启pages服务的分支名称。一般的，码云为<code>osc-pages</code>，Coding为<code>coding-pages</code>，GitHub为<code>gh-pages</code>。<br>配置好部署信息后，即可用Hexo把静态页面部署到git上了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>部署完成后，通过域名，应该就能访问到这些页面了。</p>\n<h2 id=\"部署SSH-key\"><a href=\"#部署SSH-key\" class=\"headerlink\" title=\"部署SSH key\"></a>部署SSH key</h2><p>则可以看我的部署SSH key的文章</p>\n<h1 id=\"Pages服务的选择\"><a href=\"#Pages服务的选择\" class=\"headerlink\" title=\"Pages服务的选择\"></a>Pages服务的选择</h1><p>都说做编程必须有<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>而且上面还聚集了世界各地的开发者吧，因此很多人都在使用github的pages服务建站。但我还是推荐使用国内的<a href=\"https://git.oschina.net/\" target=\"_blank\" rel=\"external\">码云</a>或者<a href=\"https://coding.net/\" target=\"_blank\" rel=\"external\">Coding</a>以获得更好的访问速度。Coding是支持自己添加域名的所以我选择用<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"external\">Coding</a>。首先要创建一个项目，才能开启pages服务。可以去Coding Pages帮助中心看看如何开启<br>以我的网站为例，项目地址为<a href=\"https://coding.net/u/Adherent/p/Adherent/git\" target=\"_blank\" rel=\"external\">https://coding.net/u/Adherent/p/Adherent/git</a>，开启pages服务的分支名称为<code>coding-pages</code>。项目初始化时并没有<code>codingc-pages</code>分支，可以等Hexo部署静态文件后再开启pages服务。</p>\n<h1 id=\"添加新文章\"><a href=\"#添加新文章\" class=\"headerlink\" title=\"添加新文章\"></a>添加新文章</h1><p>博客建成，那么我们就可以写自己的博文了！执行下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo n 文章题目</div></pre></td></tr></table></figure></p>\n<p>以上命令就可以在<code>source/_posts/目录中生成一个文件名为</code>文章题目<code>后缀名为</code>.md`的文件。<br>剩下的文件内容我们就可以用markdown语法写文章就好了。markdown语法参见<a href=\"http://www.appinn.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown 语法说明 (简体中文版)</a><br>我推荐一款<a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Cmd Markdown</a>个人感觉用的还是很舒服的。<br><a href=\"https://www.zybuluo.com/chanvee/note/10789\" target=\"_blank\" rel=\"external\">这是Cmd Markdown的简明语法手册。</a><br>然后执行以下命令即可生成新的页面，部署到git。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g -d</div></pre></td></tr></table></figure></p>\n<p>同样的，把新添加的文件纳入git仓库，并推送到网上的仓库。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add *</div><div class=\"line\">git commit -m &quot;新的文章&quot;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>到了这里，该系统已经能很好的运行了。更多的使用以及设置方法参考<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档|Hexo</a>即可。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">淘宝NPM镜像</a></li>\n<li><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"external\">git使用简易指南</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档|Hexo</a></li>\n<li><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Cmd Markdown</a></li>\n<li><a href=\"http://www.maoxuner.cn/\" target=\"_blank\" rel=\"external\">启蒙</a><br>`</li>\n</ul>"},{"title":"JavaScript基本概念（高程3）","date":"2017-04-11T02:49:00.000Z","comments":1,"layout":"post","_content":"\n# JavaScript基本概念（高程3）\n\n## JavaScript高级程序设计第三章\n\n## 数据类型\n\n### typeof操作符\n\n\"undefined\"——如果这个值未定义;\n\n\"boolean\"——如果这个值是布尔值;\n\n\"string\"——如果这个值是字符串;\n\n\"number\"——如果这个值是数值;\n\n\"object\"——如果这个值是对象或null;\n\n\"function\"——如果这个值是函数;\n<!--more-->\n### Undefined类型\n\n- Undefined类型只有一个值，即特殊的undefined。\n\n### Null类型\n\n- Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回\"object\"的原因。\n\n### Boolean类型\n\n- Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，**因此true不一定等于1，而false也不一定等于0.**\n\n### Number类型\n\n整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。\n\n十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。\n\n- 浮点数值\n\n永远不要测试某个特定的浮点数值。\n\n如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。\n\n- 数值范围\n\n```javascript\nvar result= Number.MAX_VALUE +Number.MAX_VALUE;\nalert(isFinite(result));\t\t\t//false\n```\n\n\n\n- NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。\n\n它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，\n\n```javascript\nalert(NaN == NaN);  \t\t //false\n```\n\n- 数值转换\n\n  ```javascript\n  var num1 = Number(\"Hello world\");\t\t//NaN\n  var num2 = Number(\" \");\t\t\t\t\t//0\n  var num3 = Number(\"000011\");\t\t\t//11\n  var num4 = Number(\"true\");\t\t\t\t//1\n  ```\n\n  ### String类型\n\n- 字符字面量-也叫转义序列\n\n- 字符串的特定\n\n字符串一旦创建，它们的值就不能改变。\n\n- 转换为字符串\n\n要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。\n\n### Object类型\n\n- constructor:保存着用于创建当前对象的函数。\n\n- hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(\"name\")）。\n\n- isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。\n\n- toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。\n\n- toString():返回对象的字符串表示。\n\n- valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n  ## 操作符\n\n  ## 一元操作符\n\n  - 递增和递减操作符\n\n  ​     递增和递减操作符直接借鉴C。\n\n  - 位操作符\n\n  符号位的值决定了其他为数值的格式。\n\n  **负数同样以二进制码存储，但使用的格式是二进制补码**\n\n\n\n- 按位非（NOT）\n\n按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。\n\n```javascript\nvar num1 = 25;//二进制00000000000000000000000000011001\n//二进制11111111111111111111111111100110\nvar num2 = ~num1;\nalert(num2);//-26\n```\n\n- 按位与（AND）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  0   |\n|    0    |    1    |  0   |\n|    0    |    0    |  0   |\n\n简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.\n\n- 按位或（OR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.\n\n- 按位异或（XOR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  0   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.\n\n- 左移\n\n左移操作符由两个小于号（<<）表示。\n\n```javascript\nvar oldValue = 2;\t\t\t\t\t//等于二进制的10\nvar newValue = oldValue << 5;//等于二进制的1000000,十进制的64\n```\n\n\n\n- 有符号的右移\n\n有符号的右移操作符由两个大于号（>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue = oldValue >> 5;//等于二进制的10，即十进制的2\n```\n\n- 无符号右移\n\n无符号右移操作符由3个大于号（>>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue =oldValue >>> 5;//等于二进制的10，即十进制的2\n```\n\n无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。\n\n```javascript\nvar oldValue = -64;//等于二进制的11111111111111111111111111000000\nvar newValue = oldValue >>>5;//等于十进制的134217726\n```\n\n## 布尔操作符\n\n- 逻辑非（！）\n\n```javascript\nalert(!false);\t//true\nalert(!\"blue\");\t//false\nalert(!0);\t\t//true\nalert(!NaN);\t//true\nalert(!\"\");\t\t//true\nalert(!12345);\t//false\n```\n\n- 逻辑与（&&）\n\n| 第一个操作数 | 第二个操作数 |  结果   |\n| :----: | :----: | :---: |\n|  true  |  true  | true  |\n|  true  | false  | false |\n| false  |  true  | false |\n| false  | false  | false |\n\n在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。\n\n- 逻辑或\n\n|  true  |  true  | true  |\n| :----: | :----: | :---: |\n|  true  | false  | true  |\n| false  |  true  | true  |\n| false  | false  | false |\n| 第一个操作数 | 第二个操作数 |  结果   |\n\n与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，\n","source":"_posts/JavaScript基本概念copy.md","raw":"---\ntitle: JavaScript基本概念（高程3）\ndate: 2017-04-11 10:49\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# JavaScript基本概念（高程3）\n\n## JavaScript高级程序设计第三章\n\n## 数据类型\n\n### typeof操作符\n\n\"undefined\"——如果这个值未定义;\n\n\"boolean\"——如果这个值是布尔值;\n\n\"string\"——如果这个值是字符串;\n\n\"number\"——如果这个值是数值;\n\n\"object\"——如果这个值是对象或null;\n\n\"function\"——如果这个值是函数;\n<!--more-->\n### Undefined类型\n\n- Undefined类型只有一个值，即特殊的undefined。\n\n### Null类型\n\n- Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回\"object\"的原因。\n\n### Boolean类型\n\n- Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，**因此true不一定等于1，而false也不一定等于0.**\n\n### Number类型\n\n整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。\n\n十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。\n\n- 浮点数值\n\n永远不要测试某个特定的浮点数值。\n\n如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。\n\n- 数值范围\n\n```javascript\nvar result= Number.MAX_VALUE +Number.MAX_VALUE;\nalert(isFinite(result));\t\t\t//false\n```\n\n\n\n- NaN\n\nNaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。\n\n它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，\n\n```javascript\nalert(NaN == NaN);  \t\t //false\n```\n\n- 数值转换\n\n  ```javascript\n  var num1 = Number(\"Hello world\");\t\t//NaN\n  var num2 = Number(\" \");\t\t\t\t\t//0\n  var num3 = Number(\"000011\");\t\t\t//11\n  var num4 = Number(\"true\");\t\t\t\t//1\n  ```\n\n  ### String类型\n\n- 字符字面量-也叫转义序列\n\n- 字符串的特定\n\n字符串一旦创建，它们的值就不能改变。\n\n- 转换为字符串\n\n要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。\n\n### Object类型\n\n- constructor:保存着用于创建当前对象的函数。\n\n- hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(\"name\")）。\n\n- isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。\n\n- propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。\n\n- toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。\n\n- toString():返回对象的字符串表示。\n\n- valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。\n\n  ## 操作符\n\n  ## 一元操作符\n\n  - 递增和递减操作符\n\n  ​     递增和递减操作符直接借鉴C。\n\n  - 位操作符\n\n  符号位的值决定了其他为数值的格式。\n\n  **负数同样以二进制码存储，但使用的格式是二进制补码**\n\n\n\n- 按位非（NOT）\n\n按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。\n\n```javascript\nvar num1 = 25;//二进制00000000000000000000000000011001\n//二进制11111111111111111111111111100110\nvar num2 = ~num1;\nalert(num2);//-26\n```\n\n- 按位与（AND）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  0   |\n|    0    |    1    |  0   |\n|    0    |    0    |  0   |\n\n简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.\n\n- 按位或（OR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  1   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.\n\n- 按位异或（XOR）\n\n| 第一个数值的位 | 第二个数值的位 |  结果  |\n| :-----: | :-----: | :--: |\n|    1    |    1    |  0   |\n|    1    |    0    |  1   |\n|    0    |    1    |  1   |\n|    0    |    0    |  0   |\n\n按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.\n\n- 左移\n\n左移操作符由两个小于号（<<）表示。\n\n```javascript\nvar oldValue = 2;\t\t\t\t\t//等于二进制的10\nvar newValue = oldValue << 5;//等于二进制的1000000,十进制的64\n```\n\n\n\n- 有符号的右移\n\n有符号的右移操作符由两个大于号（>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue = oldValue >> 5;//等于二进制的10，即十进制的2\n```\n\n- 无符号右移\n\n无符号右移操作符由3个大于号（>>>）表示。\n\n```javascript\nvar oldValue = 64;//等于二进制的1000000\nvar newValue =oldValue >>> 5;//等于二进制的10，即十进制的2\n```\n\n无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。\n\n```javascript\nvar oldValue = -64;//等于二进制的11111111111111111111111111000000\nvar newValue = oldValue >>>5;//等于十进制的134217726\n```\n\n## 布尔操作符\n\n- 逻辑非（！）\n\n```javascript\nalert(!false);\t//true\nalert(!\"blue\");\t//false\nalert(!0);\t\t//true\nalert(!NaN);\t//true\nalert(!\"\");\t\t//true\nalert(!12345);\t//false\n```\n\n- 逻辑与（&&）\n\n| 第一个操作数 | 第二个操作数 |  结果   |\n| :----: | :----: | :---: |\n|  true  |  true  | true  |\n|  true  | false  | false |\n| false  |  true  | false |\n| false  | false  | false |\n\n在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。\n\n- 逻辑或\n\n|  true  |  true  | true  |\n| :----: | :----: | :---: |\n|  true  | false  | true  |\n| false  |  true  | true  |\n| false  | false  | false |\n| 第一个操作数 | 第二个操作数 |  结果   |\n\n与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，\n","slug":"JavaScript基本概念copy","published":1,"updated":"2017-05-26T09:49:17.000Z","photos":[],"link":"","_id":"cj6krbq420019g3fyqbon852g","content":"<h1 id=\"JavaScript基本概念（高程3）\"><a href=\"#JavaScript基本概念（高程3）\" class=\"headerlink\" title=\"JavaScript基本概念（高程3）\"></a>JavaScript基本概念（高程3）</h1><h2 id=\"JavaScript高级程序设计第三章\"><a href=\"#JavaScript高级程序设计第三章\" class=\"headerlink\" title=\"JavaScript高级程序设计第三章\"></a>JavaScript高级程序设计第三章</h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>“undefined”——如果这个值未定义;</p>\n<p>“boolean”——如果这个值是布尔值;</p>\n<p>“string”——如果这个值是字符串;</p>\n<p>“number”——如果这个值是数值;</p>\n<p>“object”——如果这个值是对象或null;</p>\n<p>“function”——如果这个值是函数;<br><a id=\"more\"></a></p>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><ul>\n<li>Undefined类型只有一个值，即特殊的undefined。</li>\n</ul>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><ul>\n<li>Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回”object”的原因。</li>\n</ul>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，<strong>因此true不一定等于1，而false也不一定等于0.</strong></li>\n</ul>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。</p>\n<p>十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。</p>\n<ul>\n<li>浮点数值</li>\n</ul>\n<p>永远不要测试某个特定的浮点数值。</p>\n<p>如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。</p>\n<ul>\n<li>数值范围</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"built_in\">Number</span>.MAX_VALUE +<span class=\"built_in\">Number</span>.MAX_VALUE;</div><div class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));\t\t\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>NaN</li>\n</ul>\n<p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。</p>\n<p>它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>);  \t\t <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>数值转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"Hello world\"</span>);\t\t<span class=\"comment\">//NaN</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">Number</span>(<span class=\"string\">\" \"</span>);\t\t\t\t\t<span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"000011\"</span>);\t\t\t<span class=\"comment\">//11</span></div><div class=\"line\"><span class=\"keyword\">var</span> num4 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"true\"</span>);\t\t\t\t<span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></li>\n<li><p>字符字面量-也叫转义序列</p>\n</li>\n<li><p>字符串的特定</p>\n</li>\n</ul>\n<p>字符串一旦创建，它们的值就不能改变。</p>\n<ul>\n<li>转换为字符串</li>\n</ul>\n<p>要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。</p>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><ul>\n<li><p>constructor:保存着用于创建当前对象的函数。</p>\n</li>\n<li><p>hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</p>\n</li>\n<li><p>isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。</p>\n</li>\n<li><p>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。</p>\n</li>\n<li><p>toString():返回对象的字符串表示。</p>\n</li>\n<li><p>valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h2 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h2><ul>\n<li>递增和递减操作符</li>\n</ul>\n<p>​     递增和递减操作符直接借鉴C。</p>\n<ul>\n<li>位操作符</li>\n</ul>\n<p>符号位的值决定了其他为数值的格式。</p>\n<p><strong>负数同样以二进制码存储，但使用的格式是二进制补码</strong></p>\n</li>\n</ul>\n<ul>\n<li>按位非（NOT）</li>\n</ul>\n<p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">25</span>;<span class=\"comment\">//二进制00000000000000000000000000011001</span></div><div class=\"line\"><span class=\"comment\">//二进制11111111111111111111111111100110</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = ~num1;</div><div class=\"line\">alert(num2);<span class=\"comment\">//-26</span></div></pre></td></tr></table></figure>\n<ul>\n<li>按位与（AND）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.</p>\n<ul>\n<li>按位或（OR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.</p>\n<ul>\n<li>按位异或（XOR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.</p>\n<ul>\n<li>左移</li>\n</ul>\n<p>左移操作符由两个小于号（&lt;&lt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">2</span>;\t\t\t\t\t<span class=\"comment\">//等于二进制的10</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &lt;&lt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的1000000,十进制的64</span></div></pre></td></tr></table></figure>\n<ul>\n<li>有符号的右移</li>\n</ul>\n<p>有符号的右移操作符由两个大于号（&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></div></pre></td></tr></table></figure>\n<ul>\n<li>无符号右移</li>\n</ul>\n<p>无符号右移操作符由3个大于号（&gt;&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue =oldValue &gt;&gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></div></pre></td></tr></table></figure>\n<p>无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">-64</span>;<span class=\"comment\">//等于二进制的11111111111111111111111111000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt;&gt;<span class=\"number\">5</span>;<span class=\"comment\">//等于十进制的134217726</span></div></pre></td></tr></table></figure>\n<h2 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h2><ul>\n<li>逻辑非（！）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(!<span class=\"literal\">false</span>);\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"string\">\"blue\"</span>);\t<span class=\"comment\">//false</span></div><div class=\"line\">alert(!<span class=\"number\">0</span>);\t\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"literal\">NaN</span>);\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"string\">\"\"</span>);\t\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"number\">12345</span>);\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>逻辑与（&amp;&amp;）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个操作数</th>\n<th style=\"text-align:center\">第二个操作数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。</p>\n<ul>\n<li>逻辑或</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第一个操作数</td>\n<td style=\"text-align:center\">第二个操作数</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n<p>与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"JavaScript基本概念（高程3）\"><a href=\"#JavaScript基本概念（高程3）\" class=\"headerlink\" title=\"JavaScript基本概念（高程3）\"></a>JavaScript基本概念（高程3）</h1><h2 id=\"JavaScript高级程序设计第三章\"><a href=\"#JavaScript高级程序设计第三章\" class=\"headerlink\" title=\"JavaScript高级程序设计第三章\"></a>JavaScript高级程序设计第三章</h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>“undefined”——如果这个值未定义;</p>\n<p>“boolean”——如果这个值是布尔值;</p>\n<p>“string”——如果这个值是字符串;</p>\n<p>“number”——如果这个值是数值;</p>\n<p>“object”——如果这个值是对象或null;</p>\n<p>“function”——如果这个值是函数;<br>","more":"</p>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><ul>\n<li>Undefined类型只有一个值，即特殊的undefined。</li>\n</ul>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><ul>\n<li>Null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null值表示一个空对象指针，而这也正是使用typeof操作符检测null值会返回”object”的原因。</li>\n</ul>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><ul>\n<li>Boolean类型是ECMAScript中使用得最多的一种类型，该类型只有两个字面值：true和false。这两个值与数字值不是一回事，<strong>因此true不一定等于1，而false也不一定等于0.</strong></li>\n</ul>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><p>整数通过八进制（以8为基数）或十六进制（以16为基数）的字面值来表示。其中，八进制字面值的第一位必须是零（0），然后是八进制数字序列（0~7）。</p>\n<p>十六进制字面值的前两位必须是0x，后跟任何十六进制数字（0~9及A~F）。</p>\n<ul>\n<li>浮点数值</li>\n</ul>\n<p>永远不要测试某个特定的浮点数值。</p>\n<p>如果小数点后面没有跟任何数字，那么这个数值就可以作为整数值来保存。</p>\n<ul>\n<li>数值范围</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result= <span class=\"built_in\">Number</span>.MAX_VALUE +<span class=\"built_in\">Number</span>.MAX_VALUE;</div><div class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));\t\t\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>NaN</li>\n</ul>\n<p>NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。</p>\n<p>它本身有两个非同寻常的特点。首先，任何涉及NaN的操作（例如NaN/10）都会返回NaN，这个特点在多步计算中有可能导致问题。其次，NaN与任何值都不想等，包括NaN本身。例如，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"literal\">NaN</span> == <span class=\"literal\">NaN</span>);  \t\t <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>数值转换</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"Hello world\"</span>);\t\t<span class=\"comment\">//NaN</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">Number</span>(<span class=\"string\">\" \"</span>);\t\t\t\t\t<span class=\"comment\">//0</span></div><div class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"000011\"</span>);\t\t\t<span class=\"comment\">//11</span></div><div class=\"line\"><span class=\"keyword\">var</span> num4 = <span class=\"built_in\">Number</span>(<span class=\"string\">\"true\"</span>);\t\t\t\t<span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></li>\n<li><p>字符字面量-也叫转义序列</p>\n</li>\n<li><p>字符串的特定</p>\n</li>\n</ul>\n<p>字符串一旦创建，它们的值就不能改变。</p>\n<ul>\n<li>转换为字符串</li>\n</ul>\n<p>要把一个值转换为一个字符串有两种方式。第一种是使用几乎每个值都有的toString()方法。第二用String方法。</p>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><ul>\n<li><p>constructor:保存着用于创建当前对象的函数。</p>\n</li>\n<li><p>hasOwnProperty（propertyName）:用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为参数的属性名（propertyName）必须以字符串形式指定（例如：o.hasOwnProperty(“name”)）。</p>\n</li>\n<li><p>isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型。</p>\n</li>\n<li><p>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句来枚举。与2方法一样，作为参数必须以字符串形式指定。</p>\n</li>\n<li><p>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。</p>\n</li>\n<li><p>toString():返回对象的字符串表示。</p>\n</li>\n<li><p>valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h2 id=\"一元操作符\"><a href=\"#一元操作符\" class=\"headerlink\" title=\"一元操作符\"></a>一元操作符</h2><ul>\n<li>递增和递减操作符</li>\n</ul>\n<p>​     递增和递减操作符直接借鉴C。</p>\n<ul>\n<li>位操作符</li>\n</ul>\n<p>符号位的值决定了其他为数值的格式。</p>\n<p><strong>负数同样以二进制码存储，但使用的格式是二进制补码</strong></p>\n</li>\n</ul>\n<ul>\n<li>按位非（NOT）</li>\n</ul>\n<p>按位非操作符由一个波浪线（~）表示，执行按位非的结果就是返回数值的反码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">25</span>;<span class=\"comment\">//二进制00000000000000000000000000011001</span></div><div class=\"line\"><span class=\"comment\">//二进制11111111111111111111111111100110</span></div><div class=\"line\"><span class=\"keyword\">var</span> num2 = ~num1;</div><div class=\"line\">alert(num2);<span class=\"comment\">//-26</span></div></pre></td></tr></table></figure>\n<ul>\n<li>按位与（AND）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>简而言之，按位与操作只在两个数值的对应位都是1时才返回1，任何一位是0，结果都是0.</p>\n<ul>\n<li>按位或（OR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位或操作在有一个位是1的情况下就返回1，而只有在两个位都是0的情况下才返回0.</p>\n<ul>\n<li>按位异或（XOR）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个数值的位</th>\n<th style=\"text-align:center\">第二个数值的位</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n<p>按位异或与按位或的不同之处在于，这个操作两个数值对应位上只有一个1时才返回1，如果对应的两位都是1或是0，则返回0.</p>\n<ul>\n<li>左移</li>\n</ul>\n<p>左移操作符由两个小于号（&lt;&lt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">2</span>;\t\t\t\t\t<span class=\"comment\">//等于二进制的10</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &lt;&lt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的1000000,十进制的64</span></div></pre></td></tr></table></figure>\n<ul>\n<li>有符号的右移</li>\n</ul>\n<p>有符号的右移操作符由两个大于号（&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></div></pre></td></tr></table></figure>\n<ul>\n<li>无符号右移</li>\n</ul>\n<p>无符号右移操作符由3个大于号（&gt;&gt;&gt;）表示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">64</span>;<span class=\"comment\">//等于二进制的1000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue =oldValue &gt;&gt;&gt; <span class=\"number\">5</span>;<span class=\"comment\">//等于二进制的10，即十进制的2</span></div></pre></td></tr></table></figure>\n<p>无符号右移操作符会把负数的二进制码当成正数的二进制码。而且由于负数以其绝对值的二进制补码形式表示，因此就会导致无符号右移后的结果非常之大。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oldValue = <span class=\"number\">-64</span>;<span class=\"comment\">//等于二进制的11111111111111111111111111000000</span></div><div class=\"line\"><span class=\"keyword\">var</span> newValue = oldValue &gt;&gt;&gt;<span class=\"number\">5</span>;<span class=\"comment\">//等于十进制的134217726</span></div></pre></td></tr></table></figure>\n<h2 id=\"布尔操作符\"><a href=\"#布尔操作符\" class=\"headerlink\" title=\"布尔操作符\"></a>布尔操作符</h2><ul>\n<li>逻辑非（！）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(!<span class=\"literal\">false</span>);\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"string\">\"blue\"</span>);\t<span class=\"comment\">//false</span></div><div class=\"line\">alert(!<span class=\"number\">0</span>);\t\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"literal\">NaN</span>);\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"string\">\"\"</span>);\t\t<span class=\"comment\">//true</span></div><div class=\"line\">alert(!<span class=\"number\">12345</span>);\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<ul>\n<li>逻辑与（&amp;&amp;）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">第一个操作数</th>\n<th style=\"text-align:center\">第二个操作数</th>\n<th style=\"text-align:center\">结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n</tbody>\n</table>\n<p>在有一个操作数不是布尔值的情况下，逻辑与操作就不一定返回布尔值。</p>\n<ul>\n<li>逻辑或</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n<th style=\"text-align:center\">true</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第一个操作数</td>\n<td style=\"text-align:center\">第二个操作数</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n<p>与逻辑与操作相似，如果有一个操作数不是布尔值，逻辑或也不一定返回布尔值，</p>"},{"title":"JavaScript闭包","date":"2017-05-22T05:44:44.000Z","comments":1,"layout":"post","_content":"\n# 闭包/bibao/Closures\n\n## 什么是闭包\n\nMDN对闭包的定义为：\n\n> 闭包是指那些能够访问自由变量的函数。\n\n阮老师对闭包的定义为：\n\n>  闭包就是能够读取其他函数内部变量的函数。\n>\n>  可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n红宝书对闭包的定义为：\n\n> 　闭包是指有权访问另一个函数作用域中的变量的函数\n\n那么圣经犀牛书对闭包定义为：\n\n> 函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”\n\n<!--more-->\n\n**我个人比较认同红宝书的定义。**\n\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a); // 2\n    }\n    bar();\n}\nfoo();\n```\n\n我们来做一个数组求和\n\n```javascript\nfunction sum(arr){\n  return arr.reduce(function(x,y){\n    return x+y;\n  });\n}\nsum([3,4,5,6]);\t\t\t//18\n```\n\n但是我们想要返回函数\n\n```javascript\nfunction smallsum(arr){\n  var sum = function(){\n    return arr.reduce(function(x,y){\n      return x+y;\n    });\n  }\n  return sum;\n}\n```\n\n当我们想要用`smallsum`的时候返回的却是个函数。\n\n```javascript\nvar result = smallsum([3,4,5,6]);\t\t//function sum()\n```\n\n直到我们调用`result`\n\n```javascript\nresult();\t\t\t//18\n```\n\n在这个例子中，我发现内部函数`sum`可以调用外部函数`smallsum`的参数和局部变量。\n\n当我们调用`smallsum`的时候，每次调用都会产生一个新的函数。即使你传入的值相同。\n\n```JavaScript\nvar result1 = smallsum([3,4,5,6]);\nvar result2 = smallsum([3,4,5,6]);\nresult1 === result2; \t\t\t//false\n```\n\n## 假如\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push(function(){\n      return i;\n    });\n  }\n  return arr;\n}\n```\n\n```javascript\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t//4\nf2();\t//4\nf3();\t//4\n```\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push((function(n){\n      return function(){\n      return n;\n      }\n    })(i));\n  }\n  return arr;\n}\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t\t//0\nf2();\t\t//1\nf3();\t\t//2\n```\n\n注意这里用了一个“创建一个匿名函数并立刻执行”的语法：\n\n```javascript\n(function (n) {\n    return n;\n})(1); //1\n```","source":"_posts/JavaScript闭包.md","raw":"---\ntitle: JavaScript闭包\ndate: 2017-05-26 17：47\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript基础\n---\n\n# 闭包/bibao/Closures\n\n## 什么是闭包\n\nMDN对闭包的定义为：\n\n> 闭包是指那些能够访问自由变量的函数。\n\n阮老师对闭包的定义为：\n\n>  闭包就是能够读取其他函数内部变量的函数。\n>\n>  可以把闭包简单理解成\"定义在一个函数内部的函数\"。\n\n红宝书对闭包的定义为：\n\n> 　闭包是指有权访问另一个函数作用域中的变量的函数\n\n那么圣经犀牛书对闭包定义为：\n\n> 函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”\n\n<!--more-->\n\n**我个人比较认同红宝书的定义。**\n\n```javascript\nfunction foo(){\n    var a = 2;\n    function bar(){\n        console.log(a); // 2\n    }\n    bar();\n}\nfoo();\n```\n\n我们来做一个数组求和\n\n```javascript\nfunction sum(arr){\n  return arr.reduce(function(x,y){\n    return x+y;\n  });\n}\nsum([3,4,5,6]);\t\t\t//18\n```\n\n但是我们想要返回函数\n\n```javascript\nfunction smallsum(arr){\n  var sum = function(){\n    return arr.reduce(function(x,y){\n      return x+y;\n    });\n  }\n  return sum;\n}\n```\n\n当我们想要用`smallsum`的时候返回的却是个函数。\n\n```javascript\nvar result = smallsum([3,4,5,6]);\t\t//function sum()\n```\n\n直到我们调用`result`\n\n```javascript\nresult();\t\t\t//18\n```\n\n在这个例子中，我发现内部函数`sum`可以调用外部函数`smallsum`的参数和局部变量。\n\n当我们调用`smallsum`的时候，每次调用都会产生一个新的函数。即使你传入的值相同。\n\n```JavaScript\nvar result1 = smallsum([3,4,5,6]);\nvar result2 = smallsum([3,4,5,6]);\nresult1 === result2; \t\t\t//false\n```\n\n## 假如\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push(function(){\n      return i;\n    });\n  }\n  return arr;\n}\n```\n\n```javascript\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t//4\nf2();\t//4\nf3();\t//4\n```\n\n```javascript\nfunction l(){\n  var arr= [];\n  for(var i=0;i<4;i++){\n    arr.push((function(n){\n      return function(){\n      return n;\n      }\n    })(i));\n  }\n  return arr;\n}\nvar a= l();\nvar f1=a[0];\nvar f2=a[1];\nvar f3=a[2];\n\nf1();\t\t//0\nf2();\t\t//1\nf3();\t\t//2\n```\n\n注意这里用了一个“创建一个匿名函数并立刻执行”的语法：\n\n```javascript\n(function (n) {\n    return n;\n})(1); //1\n```","slug":"JavaScript闭包","published":1,"updated":"2017-05-26T09:47:24.000Z","photos":[],"link":"","_id":"cj6krbq45001eg3fy3y23vlxo","content":"<h1 id=\"闭包-bibao-Closures\"><a href=\"#闭包-bibao-Closures\" class=\"headerlink\" title=\"闭包/bibao/Closures\"></a>闭包/bibao/Closures</h1><h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>MDN对闭包的定义为：</p>\n<blockquote>\n<p>闭包是指那些能够访问自由变量的函数。</p>\n</blockquote>\n<p>阮老师对闭包的定义为：</p>\n<blockquote>\n<p> 闭包就是能够读取其他函数内部变量的函数。</p>\n<p> 可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n</blockquote>\n<p>红宝书对闭包的定义为：</p>\n<blockquote>\n<p>　闭包是指有权访问另一个函数作用域中的变量的函数</p>\n</blockquote>\n<p>那么圣经犀牛书对闭包定义为：</p>\n<blockquote>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>我个人比较认同红宝书的定义。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    bar();</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n<p>我们来做一个数组求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">sum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t\t<span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<p>但是我们想要返回函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smallsum</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们想要用<code>smallsum</code>的时候返回的却是个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t<span class=\"comment\">//function sum()</span></div></pre></td></tr></table></figure>\n<p>直到我们调用<code>result</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result();\t\t\t<span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<p>在这个例子中，我发现内部函数<code>sum</code>可以调用外部函数<code>smallsum</code>的参数和局部变量。</p>\n<p>当我们调用<code>smallsum</code>的时候，每次调用都会产生一个新的函数。即使你传入的值相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result1 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> result2 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</div><div class=\"line\">result1 === result2; \t\t\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<h2 id=\"假如\"><a href=\"#假如\" class=\"headerlink\" title=\"假如\"></a>假如</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr= [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">    arr.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a= l();</div><div class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1();\t<span class=\"comment\">//4</span></div><div class=\"line\">f2();\t<span class=\"comment\">//4</span></div><div class=\"line\">f3();\t<span class=\"comment\">//4</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr= [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">    arr.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> n;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a= l();</div><div class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1();\t\t<span class=\"comment\">//0</span></div><div class=\"line\">f2();\t\t<span class=\"comment\">//1</span></div><div class=\"line\">f3();\t\t<span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n<p>注意这里用了一个“创建一个匿名函数并立刻执行”的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n;</div><div class=\"line\">&#125;)(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"闭包-bibao-Closures\"><a href=\"#闭包-bibao-Closures\" class=\"headerlink\" title=\"闭包/bibao/Closures\"></a>闭包/bibao/Closures</h1><h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>MDN对闭包的定义为：</p>\n<blockquote>\n<p>闭包是指那些能够访问自由变量的函数。</p>\n</blockquote>\n<p>阮老师对闭包的定义为：</p>\n<blockquote>\n<p> 闭包就是能够读取其他函数内部变量的函数。</p>\n<p> 可以把闭包简单理解成”定义在一个函数内部的函数”。</p>\n</blockquote>\n<p>红宝书对闭包的定义为：</p>\n<blockquote>\n<p>　闭包是指有权访问另一个函数作用域中的变量的函数</p>\n</blockquote>\n<p>那么圣经犀牛书对闭包定义为：</p>\n<blockquote>\n<p>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学文献中称为‘闭包’”</p>\n</blockquote>","more":"<p><strong>我个人比较认同红宝书的定义。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 2</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    bar();</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n<p>我们来做一个数组求和</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">sum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t\t<span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<p>但是我们想要返回函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">smallsum</span>(<span class=\"params\">arr</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x+y;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> sum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当我们想要用<code>smallsum</code>的时候返回的却是个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);\t\t<span class=\"comment\">//function sum()</span></div></pre></td></tr></table></figure>\n<p>直到我们调用<code>result</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result();\t\t\t<span class=\"comment\">//18</span></div></pre></td></tr></table></figure>\n<p>在这个例子中，我发现内部函数<code>sum</code>可以调用外部函数<code>smallsum</code>的参数和局部变量。</p>\n<p>当我们调用<code>smallsum</code>的时候，每次调用都会产生一个新的函数。即使你传入的值相同。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> result1 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</div><div class=\"line\"><span class=\"keyword\">var</span> result2 = smallsum([<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]);</div><div class=\"line\">result1 === result2; \t\t\t<span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<h2 id=\"假如\"><a href=\"#假如\" class=\"headerlink\" title=\"假如\"></a>假如</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr= [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">    arr.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a= l();</div><div class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1();\t<span class=\"comment\">//4</span></div><div class=\"line\">f2();\t<span class=\"comment\">//4</span></div><div class=\"line\">f3();\t<span class=\"comment\">//4</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">l</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> arr= [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</div><div class=\"line\">    arr.push((<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> n;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)(i));</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a= l();</div><div class=\"line\"><span class=\"keyword\">var</span> f1=a[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f2=a[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> f3=a[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">f1();\t\t<span class=\"comment\">//0</span></div><div class=\"line\">f2();\t\t<span class=\"comment\">//1</span></div><div class=\"line\">f3();\t\t<span class=\"comment\">//2</span></div></pre></td></tr></table></figure>\n<p>注意这里用了一个“创建一个匿名函数并立刻执行”的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n;</div><div class=\"line\">&#125;)(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>"},{"title":"Javascript DOM编程艺术学习笔记一（第三章兼高程三）","date":"2017-03-26T12:01:14.000Z","comments":1,"layout":"post","_content":"\n1.Dom基础\n==\n\nElement\n--\n\n- 三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取\n- getElementById  \n\n>  根据Id获取元素节点\n\n- getElementByTagName  \n\n> 根据Html获取元素节点\n\n- getElementByClassName  \n\n> 根据ClassName（class）获取元素节点\n\n<!--more-->\n\n\n高程三中学到\n------\n\nHtml元素\n\n-  id，元素在文档中的唯一标识 -\n- title，有关元素的附加说明信息，一般通过工具提示条显示出来 \n- lang，元素内容的语言比如中文zh-hans \n- dir，语言的方向，值为\"ltr\"（left-to-right，从左至右）或\"rtl\"（right-to-left，从右至左），很少使用\n- className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。\n\n    ```html\n    <div id=\"myDiv\" class=\"bd\" title=\"Body text\" lang=\"en\" dir=\"ltr\">Some text</div>\n    ```\n    可以获得元素中指定的所有信息。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            alert(div.id);         //\"myDiv\"\n            alert(div.className);  //\"bd\"\n            alert(div.title);      //\"Body text\"\n            alert(div.lang);       //\"en\"\n            alert(div.dir);        //\"ltr\"\n    ```\n    还可以为每个属性赋予新的值。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            div.id = \"someOtherId\";\n            div.className = \"ft\";\n            div.title = \"Some other text\";\n            div.lang = \"fr\";\n            div.dir =\"rtl\";   \n    ```\n\n获取和设置属性\n==\n\n- getAttribute\n\n> getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：\n```javascript\nobject.getAttribute(attribute);\n```\n- setAttribute\n> 它允许我们对属性节点的值做出修改。\n```javascroipt\nobject.setAttribute(\"attribute\",value);\n```\n\n","source":"_posts/Javascript Dom编程艺术学习笔记一（第三章兼高程三）.md","raw":"---\ntitle: Javascript DOM编程艺术学习笔记一（第三章兼高程三）\ndate: 2017-03-26 20:01:14\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之路\n---\n\n1.Dom基础\n==\n\nElement\n--\n\n- 三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取\n- getElementById  \n\n>  根据Id获取元素节点\n\n- getElementByTagName  \n\n> 根据Html获取元素节点\n\n- getElementByClassName  \n\n> 根据ClassName（class）获取元素节点\n\n<!--more-->\n\n\n高程三中学到\n------\n\nHtml元素\n\n-  id，元素在文档中的唯一标识 -\n- title，有关元素的附加说明信息，一般通过工具提示条显示出来 \n- lang，元素内容的语言比如中文zh-hans \n- dir，语言的方向，值为\"ltr\"（left-to-right，从左至右）或\"rtl\"（right-to-left，从右至左），很少使用\n- className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。\n\n    ```html\n    <div id=\"myDiv\" class=\"bd\" title=\"Body text\" lang=\"en\" dir=\"ltr\">Some text</div>\n    ```\n    可以获得元素中指定的所有信息。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            alert(div.id);         //\"myDiv\"\n            alert(div.className);  //\"bd\"\n            alert(div.title);      //\"Body text\"\n            alert(div.lang);       //\"en\"\n            alert(div.dir);        //\"ltr\"\n    ```\n    还可以为每个属性赋予新的值。\n    ```javascript\n     div = document.getElementById(\"myDiv\");\n            div.id = \"someOtherId\";\n            div.className = \"ft\";\n            div.title = \"Some other text\";\n            div.lang = \"fr\";\n            div.dir =\"rtl\";   \n    ```\n\n获取和设置属性\n==\n\n- getAttribute\n\n> getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：\n```javascript\nobject.getAttribute(attribute);\n```\n- setAttribute\n> 它允许我们对属性节点的值做出修改。\n```javascroipt\nobject.setAttribute(\"attribute\",value);\n```\n\n","slug":"Javascript Dom编程艺术学习笔记一（第三章兼高程三）","published":1,"updated":"2017-04-26T14:47:51.000Z","photos":[],"link":"","_id":"cj6krbq47001gg3fyoobb1pc1","content":"<h1 id=\"1-Dom基础\"><a href=\"#1-Dom基础\" class=\"headerlink\" title=\"1.Dom基础\"></a>1.Dom基础</h1><h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><ul>\n<li>三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取</li>\n<li>getElementById  </li>\n</ul>\n<blockquote>\n<p> 根据Id获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByTagName  </li>\n</ul>\n<blockquote>\n<p>根据Html获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByClassName  </li>\n</ul>\n<blockquote>\n<p>根据ClassName（class）获取元素节点</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"高程三中学到\"><a href=\"#高程三中学到\" class=\"headerlink\" title=\"高程三中学到\"></a>高程三中学到</h2><p>Html元素</p>\n<ul>\n<li>id，元素在文档中的唯一标识 -</li>\n<li>title，有关元素的附加说明信息，一般通过工具提示条显示出来 </li>\n<li>lang，元素内容的语言比如中文zh-hans </li>\n<li>dir，语言的方向，值为”ltr”（left-to-right，从左至右）或”rtl”（right-to-left，从右至左），很少使用</li>\n<li><p>className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Body text\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span>Some text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>  可以获得元素中指定的所有信息。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</div><div class=\"line\">       alert(div.id);         <span class=\"comment\">//\"myDiv\"</span></div><div class=\"line\">       alert(div.className);  <span class=\"comment\">//\"bd\"</span></div><div class=\"line\">       alert(div.title);      <span class=\"comment\">//\"Body text\"</span></div><div class=\"line\">       alert(div.lang);       <span class=\"comment\">//\"en\"</span></div><div class=\"line\">       alert(div.dir);        <span class=\"comment\">//\"ltr\"</span></div></pre></td></tr></table></figure>\n<p>  还可以为每个属性赋予新的值。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</div><div class=\"line\">       div.id = <span class=\"string\">\"someOtherId\"</span>;</div><div class=\"line\">       div.className = <span class=\"string\">\"ft\"</span>;</div><div class=\"line\">       div.title = <span class=\"string\">\"Some other text\"</span>;</div><div class=\"line\">       div.lang = <span class=\"string\">\"fr\"</span>;</div><div class=\"line\">       div.dir =<span class=\"string\">\"rtl\"</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h1><ul>\n<li>getAttribute</li>\n</ul>\n<blockquote>\n<p>getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.getAttribute(attribute);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>setAttribute<blockquote>\n<p>它允许我们对属性节点的值做出修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.setAttribute(&quot;attribute&quot;,value);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-Dom基础\"><a href=\"#1-Dom基础\" class=\"headerlink\" title=\"1.Dom基础\"></a>1.Dom基础</h1><h2 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h2><ul>\n<li>三种DOM方法可获取元素节点，分别是通过元素ID、通过标签名字和通过类名字来获取</li>\n<li>getElementById  </li>\n</ul>\n<blockquote>\n<p> 根据Id获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByTagName  </li>\n</ul>\n<blockquote>\n<p>根据Html获取元素节点</p>\n</blockquote>\n<ul>\n<li>getElementByClassName  </li>\n</ul>\n<blockquote>\n<p>根据ClassName（class）获取元素节点</p>\n</blockquote>","more":"<h2 id=\"高程三中学到\"><a href=\"#高程三中学到\" class=\"headerlink\" title=\"高程三中学到\"></a>高程三中学到</h2><p>Html元素</p>\n<ul>\n<li>id，元素在文档中的唯一标识 -</li>\n<li>title，有关元素的附加说明信息，一般通过工具提示条显示出来 </li>\n<li>lang，元素内容的语言比如中文zh-hans </li>\n<li>dir，语言的方向，值为”ltr”（left-to-right，从左至右）或”rtl”（right-to-left，从右至左），很少使用</li>\n<li><p>className，与元素的class特性对应，即为元素指定的CSS类，没有将这个属性命名为class。</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myDiv\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bd\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"Body text\"</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span>Some text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>  可以获得元素中指定的所有信息。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</div><div class=\"line\">       alert(div.id);         <span class=\"comment\">//\"myDiv\"</span></div><div class=\"line\">       alert(div.className);  <span class=\"comment\">//\"bd\"</span></div><div class=\"line\">       alert(div.title);      <span class=\"comment\">//\"Body text\"</span></div><div class=\"line\">       alert(div.lang);       <span class=\"comment\">//\"en\"</span></div><div class=\"line\">       alert(div.dir);        <span class=\"comment\">//\"ltr\"</span></div></pre></td></tr></table></figure>\n<p>  还可以为每个属性赋予新的值。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">div = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myDiv\"</span>);</div><div class=\"line\">       div.id = <span class=\"string\">\"someOtherId\"</span>;</div><div class=\"line\">       div.className = <span class=\"string\">\"ft\"</span>;</div><div class=\"line\">       div.title = <span class=\"string\">\"Some other text\"</span>;</div><div class=\"line\">       div.lang = <span class=\"string\">\"fr\"</span>;</div><div class=\"line\">       div.dir =<span class=\"string\">\"rtl\"</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"获取和设置属性\"><a href=\"#获取和设置属性\" class=\"headerlink\" title=\"获取和设置属性\"></a>获取和设置属性</h1><ul>\n<li>getAttribute</li>\n</ul>\n<blockquote>\n<p>getAttribute是一个函数。它只有一个参数——你打算查询的属性名字：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.getAttribute(attribute);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>setAttribute<blockquote>\n<p>它允许我们对属性节点的值做出修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">object.setAttribute(&quot;attribute&quot;,value);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>"},{"title":"学Node日志(一)","date":"2017-07-26T12:53:08.000Z","comments":1,"layout":"post","_content":"\n# 学Node日志(一)\n\n## node实例\n\n```javascript\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 9000;\n\nconst server = http.createServer((req,res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type','text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port,hostname, () => {\n    console.log('服务器运行在 http://${hostname}:${port}/');\n});\n```\n\n<!--more-->\n\n- `response.statusCode()`控制响应头刷新时将被发送到客户端的状态码\n\n  - `res.statusCode = 200`\n\n  > 状态码\n\n  ```\n  1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。\n  ```\n\n  ​\n\n\n- `response.setHeader()` 响应头如果存在,则值会被覆盖\n\n  > 如果要发送多个名称相同的响应头,则使用字符串数组\n\n  - `res.setHeader('Content-Type','text/plain')`\n\n  > Content-Type表明信息类型,缺省值为\" text/plain\".它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用\"/\"分割.\n\n  ```\n  text/plain：纯文本，文件扩展名.txt\n  text/html：HTML文本，文件扩展名.htm和.html\n  image/jpeg：jpeg格式的图片，文件扩展名.jpg\n  image/gif：GIF格式的图片，文件扩展名.gif\n  audio/x-wave：WAVE格式的音频，文件扩展名.wav\n  audio/mpeg：MP3格式的音频，文件扩展名.mp3\n  video/mpeg：MPEG格式的视频，文件扩展名.mpg\n  application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip\n  ```\n\n  ​\n\n- `response.end()` 每次响应都必须调用 `response.end()` 方法.\n\n  > 该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成\n\n  -  `res.end('Hello World\\n')`\n\n  > Hello World已经被发送.\n\n- `server.listen(port,hostname)`开始在指定的 `port` 和 `hostname` 上接受连接\n\n## 端口\n\n- 端口号是一个 16位的 uint, 所以其范围为 **1 to 65535** \n\n\n\n## URL\n\n- 定义的url格式笼统版本`<scheme>:<scheme-specific-part>`\n\n  > scheme有我们很熟悉的`http`、`https`、`ftp`，以及著名的`ed2k`，`thunder`\n\n- 通常我们熟悉的url定义成这个样子\n\n  ```\n  <scheme>://<user>:<password>@<host>:<port>/<url-path>\n  ```\n\n- 用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:\n\n  ```\n  <scheme>://<host>:<port>/<url-path>\n  ```\n\n  > 在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.\n\n  ​","source":"_posts/Node.md","raw":"---\ntitle: 学Node日志(一)\ndate: 2017-07-26 20：55\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Node.js\n---\n\n# 学Node日志(一)\n\n## node实例\n\n```javascript\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 9000;\n\nconst server = http.createServer((req,res) => {\n    res.statusCode = 200;\n    res.setHeader('Content-Type','text/plain');\n    res.end('Hello World\\n');\n});\n\nserver.listen(port,hostname, () => {\n    console.log('服务器运行在 http://${hostname}:${port}/');\n});\n```\n\n<!--more-->\n\n- `response.statusCode()`控制响应头刷新时将被发送到客户端的状态码\n\n  - `res.statusCode = 200`\n\n  > 状态码\n\n  ```\n  1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。\n  ```\n\n  ​\n\n\n- `response.setHeader()` 响应头如果存在,则值会被覆盖\n\n  > 如果要发送多个名称相同的响应头,则使用字符串数组\n\n  - `res.setHeader('Content-Type','text/plain')`\n\n  > Content-Type表明信息类型,缺省值为\" text/plain\".它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用\"/\"分割.\n\n  ```\n  text/plain：纯文本，文件扩展名.txt\n  text/html：HTML文本，文件扩展名.htm和.html\n  image/jpeg：jpeg格式的图片，文件扩展名.jpg\n  image/gif：GIF格式的图片，文件扩展名.gif\n  audio/x-wave：WAVE格式的音频，文件扩展名.wav\n  audio/mpeg：MP3格式的音频，文件扩展名.mp3\n  video/mpeg：MPEG格式的视频，文件扩展名.mpg\n  application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip\n  ```\n\n  ​\n\n- `response.end()` 每次响应都必须调用 `response.end()` 方法.\n\n  > 该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成\n\n  -  `res.end('Hello World\\n')`\n\n  > Hello World已经被发送.\n\n- `server.listen(port,hostname)`开始在指定的 `port` 和 `hostname` 上接受连接\n\n## 端口\n\n- 端口号是一个 16位的 uint, 所以其范围为 **1 to 65535** \n\n\n\n## URL\n\n- 定义的url格式笼统版本`<scheme>:<scheme-specific-part>`\n\n  > scheme有我们很熟悉的`http`、`https`、`ftp`，以及著名的`ed2k`，`thunder`\n\n- 通常我们熟悉的url定义成这个样子\n\n  ```\n  <scheme>://<user>:<password>@<host>:<port>/<url-path>\n  ```\n\n- 用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:\n\n  ```\n  <scheme>://<host>:<port>/<url-path>\n  ```\n\n  > 在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.\n\n  ​","slug":"Node","published":1,"updated":"2017-07-28T12:40:40.000Z","photos":[],"link":"","_id":"cj6krbq4a001jg3fymxtgcauz","content":"<h1 id=\"学Node日志-一\"><a href=\"#学Node日志-一\" class=\"headerlink\" title=\"学Node日志(一)\"></a>学Node日志(一)</h1><h2 id=\"node实例\"><a href=\"#node实例\" class=\"headerlink\" title=\"node实例\"></a>node实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> hostname = <span class=\"string\">'127.0.0.1'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">9000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</div><div class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</div><div class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.listen(port,hostname, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器运行在 http://$&#123;hostname&#125;:$&#123;port&#125;/'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li><p><code>response.statusCode()</code>控制响应头刷新时将被发送到客户端的状态码</p>\n<ul>\n<li><code>res.statusCode = 200</code></li>\n</ul>\n<blockquote>\n<p>状态码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p><code>response.setHeader()</code> 响应头如果存在,则值会被覆盖</p>\n<blockquote>\n<p>如果要发送多个名称相同的响应头,则使用字符串数组</p>\n</blockquote>\n<ul>\n<li><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Content-Type表明信息类型,缺省值为” text/plain”.它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">text/plain：纯文本，文件扩展名.txt</div><div class=\"line\">text/html：HTML文本，文件扩展名.htm和.html</div><div class=\"line\">image/jpeg：jpeg格式的图片，文件扩展名.jpg</div><div class=\"line\">image/gif：GIF格式的图片，文件扩展名.gif</div><div class=\"line\">audio/x-wave：WAVE格式的音频，文件扩展名.wav</div><div class=\"line\">audio/mpeg：MP3格式的音频，文件扩展名.mp3</div><div class=\"line\">video/mpeg：MPEG格式的视频，文件扩展名.mpg</div><div class=\"line\">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p><code>response.end()</code> 每次响应都必须调用 <code>response.end()</code> 方法.</p>\n<blockquote>\n<p>该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成</p>\n</blockquote>\n<ul>\n<li><code>res.end(&#39;Hello World\\n&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Hello World已经被发送.</p>\n</blockquote>\n</li>\n<li><p><code>server.listen(port,hostname)</code>开始在指定的 <code>port</code> 和 <code>hostname</code> 上接受连接</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><ul>\n<li>端口号是一个 16位的 uint, 所以其范围为 <strong>1 to 65535</strong> </li>\n</ul>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><ul>\n<li><p>定义的url格式笼统版本<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code></p>\n<blockquote>\n<p>scheme有我们很熟悉的<code>http</code>、<code>https</code>、<code>ftp</code>，以及著名的<code>ed2k</code>，<code>thunder</code></p>\n</blockquote>\n</li>\n<li><p>通常我们熟悉的url定义成这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"学Node日志-一\"><a href=\"#学Node日志-一\" class=\"headerlink\" title=\"学Node日志(一)\"></a>学Node日志(一)</h1><h2 id=\"node实例\"><a href=\"#node实例\" class=\"headerlink\" title=\"node实例\"></a>node实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> hostname = <span class=\"string\">'127.0.0.1'</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">9000</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</div><div class=\"line\">    res.statusCode = <span class=\"number\">200</span>;</div><div class=\"line\">    res.setHeader(<span class=\"string\">'Content-Type'</span>,<span class=\"string\">'text/plain'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">server.listen(port,hostname, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'服务器运行在 http://$&#123;hostname&#125;:$&#123;port&#125;/'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","more":"<ul>\n<li><p><code>response.statusCode()</code>控制响应头刷新时将被发送到客户端的状态码</p>\n<ul>\n<li><code>res.statusCode = 200</code></li>\n</ul>\n<blockquote>\n<p>状态码</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">1xx的代码代表请求已被接受，需要继续处理。2xx这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。3xx 重定向。4xx 请求错误。5xx表示服务器错误。</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<ul>\n<li><p><code>response.setHeader()</code> 响应头如果存在,则值会被覆盖</p>\n<blockquote>\n<p>如果要发送多个名称相同的响应头,则使用字符串数组</p>\n</blockquote>\n<ul>\n<li><code>res.setHeader(&#39;Content-Type&#39;,&#39;text/plain&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Content-Type表明信息类型,缺省值为” text/plain”.它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">text/plain：纯文本，文件扩展名.txt</div><div class=\"line\">text/html：HTML文本，文件扩展名.htm和.html</div><div class=\"line\">image/jpeg：jpeg格式的图片，文件扩展名.jpg</div><div class=\"line\">image/gif：GIF格式的图片，文件扩展名.gif</div><div class=\"line\">audio/x-wave：WAVE格式的音频，文件扩展名.wav</div><div class=\"line\">audio/mpeg：MP3格式的音频，文件扩展名.mp3</div><div class=\"line\">video/mpeg：MPEG格式的视频，文件扩展名.mpg</div><div class=\"line\">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n<li><p><code>response.end()</code> 每次响应都必须调用 <code>response.end()</code> 方法.</p>\n<blockquote>\n<p>该方法会通知服务器,所有响应头和响应主体都已被发送,即服务器就将他看成已完成</p>\n</blockquote>\n<ul>\n<li><code>res.end(&#39;Hello World\\n&#39;)</code></li>\n</ul>\n<blockquote>\n<p>Hello World已经被发送.</p>\n</blockquote>\n</li>\n<li><p><code>server.listen(port,hostname)</code>开始在指定的 <code>port</code> 和 <code>hostname</code> 上接受连接</p>\n</li>\n</ul>\n<h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><ul>\n<li>端口号是一个 16位的 uint, 所以其范围为 <strong>1 to 65535</strong> </li>\n</ul>\n<h2 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h2><ul>\n<li><p>定义的url格式笼统版本<code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code></p>\n<blockquote>\n<p>scheme有我们很熟悉的<code>http</code>、<code>https</code>、<code>ftp</code>，以及著名的<code>ed2k</code>，<code>thunder</code></p>\n</blockquote>\n</li>\n<li><p>通常我们熟悉的url定义成这个样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>用过ftp的估计能体会这么长的，网页上很少带auth信息，所以就精简成这样:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;url-path&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在上面的例子中, scheme=http, host=localhost, port=3000, url-path=/.</p>\n</blockquote>\n<p>​</p>\n</li>\n</ul>"},{"title":"React Native iOS/android环境配置","date":"2017-08-14T04:32:53.000Z","comments":1,"layout":"post","_content":"\n# React Native环境配置\n\n# Ios开发环境\n\n因为我是在mac下搭建环境的。所以比较方便。\n\n- Xcode时必须的！\n\n- > brew install node        //电脑需要有node\n  >\n  > brew install watchman    //这是用来监视文件系统中的更改的工具\n\n- npm install -g react-native-cli\n\n  然后我们打开 **Xcode**\n\n  ![xcode](/images/xcode.png)\n\n  <!--more-->\n\n接下来我们需要执行命令\n\n**react-native init AwesomeProject**\n\nThen：我们需要在Xcode里打开\n\n![xcode文件](/images/xcode文件.png)\n\n```\n接着在终端里\ncd AwesomeProject\nthen：\nreact-native run-ios\n```\n\n接下来我们等就好了\n\n![iphone6](/images/iphone6.png)\n\n这就是成功界面\n\n恭喜🎉！\n\n# Android环境\n\n第一步与ios一样\n\n- brew install node      \n- brew install watchman   \n\n我们就不做了。\n\n接下来\n\n## 我们需要安装`Java`的环境。\n\n[Download and install JDK 8 or newer](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n## 安装`Android`环境\n\n1. 安装 **[Android studio](https://developer.android.com/studio/index.html)** \n2. ![custon](/images/custon.png)\n3. 勾选`Performance`和`Android Virtual Device`![sdk](/images/sdk.png)\n4. 安装完成后，在Android Studio的启动欢迎界面中选择`Configure | SDK Manager`。![config](/images/config.png)\n5. 在`SDK Platforms`窗口中，选择`Show Package Details`\n\n![palt](/images/palt.png)\n\n然后tools里\n\n![sdttool](/images/sdttool.png)\n\n![sdktools](/images/sdktools.png)\n\n![sdksuppt](/images/sdksuppt.png)\n\n#### ANDROID_HOME环境变量\n\n确保`ANDROID_HOME`环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到`~/.bash_profile`文件中：(**译注**：~表示用户目录，即`/Users/你的用户名/`，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用`vi ~/.bash_profile`命令创建或编辑。如不熟悉vi操作，请点击[这里](http://www.eepw.com.cn/article/48018.htm)学习）\n\n```\n# 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。\nexport ANDROID_HOME=~/Library/Android/sdk\n\n```\n\n然后使用下列命令使其立即生效（否则重启后才生效）：\n\n```\nsource ~/.bash_profile\n\n```\n\n可以使用`echo $ANDROID_HOME`检查此变量是否已正确设置。\n\n## 最后\n\n同样我们需要在`Android studio`中打开创建的文件夹下Android文件\n\n然后去build\n\n![studio](/images/studio.png)\n\n圆圈是选手机机型。\n\n我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：\n\n```\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run-android\n```\n\n下面就是成功画面！恭喜🎉！![Android](/images/Android.png)\n\n# 在搭建环境下踩得坑\n\n## Android下\n\n![安卓bug](/images/安卓bug.png)\n\n这是我运行安卓的时候遇到的问题。我们需要在 **Android studio**先启动一个手机模拟器再去终端里输入指令：`react-native run-android` 就可以了\n\n\n\n\n\n![android tools](/images/android tools.png)\n\n这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0\n\n但是我升级过后还不行。发现是配置文件里的问题。\n\n![gaibuild](/images/gaibuild.png)\n\n这样就行啦！\n\n\n\n## Ios下\n\n具体出错问题描述找不到了，但是情况还是记得的。\n\n就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。\n\n这时候google到答案。。\n\n![ios解决问题1](/images/ios解决问题1.png)\n\n需要开一个终端，然后去在你的项目下`npm install` 就是这样。。具体情况我也不知道发生了什么哈哈哈","source":"_posts/React Native环境配置.md","raw":"---\ntitle: React Native iOS/android环境配置\ndate: 2017-08-14 14：54\ncomments: true\nlayout: post\ntags: [React,React Native,iOS,Android]\ncategories: React,React Native,iOS,Android\n---\n\n# React Native环境配置\n\n# Ios开发环境\n\n因为我是在mac下搭建环境的。所以比较方便。\n\n- Xcode时必须的！\n\n- > brew install node        //电脑需要有node\n  >\n  > brew install watchman    //这是用来监视文件系统中的更改的工具\n\n- npm install -g react-native-cli\n\n  然后我们打开 **Xcode**\n\n  ![xcode](/images/xcode.png)\n\n  <!--more-->\n\n接下来我们需要执行命令\n\n**react-native init AwesomeProject**\n\nThen：我们需要在Xcode里打开\n\n![xcode文件](/images/xcode文件.png)\n\n```\n接着在终端里\ncd AwesomeProject\nthen：\nreact-native run-ios\n```\n\n接下来我们等就好了\n\n![iphone6](/images/iphone6.png)\n\n这就是成功界面\n\n恭喜🎉！\n\n# Android环境\n\n第一步与ios一样\n\n- brew install node      \n- brew install watchman   \n\n我们就不做了。\n\n接下来\n\n## 我们需要安装`Java`的环境。\n\n[Download and install JDK 8 or newer](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\n\n## 安装`Android`环境\n\n1. 安装 **[Android studio](https://developer.android.com/studio/index.html)** \n2. ![custon](/images/custon.png)\n3. 勾选`Performance`和`Android Virtual Device`![sdk](/images/sdk.png)\n4. 安装完成后，在Android Studio的启动欢迎界面中选择`Configure | SDK Manager`。![config](/images/config.png)\n5. 在`SDK Platforms`窗口中，选择`Show Package Details`\n\n![palt](/images/palt.png)\n\n然后tools里\n\n![sdttool](/images/sdttool.png)\n\n![sdktools](/images/sdktools.png)\n\n![sdksuppt](/images/sdksuppt.png)\n\n#### ANDROID_HOME环境变量\n\n确保`ANDROID_HOME`环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到`~/.bash_profile`文件中：(**译注**：~表示用户目录，即`/Users/你的用户名/`，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用`vi ~/.bash_profile`命令创建或编辑。如不熟悉vi操作，请点击[这里](http://www.eepw.com.cn/article/48018.htm)学习）\n\n```\n# 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。\nexport ANDROID_HOME=~/Library/Android/sdk\n\n```\n\n然后使用下列命令使其立即生效（否则重启后才生效）：\n\n```\nsource ~/.bash_profile\n\n```\n\n可以使用`echo $ANDROID_HOME`检查此变量是否已正确设置。\n\n## 最后\n\n同样我们需要在`Android studio`中打开创建的文件夹下Android文件\n\n然后去build\n\n![studio](/images/studio.png)\n\n圆圈是选手机机型。\n\n我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：\n\n```\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run-android\n```\n\n下面就是成功画面！恭喜🎉！![Android](/images/Android.png)\n\n# 在搭建环境下踩得坑\n\n## Android下\n\n![安卓bug](/images/安卓bug.png)\n\n这是我运行安卓的时候遇到的问题。我们需要在 **Android studio**先启动一个手机模拟器再去终端里输入指令：`react-native run-android` 就可以了\n\n\n\n\n\n![android tools](/images/android tools.png)\n\n这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0\n\n但是我升级过后还不行。发现是配置文件里的问题。\n\n![gaibuild](/images/gaibuild.png)\n\n这样就行啦！\n\n\n\n## Ios下\n\n具体出错问题描述找不到了，但是情况还是记得的。\n\n就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。\n\n这时候google到答案。。\n\n![ios解决问题1](/images/ios解决问题1.png)\n\n需要开一个终端，然后去在你的项目下`npm install` 就是这样。。具体情况我也不知道发生了什么哈哈哈","slug":"React Native环境配置","published":1,"updated":"2017-08-14T06:55:20.000Z","photos":[],"link":"","_id":"cj6krbq4b001ng3fyutq4btwk","content":"<h1 id=\"React-Native环境配置\"><a href=\"#React-Native环境配置\" class=\"headerlink\" title=\"React Native环境配置\"></a>React Native环境配置</h1><h1 id=\"Ios开发环境\"><a href=\"#Ios开发环境\" class=\"headerlink\" title=\"Ios开发环境\"></a>Ios开发环境</h1><p>因为我是在mac下搭建环境的。所以比较方便。</p>\n<ul>\n<li><p>Xcode时必须的！</p>\n</li>\n<li><blockquote>\n<p>brew install node        //电脑需要有node</p>\n<p>brew install watchman    //这是用来监视文件系统中的更改的工具</p>\n</blockquote>\n</li>\n<li><p>npm install -g react-native-cli</p>\n<p>然后我们打开 <strong>Xcode</strong></p>\n<p><img src=\"/images/xcode.png\" alt=\"xcode\"></p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<p>接下来我们需要执行命令</p>\n<p><strong>react-native init AwesomeProject</strong></p>\n<p>Then：我们需要在Xcode里打开</p>\n<p><img src=\"/images/xcode文件.png\" alt=\"xcode文件\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">接着在终端里</div><div class=\"line\">cd AwesomeProject</div><div class=\"line\">then：</div><div class=\"line\">react-native run-ios</div></pre></td></tr></table></figure>\n<p>接下来我们等就好了</p>\n<p><img src=\"/images/iphone6.png\" alt=\"iphone6\"></p>\n<p>这就是成功界面</p>\n<p>恭喜🎉！</p>\n<h1 id=\"Android环境\"><a href=\"#Android环境\" class=\"headerlink\" title=\"Android环境\"></a>Android环境</h1><p>第一步与ios一样</p>\n<ul>\n<li>brew install node      </li>\n<li>brew install watchman   </li>\n</ul>\n<p>我们就不做了。</p>\n<p>接下来</p>\n<h2 id=\"我们需要安装Java的环境。\"><a href=\"#我们需要安装Java的环境。\" class=\"headerlink\" title=\"我们需要安装Java的环境。\"></a>我们需要安装<code>Java</code>的环境。</h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">Download and install JDK 8 or newer</a></p>\n<h2 id=\"安装Android环境\"><a href=\"#安装Android环境\" class=\"headerlink\" title=\"安装Android环境\"></a>安装<code>Android</code>环境</h2><ol>\n<li>安装 <strong><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Android studio</a></strong> </li>\n<li><img src=\"/images/custon.png\" alt=\"custon\"></li>\n<li>勾选<code>Performance</code>和<code>Android Virtual Device</code><img src=\"/images/sdk.png\" alt=\"sdk\"></li>\n<li>安装完成后，在Android Studio的启动欢迎界面中选择<code>Configure | SDK Manager</code>。<img src=\"/images/config.png\" alt=\"config\"></li>\n<li>在<code>SDK Platforms</code>窗口中，选择<code>Show Package Details</code></li>\n</ol>\n<p><img src=\"/images/palt.png\" alt=\"palt\"></p>\n<p>然后tools里</p>\n<p><img src=\"/images/sdttool.png\" alt=\"sdttool\"></p>\n<p><img src=\"/images/sdktools.png\" alt=\"sdktools\"></p>\n<p><img src=\"/images/sdksuppt.png\" alt=\"sdksuppt\"></p>\n<h4 id=\"ANDROID-HOME环境变量\"><a href=\"#ANDROID-HOME环境变量\" class=\"headerlink\" title=\"ANDROID_HOME环境变量\"></a>ANDROID_HOME环境变量</h4><p>确保<code>ANDROID_HOME</code>环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到<code>~/.bash_profile</code>文件中：(<strong>译注</strong>：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑。如不熟悉vi操作，请点击<a href=\"http://www.eepw.com.cn/article/48018.htm\" target=\"_blank\" rel=\"external\">这里</a>学习）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</div><div class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</div></pre></td></tr></table></figure>\n<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>可以使用<code>echo $ANDROID_HOME</code>检查此变量是否已正确设置。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>同样我们需要在<code>Android studio</code>中打开创建的文件夹下Android文件</p>\n<p>然后去build</p>\n<p><img src=\"/images/studio.png\" alt=\"studio\"></p>\n<p>圆圈是选手机机型。</p>\n<p>我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init AwesomeProject</div><div class=\"line\">cd AwesomeProject</div><div class=\"line\">react-native run-android</div></pre></td></tr></table></figure>\n<p>下面就是成功画面！恭喜🎉！<img src=\"/images/Android.png\" alt=\"Android\"></p>\n<h1 id=\"在搭建环境下踩得坑\"><a href=\"#在搭建环境下踩得坑\" class=\"headerlink\" title=\"在搭建环境下踩得坑\"></a>在搭建环境下踩得坑</h1><h2 id=\"Android下\"><a href=\"#Android下\" class=\"headerlink\" title=\"Android下\"></a>Android下</h2><p><img src=\"/images/安卓bug.png\" alt=\"安卓bug\"></p>\n<p>这是我运行安卓的时候遇到的问题。我们需要在 <strong>Android studio</strong>先启动一个手机模拟器再去终端里输入指令：<code>react-native run-android</code> 就可以了</p>\n<p><img src=\"/images/android tools.png\" alt=\"android tools\"></p>\n<p>这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0</p>\n<p>但是我升级过后还不行。发现是配置文件里的问题。</p>\n<p><img src=\"/images/gaibuild.png\" alt=\"gaibuild\"></p>\n<p>这样就行啦！</p>\n<h2 id=\"Ios下\"><a href=\"#Ios下\" class=\"headerlink\" title=\"Ios下\"></a>Ios下</h2><p>具体出错问题描述找不到了，但是情况还是记得的。</p>\n<p>就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。</p>\n<p>这时候google到答案。。</p>\n<p><img src=\"/images/ios解决问题1.png\" alt=\"ios解决问题1\"></p>\n<p>需要开一个终端，然后去在你的项目下<code>npm install</code> 就是这样。。具体情况我也不知道发生了什么哈哈哈</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"React-Native环境配置\"><a href=\"#React-Native环境配置\" class=\"headerlink\" title=\"React Native环境配置\"></a>React Native环境配置</h1><h1 id=\"Ios开发环境\"><a href=\"#Ios开发环境\" class=\"headerlink\" title=\"Ios开发环境\"></a>Ios开发环境</h1><p>因为我是在mac下搭建环境的。所以比较方便。</p>\n<ul>\n<li><p>Xcode时必须的！</p>\n</li>\n<li><blockquote>\n<p>brew install node        //电脑需要有node</p>\n<p>brew install watchman    //这是用来监视文件系统中的更改的工具</p>\n</blockquote>\n</li>\n<li><p>npm install -g react-native-cli</p>\n<p>然后我们打开 <strong>Xcode</strong></p>\n<p><img src=\"/images/xcode.png\" alt=\"xcode\"></p>","more":"</li>\n</ul>\n<p>接下来我们需要执行命令</p>\n<p><strong>react-native init AwesomeProject</strong></p>\n<p>Then：我们需要在Xcode里打开</p>\n<p><img src=\"/images/xcode文件.png\" alt=\"xcode文件\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">接着在终端里</div><div class=\"line\">cd AwesomeProject</div><div class=\"line\">then：</div><div class=\"line\">react-native run-ios</div></pre></td></tr></table></figure>\n<p>接下来我们等就好了</p>\n<p><img src=\"/images/iphone6.png\" alt=\"iphone6\"></p>\n<p>这就是成功界面</p>\n<p>恭喜🎉！</p>\n<h1 id=\"Android环境\"><a href=\"#Android环境\" class=\"headerlink\" title=\"Android环境\"></a>Android环境</h1><p>第一步与ios一样</p>\n<ul>\n<li>brew install node      </li>\n<li>brew install watchman   </li>\n</ul>\n<p>我们就不做了。</p>\n<p>接下来</p>\n<h2 id=\"我们需要安装Java的环境。\"><a href=\"#我们需要安装Java的环境。\" class=\"headerlink\" title=\"我们需要安装Java的环境。\"></a>我们需要安装<code>Java</code>的环境。</h2><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"external\">Download and install JDK 8 or newer</a></p>\n<h2 id=\"安装Android环境\"><a href=\"#安装Android环境\" class=\"headerlink\" title=\"安装Android环境\"></a>安装<code>Android</code>环境</h2><ol>\n<li>安装 <strong><a href=\"https://developer.android.com/studio/index.html\" target=\"_blank\" rel=\"external\">Android studio</a></strong> </li>\n<li><img src=\"/images/custon.png\" alt=\"custon\"></li>\n<li>勾选<code>Performance</code>和<code>Android Virtual Device</code><img src=\"/images/sdk.png\" alt=\"sdk\"></li>\n<li>安装完成后，在Android Studio的启动欢迎界面中选择<code>Configure | SDK Manager</code>。<img src=\"/images/config.png\" alt=\"config\"></li>\n<li>在<code>SDK Platforms</code>窗口中，选择<code>Show Package Details</code></li>\n</ol>\n<p><img src=\"/images/palt.png\" alt=\"palt\"></p>\n<p>然后tools里</p>\n<p><img src=\"/images/sdttool.png\" alt=\"sdttool\"></p>\n<p><img src=\"/images/sdktools.png\" alt=\"sdktools\"></p>\n<p><img src=\"/images/sdksuppt.png\" alt=\"sdksuppt\"></p>\n<h4 id=\"ANDROID-HOME环境变量\"><a href=\"#ANDROID-HOME环境变量\" class=\"headerlink\" title=\"ANDROID_HOME环境变量\"></a>ANDROID_HOME环境变量</h4><p>确保<code>ANDROID_HOME</code>环境变量正确地指向了你安装的Android SDK的路径。具体的做法是把下面的命令加入到<code>~/.bash_profile</code>文件中：(<strong>译注</strong>：~表示用户目录，即<code>/Users/你的用户名/</code>，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。请在终端下使用<code>vi ~/.bash_profile</code>命令创建或编辑。如不熟悉vi操作，请点击<a href=\"http://www.eepw.com.cn/article/48018.htm\" target=\"_blank\" rel=\"external\">这里</a>学习）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</div><div class=\"line\">export ANDROID_HOME=~/Library/Android/sdk</div></pre></td></tr></table></figure>\n<p>然后使用下列命令使其立即生效（否则重启后才生效）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>可以使用<code>echo $ANDROID_HOME</code>检查此变量是否已正确设置。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>同样我们需要在<code>Android studio</code>中打开创建的文件夹下Android文件</p>\n<p>然后去build</p>\n<p><img src=\"/images/studio.png\" alt=\"studio\"></p>\n<p>圆圈是选手机机型。</p>\n<p>我们在正方形框框中先点击锤子然后点击绿色箭头之后在终端里输入以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native init AwesomeProject</div><div class=\"line\">cd AwesomeProject</div><div class=\"line\">react-native run-android</div></pre></td></tr></table></figure>\n<p>下面就是成功画面！恭喜🎉！<img src=\"/images/Android.png\" alt=\"Android\"></p>\n<h1 id=\"在搭建环境下踩得坑\"><a href=\"#在搭建环境下踩得坑\" class=\"headerlink\" title=\"在搭建环境下踩得坑\"></a>在搭建环境下踩得坑</h1><h2 id=\"Android下\"><a href=\"#Android下\" class=\"headerlink\" title=\"Android下\"></a>Android下</h2><p><img src=\"/images/安卓bug.png\" alt=\"安卓bug\"></p>\n<p>这是我运行安卓的时候遇到的问题。我们需要在 <strong>Android studio</strong>先启动一个手机模拟器再去终端里输入指令：<code>react-native run-android</code> 就可以了</p>\n<p><img src=\"/images/android tools.png\" alt=\"android tools\"></p>\n<p>这个问题是说Build Tools 23.0.0.1太低至少需要25.0.0</p>\n<p>但是我升级过后还不行。发现是配置文件里的问题。</p>\n<p><img src=\"/images/gaibuild.png\" alt=\"gaibuild\"></p>\n<p>这样就行啦！</p>\n<h2 id=\"Ios下\"><a href=\"#Ios下\" class=\"headerlink\" title=\"Ios下\"></a>Ios下</h2><p>具体出错问题描述找不到了，但是情况还是记得的。</p>\n<p>就是说我ios的虚拟机打开了但是我在上面看不见自己的项目。</p>\n<p>这时候google到答案。。</p>\n<p><img src=\"/images/ios解决问题1.png\" alt=\"ios解决问题1\"></p>\n<p>需要开一个终端，然后去在你的项目下<code>npm install</code> 就是这样。。具体情况我也不知道发生了什么哈哈哈</p>"},{"title":"Promise","date":"2017-07-28T09:37:12.000Z","comments":1,"layout":"post","_content":"\n# Promise\n\n```javascript\nnew Promise(\n/* executor */\n   function(resolve,reject){...}\n)\n```\n\n> executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。\n\n一个 `Promise`有以下几种状态:\n\n- *pending*: 初始状态，不是成功或失败状态。\n- *fulfilled*: 意味着操作成功完成。\n- *rejected*: 意味着操作失败。\n\n\n<!--more-->\n\n# Promise对象\n\n- Promise是一个构造函数\n\n\n- 对象的状态不受外界影响\n\n- 一旦状态改变就不会再变,任何时候都可以得到这个结果.\n\n  > 状态改变只有两种可能:从`Pending` 变为`Resolved`(''未完成''变为''成功''将异步操作**成功**的结果作为参数传递出去)\n  >\n  > 从`Pending`变为`Rejected`(\"未完成\"变为\"失败\"将异步操作报出**错误**的结果作为参数传递出去).\n\n\n# Promise原型\n\n## then()方法\n\n### MDN的例子\n\n```javascript\nlet p1 = new Promise(function(resolve, reject) {\n  resolve(\"Success!\");\n  // or\n  // reject (\"Error!\");\n});\n\np1.then(function(value) {\n  console.log(value); // Success!\n}, function(reason) {\n  console.log(reason); // Error!\n});\n```\n\n![promise1](/images/promise1.png)\n\n当我把`reject`去掉注释\n\n![promise2](/images/promise2.png)\n\n![promise3](/images/promise3.png)\n\n说明`p1`已经被声明过了,而且状态改变过了就不会在改变了.\n\n我只能把`p1` 改成别的才能得到`Error`.\n\n## 链式\n\n例子来自<ES6标准入门>\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post){\n  return getJSON(post.commentURL);\n}).then(function funcA(comments){\n  consloe.log(\"Resolved:\",comments);\n},function funcB(err){\n  consloe.log(\"Rejected:\",err);\n});\n```\n\n第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的`funcA`或者`funcB`函数.\n\n## catch()方法\n\n例子来自<ES6标准入门>\n\n**catch()** 方法返回一个[Promise](https://developer.mozilla.org/zh-CN/docs/Web/API/Promise)，只处理拒绝的情况。它的行为与调用**then()**相同。\n\n其实是 **.then(null,rejection)** 的别名.\n\n```JavaScript\np.then((val) => console.log(\"fulfilled:\", val))\n\t.catch((err) => console.log(\"rejected:\", err));\n\n//等同于\n\np.then((val) => console.log(\"fulfilled\", val))\n\t.then(null,(err) => console.log(\"rejected:\", val));\n```\n\n- Promise对象的错误具有\"冒泡\"性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.\n\n# Promise方法\n\n## Promise.all()\n\n**Promise.all(iterable)** 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。\n\n```javascript\nPromise.all(iterable);\n```\n\n> iterable\n>\n> 一个可迭代对象，例如 [`Array`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array)。参见 [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable).\n\n来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)的例子\n\n```javascript\nvar p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n  console.log(values); // [3, 1337, \"foo\"] \n});\n```\n\n## [Promise.resolve(value)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\n\n## [Promise.reject(reason)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)\n\n## [Promise.race(iterable)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\n# 回调函数\n\n一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2017-07-28 20：37\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之路\n---\n\n# Promise\n\n```javascript\nnew Promise(\n/* executor */\n   function(resolve,reject){...}\n)\n```\n\n> executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。\n\n一个 `Promise`有以下几种状态:\n\n- *pending*: 初始状态，不是成功或失败状态。\n- *fulfilled*: 意味着操作成功完成。\n- *rejected*: 意味着操作失败。\n\n\n<!--more-->\n\n# Promise对象\n\n- Promise是一个构造函数\n\n\n- 对象的状态不受外界影响\n\n- 一旦状态改变就不会再变,任何时候都可以得到这个结果.\n\n  > 状态改变只有两种可能:从`Pending` 变为`Resolved`(''未完成''变为''成功''将异步操作**成功**的结果作为参数传递出去)\n  >\n  > 从`Pending`变为`Rejected`(\"未完成\"变为\"失败\"将异步操作报出**错误**的结果作为参数传递出去).\n\n\n# Promise原型\n\n## then()方法\n\n### MDN的例子\n\n```javascript\nlet p1 = new Promise(function(resolve, reject) {\n  resolve(\"Success!\");\n  // or\n  // reject (\"Error!\");\n});\n\np1.then(function(value) {\n  console.log(value); // Success!\n}, function(reason) {\n  console.log(reason); // Error!\n});\n```\n\n![promise1](/images/promise1.png)\n\n当我把`reject`去掉注释\n\n![promise2](/images/promise2.png)\n\n![promise3](/images/promise3.png)\n\n说明`p1`已经被声明过了,而且状态改变过了就不会在改变了.\n\n我只能把`p1` 改成别的才能得到`Error`.\n\n## 链式\n\n例子来自<ES6标准入门>\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post){\n  return getJSON(post.commentURL);\n}).then(function funcA(comments){\n  consloe.log(\"Resolved:\",comments);\n},function funcB(err){\n  consloe.log(\"Rejected:\",err);\n});\n```\n\n第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的`funcA`或者`funcB`函数.\n\n## catch()方法\n\n例子来自<ES6标准入门>\n\n**catch()** 方法返回一个[Promise](https://developer.mozilla.org/zh-CN/docs/Web/API/Promise)，只处理拒绝的情况。它的行为与调用**then()**相同。\n\n其实是 **.then(null,rejection)** 的别名.\n\n```JavaScript\np.then((val) => console.log(\"fulfilled:\", val))\n\t.catch((err) => console.log(\"rejected:\", err));\n\n//等同于\n\np.then((val) => console.log(\"fulfilled\", val))\n\t.then(null,(err) => console.log(\"rejected:\", val));\n```\n\n- Promise对象的错误具有\"冒泡\"性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.\n\n# Promise方法\n\n## Promise.all()\n\n**Promise.all(iterable)** 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。\n\n```javascript\nPromise.all(iterable);\n```\n\n> iterable\n>\n> 一个可迭代对象，例如 [`Array`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array)。参见 [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable).\n\n来自[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all)的例子\n\n```javascript\nvar p1 = Promise.resolve(3);\nvar p2 = 1337;\nvar p3 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"foo\");\n}); \n\nPromise.all([p1, p2, p3]).then(values => { \n  console.log(values); // [3, 1337, \"foo\"] \n});\n```\n\n## [Promise.resolve(value)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve)\n\n## [Promise.reject(reason)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject)\n\n## [Promise.race(iterable)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race)\n\n# 回调函数\n\n一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.\n\n你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 \n\n作者：常溪玲链接：https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"Promise","published":1,"updated":"2017-07-29T06:41:56.000Z","photos":[],"link":"","_id":"cj6krbq4d001qg3fymiv7l2mt","content":"<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</div><div class=\"line\"><span class=\"comment\">/* executor */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;...&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n</blockquote>\n<p>一个 <code>Promise</code>有以下几种状态:</p>\n<ul>\n<li><em>pending</em>: 初始状态，不是成功或失败状态。</li>\n<li><em>fulfilled</em>: 意味着操作成功完成。</li>\n<li><em>rejected</em>: 意味着操作失败。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h1><ul>\n<li>Promise是一个构造函数</li>\n</ul>\n<ul>\n<li><p>对象的状态不受外界影响</p>\n</li>\n<li><p>一旦状态改变就不会再变,任何时候都可以得到这个结果.</p>\n<blockquote>\n<p>状态改变只有两种可能:从<code>Pending</code> 变为<code>Resolved</code>(‘’未完成’’变为’’成功’’将异步操作<strong>成功</strong>的结果作为参数传递出去)</p>\n<p>从<code>Pending</code>变为<code>Rejected</code>(“未完成”变为”失败”将异步操作报出<strong>错误</strong>的结果作为参数传递出去).</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"Promise原型\"><a href=\"#Promise原型\" class=\"headerlink\" title=\"Promise原型\"></a>Promise原型</h1><h2 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then()方法\"></a>then()方法</h2><h3 id=\"MDN的例子\"><a href=\"#MDN的例子\" class=\"headerlink\" title=\"MDN的例子\"></a>MDN的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">\"Success!\"</span>);</div><div class=\"line\">  <span class=\"comment\">// or</span></div><div class=\"line\">  <span class=\"comment\">// reject (\"Error!\");</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// Success!</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// Error!</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"/images/promise1.png\" alt=\"promise1\"></p>\n<p>当我把<code>reject</code>去掉注释</p>\n<p><img src=\"/images/promise2.png\" alt=\"promise2\"></p>\n<p><img src=\"/images/promise3.png\" alt=\"promise3\"></p>\n<p>说明<code>p1</code>已经被声明过了,而且状态改变过了就不会在改变了.</p>\n<p>我只能把<code>p1</code> 改成别的才能得到<code>Error</code>.</p>\n<h2 id=\"链式\"><a href=\"#链式\" class=\"headerlink\" title=\"链式\"></a>链式</h2><p>例子来自<es6标准入门></es6标准入门></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>)</span>&#123;</div><div class=\"line\">  consloe.log(<span class=\"string\">\"Resolved:\"</span>,comments);</div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  consloe.log(<span class=\"string\">\"Rejected:\"</span>,err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的<code>funcA</code>或者<code>funcB</code>函数.</p>\n<h2 id=\"catch-方法\"><a href=\"#catch-方法\" class=\"headerlink\" title=\"catch()方法\"></a>catch()方法</h2><p>例子来自<es6标准入门></es6标准入门></p>\n<p><strong>catch()</strong> 方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Promise\" target=\"_blank\" rel=\"external\">Promise</a>，只处理拒绝的情况。它的行为与调用<strong>then()</strong>相同。</p>\n<p>其实是 <strong>.then(null,rejection)</strong> 的别名.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled:\"</span>, val))</div><div class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled\"</span>, val))</div><div class=\"line\">\t.then(<span class=\"literal\">null</span>,(err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, val));</div></pre></td></tr></table></figure>\n<ul>\n<li>Promise对象的错误具有”冒泡”性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.</li>\n</ul>\n<h1 id=\"Promise方法\"><a href=\"#Promise方法\" class=\"headerlink\" title=\"Promise方法\"></a>Promise方法</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p><strong>Promise.all(iterable)</strong> 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>iterable</p>\n<p>一个可迭代对象，例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array\" target=\"_blank\" rel=\"external\"><code>Array</code></a>。参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable\" target=\"_blank\" rel=\"external\">iterable</a>.</p>\n</blockquote>\n<p>来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"external\">MDN</a>的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\" target=\"_blank\" rel=\"external\">Promise.resolve(value)</a></h2><h2 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\" target=\"_blank\" rel=\"external\">Promise.reject(reason)</a></h2><h2 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\" target=\"_blank\" rel=\"external\">Promise.race(iterable)</a></h2><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.</p>\n<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 </p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(</div><div class=\"line\"><span class=\"comment\">/* executor */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;...&#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>executor 函数在Promise构造函数执行时同步执行，被传递resolve和reject函数（executor 函数在Promise构造函数返回新建对象前被调用）。</p>\n</blockquote>\n<p>一个 <code>Promise</code>有以下几种状态:</p>\n<ul>\n<li><em>pending</em>: 初始状态，不是成功或失败状态。</li>\n<li><em>fulfilled</em>: 意味着操作成功完成。</li>\n<li><em>rejected</em>: 意味着操作失败。</li>\n</ul>","more":"<h1 id=\"Promise对象\"><a href=\"#Promise对象\" class=\"headerlink\" title=\"Promise对象\"></a>Promise对象</h1><ul>\n<li>Promise是一个构造函数</li>\n</ul>\n<ul>\n<li><p>对象的状态不受外界影响</p>\n</li>\n<li><p>一旦状态改变就不会再变,任何时候都可以得到这个结果.</p>\n<blockquote>\n<p>状态改变只有两种可能:从<code>Pending</code> 变为<code>Resolved</code>(‘’未完成’’变为’’成功’’将异步操作<strong>成功</strong>的结果作为参数传递出去)</p>\n<p>从<code>Pending</code>变为<code>Rejected</code>(“未完成”变为”失败”将异步操作报出<strong>错误</strong>的结果作为参数传递出去).</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"Promise原型\"><a href=\"#Promise原型\" class=\"headerlink\" title=\"Promise原型\"></a>Promise原型</h1><h2 id=\"then-方法\"><a href=\"#then-方法\" class=\"headerlink\" title=\"then()方法\"></a>then()方法</h2><h3 id=\"MDN的例子\"><a href=\"#MDN的例子\" class=\"headerlink\" title=\"MDN的例子\"></a>MDN的例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  resolve(<span class=\"string\">\"Success!\"</span>);</div><div class=\"line\">  <span class=\"comment\">// or</span></div><div class=\"line\">  <span class=\"comment\">// reject (\"Error!\");</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value); <span class=\"comment\">// Success!</span></div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(reason); <span class=\"comment\">// Error!</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"/images/promise1.png\" alt=\"promise1\"></p>\n<p>当我把<code>reject</code>去掉注释</p>\n<p><img src=\"/images/promise2.png\" alt=\"promise2\"></p>\n<p><img src=\"/images/promise3.png\" alt=\"promise3\"></p>\n<p>说明<code>p1</code>已经被声明过了,而且状态改变过了就不会在改变了.</p>\n<p>我只能把<code>p1</code> 改成别的才能得到<code>Error</code>.</p>\n<h2 id=\"链式\"><a href=\"#链式\" class=\"headerlink\" title=\"链式\"></a>链式</h2><p>例子来自<es6标准入门></es6标准入门></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> getJSON(post.commentURL);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>)</span>&#123;</div><div class=\"line\">  consloe.log(<span class=\"string\">\"Resolved:\"</span>,comments);</div><div class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">  consloe.log(<span class=\"string\">\"Rejected:\"</span>,err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>第一个then方法指定的回调函数返回的是另一个Promise对象.第二个then方法指定的回调函数会等待这个新的Promise对象状态发送变化再进行调用下面的<code>funcA</code>或者<code>funcB</code>函数.</p>\n<h2 id=\"catch-方法\"><a href=\"#catch-方法\" class=\"headerlink\" title=\"catch()方法\"></a>catch()方法</h2><p>例子来自<es6标准入门></es6标准入门></p>\n<p><strong>catch()</strong> 方法返回一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Promise\" target=\"_blank\" rel=\"external\">Promise</a>，只处理拒绝的情况。它的行为与调用<strong>then()</strong>相同。</p>\n<p>其实是 <strong>.then(null,rejection)</strong> 的别名.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled:\"</span>, val))</div><div class=\"line\">\t.catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, err));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//等同于</span></div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fulfilled\"</span>, val))</div><div class=\"line\">\t.then(<span class=\"literal\">null</span>,(err) =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rejected:\"</span>, val));</div></pre></td></tr></table></figure>\n<ul>\n<li>Promise对象的错误具有”冒泡”性质,会一直向后传递,直到被捕获为止.也就是说,错误总是会被下一个catch语句捕获.</li>\n</ul>\n<h1 id=\"Promise方法\"><a href=\"#Promise方法\" class=\"headerlink\" title=\"Promise方法\"></a>Promise方法</h1><h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p><strong>Promise.all(iterable)</strong> 方法指当所有在可迭代参数中的 promises 已完成，或者第一个传递的 promise（指 reject）失败时，返回 promise。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all(iterable);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>iterable</p>\n<p>一个可迭代对象，例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Array\" target=\"_blank\" rel=\"external\"><code>Array</code></a>。参见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable\" target=\"_blank\" rel=\"external\">iterable</a>.</p>\n</blockquote>\n<p>来自<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"external\">MDN</a>的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"number\">1337</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  setTimeout(resolve, <span class=\"number\">100</span>, <span class=\"string\">\"foo\"</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Promise</span>.all([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">// [3, 1337, \"foo\"] </span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Promise-resolve-value\"><a href=\"#Promise-resolve-value\" class=\"headerlink\" title=\"Promise.resolve(value)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\" target=\"_blank\" rel=\"external\">Promise.resolve(value)</a></h2><h2 id=\"Promise-reject-reason\"><a href=\"#Promise-reject-reason\" class=\"headerlink\" title=\"Promise.reject(reason)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\" target=\"_blank\" rel=\"external\">Promise.reject(reason)</a></h2><h2 id=\"Promise-race-iterable\"><a href=\"#Promise-race-iterable\" class=\"headerlink\" title=\"Promise.race(iterable)\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\" target=\"_blank\" rel=\"external\">Promise.race(iterable)</a></h2><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>一个回调函数，也被称为高阶函数，是一个被作为参数传递给另一个函数.</p>\n<p>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。回答完毕。 </p>\n<p>作者：常溪玲链接：<a href=\"https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19801131/answer/13005983来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p>"},{"title":"React State与Props的小心思","date":"2017-06-30T04:10:00.000Z","comments":1,"layout":"post","_content":"\n忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。\n\n# Props与State很容易让我经常弄混\n\n## 先来说说Props\n\n- 官方解释\n\n组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为**props。**\n\n- 个人理解\n\n**props**是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。\n\n<!--more-->\n\n### props父子传递\n\n```javascript\nfunction Uesr(props){\n  return(\n  <div className={'abc'+ props.color}>\n    {props.children}\n  </div>\n  );\n}\n------------------------------------------------------------------------\n  \nfunction My(){\n  return(\n  <User color=\"red\">\n    <h1>nihao</h1>\n  </User>\n  );\n}\n```\n\n在JSX标签内的任何内容都将通过`children`属性传入`User`。因为`User`在一个`div`内渲染了`{props.children}`，所以被传递的所有元素都会出现在最终输出中。\n\n其实，我们也可以不用children。借用React官方文档的例子：\n\n```javascript\nfunction Contacts() {\n  return <div className=\"Contacts\" />;\n}\n\nfunction Chat() {\n  return <div className=\"Chat\" />;\n}\n\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n\n```\n\n## 接下来State\n\n### state怎么工作？\n\n通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。\n\n### 什么时候组件需要state呢？\n\n一般来说，大部分的组件应该从`props`属性中获取数据然后渲染。那么在！\n\n**用户输入，服务器交互，这些情况下会用到State**。在官方上说，**尽可能的保持你的组件无状态化。**\n\n通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。\n\n- setState:更新组件状态。\n- setState会触发diff算法：判断state和页面结果的区别，是否需要更新。\n\n\n\n### 状态(state)和属性(props)对比\n\n- 状态和属性都会触发render更新，都是纯JS对象\n- 状态：是和自己相关的，既不受父组件也不受子组件影响\n- 属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性\n- 根本的区别：组件在运行时需要去修改维护的就是状态","source":"_posts/React-State与Props的小心思.md","raw":"---\ntitle: React State与Props的小心思\ndate: 2017-06-30 12:10\ncomments: true\nlayout: post\ntags: [JavaScript,React,Webpack]\ncategories: React\n---\n\n忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。\n\n# Props与State很容易让我经常弄混\n\n## 先来说说Props\n\n- 官方解释\n\n组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为**props。**\n\n- 个人理解\n\n**props**是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。\n\n<!--more-->\n\n### props父子传递\n\n```javascript\nfunction Uesr(props){\n  return(\n  <div className={'abc'+ props.color}>\n    {props.children}\n  </div>\n  );\n}\n------------------------------------------------------------------------\n  \nfunction My(){\n  return(\n  <User color=\"red\">\n    <h1>nihao</h1>\n  </User>\n  );\n}\n```\n\n在JSX标签内的任何内容都将通过`children`属性传入`User`。因为`User`在一个`div`内渲染了`{props.children}`，所以被传递的所有元素都会出现在最终输出中。\n\n其实，我们也可以不用children。借用React官方文档的例子：\n\n```javascript\nfunction Contacts() {\n  return <div className=\"Contacts\" />;\n}\n\nfunction Chat() {\n  return <div className=\"Chat\" />;\n}\n\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />\n      }\n      right={\n        <Chat />\n      } />\n  );\n}\n\n```\n\n## 接下来State\n\n### state怎么工作？\n\n通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。\n\n### 什么时候组件需要state呢？\n\n一般来说，大部分的组件应该从`props`属性中获取数据然后渲染。那么在！\n\n**用户输入，服务器交互，这些情况下会用到State**。在官方上说，**尽可能的保持你的组件无状态化。**\n\n通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。\n\n- setState:更新组件状态。\n- setState会触发diff算法：判断state和页面结果的区别，是否需要更新。\n\n\n\n### 状态(state)和属性(props)对比\n\n- 状态和属性都会触发render更新，都是纯JS对象\n- 状态：是和自己相关的，既不受父组件也不受子组件影响\n- 属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性\n- 根本的区别：组件在运行时需要去修改维护的就是状态","slug":"React-State与Props的小心思","published":1,"updated":"2017-07-24T14:37:44.000Z","photos":[],"link":"","_id":"cj6krbq4f001vg3fyera53ifw","content":"<p>忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。</p>\n<h1 id=\"Props与State很容易让我经常弄混\"><a href=\"#Props与State很容易让我经常弄混\" class=\"headerlink\" title=\"Props与State很容易让我经常弄混\"></a>Props与State很容易让我经常弄混</h1><h2 id=\"先来说说Props\"><a href=\"#先来说说Props\" class=\"headerlink\" title=\"先来说说Props\"></a>先来说说Props</h2><ul>\n<li>官方解释</li>\n</ul>\n<p>组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为<strong>props。</strong></p>\n<ul>\n<li>个人理解</li>\n</ul>\n<p><strong>props</strong>是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。</p>\n<a id=\"more\"></a>\n<h3 id=\"props父子传递\"><a href=\"#props父子传递\" class=\"headerlink\" title=\"props父子传递\"></a>props父子传递</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Uesr</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span>'<span class=\"attr\">abc</span>'+ <span class=\"attr\">props.color</span>&#125;&gt;</span></span></div><div class=\"line\">    &#123;props.children&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\">------------------------------------------------------------------------</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">My</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">User</span> <span class=\"attr\">color</span>=<span class=\"string\">\"red\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>nihao<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在JSX标签内的任何内容都将通过<code>children</code>属性传入<code>User</code>。因为<code>User</code>在一个<code>div</code>内渲染了<code>{props.children}</code>，所以被传递的所有元素都会出现在最终输出中。</p>\n<p>其实，我们也可以不用children。借用React官方文档的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Contacts</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;div className=\"Contacts\" /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Chat() &#123;</div><div class=\"line\">  return &lt;div className=\"Chat\" /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SplitPane(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div className=\"SplitPane\"&gt;</div><div class=\"line\">      &lt;div className=\"SplitPane-left\"&gt;</div><div class=\"line\">        &#123;props.left&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;div className=\"SplitPane-right\"&gt;</div><div class=\"line\">        &#123;props.right&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function App() &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;SplitPane</div><div class=\"line\">      left=&#123;</div><div class=\"line\">        &lt;Contacts /&gt;</div><div class=\"line\">      &#125;</div><div class=\"line\">      right=&#123;</div><div class=\"line\">        &lt;Chat /&gt;</div><div class=\"line\">      &#125; /&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"接下来State\"><a href=\"#接下来State\" class=\"headerlink\" title=\"接下来State\"></a>接下来State</h2><h3 id=\"state怎么工作？\"><a href=\"#state怎么工作？\" class=\"headerlink\" title=\"state怎么工作？\"></a>state怎么工作？</h3><p>通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。</p>\n<h3 id=\"什么时候组件需要state呢？\"><a href=\"#什么时候组件需要state呢？\" class=\"headerlink\" title=\"什么时候组件需要state呢？\"></a>什么时候组件需要state呢？</h3><p>一般来说，大部分的组件应该从<code>props</code>属性中获取数据然后渲染。那么在！</p>\n<p><strong>用户输入，服务器交互，这些情况下会用到State</strong>。在官方上说，<strong>尽可能的保持你的组件无状态化。</strong></p>\n<p>通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。</p>\n<ul>\n<li>setState:更新组件状态。</li>\n<li>setState会触发diff算法：判断state和页面结果的区别，是否需要更新。</li>\n</ul>\n<h3 id=\"状态-state-和属性-props-对比\"><a href=\"#状态-state-和属性-props-对比\" class=\"headerlink\" title=\"状态(state)和属性(props)对比\"></a>状态(state)和属性(props)对比</h3><ul>\n<li>状态和属性都会触发render更新，都是纯JS对象</li>\n<li>状态：是和自己相关的，既不受父组件也不受子组件影响</li>\n<li>属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性</li>\n<li>根本的区别：组件在运行时需要去修改维护的就是状态</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>忙于期末考。。很久都没有更新博客了！因为找了个实习需要React所以这里写写自己在看React的官方文档中，遇到的问题。</p>\n<h1 id=\"Props与State很容易让我经常弄混\"><a href=\"#Props与State很容易让我经常弄混\" class=\"headerlink\" title=\"Props与State很容易让我经常弄混\"></a>Props与State很容易让我经常弄混</h1><h2 id=\"先来说说Props\"><a href=\"#先来说说Props\" class=\"headerlink\" title=\"先来说说Props\"></a>先来说说Props</h2><ul>\n<li>官方解释</li>\n</ul>\n<p>组件从概念上看就是函数，之后这个组件可以接受任意的输入值，并返回一个需要页面上展示的React元素。那么这个输入值就为<strong>props。</strong></p>\n<ul>\n<li>个人理解</li>\n</ul>\n<p><strong>props</strong>是不可变的，传入什么值进去，最后返回的也是传入的值。也就是说，只读。</p>","more":"<h3 id=\"props父子传递\"><a href=\"#props父子传递\" class=\"headerlink\" title=\"props父子传递\"></a>props父子传递</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Uesr</span>(<span class=\"params\">props</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&#123;</span>'<span class=\"attr\">abc</span>'+ <span class=\"attr\">props.color</span>&#125;&gt;</span></span></div><div class=\"line\">    &#123;props.children&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\">------------------------------------------------------------------------</div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">My</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span>(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">User</span> <span class=\"attr\">color</span>=<span class=\"string\">\"red\"</span>&gt;</span></span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>nihao<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">User</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在JSX标签内的任何内容都将通过<code>children</code>属性传入<code>User</code>。因为<code>User</code>在一个<code>div</code>内渲染了<code>{props.children}</code>，所以被传递的所有元素都会出现在最终输出中。</p>\n<p>其实，我们也可以不用children。借用React官方文档的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Contacts</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &lt;div className=\"Contacts\" /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Chat() &#123;</div><div class=\"line\">  return &lt;div className=\"Chat\" /&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SplitPane(props) &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;div className=\"SplitPane\"&gt;</div><div class=\"line\">      &lt;div className=\"SplitPane-left\"&gt;</div><div class=\"line\">        &#123;props.left&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;div className=\"SplitPane-right\"&gt;</div><div class=\"line\">        &#123;props.right&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function App() &#123;</div><div class=\"line\">  return (</div><div class=\"line\">    &lt;SplitPane</div><div class=\"line\">      left=&#123;</div><div class=\"line\">        &lt;Contacts /&gt;</div><div class=\"line\">      &#125;</div><div class=\"line\">      right=&#123;</div><div class=\"line\">        &lt;Chat /&gt;</div><div class=\"line\">      &#125; /&gt;</div><div class=\"line\">  );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"接下来State\"><a href=\"#接下来State\" class=\"headerlink\" title=\"接下来State\"></a>接下来State</h2><h3 id=\"state怎么工作？\"><a href=\"#state怎么工作？\" class=\"headerlink\" title=\"state怎么工作？\"></a>state怎么工作？</h3><p>通过调用setState(data,callback)方法，改变状态，就会触发React更新UI。</p>\n<h3 id=\"什么时候组件需要state呢？\"><a href=\"#什么时候组件需要state呢？\" class=\"headerlink\" title=\"什么时候组件需要state呢？\"></a>什么时候组件需要state呢？</h3><p>一般来说，大部分的组件应该从<code>props</code>属性中获取数据然后渲染。那么在！</p>\n<p><strong>用户输入，服务器交互，这些情况下会用到State</strong>。在官方上说，<strong>尽可能的保持你的组件无状态化。</strong></p>\n<p>通过看官方文档。。我发现他们的模式是：构建几个无状态的组件用来渲染数据，然后在这些之上去构建一个有状态的组件同用户和服务器交互，数据通过props传递给无状态组件。</p>\n<ul>\n<li>setState:更新组件状态。</li>\n<li>setState会触发diff算法：判断state和页面结果的区别，是否需要更新。</li>\n</ul>\n<h3 id=\"状态-state-和属性-props-对比\"><a href=\"#状态-state-和属性-props-对比\" class=\"headerlink\" title=\"状态(state)和属性(props)对比\"></a>状态(state)和属性(props)对比</h3><ul>\n<li>状态和属性都会触发render更新，都是纯JS对象</li>\n<li>状态：是和自己相关的，既不受父组件也不受子组件影响</li>\n<li>属性：本身是不能自己去修改的，只能从父组件获取属性，父组件也能修改它的属性</li>\n<li>根本的区别：组件在运行时需要去修改维护的就是状态</li>\n</ul>"},{"title":"React-Router v3","date":"2017-07-17T08:02:36.000Z","comments":1,"layout":"post","_content":"\n# React-Router3\n\n\n\n### 路径语法\n\n路由路径是匹配一个（或一部分）URL 的 [一个字符串模式](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern)。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：\n\n- `:paramName` – 匹配一段位于 `/`、`?` 或 `#` 之后的 URL。 命中的部分将被作为一个[参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n- `()` – 在它内部的内容被认为是可选的\n- `*` – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 `splat` [参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n\n<!--more-->\n\n```react\n//匹配 /hello/michael 和 /hello/ryan\n<Route path=\"/hello/:name\">         \n  \n  \n//匹配 /hello, /hello/02 和 /hello/01\n<Route path=\"/hello(/:id)\">   \n\n\n//匹配 /files/hello.jpg和/files/path/to/hello.jpg\n<Route path=\"/files/*.*\">       \n```\n\n## Histories\n\n常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。\n\n- [`browserHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory) (推荐)\n- [`hashHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory)\n- [`createMemoryHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory)\n\n```react\n<Router history={browserHistory}>\n```\n\n### `browserHistory`\n\nBrowser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 [History](https://developer.mozilla.org/en-US/docs/Web/API/History) API 用于处理 URL，创建一个像`example.com/some/path`这样真实的 URL 。\n\n\n\n\n\n## 在组件外部使用导航\n\n虽然在组件内部可以使用 `this.context.router` 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。","source":"_posts/React-Router.md","raw":"---\ntitle: React-Router v3\ndate: 2017-07-20 23：47\ncomments: true\nlayout: post\ntags: [JavaScript,React]\ncategories: React\n---\n\n# React-Router3\n\n\n\n### 路径语法\n\n路由路径是匹配一个（或一部分）URL 的 [一个字符串模式](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern)。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：\n\n- `:paramName` – 匹配一段位于 `/`、`?` 或 `#` 之后的 URL。 命中的部分将被作为一个[参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n- `()` – 在它内部的内容被认为是可选的\n- `*` – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 `splat` [参数](https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params)\n\n<!--more-->\n\n```react\n//匹配 /hello/michael 和 /hello/ryan\n<Route path=\"/hello/:name\">         \n  \n  \n//匹配 /hello, /hello/02 和 /hello/01\n<Route path=\"/hello(/:id)\">   \n\n\n//匹配 /files/hello.jpg和/files/path/to/hello.jpg\n<Route path=\"/files/*.*\">       \n```\n\n## Histories\n\n常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。\n\n- [`browserHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory) (推荐)\n- [`hashHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory)\n- [`createMemoryHistory`](https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory)\n\n```react\n<Router history={browserHistory}>\n```\n\n### `browserHistory`\n\nBrowser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 [History](https://developer.mozilla.org/en-US/docs/Web/API/History) API 用于处理 URL，创建一个像`example.com/some/path`这样真实的 URL 。\n\n\n\n\n\n## 在组件外部使用导航\n\n虽然在组件内部可以使用 `this.context.router` 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。","slug":"React-Router","published":1,"updated":"2017-08-14T06:53:29.000Z","photos":[],"link":"","_id":"cj6krbq4h001yg3fypi5w3z0o","content":"<h1 id=\"React-Router3\"><a href=\"#React-Router3\" class=\"headerlink\" title=\"React-Router3\"></a>React-Router3</h1><h3 id=\"路径语法\"><a href=\"#路径语法\" class=\"headerlink\" title=\"路径语法\"></a>路径语法</h3><p>路由路径是匹配一个（或一部分）URL 的 <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern\" target=\"_blank\" rel=\"external\">一个字符串模式</a>。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：</p>\n<ul>\n<li><code>:paramName</code> – 匹配一段位于 <code>/</code>、<code>?</code> 或 <code>#</code> 之后的 URL。 命中的部分将被作为一个<a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"external\">参数</a></li>\n<li><code>()</code> – 在它内部的内容被认为是可选的</li>\n<li><code>*</code> – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 <code>splat</code> <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"external\">参数</a></li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//匹配 /hello/michael 和 /hello/ryan</div><div class=\"line\">&lt;Route path=&quot;/hello/:name&quot;&gt;         </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">//匹配 /hello, /hello/02 和 /hello/01</div><div class=\"line\">&lt;Route path=&quot;/hello(/:id)&quot;&gt;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//匹配 /files/hello.jpg和/files/path/to/hello.jpg</div><div class=\"line\">&lt;Route path=&quot;/files/*.*&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h2><p>常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p>\n<ul>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory\" target=\"_blank\" rel=\"external\"><code>browserHistory</code></a> (推荐)</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory\" target=\"_blank\" rel=\"external\"><code>hashHistory</code></a></li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory\" target=\"_blank\" rel=\"external\"><code>createMemoryHistory</code></a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a><code>browserHistory</code></h3><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\" target=\"_blank\" rel=\"external\">History</a> API 用于处理 URL，创建一个像<code>example.com/some/path</code>这样真实的 URL 。</p>\n<h2 id=\"在组件外部使用导航\"><a href=\"#在组件外部使用导航\" class=\"headerlink\" title=\"在组件外部使用导航\"></a>在组件外部使用导航</h2><p>虽然在组件内部可以使用 <code>this.context.router</code> 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"React-Router3\"><a href=\"#React-Router3\" class=\"headerlink\" title=\"React-Router3\"></a>React-Router3</h1><h3 id=\"路径语法\"><a href=\"#路径语法\" class=\"headerlink\" title=\"路径语法\"></a>路径语法</h3><p>路由路径是匹配一个（或一部分）URL 的 <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#routepattern\" target=\"_blank\" rel=\"external\">一个字符串模式</a>。大部分的路由路径都可以直接按照字面量理解，除了以下几个特殊的符号：</p>\n<ul>\n<li><code>:paramName</code> – 匹配一段位于 <code>/</code>、<code>?</code> 或 <code>#</code> 之后的 URL。 命中的部分将被作为一个<a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"external\">参数</a></li>\n<li><code>()</code> – 在它内部的内容被认为是可选的</li>\n<li><code>*</code> – 匹配任意字符（非贪婪的）直到命中下一个字符或者整个 URL 的末尾，并创建一个 <code>splat</code> <a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/docs/Glossary.md#params\" target=\"_blank\" rel=\"external\">参数</a></li>\n</ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//匹配 /hello/michael 和 /hello/ryan</div><div class=\"line\">&lt;Route path=&quot;/hello/:name&quot;&gt;         </div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">//匹配 /hello, /hello/02 和 /hello/01</div><div class=\"line\">&lt;Route path=&quot;/hello(/:id)&quot;&gt;   </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//匹配 /files/hello.jpg和/files/path/to/hello.jpg</div><div class=\"line\">&lt;Route path=&quot;/files/*.*&quot;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"Histories\"><a href=\"#Histories\" class=\"headerlink\" title=\"Histories\"></a>Histories</h2><p>常用的 history 有三种形式， 但是你也可以使用 React Router 实现自定义的 history。</p>\n<ul>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#browserHistory\" target=\"_blank\" rel=\"external\"><code>browserHistory</code></a> (推荐)</li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#hashHistory\" target=\"_blank\" rel=\"external\"><code>hashHistory</code></a></li>\n<li><a href=\"https://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html#creatememoryhistory\" target=\"_blank\" rel=\"external\"><code>createMemoryHistory</code></a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Router history=&#123;browserHistory&#125;&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"browserHistory\"><a href=\"#browserHistory\" class=\"headerlink\" title=\"browserHistory\"></a><code>browserHistory</code></h3><p>Browser history 是使用 React Router 的应用推荐的 history。它使用浏览器中的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History\" target=\"_blank\" rel=\"external\">History</a> API 用于处理 URL，创建一个像<code>example.com/some/path</code>这样真实的 URL 。</p>\n<h2 id=\"在组件外部使用导航\"><a href=\"#在组件外部使用导航\" class=\"headerlink\" title=\"在组件外部使用导航\"></a>在组件外部使用导航</h2><p>虽然在组件内部可以使用 <code>this.context.router</code> 来实现导航，但许多应用想要在组件外部使用导航。使用Router组件上被赋予的history可以在组件外部实现导航。</p>"},{"title":"Vue.js小记","date":"2017-04-28T07:54:00.000Z","comments":1,"layout":"post","_content":"\n#Vue小记\n\n## **v-bind**\n\n- 缩写： `：`\n- 修饰符\n  - `.prop` - 被用于绑定DOM属性\n  - `.camel`\n- 用法\n\n动态的绑定一个或多个特性，或一个组件`prop`到表达式\n\n```javascript\n<a v-bind:href=\"url\" href=\"#\"></a>\n```\n\n在这里`:href`是参数，通过`v-bind`指令将该元素的`href`属性与表达式的`url`绑定。\n\n<!--more-->\n\n## **v-if**\n\n```javascript\n<p v-if=\"seen\">Now you see me</p>\n```\n\n这个`v-if`指令将判断`seen`的真假值来移出/插入`<p>`元素。\n\n\n\n## **v-on**\n\n- 缩写：`@`\n\n```javascript\n<a v-on:click=\"doSomething\">\n```\n\n这个指令是用来监听DOM事件。\n\n### 事件修饰符\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n2.1.4新增\n<!-- 点击事件将只会触发一次 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n### 按键修饰符\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n记住keyCode各种值很难所以提供了别名\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n- `.enter`\n- `.tab`\n- `.delete`(捕获“删除”和“退格”按键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n**2.1.0新增**\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`(Mac上为(⌘)在windows上为(⊞))\n\n## v-for\n\n我们用 `v-for` 指令根据一组数组的选项列表进行渲染。 `v-for` 指令需要以\n\n `item in items` 形式的特殊语法， `items` 是源数据数组并且 `item` 是数组元素迭代的别名。\n\n```html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n```javascript\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'Foo' },\n      {message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n- Foo\n- Bar\n\n## v-model\n\n你可以用 `v-model` 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 `v-model` 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。\n\n具体看\n\n[官方文档]: https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip\t\"V-model\"\n\n","source":"_posts/Vue.js小记.md","raw":"---\ntitle: Vue.js小记\ndate: 2017-04-28 15:54\ncomments: true\nlayout: post\ntags: [JavaScript,Vue.js]\ncategories: Vue\n---\n\n#Vue小记\n\n## **v-bind**\n\n- 缩写： `：`\n- 修饰符\n  - `.prop` - 被用于绑定DOM属性\n  - `.camel`\n- 用法\n\n动态的绑定一个或多个特性，或一个组件`prop`到表达式\n\n```javascript\n<a v-bind:href=\"url\" href=\"#\"></a>\n```\n\n在这里`:href`是参数，通过`v-bind`指令将该元素的`href`属性与表达式的`url`绑定。\n\n<!--more-->\n\n## **v-if**\n\n```javascript\n<p v-if=\"seen\">Now you see me</p>\n```\n\n这个`v-if`指令将判断`seen`的真假值来移出/插入`<p>`元素。\n\n\n\n## **v-on**\n\n- 缩写：`@`\n\n```javascript\n<a v-on:click=\"doSomething\">\n```\n\n这个指令是用来监听DOM事件。\n\n### 事件修饰符\n\n- `.stop`\n- `.prevent`\n- `.capture`\n- `.self`\n- `.once`\n\n\n\n```html\n<!-- 阻止单击事件冒泡 -->\n<a v-on:click.stop=\"doThis\"></a>\n<!-- 提交事件不再重载页面 -->\n<form v-on:submit.prevent=\"onSubmit\"></form>\n<!-- 修饰符可以串联  -->\n<a v-on:click.stop.prevent=\"doThat\"></a>\n<!-- 只有修饰符 -->\n<form v-on:submit.prevent></form>\n<!-- 添加事件侦听器时使用事件捕获模式 -->\n<div v-on:click.capture=\"doThis\">...</div>\n<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->\n<div v-on:click.self=\"doThat\">...</div>\n\n2.1.4新增\n<!-- 点击事件将只会触发一次 -->\n<a v-on:click.once=\"doThis\"></a>\n```\n\n### 按键修饰符\n\n```html\n<!-- 只有在 keyCode 是 13 时调用 vm.submit() -->\n<input v-on:keyup.13=\"submit\">\n记住keyCode各种值很难所以提供了别名\n<!-- 同上 -->\n<input v-on:keyup.enter=\"submit\">\n<!-- 缩写语法 -->\n<input @keyup.enter=\"submit\">\n```\n\n- `.enter`\n- `.tab`\n- `.delete`(捕获“删除”和“退格”按键)\n- `.esc`\n- `.space`\n- `.up`\n- `.down`\n- `.left`\n- `.right`\n\n**2.1.0新增**\n\n- `.ctrl`\n- `.alt`\n- `.shift`\n- `.meta`(Mac上为(⌘)在windows上为(⊞))\n\n## v-for\n\n我们用 `v-for` 指令根据一组数组的选项列表进行渲染。 `v-for` 指令需要以\n\n `item in items` 形式的特殊语法， `items` 是源数据数组并且 `item` 是数组元素迭代的别名。\n\n```html\n<ul id=\"example-1\">\n  <li v-for=\"item in items\">\n    {{ item.message }}\n  </li>\n</ul>\n```\n\n```javascript\nvar example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'Foo' },\n      {message: 'Bar' }\n    ]\n  }\n})\n```\n\n结果：\n\n- Foo\n- Bar\n\n## v-model\n\n你可以用 `v-model` 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 `v-model` 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。\n\n具体看\n\n[官方文档]: https://cn.vuejs.org/v2/guide/forms.html#vmodel-ime-tip\t\"V-model\"\n\n","slug":"Vue.js小记","published":1,"updated":"2017-05-26T08:37:32.000Z","photos":[],"link":"","_id":"cj6krbq4l0023g3fy0jie2n55","content":"<p>#Vue小记</p>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a><strong>v-bind</strong></h2><ul>\n<li>缩写： <code>：</code></li>\n<li>修饰符<ul>\n<li><code>.prop</code> - 被用于绑定DOM属性</li>\n<li><code>.camel</code></li>\n</ul>\n</li>\n<li>用法</li>\n</ul>\n<p>动态的绑定一个或多个特性，或一个组件<code>prop</code>到表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span> href=<span class=\"string\">\"#\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>在这里<code>:href</code>是参数，通过<code>v-bind</code>指令将该元素的<code>href</code>属性与表达式的<code>url</code>绑定。</p>\n<a id=\"more\"></a>\n<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a><strong>v-if</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"seen\"</span>&gt;Now you see me&lt;<span class=\"regexp\">/p&gt;</span></div></pre></td></tr></table></figure>\n<p>这个<code>v-if</code>指令将判断<code>seen</code>的真假值来移出/插入<code>&lt;p&gt;</code>元素。</p>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a><strong>v-on</strong></h2><ul>\n<li>缩写：<code>@</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-on:click=<span class=\"string\">\"doSomething\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>这个指令是用来监听DOM事件。</p>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">2.1.4新增</div><div class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\">记住keyCode各种值很难所以提供了别名</div><div class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code>(捕获“删除”和“退格”按键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p><strong>2.1.0新增</strong></p>\n<ul>\n<li><code>.ctrl</code></li>\n<li><code>.alt</code></li>\n<li><code>.shift</code></li>\n<li><code>.meta</code>(Mac上为(⌘)在windows上为(⊞))</li>\n</ul>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以</p>\n<p> <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<ul>\n<li>Foo</li>\n<li>Bar</li>\n</ul>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>你可以用 <code>v-model</code> 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p>\n<p>具体看</p>\n","site":{"data":{}},"excerpt":"<p>#Vue小记</p>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a><strong>v-bind</strong></h2><ul>\n<li>缩写： <code>：</code></li>\n<li>修饰符<ul>\n<li><code>.prop</code> - 被用于绑定DOM属性</li>\n<li><code>.camel</code></li>\n</ul>\n</li>\n<li>用法</li>\n</ul>\n<p>动态的绑定一个或多个特性，或一个组件<code>prop</code>到表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-bind:href=<span class=\"string\">\"url\"</span> href=<span class=\"string\">\"#\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>在这里<code>:href</code>是参数，通过<code>v-bind</code>指令将该元素的<code>href</code>属性与表达式的<code>url</code>绑定。</p>","more":"<h2 id=\"v-if\"><a href=\"#v-if\" class=\"headerlink\" title=\"v-if\"></a><strong>v-if</strong></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p v-<span class=\"keyword\">if</span>=<span class=\"string\">\"seen\"</span>&gt;Now you see me&lt;<span class=\"regexp\">/p&gt;</span></div></pre></td></tr></table></figure>\n<p>这个<code>v-if</code>指令将判断<code>seen</code>的真假值来移出/插入<code>&lt;p&gt;</code>元素。</p>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a><strong>v-on</strong></h2><ul>\n<li>缩写：<code>@</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a v-on:click=<span class=\"string\">\"doSomething\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>这个指令是用来监听DOM事件。</p>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><ul>\n<li><code>.stop</code></li>\n<li><code>.prevent</code></li>\n<li><code>.capture</code></li>\n<li><code>.self</code></li>\n<li><code>.once</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>=<span class=\"string\">\"onSubmit\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 修饰符可以串联  --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.stop.prevent</span>=<span class=\"string\">\"doThat\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只有修饰符 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">v-on:submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.capture</span>=<span class=\"string\">\"doThis\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click.self</span>=<span class=\"string\">\"doThat\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">2.1.4新增</div><div class=\"line\"><span class=\"comment\">&lt;!-- 点击事件将只会触发一次 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click.once</span>=<span class=\"string\">\"doThis\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"按键修饰符\"><a href=\"#按键修饰符\" class=\"headerlink\" title=\"按键修饰符\"></a>按键修饰符</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.13</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\">记住keyCode各种值很难所以提供了别名</div><div class=\"line\"><span class=\"comment\">&lt;!-- 同上 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 缩写语法 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"submit\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><code>.enter</code></li>\n<li><code>.tab</code></li>\n<li><code>.delete</code>(捕获“删除”和“退格”按键)</li>\n<li><code>.esc</code></li>\n<li><code>.space</code></li>\n<li><code>.up</code></li>\n<li><code>.down</code></li>\n<li><code>.left</code></li>\n<li><code>.right</code></li>\n</ul>\n<p><strong>2.1.0新增</strong></p>\n<ul>\n<li><code>.ctrl</code></li>\n<li><code>.alt</code></li>\n<li><code>.shift</code></li>\n<li><code>.meta</code>(Mac上为(⌘)在windows上为(⊞))</li>\n</ul>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p>我们用 <code>v-for</code> 指令根据一组数组的选项列表进行渲染。 <code>v-for</code> 指令需要以</p>\n<p> <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example-1\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; item.message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> example1 = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#example-1'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">items</span>: [</div><div class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Foo'</span> &#125;,</div><div class=\"line\">      &#123;<span class=\"attr\">message</span>: <span class=\"string\">'Bar'</span> &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<ul>\n<li>Foo</li>\n<li>Bar</li>\n</ul>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><p>你可以用 <code>v-model</code> 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p>\n<p>具体看</p>"},{"title":"Mongodb之旅(一)","date":"2017-07-27T13:18:35.000Z","comments":1,"layout":"post","_content":"\n# Mongodb之旅(一)\n\n## 插入,insertOne/Many\n\n### insertOne( )\n\n```\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n)\n```\n\n<!--more-->\n\n### insertMany([ ])\n\n```\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n   { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n])\n```\n\n\n\n## 查找,find\n\n### find( )\n\n```\ndb.inventory.find( {} )\n```\n\n\n\n## 更新,updateOne/Many\n\n### $set\n\n```mongodb\ndb.memberplan.update(\n\n{_id:\"xxx\"},\n\n{$set:\n\n{tags:[\"coats\",\"outerwear\"]}\n\n})\n```\n\n###  $currentDate,当前时间\n\n```\ndb.inventory.updateOne(\n   { item: \"paper\" },\n   {\n\t $set: { \"size.uom\": \"cm\", status: \"P\" },\n\t $currentDate: { lastModified: true }\n   }\n)\n\n```\n\n### updateMany\n\n```\ndb.inventory.updateMany(\n   { \"qty\": { $lt: 50 } },\n   {\n     $set: { \"size.uom\": \"in\", status: \"P\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```\n\n\n\n","source":"_posts/mongodb.md","raw":"---\ntitle: Mongodb之旅(一)\ndate: 2017-07-27 21：19\ncomments: true\nlayout: post\ntags: [Mongodb,数据库]\ncategories: 数据库,Mongodb\n---\n\n# Mongodb之旅(一)\n\n## 插入,insertOne/Many\n\n### insertOne( )\n\n```\ndb.inventory.insertOne(\n   { item: \"canvas\", qty: 100, tags: [\"cotton\"], size: { h: 28, w: 35.5, uom: \"cm\" } }\n)\n```\n\n<!--more-->\n\n### insertMany([ ])\n\n```\ndb.inventory.insertMany([\n   { item: \"journal\", qty: 25, tags: [\"blank\", \"red\"], size: { h: 14, w: 21, uom: \"cm\" } },\n   { item: \"mat\", qty: 85, tags: [\"gray\"], size: { h: 27.9, w: 35.5, uom: \"cm\" } },\n   { item: \"mousepad\", qty: 25, tags: [\"gel\", \"blue\"], size: { h: 19, w: 22.85, uom: \"cm\" } }\n])\n```\n\n\n\n## 查找,find\n\n### find( )\n\n```\ndb.inventory.find( {} )\n```\n\n\n\n## 更新,updateOne/Many\n\n### $set\n\n```mongodb\ndb.memberplan.update(\n\n{_id:\"xxx\"},\n\n{$set:\n\n{tags:[\"coats\",\"outerwear\"]}\n\n})\n```\n\n###  $currentDate,当前时间\n\n```\ndb.inventory.updateOne(\n   { item: \"paper\" },\n   {\n\t $set: { \"size.uom\": \"cm\", status: \"P\" },\n\t $currentDate: { lastModified: true }\n   }\n)\n\n```\n\n### updateMany\n\n```\ndb.inventory.updateMany(\n   { \"qty\": { $lt: 50 } },\n   {\n     $set: { \"size.uom\": \"in\", status: \"P\" },\n     $currentDate: { lastModified: true }\n   }\n)\n```\n\n\n\n","slug":"mongodb","published":1,"updated":"2017-07-28T12:37:04.000Z","photos":[],"link":"","_id":"cj6krbq4n0026g3fyxg1dwsjq","content":"<h1 id=\"Mongodb之旅-一\"><a href=\"#Mongodb之旅-一\" class=\"headerlink\" title=\"Mongodb之旅(一)\"></a>Mongodb之旅(一)</h1><h2 id=\"插入-insertOne-Many\"><a href=\"#插入-insertOne-Many\" class=\"headerlink\" title=\"插入,insertOne/Many\"></a>插入,insertOne/Many</h2><h3 id=\"insertOne\"><a href=\"#insertOne\" class=\"headerlink\" title=\"insertOne( )\"></a>insertOne( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.insertOne(</div><div class=\"line\">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"insertMany\"><a href=\"#insertMany\" class=\"headerlink\" title=\"insertMany([ ])\"></a>insertMany([ ])</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.insertMany([</div><div class=\"line\">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</div><div class=\"line\">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</div><div class=\"line\">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<h2 id=\"查找-find\"><a href=\"#查找-find\" class=\"headerlink\" title=\"查找,find\"></a>查找,find</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.find( &#123;&#125; )</div></pre></td></tr></table></figure>\n<h2 id=\"更新-updateOne-Many\"><a href=\"#更新-updateOne-Many\" class=\"headerlink\" title=\"更新,updateOne/Many\"></a>更新,updateOne/Many</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.memberplan.update(</div><div class=\"line\"></div><div class=\"line\">&#123;_id:&quot;xxx&quot;&#125;,</div><div class=\"line\"></div><div class=\"line\">&#123;$set:</div><div class=\"line\"></div><div class=\"line\">&#123;tags:[&quot;coats&quot;,&quot;outerwear&quot;]&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"currentDate-当前时间\"><a href=\"#currentDate-当前时间\" class=\"headerlink\" title=\"$currentDate,当前时间\"></a>$currentDate,当前时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.updateOne(</div><div class=\"line\">   &#123; item: &quot;paper&quot; &#125;,</div><div class=\"line\">   &#123;</div><div class=\"line\">\t $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;,</div><div class=\"line\">\t $currentDate: &#123; lastModified: true &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.updateMany(</div><div class=\"line\">   &#123; &quot;qty&quot;: &#123; $lt: 50 &#125; &#125;,</div><div class=\"line\">   &#123;</div><div class=\"line\">     $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;,</div><div class=\"line\">     $currentDate: &#123; lastModified: true &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mongodb之旅-一\"><a href=\"#Mongodb之旅-一\" class=\"headerlink\" title=\"Mongodb之旅(一)\"></a>Mongodb之旅(一)</h1><h2 id=\"插入-insertOne-Many\"><a href=\"#插入-insertOne-Many\" class=\"headerlink\" title=\"插入,insertOne/Many\"></a>插入,insertOne/Many</h2><h3 id=\"insertOne\"><a href=\"#insertOne\" class=\"headerlink\" title=\"insertOne( )\"></a>insertOne( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.insertOne(</div><div class=\"line\">   &#123; item: &quot;canvas&quot;, qty: 100, tags: [&quot;cotton&quot;], size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125; &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>","more":"<h3 id=\"insertMany\"><a href=\"#insertMany\" class=\"headerlink\" title=\"insertMany([ ])\"></a>insertMany([ ])</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.insertMany([</div><div class=\"line\">   &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125; &#125;,</div><div class=\"line\">   &#123; item: &quot;mat&quot;, qty: 85, tags: [&quot;gray&quot;], size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125; &#125;,</div><div class=\"line\">   &#123; item: &quot;mousepad&quot;, qty: 25, tags: [&quot;gel&quot;, &quot;blue&quot;], size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125; &#125;</div><div class=\"line\">])</div></pre></td></tr></table></figure>\n<h2 id=\"查找-find\"><a href=\"#查找-find\" class=\"headerlink\" title=\"查找,find\"></a>查找,find</h2><h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.find( &#123;&#125; )</div></pre></td></tr></table></figure>\n<h2 id=\"更新-updateOne-Many\"><a href=\"#更新-updateOne-Many\" class=\"headerlink\" title=\"更新,updateOne/Many\"></a>更新,updateOne/Many</h2><h3 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"$set\"></a>$set</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.memberplan.update(</div><div class=\"line\"></div><div class=\"line\">&#123;_id:&quot;xxx&quot;&#125;,</div><div class=\"line\"></div><div class=\"line\">&#123;$set:</div><div class=\"line\"></div><div class=\"line\">&#123;tags:[&quot;coats&quot;,&quot;outerwear&quot;]&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"currentDate-当前时间\"><a href=\"#currentDate-当前时间\" class=\"headerlink\" title=\"$currentDate,当前时间\"></a>$currentDate,当前时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.updateOne(</div><div class=\"line\">   &#123; item: &quot;paper&quot; &#125;,</div><div class=\"line\">   &#123;</div><div class=\"line\">\t $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;,</div><div class=\"line\">\t $currentDate: &#123; lastModified: true &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h3 id=\"updateMany\"><a href=\"#updateMany\" class=\"headerlink\" title=\"updateMany\"></a>updateMany</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.inventory.updateMany(</div><div class=\"line\">   &#123; &quot;qty&quot;: &#123; $lt: 50 &#125; &#125;,</div><div class=\"line\">   &#123;</div><div class=\"line\">     $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;,</div><div class=\"line\">     $currentDate: &#123; lastModified: true &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>"},{"title":"Git基本操作","date":"2017-07-25T12:47:00.000Z","comments":1,"layout":"post","_content":"\n# Git\n\n# Git add\n\n`git add -A` 和 `git add .` 和 `git add -u`\n\n- git add   **.** ：他会监控工作区的状态树，使用它会把工作时的**所有变化提交**到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\n<!--more-->\n\n- git add -u ：他仅监控**已经被add的文件**（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写)\n- git add -A ：是上面两个功能的合集（git add --all的缩写）\n\n自我理解:\n\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n\n# commit过程\n\n- git status  检查工作区是否干净\n- git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。\n- git commit -am \"xxxxxxx\"\n- git branch \n- git push origin xxxx\n\n\n\n\n# 删除分支\n\n- git branch -D xx **删除本地分支**\n- git push origin :br  (origin 后面有空格) **删除远程分支**\n\n\n\n# 解决冲突\n\n- git fetch origin cms:new  创建新本地分支new\n- git branch   \n- git merge new  合并\n- git branch -D new 删除本地分支\n\n# diff\n\n查看自上次提交以来，本地代码改动的具体情况\n\n# Git log\n\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 `Git log` 命令查看\n\n# Git show\n\ngit show <commit-hash-id>查看某次commit的修改内容\n\n# Git reset --hard <commit>\n\n现在让我们来重置回那次提交的状态：\n\n# Git rebase\n\n对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。\n\n如果你想在rebase的过程中对一部分提交进行修改，你可以在'git rebase'命令中加入'-i'或'--interactive'参数去调用交互模式。\n\n$ git rebase -i origin/master\n\n这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。\n\n若想查看一下将被rebase的提交，可以用如下的log命令：\n\n$ git log github/master..\n\n\n\n# git branch -a\n\n查看远程分支\n\nmaster\nremotes/origin/HEAD -> origin/master\nremotes/origin/Release\nremotes/origin/master\n\n# git checkout -b myRelease origin/Release\n\n切换到 origin/Release分支，并在本地新建分支 myRelease","source":"_posts/git.md","raw":"---\ntitle: Git基本操作\ndate: 2017-07-25 20:47\ncomments: true\nlayout: post\ntags: [git]\ncategories: git\n---\n\n# Git\n\n# Git add\n\n`git add -A` 和 `git add .` 和 `git add -u`\n\n- git add   **.** ：他会监控工作区的状态树，使用它会把工作时的**所有变化提交**到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。\n\n<!--more-->\n\n- git add -u ：他仅监控**已经被add的文件**（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写)\n- git add -A ：是上面两个功能的合集（git add --all的缩写）\n\n自我理解:\n\n- git add -A  提交所有变化\n- git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)\n- git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件\n\n# commit过程\n\n- git status  检查工作区是否干净\n- git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。\n- git commit -am \"xxxxxxx\"\n- git branch \n- git push origin xxxx\n\n\n\n\n# 删除分支\n\n- git branch -D xx **删除本地分支**\n- git push origin :br  (origin 后面有空格) **删除远程分支**\n\n\n\n# 解决冲突\n\n- git fetch origin cms:new  创建新本地分支new\n- git branch   \n- git merge new  合并\n- git branch -D new 删除本地分支\n\n# diff\n\n查看自上次提交以来，本地代码改动的具体情况\n\n# Git log\n\n在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 `Git log` 命令查看\n\n# Git show\n\ngit show <commit-hash-id>查看某次commit的修改内容\n\n# Git reset --hard <commit>\n\n现在让我们来重置回那次提交的状态：\n\n# Git rebase\n\n对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。\n\n如果你想在rebase的过程中对一部分提交进行修改，你可以在'git rebase'命令中加入'-i'或'--interactive'参数去调用交互模式。\n\n$ git rebase -i origin/master\n\n这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。\n\n若想查看一下将被rebase的提交，可以用如下的log命令：\n\n$ git log github/master..\n\n\n\n# git branch -a\n\n查看远程分支\n\nmaster\nremotes/origin/HEAD -> origin/master\nremotes/origin/Release\nremotes/origin/master\n\n# git checkout -b myRelease origin/Release\n\n切换到 origin/Release分支，并在本地新建分支 myRelease","slug":"git","published":1,"updated":"2017-08-10T11:04:43.000Z","photos":[],"link":"","_id":"cj6krbq4p002bg3fy5bhoj035","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h1 id=\"Git-add\"><a href=\"#Git-add\" class=\"headerlink\" title=\"Git add\"></a>Git add</h1><p><code>git add -A</code> 和 <code>git add .</code> 和 <code>git add -u</code></p>\n<ul>\n<li>git add   <strong>.</strong> ：他会监控工作区的状态树，使用它会把工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>git add -u ：他仅监控<strong>已经被add的文件</strong>（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写)</li>\n<li>git add -A ：是上面两个功能的合集（git add –all的缩写）</li>\n</ul>\n<p>自我理解:</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n<h1 id=\"commit过程\"><a href=\"#commit过程\" class=\"headerlink\" title=\"commit过程\"></a>commit过程</h1><ul>\n<li>git status  检查工作区是否干净</li>\n<li>git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。</li>\n<li>git commit -am “xxxxxxx”</li>\n<li>git branch </li>\n<li>git push origin xxxx</li>\n</ul>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><ul>\n<li>git branch -D xx <strong>删除本地分支</strong></li>\n<li>git push origin :br  (origin 后面有空格) <strong>删除远程分支</strong></li>\n</ul>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><ul>\n<li>git fetch origin cms:new  创建新本地分支new</li>\n<li>git branch   </li>\n<li>git merge new  合并</li>\n<li>git branch -D new 删除本地分支</li>\n</ul>\n<h1 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h1><p>查看自上次提交以来，本地代码改动的具体情况</p>\n<h1 id=\"Git-log\"><a href=\"#Git-log\" class=\"headerlink\" title=\"Git log\"></a>Git log</h1><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 <code>Git log</code> 命令查看</p>\n<h1 id=\"Git-show\"><a href=\"#Git-show\" class=\"headerlink\" title=\"Git show\"></a>Git show</h1><p>git show <commit-hash-id>查看某次commit的修改内容</commit-hash-id></p>\n<h1 id=\"Git-reset-–hard\"><a href=\"#Git-reset-–hard\" class=\"headerlink\" title=\"Git reset –hard \"></a>Git reset –hard <commit></commit></h1><p>现在让我们来重置回那次提交的状态：</p>\n<h1 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h1><p>对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。</p>\n<p>如果你想在rebase的过程中对一部分提交进行修改，你可以在’git rebase’命令中加入’-i’或’–interactive’参数去调用交互模式。</p>\n<p>$ git rebase -i origin/master</p>\n<p>这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。</p>\n<p>若想查看一下将被rebase的提交，可以用如下的log命令：</p>\n<p>$ git log github/master..</p>\n<h1 id=\"git-branch-a\"><a href=\"#git-branch-a\" class=\"headerlink\" title=\"git branch -a\"></a>git branch -a</h1><p>查看远程分支</p>\n<p>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/Release<br>remotes/origin/master</p>\n<h1 id=\"git-checkout-b-myRelease-origin-Release\"><a href=\"#git-checkout-b-myRelease-origin-Release\" class=\"headerlink\" title=\"git checkout -b myRelease origin/Release\"></a>git checkout -b myRelease origin/Release</h1><p>切换到 origin/Release分支，并在本地新建分支 myRelease</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><h1 id=\"Git-add\"><a href=\"#Git-add\" class=\"headerlink\" title=\"Git add\"></a>Git add</h1><p><code>git add -A</code> 和 <code>git add .</code> 和 <code>git add -u</code></p>\n<ul>\n<li>git add   <strong>.</strong> ：他会监控工作区的状态树，使用它会把工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</li>\n</ul>","more":"<ul>\n<li>git add -u ：他仅监控<strong>已经被add的文件</strong>（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写)</li>\n<li>git add -A ：是上面两个功能的合集（git add –all的缩写）</li>\n</ul>\n<p>自我理解:</p>\n<ul>\n<li>git add -A  提交所有变化</li>\n<li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li>\n<li>git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li>\n</ul>\n<h1 id=\"commit过程\"><a href=\"#commit过程\" class=\"headerlink\" title=\"commit过程\"></a>commit过程</h1><ul>\n<li>git status  检查工作区是否干净</li>\n<li>git add 命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。</li>\n<li>git commit -am “xxxxxxx”</li>\n<li>git branch </li>\n<li>git push origin xxxx</li>\n</ul>\n<h1 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h1><ul>\n<li>git branch -D xx <strong>删除本地分支</strong></li>\n<li>git push origin :br  (origin 后面有空格) <strong>删除远程分支</strong></li>\n</ul>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><ul>\n<li>git fetch origin cms:new  创建新本地分支new</li>\n<li>git branch   </li>\n<li>git merge new  合并</li>\n<li>git branch -D new 删除本地分支</li>\n</ul>\n<h1 id=\"diff\"><a href=\"#diff\" class=\"headerlink\" title=\"diff\"></a>diff</h1><p>查看自上次提交以来，本地代码改动的具体情况</p>\n<h1 id=\"Git-log\"><a href=\"#Git-log\" class=\"headerlink\" title=\"Git log\"></a>Git log</h1><p>在提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，可以使用 <code>Git log</code> 命令查看</p>\n<h1 id=\"Git-show\"><a href=\"#Git-show\" class=\"headerlink\" title=\"Git show\"></a>Git show</h1><p>git show <commit-hash-id>查看某次commit的修改内容</commit-hash-id></p>\n<h1 id=\"Git-reset-–hard\"><a href=\"#Git-reset-–hard\" class=\"headerlink\" title=\"Git reset –hard \"></a>Git reset –hard <commit></commit></h1><p>现在让我们来重置回那次提交的状态：</p>\n<h1 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h1><p>对于git rebase, 你亦可以选择进行交互式的rebase。这种方法通常用于在向别处推送提交之前对它们进行重写。交互式rebase提供了一个简单易用的途径让你在和别人 分享提交之前对你的提交进行分割、合并或者重排序。在把从其他开发者处拉取的提交应用到本地时，你也可以使用交互式rebase对它们进行清理。</p>\n<p>如果你想在rebase的过程中对一部分提交进行修改，你可以在’git rebase’命令中加入’-i’或’–interactive’参数去调用交互模式。</p>\n<p>$ git rebase -i origin/master</p>\n<p>这个命令会执行交互式rebase操作，操作对象是那些自最后一次从origin仓库拉取或者向origin推送之后的所有提交。</p>\n<p>若想查看一下将被rebase的提交，可以用如下的log命令：</p>\n<p>$ git log github/master..</p>\n<h1 id=\"git-branch-a\"><a href=\"#git-branch-a\" class=\"headerlink\" title=\"git branch -a\"></a>git branch -a</h1><p>查看远程分支</p>\n<p>master<br>remotes/origin/HEAD -&gt; origin/master<br>remotes/origin/Release<br>remotes/origin/master</p>\n<h1 id=\"git-checkout-b-myRelease-origin-Release\"><a href=\"#git-checkout-b-myRelease-origin-Release\" class=\"headerlink\" title=\"git checkout -b myRelease origin/Release\"></a>git checkout -b myRelease origin/Release</h1><p>切换到 origin/Release分支，并在本地新建分支 myRelease</p>"},{"title":"React-Redux、Redux","date":"2017-07-31T01:18:26.000Z","comments":1,"layout":"post","_content":"\nreact无法让两个组件互相交流，使用对方数据。\n\n# Redux\n\n- 需要回调通知state（等同于回调参数）->action\n- 需要根据回调处理（等同于父级方法） ->reducer\n- 需要state(等同于总状态) ->store\n\n现在您只需要记住 `reducer` 是一个函数，负责更新并返回一个新的`state`\n\n而 `initialState` 主要用于前后端同构的数据同步\n\n<!--more-->\n\n## Action\n\n- 是把数据从应用传到store的有效载荷。\n- 是store数据的唯一来源\n- 描述发生了什么的普通对象\n- 也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。\n\n## Store\n\n- Redux应用中只有一个单一的store\n- 维持应用的state\n- 提供 getState() 获取state\n- 提供dispatch() 更新state\n- 通过subscribe(listener) 注册监听器\n- 通过subscribe(listener) 返回的函数注销监听器.\n- 会把2个参数传入reducer：当前的state树和action。\n\n## Reducer\n\n## Reducer\n\nreducer就是实现(state,action) -> newState的纯函数. 也就是真正处理state的地方.\n\nRedux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.\n\n- **永远不要**在 reducer 里做这些操作：\n  - 修改传入参数；\n  - 执行有副作用的操作，如 API 请求和路由跳转；\n  - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n- 指明根据action更新state。\n\n\n\n通俗点讲，就是 `reducer` 返回啥，`state` 就被替换成啥\n\n- view(React)\n- store(state)\n- action\n- reducer\n\n\n- view(React) = 家具的摆放在视觉的效果上\n- store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)\n- action = 小明分配任务(谁应该干什么)\n- reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)\n\n所以这个过程应该是这样的：\n\n**view ---> action ---> reducer ---> store(state) ---> view**\n\n\n\n# React-Redux\n\n1. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n\n2. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n\n3. mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。\n\n   做好以上流程Redux和React就可以工作了。简单地说就是：\n\n   ​\n\n   1.顶层分发状态，让React组件被动地渲染。\n\n   ​\n\n   2.监听事件，事件有权利回到所有状态顶层影响状态。\n\n# Redux 与传统后端 MVC 的对照\n\n| Redux                         | 传统后端 MVC                           |\n| ----------------------------- | ---------------------------------- |\n| `store`                       | 数据库实例                              |\n| `state`                       | 数据库中存储的数据                          |\n| `dispatch(action)`            | 用户发起请求                             |\n| `action: { type, payload }`   | `type` 表示请求的 URL，`payload` 表示请求的数据 |\n| `reducer`                     | 路由 + 控制器（handler）                  |\n| `reducer` 中的 `switch-case` 分支 | 路由，根据 `action.type` 路由到对应的控制器      |\n| `reducer` 内部对 `state` 的处理     | 控制器对数据库进行增删改操作                     |\n| `reducer` 返回 `nextState`      | 将修改后的记录写回数据库                       |\n\n\n\n# 总结\n\n## redux 三个基本原则\n\n1. 整个应用只有唯一一个 Store 实例\n2. State 只能通过触发 Action 来更改\n3. State 的更改 必须写成纯函数(Reducer)，(oldState, action) => newState，也就是每次更改总是返回一个新的 State\n\n## redux 两个显著的特点\n\n1. 可预测性（Reducer 是纯函数）。\n2. 扩展性强（middleware）。\n\n\n## reducer 可以根据场景分为以下几种:\n\n- root reducer :根reducer ,作为createStore的第一个参数\n- slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.\n- higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.\n- case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.\n\n## reducer 的最佳实践主要分为以下几个部分\n\n- 抽离工具函数,以便复用.\n- 抽离功能函数(case function),精简reducer声明部分的代码\n- 根据数据类别拆分,维护多个独立的slice reducer.\n- 合并slice reducer.\n- 通过crossReducer在多个slice reducer中共享数据.\n- 减少reducer的模板代码.","source":"_posts/redux.md","raw":"---\ntitle: React-Redux、Redux\ndate: 2017-07-31 09:18:26\ncomments: true\nlayout: post\ntags: [JavaScript,React]\ncategories: React\n---\n\nreact无法让两个组件互相交流，使用对方数据。\n\n# Redux\n\n- 需要回调通知state（等同于回调参数）->action\n- 需要根据回调处理（等同于父级方法） ->reducer\n- 需要state(等同于总状态) ->store\n\n现在您只需要记住 `reducer` 是一个函数，负责更新并返回一个新的`state`\n\n而 `initialState` 主要用于前后端同构的数据同步\n\n<!--more-->\n\n## Action\n\n- 是把数据从应用传到store的有效载荷。\n- 是store数据的唯一来源\n- 描述发生了什么的普通对象\n- 也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。\n\n## Store\n\n- Redux应用中只有一个单一的store\n- 维持应用的state\n- 提供 getState() 获取state\n- 提供dispatch() 更新state\n- 通过subscribe(listener) 注册监听器\n- 通过subscribe(listener) 返回的函数注销监听器.\n- 会把2个参数传入reducer：当前的state树和action。\n\n## Reducer\n\n## Reducer\n\nreducer就是实现(state,action) -> newState的纯函数. 也就是真正处理state的地方.\n\nRedux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.\n\n- **永远不要**在 reducer 里做这些操作：\n  - 修改传入参数；\n  - 执行有副作用的操作，如 API 请求和路由跳转；\n  - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n- 指明根据action更新state。\n\n\n\n通俗点讲，就是 `reducer` 返回啥，`state` 就被替换成啥\n\n- view(React)\n- store(state)\n- action\n- reducer\n\n\n- view(React) = 家具的摆放在视觉的效果上\n- store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)\n- action = 小明分配任务(谁应该干什么)\n- reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)\n\n所以这个过程应该是这样的：\n\n**view ---> action ---> reducer ---> store(state) ---> view**\n\n\n\n# React-Redux\n\n1. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。\n\n2. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。\n\n3. mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。\n\n   做好以上流程Redux和React就可以工作了。简单地说就是：\n\n   ​\n\n   1.顶层分发状态，让React组件被动地渲染。\n\n   ​\n\n   2.监听事件，事件有权利回到所有状态顶层影响状态。\n\n# Redux 与传统后端 MVC 的对照\n\n| Redux                         | 传统后端 MVC                           |\n| ----------------------------- | ---------------------------------- |\n| `store`                       | 数据库实例                              |\n| `state`                       | 数据库中存储的数据                          |\n| `dispatch(action)`            | 用户发起请求                             |\n| `action: { type, payload }`   | `type` 表示请求的 URL，`payload` 表示请求的数据 |\n| `reducer`                     | 路由 + 控制器（handler）                  |\n| `reducer` 中的 `switch-case` 分支 | 路由，根据 `action.type` 路由到对应的控制器      |\n| `reducer` 内部对 `state` 的处理     | 控制器对数据库进行增删改操作                     |\n| `reducer` 返回 `nextState`      | 将修改后的记录写回数据库                       |\n\n\n\n# 总结\n\n## redux 三个基本原则\n\n1. 整个应用只有唯一一个 Store 实例\n2. State 只能通过触发 Action 来更改\n3. State 的更改 必须写成纯函数(Reducer)，(oldState, action) => newState，也就是每次更改总是返回一个新的 State\n\n## redux 两个显著的特点\n\n1. 可预测性（Reducer 是纯函数）。\n2. 扩展性强（middleware）。\n\n\n## reducer 可以根据场景分为以下几种:\n\n- root reducer :根reducer ,作为createStore的第一个参数\n- slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.\n- higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.\n- case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.\n\n## reducer 的最佳实践主要分为以下几个部分\n\n- 抽离工具函数,以便复用.\n- 抽离功能函数(case function),精简reducer声明部分的代码\n- 根据数据类别拆分,维护多个独立的slice reducer.\n- 合并slice reducer.\n- 通过crossReducer在多个slice reducer中共享数据.\n- 减少reducer的模板代码.","slug":"redux","published":1,"updated":"2017-07-31T01:23:38.000Z","photos":[],"link":"","_id":"cj6krbq4r002dg3fyxnbgi613","content":"<p>react无法让两个组件互相交流，使用对方数据。</p>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><ul>\n<li>需要回调通知state（等同于回调参数）-&gt;action</li>\n<li>需要根据回调处理（等同于父级方法） -&gt;reducer</li>\n<li>需要state(等同于总状态) -&gt;store</li>\n</ul>\n<p>现在您只需要记住 <code>reducer</code> 是一个函数，负责更新并返回一个新的<code>state</code></p>\n<p>而 <code>initialState</code> 主要用于前后端同构的数据同步</p>\n<a id=\"more\"></a>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>是把数据从应用传到store的有效载荷。</li>\n<li>是store数据的唯一来源</li>\n<li>描述发生了什么的普通对象</li>\n<li>也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。</li>\n</ul>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><ul>\n<li>Redux应用中只有一个单一的store</li>\n<li>维持应用的state</li>\n<li>提供 getState() 获取state</li>\n<li>提供dispatch() 更新state</li>\n<li>通过subscribe(listener) 注册监听器</li>\n<li>通过subscribe(listener) 返回的函数注销监听器.</li>\n<li>会把2个参数传入reducer：当前的state树和action。</li>\n</ul>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><h2 id=\"Reducer-1\"><a href=\"#Reducer-1\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><p>reducer就是实现(state,action) -&gt; newState的纯函数. 也就是真正处理state的地方.</p>\n<p>Redux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.</p>\n<ul>\n<li><strong>永远不要</strong>在 reducer 里做这些操作：<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n</li>\n<li>指明根据action更新state。</li>\n</ul>\n<p>通俗点讲，就是 <code>reducer</code> 返回啥，<code>state</code> 就被替换成啥</p>\n<ul>\n<li>view(React)</li>\n<li>store(state)</li>\n<li>action</li>\n<li>reducer</li>\n</ul>\n<ul>\n<li>view(React) = 家具的摆放在视觉的效果上</li>\n<li>store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)</li>\n<li>action = 小明分配任务(谁应该干什么)</li>\n<li>reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)</li>\n</ul>\n<p>所以这个过程应该是这样的：</p>\n<p><strong>view —&gt; action —&gt; reducer —&gt; store(state) —&gt; view</strong></p>\n<h1 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h1><ol>\n<li><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。</p>\n</li>\n<li><p>connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</p>\n</li>\n<li><p>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。</p>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：</p>\n<p>​</p>\n<p>1.顶层分发状态，让React组件被动地渲染。</p>\n<p>​</p>\n<p>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>\n</li>\n</ol>\n<h1 id=\"Redux-与传统后端-MVC-的对照\"><a href=\"#Redux-与传统后端-MVC-的对照\" class=\"headerlink\" title=\"Redux 与传统后端 MVC 的对照\"></a>Redux 与传统后端 MVC 的对照</h1><table>\n<thead>\n<tr>\n<th>Redux</th>\n<th>传统后端 MVC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>store</code></td>\n<td>数据库实例</td>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>数据库中存储的数据</td>\n</tr>\n<tr>\n<td><code>dispatch(action)</code></td>\n<td>用户发起请求</td>\n</tr>\n<tr>\n<td><code>action: { type, payload }</code></td>\n<td><code>type</code> 表示请求的 URL，<code>payload</code> 表示请求的数据</td>\n</tr>\n<tr>\n<td><code>reducer</code></td>\n<td>路由 + 控制器（handler）</td>\n</tr>\n<tr>\n<td><code>reducer</code> 中的 <code>switch-case</code> 分支</td>\n<td>路由，根据 <code>action.type</code> 路由到对应的控制器</td>\n</tr>\n<tr>\n<td><code>reducer</code> 内部对 <code>state</code> 的处理</td>\n<td>控制器对数据库进行增删改操作</td>\n</tr>\n<tr>\n<td><code>reducer</code> 返回 <code>nextState</code></td>\n<td>将修改后的记录写回数据库</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"redux-三个基本原则\"><a href=\"#redux-三个基本原则\" class=\"headerlink\" title=\"redux 三个基本原则\"></a>redux 三个基本原则</h2><ol>\n<li>整个应用只有唯一一个 Store 实例</li>\n<li>State 只能通过触发 Action 来更改</li>\n<li>State 的更改 必须写成纯函数(Reducer)，(oldState, action) =&gt; newState，也就是每次更改总是返回一个新的 State</li>\n</ol>\n<h2 id=\"redux-两个显著的特点\"><a href=\"#redux-两个显著的特点\" class=\"headerlink\" title=\"redux 两个显著的特点\"></a>redux 两个显著的特点</h2><ol>\n<li>可预测性（Reducer 是纯函数）。</li>\n<li>扩展性强（middleware）。</li>\n</ol>\n<h2 id=\"reducer-可以根据场景分为以下几种\"><a href=\"#reducer-可以根据场景分为以下几种\" class=\"headerlink\" title=\"reducer 可以根据场景分为以下几种:\"></a>reducer 可以根据场景分为以下几种:</h2><ul>\n<li>root reducer :根reducer ,作为createStore的第一个参数</li>\n<li>slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.</li>\n<li>higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.</li>\n<li>case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.</li>\n</ul>\n<h2 id=\"reducer-的最佳实践主要分为以下几个部分\"><a href=\"#reducer-的最佳实践主要分为以下几个部分\" class=\"headerlink\" title=\"reducer 的最佳实践主要分为以下几个部分\"></a>reducer 的最佳实践主要分为以下几个部分</h2><ul>\n<li>抽离工具函数,以便复用.</li>\n<li>抽离功能函数(case function),精简reducer声明部分的代码</li>\n<li>根据数据类别拆分,维护多个独立的slice reducer.</li>\n<li>合并slice reducer.</li>\n<li>通过crossReducer在多个slice reducer中共享数据.</li>\n<li>减少reducer的模板代码.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>react无法让两个组件互相交流，使用对方数据。</p>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><ul>\n<li>需要回调通知state（等同于回调参数）-&gt;action</li>\n<li>需要根据回调处理（等同于父级方法） -&gt;reducer</li>\n<li>需要state(等同于总状态) -&gt;store</li>\n</ul>\n<p>现在您只需要记住 <code>reducer</code> 是一个函数，负责更新并返回一个新的<code>state</code></p>\n<p>而 <code>initialState</code> 主要用于前后端同构的数据同步</p>","more":"<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>是把数据从应用传到store的有效载荷。</li>\n<li>是store数据的唯一来源</li>\n<li>描述发生了什么的普通对象</li>\n<li>也可以理解成新闻的摘要-“任务列表里添加了学习Redux文档”。</li>\n</ul>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><ul>\n<li>Redux应用中只有一个单一的store</li>\n<li>维持应用的state</li>\n<li>提供 getState() 获取state</li>\n<li>提供dispatch() 更新state</li>\n<li>通过subscribe(listener) 注册监听器</li>\n<li>通过subscribe(listener) 返回的函数注销监听器.</li>\n<li>会把2个参数传入reducer：当前的state树和action。</li>\n</ul>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><h2 id=\"Reducer-1\"><a href=\"#Reducer-1\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><p>reducer就是实现(state,action) -&gt; newState的纯函数. 也就是真正处理state的地方.</p>\n<p>Redux不希望我们修改老的state ,而且通过直接返回新的state的方式去修改.</p>\n<ul>\n<li><strong>永远不要</strong>在 reducer 里做这些操作：<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n</li>\n<li>指明根据action更新state。</li>\n</ul>\n<p>通俗点讲，就是 <code>reducer</code> 返回啥，<code>state</code> 就被替换成啥</p>\n<ul>\n<li>view(React)</li>\n<li>store(state)</li>\n<li>action</li>\n<li>reducer</li>\n</ul>\n<ul>\n<li>view(React) = 家具的摆放在视觉的效果上</li>\n<li>store(state) = 每个家具在空间内的坐标(如：电视的位置是x:10, y: 400)</li>\n<li>action = 小明分配任务(谁应该干什么)</li>\n<li>reducer = 具体任务都干些什么(把电视搬到沙发正对面然后靠墙的地方)</li>\n</ul>\n<p>所以这个过程应该是这样的：</p>\n<p><strong>view —&gt; action —&gt; reducer —&gt; store(state) —&gt; view</strong></p>\n<h1 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a>React-Redux</h1><ol>\n<li><p>Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以。他会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。</p>\n</li>\n<li><p>connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。</p>\n</li>\n<li><p>mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。</p>\n<p>做好以上流程Redux和React就可以工作了。简单地说就是：</p>\n<p>​</p>\n<p>1.顶层分发状态，让React组件被动地渲染。</p>\n<p>​</p>\n<p>2.监听事件，事件有权利回到所有状态顶层影响状态。</p>\n</li>\n</ol>\n<h1 id=\"Redux-与传统后端-MVC-的对照\"><a href=\"#Redux-与传统后端-MVC-的对照\" class=\"headerlink\" title=\"Redux 与传统后端 MVC 的对照\"></a>Redux 与传统后端 MVC 的对照</h1><table>\n<thead>\n<tr>\n<th>Redux</th>\n<th>传统后端 MVC</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>store</code></td>\n<td>数据库实例</td>\n</tr>\n<tr>\n<td><code>state</code></td>\n<td>数据库中存储的数据</td>\n</tr>\n<tr>\n<td><code>dispatch(action)</code></td>\n<td>用户发起请求</td>\n</tr>\n<tr>\n<td><code>action: { type, payload }</code></td>\n<td><code>type</code> 表示请求的 URL，<code>payload</code> 表示请求的数据</td>\n</tr>\n<tr>\n<td><code>reducer</code></td>\n<td>路由 + 控制器（handler）</td>\n</tr>\n<tr>\n<td><code>reducer</code> 中的 <code>switch-case</code> 分支</td>\n<td>路由，根据 <code>action.type</code> 路由到对应的控制器</td>\n</tr>\n<tr>\n<td><code>reducer</code> 内部对 <code>state</code> 的处理</td>\n<td>控制器对数据库进行增删改操作</td>\n</tr>\n<tr>\n<td><code>reducer</code> 返回 <code>nextState</code></td>\n<td>将修改后的记录写回数据库</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><h2 id=\"redux-三个基本原则\"><a href=\"#redux-三个基本原则\" class=\"headerlink\" title=\"redux 三个基本原则\"></a>redux 三个基本原则</h2><ol>\n<li>整个应用只有唯一一个 Store 实例</li>\n<li>State 只能通过触发 Action 来更改</li>\n<li>State 的更改 必须写成纯函数(Reducer)，(oldState, action) =&gt; newState，也就是每次更改总是返回一个新的 State</li>\n</ol>\n<h2 id=\"redux-两个显著的特点\"><a href=\"#redux-两个显著的特点\" class=\"headerlink\" title=\"redux 两个显著的特点\"></a>redux 两个显著的特点</h2><ol>\n<li>可预测性（Reducer 是纯函数）。</li>\n<li>扩展性强（middleware）。</li>\n</ol>\n<h2 id=\"reducer-可以根据场景分为以下几种\"><a href=\"#reducer-可以根据场景分为以下几种\" class=\"headerlink\" title=\"reducer 可以根据场景分为以下几种:\"></a>reducer 可以根据场景分为以下几种:</h2><ul>\n<li>root reducer :根reducer ,作为createStore的第一个参数</li>\n<li>slice reducer : 分片reducer,相对根reducer 来说的.用来操作state的一部分数据.多个分片reducer可以合并成一个根reducer.</li>\n<li>higher-order reducer : 高阶reducer 接受reducer作为函数/返回reducer作为返回的函数.</li>\n<li>case function: 功能函数,接受指定action后的更新逻辑,可以是简单的reducer函数,也可以接受其他参数.</li>\n</ul>\n<h2 id=\"reducer-的最佳实践主要分为以下几个部分\"><a href=\"#reducer-的最佳实践主要分为以下几个部分\" class=\"headerlink\" title=\"reducer 的最佳实践主要分为以下几个部分\"></a>reducer 的最佳实践主要分为以下几个部分</h2><ul>\n<li>抽离工具函数,以便复用.</li>\n<li>抽离功能函数(case function),精简reducer声明部分的代码</li>\n<li>根据数据类别拆分,维护多个独立的slice reducer.</li>\n<li>合并slice reducer.</li>\n<li>通过crossReducer在多个slice reducer中共享数据.</li>\n<li>减少reducer的模板代码.</li>\n</ul>"},{"title":"实习谈业务时所学","date":"2017-07-24T14:33:00.000Z","comments":1,"layout":"post","_content":"\n# 一些。。。\n\n1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。\n\n<!--more-->","source":"_posts/yewu.md","raw":"---\ntitle: 实习谈业务时所学\ndate: 2017-07-24 22:33:00\ncomments: true\nlayout: post\ntags: [生活]\ncategories: Technology\n---\n\n# 一些。。。\n\n1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。\n\n<!--more-->","slug":"yewu","published":1,"updated":"2017-07-27T13:21:26.000Z","photos":[],"link":"","_id":"cj6krbq4t002ig3fygkkqsxa3","content":"<h1 id=\"一些。。。\"><a href=\"#一些。。。\" class=\"headerlink\" title=\"一些。。。\"></a>一些。。。</h1><p>1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。</p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<h1 id=\"一些。。。\"><a href=\"#一些。。。\" class=\"headerlink\" title=\"一些。。。\"></a>一些。。。</h1><p>1.业务员可能都没有理清业务或者需求，需要自己去帮他们理清，好让自己设计开发的产品更健壮和在未来更有扩展性。</p>","more":""},{"title":"初入React+Webpack(入门)","date":"2017-04-27T07:29:00.000Z","comments":1,"layout":"post","_content":"\n因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。\n\n# 通过npm使用React\n\n建议在 React 中使用 CommonJS 模块系统，比如 [browserify](http://browserify.org/) 或 [webpack](https://webpack.github.io/)。使用 [`react`](https://www.npmjs.com/package/react) 和 [`react-dom`](https://www.npmjs.com/package/react-dom) npm 包.\n\n我使用webpack来安装React DOM的\n\n```git\n$ npm install --save react react-dom babelify babel-preset-react\n$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js\n```\n\n那么第一步肯定是创建Hello World啦~\n\n<!--more-->\n\n我们需要创建一个`helloworld.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n\n在代码中\n\n```javascript\nReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n```\n\n这是jsx语法。可以去 [JSX 语法](http://reactjs.cn/react/docs/jsx-in-depth.html) 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 `<script type=\"text/babel\">` 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！\n\n## 分离文件\n\n那么我们在React中也是可以分离js的。\n\n我们需要创建一个下面的`build/helloworld.js`\n\n```javascript\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n\n之后我们在html的文件中像以前引用文件一样去引用就可以了。\n\n```javascript\n<script type=\"text/babel\" src=\"src/helloworld.js\"></script>\n```\n\n**但是我是用chrome**不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了`<script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>`那么就我就去跟着开发文档配置了`babel`。\n\n## Babel\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：[Babel](https://babeljs.io/)\n\n## Webpack(入门)\n\n### webpack是什么？\n\nwebpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考[官网](https://webpack.js.org/)\n\n\n###开始使用Webpack\n我们来一步一步去开始学习使用Webpack。\n\n###安装\nWebpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。\n\n```git\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n我们在终端中使用`npm init `的命令可以自动创建这个package.json文件\n\n```git\nnpm init\n```\n\n输入后，会有一些需要你输入的信息，你只需要一直回车就行了。\n\n- 接下来我们在这个文件夹下进行安装Webpack作为依赖包\n\n```Git\n//安装Webpack\nnpm install --save-dev webpack\n```\n\n- 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.\n- **index.html**文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n\n```\n\n- **Greeter.js**只包括一个用来返回包含问候信息的html元素的函数。\n\n```\n//main.js \nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n- **main.js**用来把Greeter模块返回的节点插入页面。\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n### 正式使用Webpack\n\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n\n可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果\n\n#### 通过配置文件来使用Webpack\n\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n\n> **注**：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n#### 更快捷的执行打包任务\n\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n\n> **注：**package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`\n\n#### Loaders\n\n**鼎鼎大名的Loaders登场了！**\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的`modules`关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n- `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n**创建带有问候信息的JSON文件(命名为config.json)**\n\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n### Babel\n\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n- 下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n- 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n#### Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n\n在webpack中配置Babel的方法如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n使用ES6的模块定义和渲染Greeter模块\n\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n#### Babel的配置选项\n\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### CSS\n\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style-loaders!css-loaders'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n\n> **注**：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n> 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n\n\n\n\n\n\n\n\n感谢网上各大资源\n\n参考以及转载（其中在原文中有些错误我已经更改）\n [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#)\n\n\n","source":"_posts/初入React.md","raw":"---\ntitle: 初入React+Webpack(入门)\ndate: 2017-04-27 15:29\ncomments: true\nlayout: post\ntags: [JavaScript,React,Webpack]\ncategories: React\n---\n\n因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。\n\n# 通过npm使用React\n\n建议在 React 中使用 CommonJS 模块系统，比如 [browserify](http://browserify.org/) 或 [webpack](https://webpack.github.io/)。使用 [`react`](https://www.npmjs.com/package/react) 和 [`react-dom`](https://www.npmjs.com/package/react-dom) npm 包.\n\n我使用webpack来安装React DOM的\n\n```git\n$ npm install --save react react-dom babelify babel-preset-react\n$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js\n```\n\n那么第一步肯定是创建Hello World啦~\n\n<!--more-->\n\n我们需要创建一个`helloworld.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Hello React!</title>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/react-dom.js\"></script>\n    <script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/babel\">\n      ReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>\n```\n\n在代码中\n\n```javascript\nReactDOM.render(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n```\n\n这是jsx语法。可以去 [JSX 语法](http://reactjs.cn/react/docs/jsx-in-depth.html) 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 `<script type=\"text/babel\">` 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！\n\n## 分离文件\n\n那么我们在React中也是可以分离js的。\n\n我们需要创建一个下面的`build/helloworld.js`\n\n```javascript\nReactDOM.render(\n  <h1>Hello, world!</h1>,\n  document.getElementById('example')\n);\n```\n\n之后我们在html的文件中像以前引用文件一样去引用就可以了。\n\n```javascript\n<script type=\"text/babel\" src=\"src/helloworld.js\"></script>\n```\n\n**但是我是用chrome**不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了`<script src=\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"></script>`那么就我就去跟着开发文档配置了`babel`。\n\n## Babel\n\nBabel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：[Babel](https://babeljs.io/)\n\n## Webpack(入门)\n\n### webpack是什么？\n\nwebpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考[官网](https://webpack.js.org/)\n\n\n###开始使用Webpack\n我们来一步一步去开始学习使用Webpack。\n\n###安装\nWebpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。\n\n```git\n//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n```\n\n我们在终端中使用`npm init `的命令可以自动创建这个package.json文件\n\n```git\nnpm init\n```\n\n输入后，会有一些需要你输入的信息，你只需要一直回车就行了。\n\n- 接下来我们在这个文件夹下进行安装Webpack作为依赖包\n\n```Git\n//安装Webpack\nnpm install --save-dev webpack\n```\n\n- 回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.\n- **index.html**文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）\n\n\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id='root'>\n    </div>\n    <script src=\"bundle.js\"></script>\n  </body>\n</html>\n\n```\n\n- **Greeter.js**只包括一个用来返回包含问候信息的html元素的函数。\n\n```\n//main.js \nvar greeter = require('./Greeter.js');\ndocument.getElementById('root').appendChild(greeter());\n```\n\n- **main.js**用来把Greeter模块返回的节点插入页面。\n\n```\n// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n```\n\n### 正式使用Webpack\n\n```\n//webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n```\n\n可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果\n\n#### 通过配置文件来使用Webpack\n\nWebpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。\n\n还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。\n\n```\nmodule.exports = {\n  entry:  __dirname + \"/app/main.js\",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + \"/public\",//打包后的文件存放的地方\n    filename: \"bundle.js\"//打包后输出文件的文件名\n  }\n}\n```\n\n> **注**：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。\n\n#### 更快捷的执行打包任务\n\n执行类似于`node_modules/.bin/webpack`这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的`npm start`命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。\n\n```\n{\n  \"name\": \"webpack-sample-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Sample webpack project\",\n  \"scripts\": {\n    \"start\": \"webpack\" //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令\n  },\n  \"author\": \"zhang\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^1.12.9\"\n  }\n}\n```\n\n> **注：**package.json中的脚本部分已经默认在命令前添加了`node_modules/.bin`路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。\n\nnpm的`start`是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用`npm start`就可以执行相关命令，如果对应的此脚本名称不是`start`，想要在命令行中运行时，需要这样用`npm run {script name}`如`npm run build`\n\n#### Loaders\n\n**鼎鼎大名的Loaders登场了！**\n\nLoaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。\n\nLoaders需要单独安装并且需要在webpack.config.js下的`modules`关键字下进行配置，Loaders的配置选项包括以下几方面：\n\n- `test`：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `query`：为loaders提供额外的设置选项（可选）\n\n继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下\n\n```\n//安装可以装换JSON的loader\nnpm install --save-dev json-loader\n```\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {//在配置文件里添加JSON loader\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json\"\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n**创建带有问候信息的JSON文件(命名为config.json)**\n\n```\n//config.json\n{\n  \"greetText\": \"Hi there and greetings from JSON!\"\n}\n```\n\n更新后的Greeter.js\n\n```\nvar config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n```\n\nLoaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。\n\n### Babel\n\nBabel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：\n\n- 下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；\n- 使用基于JavaScript进行了拓展的语言，比如React的JSX\n\n#### Babel的安装与配置\n\nBabel其实是几个模块化的包，其核心功能位于称为`babel-core`的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。\n\n我们先来一次性安装这些依赖包\n\n```\n// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n```\n\n在webpack中配置Babel的方法如下\n\n```\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders',//在webpack的module部分的loaders里进行配置即可\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n\n  devServer: {\n    contentBase: \"./public\",\n    colors: true,\n    historyApiFallback: true,\n    inline: true\n  }\n}\n```\n\n现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM\n\n```\nnpm install --save react react-dom\n```\n\n使用ES6的语法，更新Greeter.js并返回一个React组件\n\n```\n//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n```\n\n使用ES6的模块定义和渲染Greeter模块\n\n```\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n#### Babel的配置选项\n\nBabel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 \".babelrc\" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用`.babelrc`里的babel配置选项），如下：\n\n```\n// webpack.config.js\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/public\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      }\n    ]\n  },\n\n  devServer: {...} // Omitted for brevity\n}\n```\n\n```\n//.babelrc\n{\n  \"presets\": [\"react\", \"es2015\"]\n}\n```\n\n到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。\n\n#### CSS\n\nwebpack提供两个工具处理样式表，`css-loader` 和 `style-loader`，二者处理的任务不同，`css-loader`使你能够使用类似`@import` 和 `url(...)`的方法实现 `require()`的功能,`style-loader`将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。\n\n继续上面的例子\n\n```\n//安装\nnpm install --save-dev style-loader css-loader\n```\n\n```\n//使用\nmodule.exports = {\n  devtool: 'eval-source-map',\n\n  entry:  __dirname + \"/app/main.js\",\n  output: {\n    path: __dirname + \"/build\",\n    filename: \"bundle.js\"\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: \"json-loaders\"\n      },\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: 'babel-loaders'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'style-loaders!css-loaders'//添加对样式表的处理\n      }\n    ]\n  },\n\n  devServer: {...}\n}\n```\n\n> **注**：感叹号的作用在于使同一文件能够使用不同类型的loader\n\n接下来，在app文件夹里创建一个名字为\"main.css\"的文件，对一些元素设置样式\n\n```\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n```\n\n你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下\n\n```\n//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n```\n\n> 通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。\n\n不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。\n\n\n\n\n\n\n\n\n\n感谢网上各大资源\n\n参考以及转载（其中在原文中有些错误我已经更改）\n [入门Webpack，看这篇就够了](http://www.jianshu.com/p/42e11515c10f#)\n\n\n","slug":"初入React","published":1,"updated":"2017-07-24T14:37:52.000Z","photos":[],"link":"","_id":"cj6krbq4v002kg3fyd3z48r2m","content":"<p>因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。</p>\n<h1 id=\"通过npm使用React\"><a href=\"#通过npm使用React\" class=\"headerlink\" title=\"通过npm使用React\"></a>通过npm使用React</h1><p>建议在 React 中使用 CommonJS 模块系统，比如 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a> 或 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a>。使用 <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"external\"><code>react</code></a> 和 <a href=\"https://www.npmjs.com/package/react-dom\" target=\"_blank\" rel=\"external\"><code>react-dom</code></a> npm 包.</p>\n<p>我使用webpack来安装React DOM的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save react react-dom babelify babel-preset-react</div><div class=\"line\">$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js</div></pre></td></tr></table></figure>\n<p>那么第一步肯定是创建Hello World啦~</p>\n<a id=\"more\"></a>\n<p>我们需要创建一个<code>helloworld.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在代码中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div></pre></td></tr></table></figure>\n<p>这是jsx语法。可以去 <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">JSX 语法</a> 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 <code>&lt;script type=&quot;text/babel&quot;&gt;</code> 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！</p>\n<h2 id=\"分离文件\"><a href=\"#分离文件\" class=\"headerlink\" title=\"分离文件\"></a>分离文件</h2><p>那么我们在React中也是可以分离js的。</p>\n<p>我们需要创建一个下面的<code>build/helloworld.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>之后我们在html的文件中像以前引用文件一样去引用就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"src/helloworld.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><strong>但是我是用chrome</strong>不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了<code>&lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;</code>那么就我就去跟着开发文档配置了<code>babel</code>。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a></p>\n<h2 id=\"Webpack-入门\"><a href=\"#Webpack-入门\" class=\"headerlink\" title=\"Webpack(入门)\"></a>Webpack(入门)</h2><h3 id=\"webpack是什么？\"><a href=\"#webpack是什么？\" class=\"headerlink\" title=\"webpack是什么？\"></a>webpack是什么？</h3><p>webpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>###开始使用Webpack<br>我们来一步一步去开始学习使用Webpack。</p>\n<p>###安装<br>Webpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//全局安装</div><div class=\"line\">npm install -g webpack</div><div class=\"line\">//安装到你的项目目录</div><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure>\n<p>我们在终端中使用<code>npm init</code>的命令可以自动创建这个package.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>输入后，会有一些需要你输入的信息，你只需要一直回车就行了。</p>\n<ul>\n<li>接下来我们在这个文件夹下进行安装Webpack作为依赖包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装Webpack</div><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure>\n<ul>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.</li>\n<li><strong>index.html</strong>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Greeter.js</strong>只包括一个用来返回包含问候信息的html元素的函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js </div><div class=\"line\">var greeter = require(&apos;./Greeter.js&apos;);</div><div class=\"line\">document.getElementById(&apos;root&apos;).appendChild(greeter());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>main.js</strong>用来把Greeter模块返回的节点插入页面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Greeter.js</div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  var greet = document.createElement(&apos;div&apos;);</div><div class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</div><div class=\"line\">  return greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack非全局安装的情况</div><div class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</div></pre></td></tr></table></figure>\n<p>可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<h4 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</div><div class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<h4 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h4><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;start&quot;: &quot;webpack&quot; //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;webpack&quot;: &quot;^1.12.9&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：</strong>package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p>\n<p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的<code>modules</code>关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装可以装换JSON的loader</div><div class=\"line\">npm install --save-dev json-loader</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;//在配置文件里添加JSON loader</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json&quot;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: &quot;./public&quot;,</div><div class=\"line\">    colors: true,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>创建带有问候信息的JSON文件(命名为config.json)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//config.json</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var config = require(&apos;./config.json&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  var greet = document.createElement(&apos;div&apos;);</div><div class=\"line\">  greet.textContent = config.greetText;</div><div class=\"line\">  return greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h3 id=\"Babel-1\"><a href=\"#Babel-1\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h4 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</div><div class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>\n<p>在webpack中配置Babel的方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;,//在webpack的module部分的loaders里进行配置即可</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          presets: [&apos;es2015&apos;,&apos;react&apos;]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: &quot;./public&quot;,</div><div class=\"line\">    colors: true,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save react react-dom</div></pre></td></tr></table></figure>\n<p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Greeter,js</div><div class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</div><div class=\"line\">import config from &apos;./config.json&apos;;</div><div class=\"line\"></div><div class=\"line\">class Greeter extends Component&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default Greeter</div></pre></td></tr></table></figure>\n<p>使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\">import Greeter from &apos;./Greeter&apos;;</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>\n<h4 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h4><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125; // Omitted for brevity</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//.babelrc</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装</div><div class=\"line\">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/build&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: &apos;style-loaders!css-loaders&apos;//添加对样式表的处理</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">html &#123;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  -ms-text-size-adjust: 100%;</div><div class=\"line\">  -webkit-text-size-adjust: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*, *:before, *:after &#123;</div><div class=\"line\">  box-sizing: inherit;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\">import Greeter from &apos;./Greeter&apos;;</div><div class=\"line\"></div><div class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n</blockquote>\n<p>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n<p>感谢网上各大资源</p>\n<p>参考以及转载（其中在原文中有些错误我已经更改）<br> <a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"external\">入门Webpack，看这篇就够了</a></p>\n","site":{"data":{}},"excerpt":"<p>因为需要做一个自己的小想法以后需要去实现把这个想法变成项目，在重多得框架中选择React.js，因为它需要学习成本，所以我觉得我在学习的过程中能学到很多东西。</p>\n<h1 id=\"通过npm使用React\"><a href=\"#通过npm使用React\" class=\"headerlink\" title=\"通过npm使用React\"></a>通过npm使用React</h1><p>建议在 React 中使用 CommonJS 模块系统，比如 <a href=\"http://browserify.org/\" target=\"_blank\" rel=\"external\">browserify</a> 或 <a href=\"https://webpack.github.io/\" target=\"_blank\" rel=\"external\">webpack</a>。使用 <a href=\"https://www.npmjs.com/package/react\" target=\"_blank\" rel=\"external\"><code>react</code></a> 和 <a href=\"https://www.npmjs.com/package/react-dom\" target=\"_blank\" rel=\"external\"><code>react-dom</code></a> npm 包.</p>\n<p>我使用webpack来安装React DOM的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install --save react react-dom babelify babel-preset-react</div><div class=\"line\">$ browserify -t [ babelify --presets [ react ] ] main.js -o bundle.js</div></pre></td></tr></table></figure>\n<p>那么第一步肯定是创建Hello World啦~</p>","more":"<p>我们需要创建一个<code>helloworld.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"build/react-dom.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://npmcdn.com/babel-core@5.8.38/browser.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"example\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/babel\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在代码中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">      );</div></pre></td></tr></table></figure>\n<p>这是jsx语法。可以去 <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">JSX 语法</a> 里学习更多 JSX 相关的知识。为了把 JSX 转成标准的 JavaScript，我们用 <code>&lt;script type=&quot;text/babel&quot;&gt;</code> 标签，并引入 Babel 来完成在浏览器里的代码转换。在浏览器里打开这个html，你应该可以看到成功的消息！</p>\n<h2 id=\"分离文件\"><a href=\"#分离文件\" class=\"headerlink\" title=\"分离文件\"></a>分离文件</h2><p>那么我们在React中也是可以分离js的。</p>\n<p>我们需要创建一个下面的<code>build/helloworld.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'example'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>之后我们在html的文件中像以前引用文件一样去引用就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/babel\"</span> src=<span class=\"string\">\"src/helloworld.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p><strong>但是我是用chrome</strong>不会显示效果。之后我用safari效果成功显示，后来打开控制台发现http以外的协议加载失败了。读取不了<code>&lt;script src=&quot;https://npmcdn.com/babel-core@5.8.38/browser.min.js&quot;&gt;&lt;/script&gt;</code>那么就我就去跟着开发文档配置了<code>babel</code>。</p>\n<h2 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h2><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：<a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a></p>\n<h2 id=\"Webpack-入门\"><a href=\"#Webpack-入门\" class=\"headerlink\" title=\"Webpack(入门)\"></a>Webpack(入门)</h2><h3 id=\"webpack是什么？\"><a href=\"#webpack是什么？\" class=\"headerlink\" title=\"webpack是什么？\"></a>webpack是什么？</h3><p>webpack是一个模块化打包工具，使用js作为载体将所有静态资源打包在一起，支持的loader和plugin等能对各种静态资源进行预处理，极大地方便了前端的工程化开发。详情参考<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">官网</a></p>\n<p>###开始使用Webpack<br>我们来一步一步去开始学习使用Webpack。</p>\n<p>###安装<br>Webpack可以使用npm安装，新建一个空白的文件夹（我的为webpackwhat），在终端中转到该文件夹下（cd webpackwhat）进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//全局安装</div><div class=\"line\">npm install -g webpack</div><div class=\"line\">//安装到你的项目目录</div><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure>\n<p>我们在终端中使用<code>npm init</code>的命令可以自动创建这个package.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<p>输入后，会有一些需要你输入的信息，你只需要一直回车就行了。</p>\n<ul>\n<li>接下来我们在这个文件夹下进行安装Webpack作为依赖包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装Webpack</div><div class=\"line\">npm install --save-dev webpack</div></pre></td></tr></table></figure>\n<ul>\n<li>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放准备给浏览器读取的数据（包括使用webpack生成的打包后的js文件以及一个index.html文件）。在这里还需要创建三个文件，index.html 文件放在public文件夹中，两个js文件（Greeter.js和main.js）放在app文件夹中.</li>\n<li><strong>index.html</strong>文件只有最基础的html代码，它唯一的目的就是加载打包后的js文件（bundle.js）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Webpack Sample Project<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'root'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li><strong>Greeter.js</strong>只包括一个用来返回包含问候信息的html元素的函数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js </div><div class=\"line\">var greeter = require(&apos;./Greeter.js&apos;);</div><div class=\"line\">document.getElementById(&apos;root&apos;).appendChild(greeter());</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>main.js</strong>用来把Greeter模块返回的节点插入页面。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Greeter.js</div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  var greet = document.createElement(&apos;div&apos;);</div><div class=\"line\">  greet.textContent = &quot;Hi there and greetings!&quot;;</div><div class=\"line\">  return greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"正式使用Webpack\"><a href=\"#正式使用Webpack\" class=\"headerlink\" title=\"正式使用Webpack\"></a>正式使用Webpack</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//webpack非全局安装的情况</div><div class=\"line\">node_modules/.bin/webpack app/main.js public/bundle.js</div></pre></td></tr></table></figure>\n<p>可以看出webpack同时编译了main.js 和Greeter,js,现在打开index.html,可以看到如下结果</p>\n<h4 id=\"通过配置文件来使用Webpack\"><a href=\"#通过配置文件来使用Webpack\" class=\"headerlink\" title=\"通过配置文件来使用Webpack\"></a>通过配置文件来使用Webpack</h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的loaders和plugins），这些功能其实都可以通过命令行模式实现，但是正如已经提到的，这样不太方便且容易出错的，一个更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，可以把所有的与构建相关的信息放在里面。</p>\n<p>还是继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，并在其中进行最最简单的配置，如下所示，它包含入口文件路径和存放打包后文件的地方的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</div><div class=\"line\">    filename: &quot;bundle.js&quot;//打包后输出文件的文件名</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>\n</blockquote>\n<h4 id=\"更快捷的执行打包任务\"><a href=\"#更快捷的执行打包任务\" class=\"headerlink\" title=\"更快捷的执行打包任务\"></a>更快捷的执行打包任务</h4><p>执行类似于<code>node_modules/.bin/webpack</code>这样的命令其实是比较烦人且容易出错的，不过值得庆幸的是npm可以引导任务执行，对其进行配置后可以使用简单的<code>npm start</code>命令来代替这些繁琐的命令。在package.json中对npm的脚本部分进行相关设置即可，设置方法如下。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;webpack-sample-project&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class=\"line\">  &quot;description&quot;: &quot;Sample webpack project&quot;,</div><div class=\"line\">  &quot;scripts&quot;: &#123;</div><div class=\"line\">    &quot;start&quot;: &quot;webpack&quot; //配置的地方就是这里啦，相当于把npm的start命令指向webpack命令</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;author&quot;: &quot;zhang&quot;,</div><div class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;webpack&quot;: &quot;^1.12.9&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：</strong>package.json中的脚本部分已经默认在命令前添加了<code>node_modules/.bin</code>路径，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>\n</blockquote>\n<p>npm的<code>start</code>是一个特殊的脚本名称，它的特殊性表现在，在命令行中使用<code>npm start</code>就可以执行相关命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code></p>\n<h4 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p>\n<p>Loaders是webpack中最让人激动人心的功能之一了。通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说分析JSON文件并把它转换为JavaScript文件，或者说把下一代的JS文件（ES6，ES7)转换为现代浏览器可以识别的JS文件。或者说对React的开发而言，合适的Loaders可以把React的JSX文件转换为JS文件。</p>\n<p>Loaders需要单独安装并且需要在webpack.config.js下的<code>modules</code>关键字下进行配置，Loaders的配置选项包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>query</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<p>继续上面的例子，我们把Greeter.js里的问候消息放在一个单独的JSON文件里,并通过合适的配置使Greeter.js可以读取该JSON文件的值，配置方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装可以装换JSON的loader</div><div class=\"line\">npm install --save-dev json-loader</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;//在配置文件里添加JSON loader</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json&quot;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: &quot;./public&quot;,</div><div class=\"line\">    colors: true,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>创建带有问候信息的JSON文件(命名为config.json)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//config.json</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;greetText&quot;: &quot;Hi there and greetings from JSON!&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更新后的Greeter.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var config = require(&apos;./config.json&apos;);</div><div class=\"line\"></div><div class=\"line\">module.exports = function() &#123;</div><div class=\"line\">  var greet = document.createElement(&apos;div&apos;);</div><div class=\"line\">  greet.textContent = config.greetText;</div><div class=\"line\">  return greet;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Loaders很好，不过有的Loaders使用起来比较复杂，比如说Babel。</p>\n<h3 id=\"Babel-1\"><a href=\"#Babel-1\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它的强大之处表现在可以通过编译帮你达到以下目的：</p>\n<ul>\n<li>下一代的JavaScript标准（ES6，ES7），这些标准目前并未被当前的浏览器完全的支持；</li>\n<li>使用基于JavaScript进行了拓展的语言，比如React的JSX</li>\n</ul>\n<h4 id=\"Babel的安装与配置\"><a href=\"#Babel的安装与配置\" class=\"headerlink\" title=\"Babel的安装与配置\"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，不过webpack把它们整合在一起使用，但是对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的babel-preset-es2015包和解析JSX的babel-preset-react包）。</p>\n<p>我们先来一次性安装这些依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// npm一次性安装多个依赖模块，模块之间用空格隔开</div><div class=\"line\">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>\n<p>在webpack中配置Babel的方法如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;,//在webpack的module部分的loaders里进行配置即可</div><div class=\"line\">        query: &#123;</div><div class=\"line\">          presets: [&apos;es2015&apos;,&apos;react&apos;]</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;</div><div class=\"line\">    contentBase: &quot;./public&quot;,</div><div class=\"line\">    colors: true,</div><div class=\"line\">    historyApiFallback: true,</div><div class=\"line\">    inline: true</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save react react-dom</div></pre></td></tr></table></figure>\n<p>使用ES6的语法，更新Greeter.js并返回一个React组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Greeter,js</div><div class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</div><div class=\"line\">import config from &apos;./config.json&apos;;</div><div class=\"line\"></div><div class=\"line\">class Greeter extends Component&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &#123;config.greetText&#125;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default Greeter</div></pre></td></tr></table></figure>\n<p>使用ES6的模块定义和渲染Greeter模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\">import Greeter from &apos;./Greeter&apos;;</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>\n<h4 id=\"Babel的配置选项\"><a href=\"#Babel的配置选项\" class=\"headerlink\" title=\"Babel的配置选项\"></a>Babel的配置选项</h4><p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">// webpack.config.js</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/public&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125; // Omitted for brevity</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//.babelrc</div><div class=\"line\">&#123;</div><div class=\"line\">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>\n<h4 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>\n<p>继续上面的例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//安装</div><div class=\"line\">npm install --save-dev style-loader css-loader</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">  devtool: &apos;eval-source-map&apos;,</div><div class=\"line\"></div><div class=\"line\">  entry:  __dirname + &quot;/app/main.js&quot;,</div><div class=\"line\">  output: &#123;</div><div class=\"line\">    path: __dirname + &quot;/build&quot;,</div><div class=\"line\">    filename: &quot;bundle.js&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  module: &#123;</div><div class=\"line\">    loaders: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.json$/,</div><div class=\"line\">        loader: &quot;json-loaders&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.js$/,</div><div class=\"line\">        exclude: /node_modules/,</div><div class=\"line\">        loader: &apos;babel-loaders&apos;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &#123;</div><div class=\"line\">        test: /\\.css$/,</div><div class=\"line\">        loader: &apos;style-loaders!css-loaders&apos;//添加对样式表的处理</div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  devServer: &#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注</strong>：感叹号的作用在于使同一文件能够使用不同类型的loader</p>\n</blockquote>\n<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">html &#123;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  -ms-text-size-adjust: 100%;</div><div class=\"line\">  -webkit-text-size-adjust: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">*, *:before, *:after &#123;</div><div class=\"line\">  box-sizing: inherit;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">h1, h2, h3, h4, h5, h6, p, ul &#123;</div><div class=\"line\">  margin: 0;</div><div class=\"line\">  padding: 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你还记得吗？webpack只有单一的入口，其它的模块需要通过 import, require, url等导入相关位置，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class=\"line\">import Greeter from &apos;./Greeter&apos;;</div><div class=\"line\"></div><div class=\"line\">import &apos;./main.css&apos;;//使用require导入css文件</div><div class=\"line\"></div><div class=\"line\">render(&lt;Greeter /&gt;, document.getElementById(&apos;root&apos;));</div></pre></td></tr></table></figure>\n<blockquote>\n<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>\n</blockquote>\n<p>不过这也只是webpack把css当做模块而已，咱们继续看看一个真的CSS模块的实践。</p>\n<p>感谢网上各大资源</p>\n<p>参考以及转载（其中在原文中有些错误我已经更改）<br> <a href=\"http://www.jianshu.com/p/42e11515c10f#\" target=\"_blank\" rel=\"external\">入门Webpack，看这篇就够了</a></p>"},{"title":"支付宝小程序踩坑（一）","date":"2017-08-20T12:49:24.000Z","comments":1,"layout":"post","_content":"\n# 支付宝小程序\n\n这是支付宝小程序编译器的主界面\n\n![paytest1](/images/paytest1.png)\n\n这是 **hello，world**的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 **ESLint** 支持\n\n![paytest2](/images/paytest2.png)\n\n","source":"_posts/支付宝小程序.md","raw":"---\ntitle: 支付宝小程序踩坑（一）\ndate: 2017-08-20 20：50\ncomments: true\nlayout: post\ntags: [JavaScrip, 小程序]\ncategories: 小程序\n---\n\n# 支付宝小程序\n\n这是支付宝小程序编译器的主界面\n\n![paytest1](/images/paytest1.png)\n\n这是 **hello，world**的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 **ESLint** 支持\n\n![paytest2](/images/paytest2.png)\n\n","slug":"支付宝小程序","published":1,"updated":"2017-08-20T12:54:16.000Z","photos":[],"link":"","_id":"cj6krbq4w002og3fye09hg0o3","content":"<h1 id=\"支付宝小程序\"><a href=\"#支付宝小程序\" class=\"headerlink\" title=\"支付宝小程序\"></a>支付宝小程序</h1><p>这是支付宝小程序编译器的主界面</p>\n<p><img src=\"/images/paytest1.png\" alt=\"paytest1\"></p>\n<p>这是 <strong>hello，world</strong>的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 <strong>ESLint</strong> 支持</p>\n<p><img src=\"/images/paytest2.png\" alt=\"paytest2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"支付宝小程序\"><a href=\"#支付宝小程序\" class=\"headerlink\" title=\"支付宝小程序\"></a>支付宝小程序</h1><p>这是支付宝小程序编译器的主界面</p>\n<p><img src=\"/images/paytest1.png\" alt=\"paytest1\"></p>\n<p>这是 <strong>hello，world</strong>的文件树。是基于js语言。小程序开发者工具默认支持 ES5/ES6/ES7，推荐使用 ES6 以上语法。而且还内置了 <strong>ESLint</strong> 支持</p>\n<p><img src=\"/images/paytest2.png\" alt=\"paytest2\"></p>\n"},{"title":"前端面试题","date":"2017-05-07T05:42:00.000Z","comments":1,"layout":"post","_content":"\n# 前端面试题\n\n题目来自[朴灵大大的github](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js)\n\n## 介绍JavaScript的基本数据类型\n\nJavaScript有5种简单数据类型： `Undefined`、`Null`、`Boolean`、`Number`、`String`。还有一种复杂数据类型`Object`。\n\n### typeof操作符\n\n用`typeof`操作符能检测给定变量的数据类型。（括号中是自己的理解意思）\n\n- \"undefined\" \t ————这个值没有被定义。（这个变量存在但是没有给它值）\n- \"boolean\"       ————这个值是布尔值。（这个值有true或false输出）\n- \"string\"             ————这个值是字符串。（字符串或字符序列）\n- \"number\"        ————这个值是数值。（字面意思）\n- \"object\"          ————这个值是对象或null。(这个值可能是个对象或者空)\n- \"function\"       ————这个值是函数。(字面意思)\n\n<!--more-->\n\n```javascript\nvar message=\"wa\";\nalert(typeof wa);\t//string\n```\n\n### Undefined类型\n\n使用var声明变量但没有给它加以初始化，这个变量的值就是`undefined`。\n\n```javascript\nvar message;\nalert(message == undefined);\t\t\t//true\n```\n\n### Null类型\n\n`null`表示一个空对象指针，但是用`typeof`操作符检测`null`会返回`object`的原因是什么？\n\n```javascript\nvar car =null;\nalert(\"typeof car\");\t\t\t//\"object\"\n```\n\n只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存`null`值。这样有助于进一步区分`null`和`undefined`。\n\n### Boolean类型\n\n这个字母值就是`true`、`false`。但是这两个值和数字不是一回事情。所以 **true**不一定等于 **1** ， **false**不一定等于 **0** 。\n\n还有布尔值是区分大小的 **True**和 **False**都不是 **Boolean值**。\n\n### Number类型\n\n- 浮点数值\n- 数值范围\n\n最小值保存在Number.MIN_VALUE ： 5e-324。 保存着**-Infinity**\n\n最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着**Infinity**。\n\n想确定一个数值是否有穷可以用`isFinite()函数`。这个函数会在最小和最大数值之间会返回 **true**。\n\n```javascript\nalert(isFinite(result));\n```\n\n- NaN（Not a Number）\n\n任何涉及NaN的操作（NaN/10）都会返回 **NaN**。\n\n还有 **NaN**与任何值都不想等，包括 **NaN**本身。\n\n实际上0除以0才会返回 **NaN**，正数除以0返回 **Infinity**，负数除以0返回 **-Infinity**。\n\n`isNaN()函数`可以确定这个函数是否**不是数值**。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。\n\n- 数值转换\n\n  三个函数\t可以 把非数值转换为数值。\n\n  - `Number()`\t       可以用于任何数据类型\t\n  - `parseInt()`         字符串转换成数值\n  - `parseFloat()`     字符串转换成数值\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（\"）或单引号（'）表示。\n\n-  字符字面量——转义序列\t\t（\\n 换行\n\n  ​\t\t\t\t\t\t\t     \\t 制表···）\n\n- 字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。\n\n```javascript\nvar lang=\"Java\";\nlang=lang+\"Script\";\n```\n\n- 转换为字符串\n  - 使用 `toString()方法` 但是null和undefined没有这个方法所以，\n  - 就使用`String()方法`\n\n### Object类型\n\n对象其实就是一组数据和功能的集合。\n\n```javascript\nvar o =new Object();\n```\n\n## 说说写JavaScript的基本规范？\n\n","source":"_posts/前端面试题.md","raw":"---\ntitle: 前端面试题\ndate: 2017-05-07 13:42\ncomments: true\nlayout: post\ntags: [JavaScript]\ncategories: Javascript修仙之路\n---\n\n# 前端面试题\n\n题目来自[朴灵大大的github](https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js)\n\n## 介绍JavaScript的基本数据类型\n\nJavaScript有5种简单数据类型： `Undefined`、`Null`、`Boolean`、`Number`、`String`。还有一种复杂数据类型`Object`。\n\n### typeof操作符\n\n用`typeof`操作符能检测给定变量的数据类型。（括号中是自己的理解意思）\n\n- \"undefined\" \t ————这个值没有被定义。（这个变量存在但是没有给它值）\n- \"boolean\"       ————这个值是布尔值。（这个值有true或false输出）\n- \"string\"             ————这个值是字符串。（字符串或字符序列）\n- \"number\"        ————这个值是数值。（字面意思）\n- \"object\"          ————这个值是对象或null。(这个值可能是个对象或者空)\n- \"function\"       ————这个值是函数。(字面意思)\n\n<!--more-->\n\n```javascript\nvar message=\"wa\";\nalert(typeof wa);\t//string\n```\n\n### Undefined类型\n\n使用var声明变量但没有给它加以初始化，这个变量的值就是`undefined`。\n\n```javascript\nvar message;\nalert(message == undefined);\t\t\t//true\n```\n\n### Null类型\n\n`null`表示一个空对象指针，但是用`typeof`操作符检测`null`会返回`object`的原因是什么？\n\n```javascript\nvar car =null;\nalert(\"typeof car\");\t\t\t//\"object\"\n```\n\n只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存`null`值。这样有助于进一步区分`null`和`undefined`。\n\n### Boolean类型\n\n这个字母值就是`true`、`false`。但是这两个值和数字不是一回事情。所以 **true**不一定等于 **1** ， **false**不一定等于 **0** 。\n\n还有布尔值是区分大小的 **True**和 **False**都不是 **Boolean值**。\n\n### Number类型\n\n- 浮点数值\n- 数值范围\n\n最小值保存在Number.MIN_VALUE ： 5e-324。 保存着**-Infinity**\n\n最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着**Infinity**。\n\n想确定一个数值是否有穷可以用`isFinite()函数`。这个函数会在最小和最大数值之间会返回 **true**。\n\n```javascript\nalert(isFinite(result));\n```\n\n- NaN（Not a Number）\n\n任何涉及NaN的操作（NaN/10）都会返回 **NaN**。\n\n还有 **NaN**与任何值都不想等，包括 **NaN**本身。\n\n实际上0除以0才会返回 **NaN**，正数除以0返回 **Infinity**，负数除以0返回 **-Infinity**。\n\n`isNaN()函数`可以确定这个函数是否**不是数值**。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。\n\n- 数值转换\n\n  三个函数\t可以 把非数值转换为数值。\n\n  - `Number()`\t       可以用于任何数据类型\t\n  - `parseInt()`         字符串转换成数值\n  - `parseFloat()`     字符串转换成数值\n\n### String类型\n\n由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（\"）或单引号（'）表示。\n\n-  字符字面量——转义序列\t\t（\\n 换行\n\n  ​\t\t\t\t\t\t\t     \\t 制表···）\n\n- 字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。\n\n```javascript\nvar lang=\"Java\";\nlang=lang+\"Script\";\n```\n\n- 转换为字符串\n  - 使用 `toString()方法` 但是null和undefined没有这个方法所以，\n  - 就使用`String()方法`\n\n### Object类型\n\n对象其实就是一组数据和功能的集合。\n\n```javascript\nvar o =new Object();\n```\n\n## 说说写JavaScript的基本规范？\n\n","slug":"前端面试题","published":1,"updated":"2017-05-07T06:57:49.000Z","photos":[],"link":"","_id":"cj6krbq4z002sg3fyl778vg5o","content":"<h1 id=\"前端面试题\"><a href=\"#前端面试题\" class=\"headerlink\" title=\"前端面试题\"></a>前端面试题</h1><p>题目来自<a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js\" target=\"_blank\" rel=\"external\">朴灵大大的github</a></p>\n<h2 id=\"介绍JavaScript的基本数据类型\"><a href=\"#介绍JavaScript的基本数据类型\" class=\"headerlink\" title=\"介绍JavaScript的基本数据类型\"></a>介绍JavaScript的基本数据类型</h2><p>JavaScript有5种简单数据类型： <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>。还有一种复杂数据类型<code>Object</code>。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>用<code>typeof</code>操作符能检测给定变量的数据类型。（括号中是自己的理解意思）</p>\n<ul>\n<li>“undefined”      ————这个值没有被定义。（这个变量存在但是没有给它值）</li>\n<li>“boolean”       ————这个值是布尔值。（这个值有true或false输出）</li>\n<li>“string”             ————这个值是字符串。（字符串或字符序列）</li>\n<li>“number”        ————这个值是数值。（字面意思）</li>\n<li>“object”          ————这个值是对象或null。(这个值可能是个对象或者空)</li>\n<li>“function”       ————这个值是函数。(字面意思)</li>\n</ul>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message=<span class=\"string\">\"wa\"</span>;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> wa);\t<span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>使用var声明变量但没有给它加以初始化，这个变量的值就是<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);\t\t\t<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p><code>null</code>表示一个空对象指针，但是用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code>的原因是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> car =<span class=\"literal\">null</span>;</div><div class=\"line\">alert(<span class=\"string\">\"typeof car\"</span>);\t\t\t<span class=\"comment\">//\"object\"</span></div></pre></td></tr></table></figure>\n<p>只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存<code>null</code>值。这样有助于进一步区分<code>null</code>和<code>undefined</code>。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>这个字母值就是<code>true</code>、<code>false</code>。但是这两个值和数字不是一回事情。所以 <strong>true</strong>不一定等于 <strong>1</strong> ， <strong>false</strong>不一定等于 <strong>0</strong> 。</p>\n<p>还有布尔值是区分大小的 <strong>True</strong>和 <strong>False</strong>都不是 <strong>Boolean值</strong>。</p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><ul>\n<li>浮点数值</li>\n<li>数值范围</li>\n</ul>\n<p>最小值保存在Number.MIN_VALUE ： 5e-324。 保存着<strong>-Infinity</strong></p>\n<p>最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着<strong>Infinity</strong>。</p>\n<p>想确定一个数值是否有穷可以用<code>isFinite()函数</code>。这个函数会在最小和最大数值之间会返回 <strong>true</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));</div></pre></td></tr></table></figure>\n<ul>\n<li>NaN（Not a Number）</li>\n</ul>\n<p>任何涉及NaN的操作（NaN/10）都会返回 <strong>NaN</strong>。</p>\n<p>还有 <strong>NaN</strong>与任何值都不想等，包括 <strong>NaN</strong>本身。</p>\n<p>实际上0除以0才会返回 <strong>NaN</strong>，正数除以0返回 <strong>Infinity</strong>，负数除以0返回 <strong>-Infinity</strong>。</p>\n<p><code>isNaN()函数</code>可以确定这个函数是否<strong>不是数值</strong>。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。</p>\n<ul>\n<li><p>数值转换</p>\n<p>三个函数    可以 把非数值转换为数值。</p>\n<ul>\n<li><code>Number()</code>           可以用于任何数据类型    </li>\n<li><code>parseInt()</code>         字符串转换成数值</li>\n<li><code>parseFloat()</code>     字符串转换成数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（”）或单引号（’）表示。</p>\n<ul>\n<li><p>字符字面量——转义序列        （\\n 换行</p>\n<p>​                                 \\t 制表···）</p>\n</li>\n<li><p>字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lang=<span class=\"string\">\"Java\"</span>;</div><div class=\"line\">lang=lang+<span class=\"string\">\"Script\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>转换为字符串<ul>\n<li>使用 <code>toString()方法</code> 但是null和undefined没有这个方法所以，</li>\n<li>就使用<code>String()方法</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象其实就是一组数据和功能的集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<h2 id=\"说说写JavaScript的基本规范？\"><a href=\"#说说写JavaScript的基本规范？\" class=\"headerlink\" title=\"说说写JavaScript的基本规范？\"></a>说说写JavaScript的基本规范？</h2>","site":{"data":{}},"excerpt":"<h1 id=\"前端面试题\"><a href=\"#前端面试题\" class=\"headerlink\" title=\"前端面试题\"></a>前端面试题</h1><p>题目来自<a href=\"https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question#js\" target=\"_blank\" rel=\"external\">朴灵大大的github</a></p>\n<h2 id=\"介绍JavaScript的基本数据类型\"><a href=\"#介绍JavaScript的基本数据类型\" class=\"headerlink\" title=\"介绍JavaScript的基本数据类型\"></a>介绍JavaScript的基本数据类型</h2><p>JavaScript有5种简单数据类型： <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>。还有一种复杂数据类型<code>Object</code>。</p>\n<h3 id=\"typeof操作符\"><a href=\"#typeof操作符\" class=\"headerlink\" title=\"typeof操作符\"></a>typeof操作符</h3><p>用<code>typeof</code>操作符能检测给定变量的数据类型。（括号中是自己的理解意思）</p>\n<ul>\n<li>“undefined”      ————这个值没有被定义。（这个变量存在但是没有给它值）</li>\n<li>“boolean”       ————这个值是布尔值。（这个值有true或false输出）</li>\n<li>“string”             ————这个值是字符串。（字符串或字符序列）</li>\n<li>“number”        ————这个值是数值。（字面意思）</li>\n<li>“object”          ————这个值是对象或null。(这个值可能是个对象或者空)</li>\n<li>“function”       ————这个值是函数。(字面意思)</li>\n</ul>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message=<span class=\"string\">\"wa\"</span>;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> wa);\t<span class=\"comment\">//string</span></div></pre></td></tr></table></figure>\n<h3 id=\"Undefined类型\"><a href=\"#Undefined类型\" class=\"headerlink\" title=\"Undefined类型\"></a>Undefined类型</h3><p>使用var声明变量但没有给它加以初始化，这个变量的值就是<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> message;</div><div class=\"line\">alert(message == <span class=\"literal\">undefined</span>);\t\t\t<span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<h3 id=\"Null类型\"><a href=\"#Null类型\" class=\"headerlink\" title=\"Null类型\"></a>Null类型</h3><p><code>null</code>表示一个空对象指针，但是用<code>typeof</code>操作符检测<code>null</code>会返回<code>object</code>的原因是什么？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> car =<span class=\"literal\">null</span>;</div><div class=\"line\">alert(<span class=\"string\">\"typeof car\"</span>);\t\t\t<span class=\"comment\">//\"object\"</span></div></pre></td></tr></table></figure>\n<p>只要意在保存对象的变量还没有真正的保存对象，就应该明确地让该变量保存<code>null</code>值。这样有助于进一步区分<code>null</code>和<code>undefined</code>。</p>\n<h3 id=\"Boolean类型\"><a href=\"#Boolean类型\" class=\"headerlink\" title=\"Boolean类型\"></a>Boolean类型</h3><p>这个字母值就是<code>true</code>、<code>false</code>。但是这两个值和数字不是一回事情。所以 <strong>true</strong>不一定等于 <strong>1</strong> ， <strong>false</strong>不一定等于 <strong>0</strong> 。</p>\n<p>还有布尔值是区分大小的 <strong>True</strong>和 <strong>False</strong>都不是 <strong>Boolean值</strong>。</p>\n<h3 id=\"Number类型\"><a href=\"#Number类型\" class=\"headerlink\" title=\"Number类型\"></a>Number类型</h3><ul>\n<li>浮点数值</li>\n<li>数值范围</li>\n</ul>\n<p>最小值保存在Number.MIN_VALUE ： 5e-324。 保存着<strong>-Infinity</strong></p>\n<p>最大值保存在Number.MAX_VALUE :   1.796931348623157e+308。保存着<strong>Infinity</strong>。</p>\n<p>想确定一个数值是否有穷可以用<code>isFinite()函数</code>。这个函数会在最小和最大数值之间会返回 <strong>true</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"built_in\">isFinite</span>(result));</div></pre></td></tr></table></figure>\n<ul>\n<li>NaN（Not a Number）</li>\n</ul>\n<p>任何涉及NaN的操作（NaN/10）都会返回 <strong>NaN</strong>。</p>\n<p>还有 <strong>NaN</strong>与任何值都不想等，包括 <strong>NaN</strong>本身。</p>\n<p>实际上0除以0才会返回 <strong>NaN</strong>，正数除以0返回 <strong>Infinity</strong>，负数除以0返回 <strong>-Infinity</strong>。</p>\n<p><code>isNaN()函数</code>可以确定这个函数是否<strong>不是数值</strong>。这个函数在收到一个值后会去尝试将转换为数值。不能被转换就返回true。</p>\n<ul>\n<li><p>数值转换</p>\n<p>三个函数    可以 把非数值转换为数值。</p>\n<ul>\n<li><code>Number()</code>           可以用于任何数据类型    </li>\n<li><code>parseInt()</code>         字符串转换成数值</li>\n<li><code>parseFloat()</code>     字符串转换成数值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><p>由零或多个16位Unicode字符组成的字符序列，即字符串。字符串可以用双引号（”）或单引号（’）表示。</p>\n<ul>\n<li><p>字符字面量——转义序列        （\\n 换行</p>\n<p>​                                 \\t 制表···）</p>\n</li>\n<li><p>字符串的特点——字符串是不可改变的。一旦创建，它们的值就不能改变。要改变就要先摧毁。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> lang=<span class=\"string\">\"Java\"</span>;</div><div class=\"line\">lang=lang+<span class=\"string\">\"Script\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>转换为字符串<ul>\n<li>使用 <code>toString()方法</code> 但是null和undefined没有这个方法所以，</li>\n<li>就使用<code>String()方法</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Object类型\"><a href=\"#Object类型\" class=\"headerlink\" title=\"Object类型\"></a>Object类型</h3><p>对象其实就是一组数据和功能的集合。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o =<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div></pre></td></tr></table></figure>\n<h2 id=\"说说写JavaScript的基本规范？\"><a href=\"#说说写JavaScript的基本规范？\" class=\"headerlink\" title=\"说说写JavaScript的基本规范？\"></a>说说写JavaScript的基本规范？</h2>"},{"title":"异步操作","date":"2017-08-01T11:35:44.000Z","comments":1,"layout":"post","_content":"\n# 异步操作\n\n# 回调函数\n\nJavaScript 语言对异步编程的实现，就是回调函数。**所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。**它的英语名字 callback，直译过来就是\"重新调用\"。\n\n读取文件进行处理，是这样写的:\n\n> ```JavaScript\n> fs.readFile('/etc/passwd', function (err, data) {\n>   if (err) throw err;\n>   console.log(data);\n> });\n> ```\n\n<!--more-->\n\n上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。\n\n为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？\n\n设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。\n\n```JavaScript\nfs.readFile(filePath, function(err, data) {  \n    if (err) {\n        //handle the error\n    }\n    // use the data object\n});\n```\n\n> 原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。\n\n## 那么我们可以用Promise来解决\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。\n\n> ```javascript\n> fs.readFile(fileA, function (err, data) {\n>   fs.readFile(fileB, function (err, data) {\n>     // ...\n>   });\n> });\n> ```\n\n如果依次读取多个文件，就会出现多重嵌套。代码就横向发展\n\nPromise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。\n\n> ```javascript\n> var readFile = require('fs-readfile-promise');\n>\n> readFile(fileA)\n> .then(function(data){\n>   console.log(data.toString());\n> })\n> .then(function(){\n>   return readFile(fileB);\n> })\n> .then(function(data){\n>   console.log(data.toString());\n> })\n> .catch(function(err) {\n>   console.log(err);\n> });\n> ```\n\n我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。\n\n## 那么我们就要用到Generator函数\n\n我们可以这样去理解协程:\n\n```\ndota2游戏开始了,你开始操刀祈求者--卡尔.\n这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.\n你游戏才玩到一半,但是又不得不去执行你老妈的指令.\n没办法,你只好敲击F12选择了暂停游戏.\n紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.\n你开始了自己的3杀/4杀/5杀之旅,很舒服.\n```\n\n> - 协程A(游戏开始)开始执行\n> - 协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)\n> - (收好后)协程B交还执行权\n> - 协程A(敲击F12游戏继续)恢复执行\n\n用代码来说:\n\n```javascript\nfunction play(){\n  //...\n  var f = yield dota2;\n  //...\n}\n```\n\n上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。\n\n# Generator函数概念\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n> ```JavaScript\n> function* gen(x){\n>   var y = yield x + 2;\n>   return y;\n> }\n> ```\n\n其他的概念可以看我上篇[Generator函数概念](http://adherentman.cn/Generator.html)\n\n# Thunk 函数\n\n编译器的\"传名调用\"实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。\n\n> ```JavaScript\n> function f(m){\n>   return m * 2;     \n> }\n>\n> f(x + 5);\n>\n> // 等同于\n>\n> var thunk = function () {\n>   return x + 5;\n> };\n>\n> function f(thunk){\n>   return thunk() * 2;\n> }\n> ```\n\n上面代码中，函数 f 的参数 被thunk函数替换了.\n\n**这就是 Thunk 函数的定义，它是\"传名调用\"的一种实现策略，用来替换某个表达式。**\n\n# 终极武器----Async函数\n\n**异步编程的最高境界，就是根本不用关心它是不是异步。**\n\nasync 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。\n\n**所谓async函数，其实是Generator函数的语法糖。**\n\n前文有一个 Generator 函数，依次读取两个文件。\n\n> ```JavaScript\n> var fs = require('fs');\n>\n> var readFile = function (fileName){\n>   return new Promise(function (resolve, reject){\n>     fs.readFile(fileName, function(error, data){\n>       if (error) reject(error);\n>       resolve(data);\n>     });\n>   });\n> };\n>\n> var gen = function* (){\n>   var f1 = yield readFile('/etc/fstab');\n>   var f2 = yield readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n写成 async 函数，就是下面这样。\n\n> ```JavaScript\n> var asyncReadFile = async function (){\n>   var f1 = await readFile('/etc/fstab');\n>   var f2 = await readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。\n\n## async 函数的优点\n\nasync 函数对 Generator 函数的改进，体现在以下三点。\n\n**（1）内置执行器。** Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n\n> ```JavaScript\n> var result = asyncReadFile();\n> ```\n\n **(2)** 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.\n\n**（3）更好的语义。** async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n**（4）更广的适用性。** co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n**(5）**返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。\n\n## 实现原理\n\n`async`函数的实现就是将`Generator`函数和自动执行器包装在一个函数中。如下代码：\n\n```JavaScript\nasync function fn(args) {\n    // ...\n}\n\n// 等同于 \nfunction fn(args) {\n  return spawn(function*() {\n    // ...\n  })\n}\n// 自动执行器\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF()\n      } catch(e) {\n        return reject(e)\n      }\n      if (next.done) {\n        return resolve(next.value)\n      }\n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v) })\n      },function(e) {\n        step(function() { return gen.throw(e) })\n      })\n    }\n    step(function() { return gen.next(undefined) })\n  })\n}\n```\n\n## async函数用法\n\n（1）`async`函数返回一个`Promise`对象，可以是`then()`方法添加回调函数。\n（2）当函数执行时，一旦遇到`await()`就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个延迟输出结果的例子：\n\n```JavaScript\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms)\n  console.log(value)\n}\n\n// 延迟500ms后输出 \"Hello World!\"\nasyncPrint('Hello World!', 500)\n```\n\n## Async 后面是一个promise，await 后面也要跟一个promise\n\n## 注意事项\n\n（1）`await`命令后面的`Promise`对象，运行结果可能是`reject`，所以最好把`await`命令放在`try...catch`代码块中。\n\n（2）`await`命令只能用在`async`函数中，用在普通函数中会报错。\n\n（3）`ES6`将`await`增加为保留字。如果使用这个词作为标识符，在`ES5`中是合法的，但是`ES6`会抛出 `SyntaxError`（语法错误）。\n\n# 参考\n\n阮一峰 《ES6标准入门》","source":"_posts/异步.md","raw":"---\ntitle: 异步操作\ndate: 2017-08-01 19：45\ncomments: true\nlayout: post\ntags: [JavaScript,node.js]\ncategories: Javascript修仙之路\n---\n\n# 异步操作\n\n# 回调函数\n\nJavaScript 语言对异步编程的实现，就是回调函数。**所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。**它的英语名字 callback，直译过来就是\"重新调用\"。\n\n读取文件进行处理，是这样写的:\n\n> ```JavaScript\n> fs.readFile('/etc/passwd', function (err, data) {\n>   if (err) throw err;\n>   console.log(data);\n> });\n> ```\n\n<!--more-->\n\n上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。\n\n为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？\n\n设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。\n\n```JavaScript\nfs.readFile(filePath, function(err, data) {  \n    if (err) {\n        //handle the error\n    }\n    // use the data object\n});\n```\n\n> 原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。\n\n## 那么我们可以用Promise来解决\n\n回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。\n\n> ```javascript\n> fs.readFile(fileA, function (err, data) {\n>   fs.readFile(fileB, function (err, data) {\n>     // ...\n>   });\n> });\n> ```\n\n如果依次读取多个文件，就会出现多重嵌套。代码就横向发展\n\nPromise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。\n\n> ```javascript\n> var readFile = require('fs-readfile-promise');\n>\n> readFile(fileA)\n> .then(function(data){\n>   console.log(data.toString());\n> })\n> .then(function(){\n>   return readFile(fileB);\n> })\n> .then(function(data){\n>   console.log(data.toString());\n> })\n> .catch(function(err) {\n>   console.log(err);\n> });\n> ```\n\n我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。\n\n## 那么我们就要用到Generator函数\n\n我们可以这样去理解协程:\n\n```\ndota2游戏开始了,你开始操刀祈求者--卡尔.\n这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.\n你游戏才玩到一半,但是又不得不去执行你老妈的指令.\n没办法,你只好敲击F12选择了暂停游戏.\n紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.\n你开始了自己的3杀/4杀/5杀之旅,很舒服.\n```\n\n> - 协程A(游戏开始)开始执行\n> - 协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)\n> - (收好后)协程B交还执行权\n> - 协程A(敲击F12游戏继续)恢复执行\n\n用代码来说:\n\n```javascript\nfunction play(){\n  //...\n  var f = yield dota2;\n  //...\n}\n```\n\n上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。\n\n# Generator函数概念\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。\n\n> ```JavaScript\n> function* gen(x){\n>   var y = yield x + 2;\n>   return y;\n> }\n> ```\n\n其他的概念可以看我上篇[Generator函数概念](http://adherentman.cn/Generator.html)\n\n# Thunk 函数\n\n编译器的\"传名调用\"实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。\n\n> ```JavaScript\n> function f(m){\n>   return m * 2;     \n> }\n>\n> f(x + 5);\n>\n> // 等同于\n>\n> var thunk = function () {\n>   return x + 5;\n> };\n>\n> function f(thunk){\n>   return thunk() * 2;\n> }\n> ```\n\n上面代码中，函数 f 的参数 被thunk函数替换了.\n\n**这就是 Thunk 函数的定义，它是\"传名调用\"的一种实现策略，用来替换某个表达式。**\n\n# 终极武器----Async函数\n\n**异步编程的最高境界，就是根本不用关心它是不是异步。**\n\nasync 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。\n\n**所谓async函数，其实是Generator函数的语法糖。**\n\n前文有一个 Generator 函数，依次读取两个文件。\n\n> ```JavaScript\n> var fs = require('fs');\n>\n> var readFile = function (fileName){\n>   return new Promise(function (resolve, reject){\n>     fs.readFile(fileName, function(error, data){\n>       if (error) reject(error);\n>       resolve(data);\n>     });\n>   });\n> };\n>\n> var gen = function* (){\n>   var f1 = yield readFile('/etc/fstab');\n>   var f2 = yield readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n写成 async 函数，就是下面这样。\n\n> ```JavaScript\n> var asyncReadFile = async function (){\n>   var f1 = await readFile('/etc/fstab');\n>   var f2 = await readFile('/etc/shells');\n>   console.log(f1.toString());\n>   console.log(f2.toString());\n> };\n> ```\n\n一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。\n\n## async 函数的优点\n\nasync 函数对 Generator 函数的改进，体现在以下三点。\n\n**（1）内置执行器。** Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。\n\n> ```JavaScript\n> var result = asyncReadFile();\n> ```\n\n **(2)** 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.\n\n**（3）更好的语义。** async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。\n\n**（4）更广的适用性。** co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。\n\n**(5）**返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。\n\n## 实现原理\n\n`async`函数的实现就是将`Generator`函数和自动执行器包装在一个函数中。如下代码：\n\n```JavaScript\nasync function fn(args) {\n    // ...\n}\n\n// 等同于 \nfunction fn(args) {\n  return spawn(function*() {\n    // ...\n  })\n}\n// 自动执行器\nfunction spawn(genF) {\n  return new Promise(function(resolve, reject) {\n    var gen = genF();\n    function step(nextF) {\n      try {\n        var next = nextF()\n      } catch(e) {\n        return reject(e)\n      }\n      if (next.done) {\n        return resolve(next.value)\n      }\n      Promise.resolve(next.value).then(function(v) {\n        step(function() { return gen.next(v) })\n      },function(e) {\n        step(function() { return gen.throw(e) })\n      })\n    }\n    step(function() { return gen.next(undefined) })\n  })\n}\n```\n\n## async函数用法\n\n（1）`async`函数返回一个`Promise`对象，可以是`then()`方法添加回调函数。\n（2）当函数执行时，一旦遇到`await()`就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。\n\n下面是一个延迟输出结果的例子：\n\n```JavaScript\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms)\n  console.log(value)\n}\n\n// 延迟500ms后输出 \"Hello World!\"\nasyncPrint('Hello World!', 500)\n```\n\n## Async 后面是一个promise，await 后面也要跟一个promise\n\n## 注意事项\n\n（1）`await`命令后面的`Promise`对象，运行结果可能是`reject`，所以最好把`await`命令放在`try...catch`代码块中。\n\n（2）`await`命令只能用在`async`函数中，用在普通函数中会报错。\n\n（3）`ES6`将`await`增加为保留字。如果使用这个词作为标识符，在`ES5`中是合法的，但是`ES6`会抛出 `SyntaxError`（语法错误）。\n\n# 参考\n\n阮一峰 《ES6标准入门》","slug":"异步","published":1,"updated":"2017-08-18T15:00:54.000Z","photos":[],"link":"","_id":"cj6krbq51002wg3fy42qcox47","content":"<h1 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h1><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong>它的英语名字 callback，直译过来就是”重新调用”。</p>\n<p>读取文件进行处理，是这样写的:</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; fs.readFile(<span class=\"string\">'/etc/passwd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<a id=\"more\"></a>\n<p>上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。</p>\n<p>为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？</p>\n<p>设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"comment\">//handle the error</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// use the data object</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。</p>\n</blockquote>\n<h2 id=\"那么我们可以用Promise来解决\"><a href=\"#那么我们可以用Promise来解决\" class=\"headerlink\" title=\"那么我们可以用Promise来解决\"></a>那么我们可以用Promise来解决</h2><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; fs.readFile(fileA, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;   fs.readFile(fileB, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// ...</span></div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果依次读取多个文件，就会出现多重嵌套。代码就横向发展</p>\n<p>Promise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> readFile = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-readfile-promise'</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; readFile(fileA)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> readFile(fileB);</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。</p>\n<h2 id=\"那么我们就要用到Generator函数\"><a href=\"#那么我们就要用到Generator函数\" class=\"headerlink\" title=\"那么我们就要用到Generator函数\"></a>那么我们就要用到Generator函数</h2><p>我们可以这样去理解协程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dota2游戏开始了,你开始操刀祈求者--卡尔.</div><div class=\"line\">这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.</div><div class=\"line\">你游戏才玩到一半,但是又不得不去执行你老妈的指令.</div><div class=\"line\">没办法,你只好敲击F12选择了暂停游戏.</div><div class=\"line\">紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.</div><div class=\"line\">你开始了自己的3杀/4杀/5杀之旅,很舒服.</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>协程A(游戏开始)开始执行</li>\n<li>协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)</li>\n<li>(收好后)协程B交还执行权</li>\n<li>协程A(敲击F12游戏继续)恢复执行</li>\n</ul>\n</blockquote>\n<p>用代码来说:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"keyword\">yield</span> dota2;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。</p>\n<h1 id=\"Generator函数概念\"><a href=\"#Generator函数概念\" class=\"headerlink\" title=\"Generator函数概念\"></a>Generator函数概念</h1><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> y;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>其他的概念可以看我上篇<a href=\"http://adherentman.cn/Generator.html\">Generator函数概念</a></p>\n<h1 id=\"Thunk-函数\"><a href=\"#Thunk-函数\" class=\"headerlink\" title=\"Thunk 函数\"></a>Thunk 函数</h1><p>编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;     </div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; f(x + <span class=\"number\">5</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// 等同于</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">thunk</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> thunk() * <span class=\"number\">2</span>;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，函数 f 的参数 被thunk函数替换了.</p>\n<p><strong>这就是 Thunk 函数的定义，它是”传名调用”的一种实现策略，用来替换某个表达式。</strong></p>\n<h1 id=\"终极武器—-Async函数\"><a href=\"#终极武器—-Async函数\" class=\"headerlink\" title=\"终极武器—-Async函数\"></a>终极武器—-Async函数</h1><p><strong>异步编程的最高境界，就是根本不用关心它是不是异步。</strong></p>\n<p>async 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。</p>\n<p><strong>所谓async函数，其实是Generator函数的语法糖。</strong></p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">&gt;     fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">&gt;       resolve(data);</div><div class=\"line\">&gt;     &#125;);</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>写成 async 函数，就是下面这样。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p>\n<h2 id=\"async-函数的优点\"><a href=\"#async-函数的优点\" class=\"headerlink\" title=\"async 函数的优点\"></a>async 函数的优点</h2><p>async 函数对 Generator 函数的改进，体现在以下三点。</p>\n<p><strong>（1）内置执行器。</strong> Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> result = asyncReadFile();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p> <strong>(2)</strong> 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.</p>\n<p><strong>（3）更好的语义。</strong> async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>\n<p><strong>（4）更广的适用性。</strong> co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<p><strong>(5）</strong>返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><code>async</code>函数的实现就是将<code>Generator</code>函数和自动执行器包装在一个函数中。如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 自动执行器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> next = nextF()</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> reject(e)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (next.done) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v) &#125;)</div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e) &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>) &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h2><p>（1）<code>async</code>函数返回一个<code>Promise</code>对象，可以是<code>then()</code>方法添加回调函数。<br>（2）当函数执行时，一旦遇到<code>await()</code>就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>\n<p>下面是一个延迟输出结果的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, ms)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> timeout(ms)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 延迟500ms后输出 \"Hello World!\"</span></div><div class=\"line\">asyncPrint(<span class=\"string\">'Hello World!'</span>, <span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Async-后面是一个promise，await-后面也要跟一个promise\"><a href=\"#Async-后面是一个promise，await-后面也要跟一个promise\" class=\"headerlink\" title=\"Async 后面是一个promise，await 后面也要跟一个promise\"></a>Async 后面是一个promise，await 后面也要跟一个promise</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>reject</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p>\n<p>（2）<code>await</code>命令只能用在<code>async</code>函数中，用在普通函数中会报错。</p>\n<p>（3）<code>ES6</code>将<code>await</code>增加为保留字。如果使用这个词作为标识符，在<code>ES5</code>中是合法的，但是<code>ES6</code>会抛出 <code>SyntaxError</code>（语法错误）。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>阮一峰 《ES6标准入门》</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"异步操作\"><a href=\"#异步操作\" class=\"headerlink\" title=\"异步操作\"></a>异步操作</h1><h1 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h1><p>JavaScript 语言对异步编程的实现，就是回调函数。<strong>所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</strong>它的英语名字 callback，直译过来就是”重新调用”。</p>\n<p>读取文件进行处理，是这样写的:</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; fs.readFile(<span class=\"string\">'/etc/passwd'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>","more":"<p>上面代码中，readFile 函数的第二个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了 /etc/passwd 这个文件以后，回调函数才会执行。</p>\n<p>为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err？</p>\n<p>设计一个回调函数的时候，第一个参数是err，用于优先解决错误，后面再传递参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(filePath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"comment\">//handle the error</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// use the data object</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。</p>\n</blockquote>\n<h2 id=\"那么我们可以用Promise来解决\"><a href=\"#那么我们可以用Promise来解决\" class=\"headerlink\" title=\"那么我们可以用Promise来解决\"></a>那么我们可以用Promise来解决</h2><p>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; fs.readFile(fileA, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;   fs.readFile(fileB, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">&gt;     <span class=\"comment\">// ...</span></div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果依次读取多个文件，就会出现多重嵌套。代码就横向发展</p>\n<p>Promise就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。写法如下。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> readFile = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-readfile-promise'</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; readFile(fileA)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> readFile(fileB);</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">&gt; &#125;)</div><div class=\"line\">&gt; .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">&gt; &#125;);</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>我们会发现一眼看去都是一堆 then，原来的语义变得很不清楚。</p>\n<h2 id=\"那么我们就要用到Generator函数\"><a href=\"#那么我们就要用到Generator函数\" class=\"headerlink\" title=\"那么我们就要用到Generator函数\"></a>那么我们就要用到Generator函数</h2><p>我们可以这样去理解协程:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">dota2游戏开始了,你开始操刀祈求者--卡尔.</div><div class=\"line\">这时你妈妈打电话让你赶紧把楼顶的被子和衣服收一下,这时候你很着急.</div><div class=\"line\">你游戏才玩到一半,但是又不得不去执行你老妈的指令.</div><div class=\"line\">没办法,你只好敲击F12选择了暂停游戏.</div><div class=\"line\">紧接着你把被子和衣服收好了,再次敲击F12游戏继续开始.</div><div class=\"line\">你开始了自己的3杀/4杀/5杀之旅,很舒服.</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>协程A(游戏开始)开始执行</li>\n<li>协程A执行到一半,暂停(敲击F12游戏暂停),执行权交给了协程B(收被子,衣服)</li>\n<li>(收好后)协程B交还执行权</li>\n<li>协程A(敲击F12游戏继续)恢复执行</li>\n</ul>\n</blockquote>\n<p>用代码来说:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">  <span class=\"keyword\">var</span> f = <span class=\"keyword\">yield</span> dota2;</div><div class=\"line\">  <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。</p>\n<h1 id=\"Generator函数概念\"><a href=\"#Generator函数概念\" class=\"headerlink\" title=\"Generator函数概念\"></a>Generator函数概念</h1><p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> y = <span class=\"keyword\">yield</span> x + <span class=\"number\">2</span>;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> y;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>其他的概念可以看我上篇<a href=\"http://adherentman.cn/Generator.html\">Generator函数概念</a></p>\n<h1 id=\"Thunk-函数\"><a href=\"#Thunk-函数\" class=\"headerlink\" title=\"Thunk 函数\"></a>Thunk 函数</h1><p>编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> m * <span class=\"number\">2</span>;     </div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; f(x + <span class=\"number\">5</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"comment\">// 等同于</span></div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> thunk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> x + <span class=\"number\">5</span>;</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">thunk</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> thunk() * <span class=\"number\">2</span>;</div><div class=\"line\">&gt; &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面代码中，函数 f 的参数 被thunk函数替换了.</p>\n<p><strong>这就是 Thunk 函数的定义，它是”传名调用”的一种实现策略，用来替换某个表达式。</strong></p>\n<h1 id=\"终极武器—-Async函数\"><a href=\"#终极武器—-Async函数\" class=\"headerlink\" title=\"终极武器—-Async函数\"></a>终极武器—-Async函数</h1><p><strong>异步编程的最高境界，就是根本不用关心它是不是异步。</strong></p>\n<p>async 函数就是隧道尽头的亮光，很多人认为它是异步操作的终极解决方案。</p>\n<p><strong>所谓async函数，其实是Generator函数的语法糖。</strong></p>\n<p>前文有一个 Generator 函数，依次读取两个文件。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)</span>&#123;</div><div class=\"line\">&gt;     fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>)</span>&#123;</div><div class=\"line\">&gt;       <span class=\"keyword\">if</span> (error) reject(error);</div><div class=\"line\">&gt;       resolve(data);</div><div class=\"line\">&gt;     &#125;);</div><div class=\"line\">&gt;   &#125;);</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt; <span class=\"keyword\">var</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>写成 async 函数，就是下面这样。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</div><div class=\"line\">&gt;   <span class=\"keyword\">var</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f1.toString());</div><div class=\"line\">&gt;   <span class=\"built_in\">console</span>.log(f2.toString());</div><div class=\"line\">&gt; &#125;;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p>\n<h2 id=\"async-函数的优点\"><a href=\"#async-函数的优点\" class=\"headerlink\" title=\"async 函数的优点\"></a>async 函数的优点</h2><p>async 函数对 Generator 函数的改进，体现在以下三点。</p>\n<p><strong>（1）内置执行器。</strong> Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; <span class=\"keyword\">var</span> result = asyncReadFile();</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p> <strong>(2)</strong> 上面的代码调用了asyncReadFile函数,然后他就会自动执行,输出最后的结果.完全不像Generator函数,需要调用next方法,或者co模块,才能得到真正的执行,从而得到最终结果.</p>\n<p><strong>（3）更好的语义。</strong> async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p>\n<p><strong>（4）更广的适用性。</strong> co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p>\n<p><strong>(5）</strong>返回值是Promise，这比Generator函数返回的是Iterator对象方便多了。你可以用then()指定下一步操作。</p>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><code>async</code>函数的实现就是将<code>Generator</code>函数和自动执行器包装在一个函数中。如下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 等同于 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> spawn(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 自动执行器</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spawn</span>(<span class=\"params\">genF</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gen = genF();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextF</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> next = nextF()</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> reject(e)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (next.done) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> resolve(next.value)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">Promise</span>.resolve(next.value).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>) </span>&#123;</div><div class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(v) &#125;)</div><div class=\"line\">      &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.throw(e) &#125;)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    step(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> gen.next(<span class=\"literal\">undefined</span>) &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"async函数用法\"><a href=\"#async函数用法\" class=\"headerlink\" title=\"async函数用法\"></a>async函数用法</h2><p>（1）<code>async</code>函数返回一个<code>Promise</code>对象，可以是<code>then()</code>方法添加回调函数。<br>（2）当函数执行时，一旦遇到<code>await()</code>就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p>\n<p>下面是一个延迟输出结果的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">    setTimeout(resolve, ms)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncPrint</span>(<span class=\"params\">value, ms</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">await</span> timeout(ms)</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(value)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 延迟500ms后输出 \"Hello World!\"</span></div><div class=\"line\">asyncPrint(<span class=\"string\">'Hello World!'</span>, <span class=\"number\">500</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"Async-后面是一个promise，await-后面也要跟一个promise\"><a href=\"#Async-后面是一个promise，await-后面也要跟一个promise\" class=\"headerlink\" title=\"Async 后面是一个promise，await 后面也要跟一个promise\"></a>Async 后面是一个promise，await 后面也要跟一个promise</h2><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>（1）<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>reject</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p>\n<p>（2）<code>await</code>命令只能用在<code>async</code>函数中，用在普通函数中会报错。</p>\n<p>（3）<code>ES6</code>将<code>await</code>增加为保留字。如果使用这个词作为标识符，在<code>ES5</code>中是合法的，但是<code>ES6</code>会抛出 <code>SyntaxError</code>（语法错误）。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>阮一峰 《ES6标准入门》</p>"},{"title":"多说挂了好久。现在换成来必力","date":"2017-07-23T01:30:55.000Z","comments":1,"layout":"post","_content":"\n# 多说已挂，将评论迁移到来必力\n\n有很多可替代的方案\n\n- [网易云跟帖](https://gentie.163.com/info.html)\n- [畅言](http://changyan.kuaizhan.com/)\n- [友言](http://www.uyan.cc/)\n- [Disqus](www.disqus.com)\n- [来必力](https://livere.com/)\n\n<!--more-->\n\n还有许多评论功能就不一一举例了.\n\n## 具体说下该如何迁移\n\n因为我是hexo搭建的博客，然后我用的主题是next。\n\n打开`来必力`官网，注册完毕。\n\n登陆后我们来到管理页面。\n\n之后再点击代码管理，我们将会看见一堆代码。\n\n![laibili](/images/laibili.png)\n\n我们在代码中找到data-uid：“xxxxxxxxxx”。\n\n这段将是我们要用的uid。\n\n打开主题文件下的`_config.yml`我们\n\n`livere_uid: #your livere_uid`\n\n![pinglun](/images/pinglun.png)\n\n之后`hexo clean && hexo g -d`即可","source":"_posts/评论功能迁移.md","raw":"---\ntitle: 多说挂了好久。现在换成来必力\ndate: 2017-07-23 9:30:55\ncomments: true\nlayout: post\ntags: [hexo,git]\ncategories: Technology\n---\n\n# 多说已挂，将评论迁移到来必力\n\n有很多可替代的方案\n\n- [网易云跟帖](https://gentie.163.com/info.html)\n- [畅言](http://changyan.kuaizhan.com/)\n- [友言](http://www.uyan.cc/)\n- [Disqus](www.disqus.com)\n- [来必力](https://livere.com/)\n\n<!--more-->\n\n还有许多评论功能就不一一举例了.\n\n## 具体说下该如何迁移\n\n因为我是hexo搭建的博客，然后我用的主题是next。\n\n打开`来必力`官网，注册完毕。\n\n登陆后我们来到管理页面。\n\n之后再点击代码管理，我们将会看见一堆代码。\n\n![laibili](/images/laibili.png)\n\n我们在代码中找到data-uid：“xxxxxxxxxx”。\n\n这段将是我们要用的uid。\n\n打开主题文件下的`_config.yml`我们\n\n`livere_uid: #your livere_uid`\n\n![pinglun](/images/pinglun.png)\n\n之后`hexo clean && hexo g -d`即可","slug":"评论功能迁移","published":1,"updated":"2017-07-29T06:34:41.000Z","photos":[],"link":"","_id":"cj6krbq53002zg3fyrcn2uekz","content":"<h1 id=\"多说已挂，将评论迁移到来必力\"><a href=\"#多说已挂，将评论迁移到来必力\" class=\"headerlink\" title=\"多说已挂，将评论迁移到来必力\"></a>多说已挂，将评论迁移到来必力</h1><p>有很多可替代的方案</p>\n<ul>\n<li><a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖</a></li>\n<li><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"external\">畅言</a></li>\n<li><a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言</a></li>\n<li><a href=\"www.disqus.com\">Disqus</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"external\">来必力</a></li>\n</ul>\n<a id=\"more\"></a>\n<p>还有许多评论功能就不一一举例了.</p>\n<h2 id=\"具体说下该如何迁移\"><a href=\"#具体说下该如何迁移\" class=\"headerlink\" title=\"具体说下该如何迁移\"></a>具体说下该如何迁移</h2><p>因为我是hexo搭建的博客，然后我用的主题是next。</p>\n<p>打开<code>来必力</code>官网，注册完毕。</p>\n<p>登陆后我们来到管理页面。</p>\n<p>之后再点击代码管理，我们将会看见一堆代码。</p>\n<p><img src=\"/images/laibili.png\" alt=\"laibili\"></p>\n<p>我们在代码中找到data-uid：“xxxxxxxxxx”。</p>\n<p>这段将是我们要用的uid。</p>\n<p>打开主题文件下的<code>_config.yml</code>我们</p>\n<p><code>livere_uid: #your livere_uid</code></p>\n<p><img src=\"/images/pinglun.png\" alt=\"pinglun\"></p>\n<p>之后<code>hexo clean &amp;&amp; hexo g -d</code>即可</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"多说已挂，将评论迁移到来必力\"><a href=\"#多说已挂，将评论迁移到来必力\" class=\"headerlink\" title=\"多说已挂，将评论迁移到来必力\"></a>多说已挂，将评论迁移到来必力</h1><p>有很多可替代的方案</p>\n<ul>\n<li><a href=\"https://gentie.163.com/info.html\" target=\"_blank\" rel=\"external\">网易云跟帖</a></li>\n<li><a href=\"http://changyan.kuaizhan.com/\" target=\"_blank\" rel=\"external\">畅言</a></li>\n<li><a href=\"http://www.uyan.cc/\" target=\"_blank\" rel=\"external\">友言</a></li>\n<li><a href=\"www.disqus.com\">Disqus</a></li>\n<li><a href=\"https://livere.com/\" target=\"_blank\" rel=\"external\">来必力</a></li>\n</ul>","more":"<p>还有许多评论功能就不一一举例了.</p>\n<h2 id=\"具体说下该如何迁移\"><a href=\"#具体说下该如何迁移\" class=\"headerlink\" title=\"具体说下该如何迁移\"></a>具体说下该如何迁移</h2><p>因为我是hexo搭建的博客，然后我用的主题是next。</p>\n<p>打开<code>来必力</code>官网，注册完毕。</p>\n<p>登陆后我们来到管理页面。</p>\n<p>之后再点击代码管理，我们将会看见一堆代码。</p>\n<p><img src=\"/images/laibili.png\" alt=\"laibili\"></p>\n<p>我们在代码中找到data-uid：“xxxxxxxxxx”。</p>\n<p>这段将是我们要用的uid。</p>\n<p>打开主题文件下的<code>_config.yml</code>我们</p>\n<p><code>livere_uid: #your livere_uid</code></p>\n<p><img src=\"/images/pinglun.png\" alt=\"pinglun\"></p>\n<p>之后<code>hexo clean &amp;&amp; hexo g -d</code>即可</p>"},{"title":"配置SSH Key+Next主题以及个性化改动","date":"2017-03-20T13:10:55.000Z","comments":1,"layout":"post","_content":"\nGit SSH Key 生成步骤\n==\nGit是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。\n\n- 第一次使用要设置Git的user name 和email\n ```shell\n$ git config --global user.name\n ```\n \n ```shell\n $ git config --global user.email\n ```\n \n <!--more-->\n- 查看你是否已经拥有密钥\n ```shell\n $cd ~/.ssh\n ```\n 如果没有的话就不会有此文件，有的话就会备份删除掉\n \n- 生成密钥\n ```shell\n $ ssh-keygen -t rsa -C “user.email”\n ```\n 你将会遇到以下情况的处理：\n ```shell\n Generating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):  直接回车\nEnter passphrase (empty for no passphrase):               直接回车\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.  公钥\nYour public key has been saved in /root/.ssh/id_rsa.pub.  私钥\nThe key fingerprint is:\n4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53 \n ```\n就是按3次回车，密码为空！\n最后你会得到两个文件：`id_rsa`和`id_rsa.pub`\n - 把密钥加到Github或者码云或者Coding的SSH上\n ![Github](/images/github.png)\n 我们需要把`id_rsa.pub`中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。\n - 测试SSH\nGithub：\n```shell\n$ssh -T git@github.com\n```\n码云：\n```shell\n$ssh -T git@git.oschina.net\n```\nCoding:\n```shell\n$ssh -T git@coding.net\n```\n- 若返回则配置成功\ngithub:\n```shell\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\n```\n码云：`Welcome to Git@OSC, yourname!`\nCoding：`Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ] `\n那么配置好，我们就可以把Hexo部署到Git上了\n```shell\n$hexo deploy\n```\n\nHexo之Next\n==\n\n - Hexo有很多主题，有大道至简的`maupassant` 也有`casper`还有`uno`。但是我还是最喜欢[next](http://theme-next.iissnan.com/)的风格。\n \n\n安装Next\n======\n\n安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：\n```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n还有一种方法是下载稳定版本\n\n - 前往Next版本[发布页面](https://github.com/iissnan/hexo-theme-next/releases)\n - 一直下拉找到`Source code(zip)`点击即可下载\n - 之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为`next`。\n\n启用Next\n--\n\n - 你需要打开你的站点目录找到`_config.yml`这个文件，记住不是themes下next中的`_config.yml`。\n - 我们需要在站点文件`_config.yml`中`ctrl+F`打入`theme`字段，并将其值改为`next`：\n```shell\ntheme:next\n```\n\n验证主题是否生成完成\n--\n首先我们要右击你的站点然后选择`Git Bash Here`，并开启调试模式。\n```shell\n$ hexo s --debug\n```\n命令行出现：\n```shell\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n那么我们就可以在网址上输入`http://0.0.0.0:4000`去查看效果，检查站点是否正确运行。\n\nNext各种细节\n==\n\n主题设定\n--\nScheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。\n\n - Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n - Mist - Muse 的紧凑版本，整洁有序的单栏外观\n - Pisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件（theme/next下的`_config.yml`），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。\n```shell\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n```\n还有更多的小东西大家可以去[Next官方文档](https://github.com/iissnan/hexo-theme-next/releases)看。比如说\n \n - 菜单，\n - 侧栏，\n - 头像，\n - 作者昵称，\n - 站点描述，\n - 第三方服务等。\n\nNext中foot更改\n-----------\n![foot](/images/foot.jpg)我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。\n我们需要打开`next`下的`layout`接着打开`_partials`下的`footer.swig`。\n然后我们要把其中红框里的删除。\n![foot1](/images/foot1.png)\n紧接着我们回到`next`下，找到`languages`，打开`zh-Hans.yml`。\n![foot2](/images/foot2.png)\n我们可以改成如下：\n```shell\nfooter:\n  powered: \"个人专属 \"\n  theme: Adherent\n```\n看大家的想法自己随意发挥！\n好啦，我要去研究SEO了！！\n祝大家建博成功\n\n","source":"_posts/配置SSH Key+Next主题以及个性化改动.md","raw":"---\ntitle: 配置SSH Key+Next主题以及个性化改动\ndate: 2017-03-20 21:10:55\ncomments: true\nlayout: post\ntags: [hexo,git]\ncategories: Technology\n---\n\nGit SSH Key 生成步骤\n==\nGit是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。\n\n- 第一次使用要设置Git的user name 和email\n ```shell\n$ git config --global user.name\n ```\n \n ```shell\n $ git config --global user.email\n ```\n \n <!--more-->\n- 查看你是否已经拥有密钥\n ```shell\n $cd ~/.ssh\n ```\n 如果没有的话就不会有此文件，有的话就会备份删除掉\n \n- 生成密钥\n ```shell\n $ ssh-keygen -t rsa -C “user.email”\n ```\n 你将会遇到以下情况的处理：\n ```shell\n Generating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa):  直接回车\nEnter passphrase (empty for no passphrase):               直接回车\nEnter same passphrase again:\nYour identification has been saved in /root/.ssh/id_rsa.  公钥\nYour public key has been saved in /root/.ssh/id_rsa.pub.  私钥\nThe key fingerprint is:\n4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53 \n ```\n就是按3次回车，密码为空！\n最后你会得到两个文件：`id_rsa`和`id_rsa.pub`\n - 把密钥加到Github或者码云或者Coding的SSH上\n ![Github](/images/github.png)\n 我们需要把`id_rsa.pub`中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。\n - 测试SSH\nGithub：\n```shell\n$ssh -T git@github.com\n```\n码云：\n```shell\n$ssh -T git@git.oschina.net\n```\nCoding:\n```shell\n$ssh -T git@coding.net\n```\n- 若返回则配置成功\ngithub:\n```shell\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\n```\n码云：`Welcome to Git@OSC, yourname!`\nCoding：`Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ] `\n那么配置好，我们就可以把Hexo部署到Git上了\n```shell\n$hexo deploy\n```\n\nHexo之Next\n==\n\n - Hexo有很多主题，有大道至简的`maupassant` 也有`casper`还有`uno`。但是我还是最喜欢[next](http://theme-next.iissnan.com/)的风格。\n \n\n安装Next\n======\n\n安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：\n```shell\n$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n还有一种方法是下载稳定版本\n\n - 前往Next版本[发布页面](https://github.com/iissnan/hexo-theme-next/releases)\n - 一直下拉找到`Source code(zip)`点击即可下载\n - 之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为`next`。\n\n启用Next\n--\n\n - 你需要打开你的站点目录找到`_config.yml`这个文件，记住不是themes下next中的`_config.yml`。\n - 我们需要在站点文件`_config.yml`中`ctrl+F`打入`theme`字段，并将其值改为`next`：\n```shell\ntheme:next\n```\n\n验证主题是否生成完成\n--\n首先我们要右击你的站点然后选择`Git Bash Here`，并开启调试模式。\n```shell\n$ hexo s --debug\n```\n命令行出现：\n```shell\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n那么我们就可以在网址上输入`http://0.0.0.0:4000`去查看效果，检查站点是否正确运行。\n\nNext各种细节\n==\n\n主题设定\n--\nScheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。\n\n - Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n - Mist - Muse 的紧凑版本，整洁有序的单栏外观\n - Pisces - 双栏 Scheme，小家碧玉似的清新\nScheme 的切换通过更改 主题配置文件（theme/next下的`_config.yml`），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。\n```shell\n#scheme: Muse\n#scheme: Mist\nscheme: Pisces\n```\n还有更多的小东西大家可以去[Next官方文档](https://github.com/iissnan/hexo-theme-next/releases)看。比如说\n \n - 菜单，\n - 侧栏，\n - 头像，\n - 作者昵称，\n - 站点描述，\n - 第三方服务等。\n\nNext中foot更改\n-----------\n![foot](/images/foot.jpg)我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。\n我们需要打开`next`下的`layout`接着打开`_partials`下的`footer.swig`。\n然后我们要把其中红框里的删除。\n![foot1](/images/foot1.png)\n紧接着我们回到`next`下，找到`languages`，打开`zh-Hans.yml`。\n![foot2](/images/foot2.png)\n我们可以改成如下：\n```shell\nfooter:\n  powered: \"个人专属 \"\n  theme: Adherent\n```\n看大家的想法自己随意发挥！\n好啦，我要去研究SEO了！！\n祝大家建博成功\n\n","slug":"配置SSH Key+Next主题以及个性化改动","published":1,"updated":"2017-03-21T08:46:28.000Z","photos":[],"link":"","_id":"cj6krbq550033g3fywur8krhw","content":"<h1 id=\"Git-SSH-Key-生成步骤\"><a href=\"#Git-SSH-Key-生成步骤\" class=\"headerlink\" title=\"Git SSH Key 生成步骤\"></a>Git SSH Key 生成步骤</h1><p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。</p>\n<ul>\n<li>第一次使用要设置Git的user name 和email<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name</div></pre></td></tr></table></figure>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email</div></pre></td></tr></table></figure>\n <a id=\"more\"></a>\n<ul>\n<li><p>查看你是否已经拥有密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$cd ~/.ssh</div></pre></td></tr></table></figure>\n<p>如果没有的话就不会有此文件，有的话就会备份删除掉</p>\n</li>\n<li><p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C “user.email”</div></pre></td></tr></table></figure>\n<p>你将会遇到以下情况的处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa):  直接回车</div><div class=\"line\">Enter passphrase (empty for no passphrase):               直接回车</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.  公钥</div><div class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.  私钥</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就是按3次回车，密码为空！<br>最后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p>\n<ul>\n<li>把密钥加到Github或者码云或者Coding的SSH上<br><img src=\"/images/github.png\" alt=\"Github\"><br>我们需要把<code>id_rsa.pub</code>中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。</li>\n<li>测试SSH<br>Github：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@github.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@git.oschina.net</div></pre></td></tr></table></figure></p>\n<p>Coding:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@coding.net</div></pre></td></tr></table></figure></p>\n<ul>\n<li>若返回则配置成功<br>github:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</div><div class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\">Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<code>Welcome to Git@OSC, yourname!</code><br>Coding：<code>Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]</code><br>那么配置好，我们就可以把Hexo部署到Git上了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo deploy</div></pre></td></tr></table></figure></p>\n<h1 id=\"Hexo之Next\"><a href=\"#Hexo之Next\" class=\"headerlink\" title=\"Hexo之Next\"></a>Hexo之Next</h1><ul>\n<li>Hexo有很多主题，有大道至简的<code>maupassant</code> 也有<code>casper</code>还有<code>uno</code>。但是我还是最喜欢<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next</a>的风格。</li>\n</ul>\n<h1 id=\"安装Next\"><a href=\"#安装Next\" class=\"headerlink\" title=\"安装Next\"></a>安装Next</h1><p>安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd your-hexo-site</div><div class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<p>还有一种方法是下载稳定版本</p>\n<ul>\n<li>前往Next版本<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"external\">发布页面</a></li>\n<li>一直下拉找到<code>Source code(zip)</code>点击即可下载</li>\n<li>之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为<code>next</code>。</li>\n</ul>\n<h2 id=\"启用Next\"><a href=\"#启用Next\" class=\"headerlink\" title=\"启用Next\"></a>启用Next</h2><ul>\n<li>你需要打开你的站点目录找到<code>_config.yml</code>这个文件，记住不是themes下next中的<code>_config.yml</code>。</li>\n<li>我们需要在站点文件<code>_config.yml</code>中<code>ctrl+F</code>打入<code>theme</code>字段，并将其值改为<code>next</code>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme:next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"验证主题是否生成完成\"><a href=\"#验证主题是否生成完成\" class=\"headerlink\" title=\"验证主题是否生成完成\"></a>验证主题是否生成完成</h2><p>首先我们要右击你的站点然后选择<code>Git Bash Here</code>，并开启调试模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>命令行出现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>\n<p>那么我们就可以在网址上输入<code>http://0.0.0.0:4000</code>去查看效果，检查站点是否正确运行。</p>\n<h1 id=\"Next各种细节\"><a href=\"#Next各种细节\" class=\"headerlink\" title=\"Next各种细节\"></a>Next各种细节</h1><h2 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h2><p>Scheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件（theme/next下的<code>_config.yml</code>），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#scheme: Muse</div><div class=\"line\">#scheme: Mist</div><div class=\"line\">scheme: Pisces</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还有更多的小东西大家可以去<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"external\">Next官方文档</a>看。比如说</p>\n<ul>\n<li>菜单，</li>\n<li>侧栏，</li>\n<li>头像，</li>\n<li>作者昵称，</li>\n<li>站点描述，</li>\n<li>第三方服务等。</li>\n</ul>\n<h2 id=\"Next中foot更改\"><a href=\"#Next中foot更改\" class=\"headerlink\" title=\"Next中foot更改\"></a>Next中foot更改</h2><p><img src=\"/images/foot.jpg\" alt=\"foot\">我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。<br>我们需要打开<code>next</code>下的<code>layout</code>接着打开<code>_partials</code>下的<code>footer.swig</code>。<br>然后我们要把其中红框里的删除。<br><img src=\"/images/foot1.png\" alt=\"foot1\"><br>紧接着我们回到<code>next</code>下，找到<code>languages</code>，打开<code>zh-Hans.yml</code>。<br><img src=\"/images/foot2.png\" alt=\"foot2\"><br>我们可以改成如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">footer:</div><div class=\"line\">  powered: &quot;个人专属 &quot;</div><div class=\"line\">  theme: Adherent</div></pre></td></tr></table></figure></p>\n<p>看大家的想法自己随意发挥！<br>好啦，我要去研究SEO了！！<br>祝大家建博成功</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git-SSH-Key-生成步骤\"><a href=\"#Git-SSH-Key-生成步骤\" class=\"headerlink\" title=\"Git SSH Key 生成步骤\"></a>Git SSH Key 生成步骤</h1><p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。</p>\n<ul>\n<li>第一次使用要设置Git的user name 和email<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name</div></pre></td></tr></table></figure>\n</li>\n</ul>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email</div></pre></td></tr></table></figure>","more":"<ul>\n<li><p>查看你是否已经拥有密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$cd ~/.ssh</div></pre></td></tr></table></figure>\n<p>如果没有的话就不会有此文件，有的话就会备份删除掉</p>\n</li>\n<li><p>生成密钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C “user.email”</div></pre></td></tr></table></figure>\n<p>你将会遇到以下情况的处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> Generating public/private rsa key pair.</div><div class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa):  直接回车</div><div class=\"line\">Enter passphrase (empty for no passphrase):               直接回车</div><div class=\"line\">Enter same passphrase again:</div><div class=\"line\">Your identification has been saved in /root/.ssh/id_rsa.  公钥</div><div class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub.  私钥</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">4d:dd:48:af:76:c2:ba:a8:bc:20:f3:28:1d:6a:28:53</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>就是按3次回车，密码为空！<br>最后你会得到两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code></p>\n<ul>\n<li>把密钥加到Github或者码云或者Coding的SSH上<br><img src=\"/images/github.png\" alt=\"Github\"><br>我们需要把<code>id_rsa.pub</code>中的内容全选复制，然后粘贴进Pages的各自SSH地方，当然需要输入密码。</li>\n<li>测试SSH<br>Github：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@github.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@git.oschina.net</div></pre></td></tr></table></figure></p>\n<p>Coding:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ssh -T git@coding.net</div></pre></td></tr></table></figure></p>\n<ul>\n<li>若返回则配置成功<br>github:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.</div><div class=\"line\">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class=\"line\">Are you sure you want to continue connecting (yes/no)? yes</div><div class=\"line\">Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>码云：<code>Welcome to Git@OSC, yourname!</code><br>Coding：<code>Enter passphrase for key ‘/c/Users/Yuankai/.ssh/id_rsa’: Coding.net Tips : [ Hello Kyle_lyk! You have connected to Coding.net by SSH successfully! ]</code><br>那么配置好，我们就可以把Hexo部署到Git上了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$hexo deploy</div></pre></td></tr></table></figure></p>\n<h1 id=\"Hexo之Next\"><a href=\"#Hexo之Next\" class=\"headerlink\" title=\"Hexo之Next\"></a>Hexo之Next</h1><ul>\n<li>Hexo有很多主题，有大道至简的<code>maupassant</code> 也有<code>casper</code>还有<code>uno</code>。但是我还是最喜欢<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next</a>的风格。</li>\n</ul>\n<h1 id=\"安装Next\"><a href=\"#安装Next\" class=\"headerlink\" title=\"安装Next\"></a>安装Next</h1><p>安装Next是非常的简单。如果你熟悉Git那么你就可以直接使用Git checkout代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd your-hexo-site</div><div class=\"line\">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<p>还有一种方法是下载稳定版本</p>\n<ul>\n<li>前往Next版本<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"external\">发布页面</a></li>\n<li>一直下拉找到<code>Source code(zip)</code>点击即可下载</li>\n<li>之后把下载的压缩包至站点的themes目录下，并将解压后的文件名改为<code>next</code>。</li>\n</ul>\n<h2 id=\"启用Next\"><a href=\"#启用Next\" class=\"headerlink\" title=\"启用Next\"></a>启用Next</h2><ul>\n<li>你需要打开你的站点目录找到<code>_config.yml</code>这个文件，记住不是themes下next中的<code>_config.yml</code>。</li>\n<li>我们需要在站点文件<code>_config.yml</code>中<code>ctrl+F</code>打入<code>theme</code>字段，并将其值改为<code>next</code>：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme:next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"验证主题是否生成完成\"><a href=\"#验证主题是否生成完成\" class=\"headerlink\" title=\"验证主题是否生成完成\"></a>验证主题是否生成完成</h2><p>首先我们要右击你的站点然后选择<code>Git Bash Here</code>，并开启调试模式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>命令行出现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>\n<p>那么我们就可以在网址上输入<code>http://0.0.0.0:4000</code>去查看效果，检查站点是否正确运行。</p>\n<h1 id=\"Next各种细节\"><a href=\"#Next各种细节\" class=\"headerlink\" title=\"Next各种细节\"></a>Next各种细节</h1><h2 id=\"主题设定\"><a href=\"#主题设定\" class=\"headerlink\" title=\"主题设定\"></a>主题设定</h2><p>Scheme 是Next提供的一种特性，就因为Scheme我们有三种选择外观。</p>\n<ul>\n<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>\n<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>\n<li>Pisces - 双栏 Scheme，小家碧玉似的清新<br>Scheme 的切换通过更改 主题配置文件（theme/next下的<code>_config.yml</code>），搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#scheme: Muse</div><div class=\"line\">#scheme: Mist</div><div class=\"line\">scheme: Pisces</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还有更多的小东西大家可以去<a href=\"https://github.com/iissnan/hexo-theme-next/releases\" target=\"_blank\" rel=\"external\">Next官方文档</a>看。比如说</p>\n<ul>\n<li>菜单，</li>\n<li>侧栏，</li>\n<li>头像，</li>\n<li>作者昵称，</li>\n<li>站点描述，</li>\n<li>第三方服务等。</li>\n</ul>\n<h2 id=\"Next中foot更改\"><a href=\"#Next中foot更改\" class=\"headerlink\" title=\"Next中foot更改\"></a>Next中foot更改</h2><p><img src=\"/images/foot.jpg\" alt=\"foot\">我把原来的什么Hexo啊..Next.Pisces啊通通改了，这才像我们自己的博客呀！没得说。<br>我们需要打开<code>next</code>下的<code>layout</code>接着打开<code>_partials</code>下的<code>footer.swig</code>。<br>然后我们要把其中红框里的删除。<br><img src=\"/images/foot1.png\" alt=\"foot1\"><br>紧接着我们回到<code>next</code>下，找到<code>languages</code>，打开<code>zh-Hans.yml</code>。<br><img src=\"/images/foot2.png\" alt=\"foot2\"><br>我们可以改成如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">footer:</div><div class=\"line\">  powered: &quot;个人专属 &quot;</div><div class=\"line\">  theme: Adherent</div></pre></td></tr></table></figure></p>\n<p>看大家的想法自己随意发挥！<br>好啦，我要去研究SEO了！！<br>祝大家建博成功</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6krbq2y0002g3fy0xcmum5j","category_id":"cj6krbq390006g3fy64r3n7e6","_id":"cj6krbq3j000hg3fyduk51blq"},{"post_id":"cj6krbq320004g3fy3w2yd2er","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq3o000pg3fyytp7eb45"},{"post_id":"cj6krbq3b0008g3fyhy1kse1y","category_id":"cj6krbq3l000jg3fy4xbpcac8","_id":"cj6krbq3v000vg3fya75v0tqo"},{"post_id":"cj6krbq3d000ag3fysr9irxf3","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq3z0012g3fyuwqsx4qi"},{"post_id":"cj6krbq3t000ug3fypmi5epcl","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq410017g3fycyr2h747"},{"post_id":"cj6krbq3f000cg3fyiavusz38","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq44001ag3fyvjr7yz2e"},{"post_id":"cj6krbq3g000fg3fyxfehr5ut","category_id":"cj6krbq3z0013g3fy2vfkt4mq","_id":"cj6krbq48001hg3fy60elqicc"},{"post_id":"cj6krbq47001gg3fyoobb1pc1","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq4d001og3fy668rkfy9"},{"post_id":"cj6krbq3j000ig3fy8wivws0h","category_id":"cj6krbq44001cg3fy42wr2044","_id":"cj6krbq4f001tg3fyzy3khy6c"},{"post_id":"cj6krbq4a001jg3fymxtgcauz","category_id":"cj6krbq3z0013g3fy2vfkt4mq","_id":"cj6krbq4h001wg3fy1dkz6fz5"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","category_id":"cj6krbq4a001kg3fy8egzb1xu","_id":"cj6krbq4j0021g3fyyrpwcajv"},{"post_id":"cj6krbq4d001qg3fymiv7l2mt","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq4n0024g3fycj789eek"},{"post_id":"cj6krbq3n000og3fykwpn6hua","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq4p0029g3fy0fah3cau"},{"post_id":"cj6krbq3r000sg3fyg34amcu1","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq4s002eg3fyvt03us7n"},{"post_id":"cj6krbq3w000zg3fya8brtdha","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq4w002lg3fy37yhl7fp"},{"post_id":"cj6krbq4t002ig3fygkkqsxa3","category_id":"cj6krbq4a001kg3fy8egzb1xu","_id":"cj6krbq4y002qg3fytz4pee28"},{"post_id":"cj6krbq3y0011g3fy7jh46o48","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq51002ug3fy9uerq65a"},{"post_id":"cj6krbq400016g3fyy2j30ujy","category_id":"cj6krbq4a001kg3fy8egzb1xu","_id":"cj6krbq550030g3fy6gjxzu4o"},{"post_id":"cj6krbq4z002sg3fyl778vg5o","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq570034g3fyfp4bedx3"},{"post_id":"cj6krbq51002wg3fy42qcox47","category_id":"cj6krbq3g000dg3fym16cxvlj","_id":"cj6krbq580037g3fyh3aamgcb"},{"post_id":"cj6krbq420019g3fyqbon852g","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq58003ag3fyay7ny9u3"},{"post_id":"cj6krbq53002zg3fyrcn2uekz","category_id":"cj6krbq4a001kg3fy8egzb1xu","_id":"cj6krbq59003dg3fyx4j4wn4z"},{"post_id":"cj6krbq550033g3fywur8krhw","category_id":"cj6krbq4a001kg3fy8egzb1xu","_id":"cj6krbq59003gg3fyokc3v2t0"},{"post_id":"cj6krbq45001eg3fy3y23vlxo","category_id":"cj6krbq4e001sg3fyxpd2dx2t","_id":"cj6krbq59003jg3fy75wp478s"},{"post_id":"cj6krbq4b001ng3fyutq4btwk","category_id":"cj6krbq580038g3fyuo0x6if0","_id":"cj6krbq5a003mg3fy36krvddx"},{"post_id":"cj6krbq4f001vg3fyera53ifw","category_id":"cj6krbq59003fg3fymktmnqfn","_id":"cj6krbq5b003qg3fyfejytk14"},{"post_id":"cj6krbq4h001yg3fypi5w3z0o","category_id":"cj6krbq59003fg3fymktmnqfn","_id":"cj6krbq5b003vg3fykj5lsigi"},{"post_id":"cj6krbq4l0023g3fy0jie2n55","category_id":"cj6krbq5b003rg3fy9jtqhok4","_id":"cj6krbq5c0040g3fytn04g182"},{"post_id":"cj6krbq4n0026g3fyxg1dwsjq","category_id":"cj6krbq5b003wg3fy39re394v","_id":"cj6krbq5c0044g3fyp1lfa3gh"},{"post_id":"cj6krbq4p002bg3fy5bhoj035","category_id":"cj6krbq5c0041g3fyl65a2vzm","_id":"cj6krbq5d0049g3fyb2c923ck"},{"post_id":"cj6krbq4r002dg3fyxnbgi613","category_id":"cj6krbq59003fg3fymktmnqfn","_id":"cj6krbq5e004eg3fycsxjcie9"},{"post_id":"cj6krbq4v002kg3fyd3z48r2m","category_id":"cj6krbq59003fg3fymktmnqfn","_id":"cj6krbq5f004jg3fyxikmiq4m"},{"post_id":"cj6krbq4w002og3fye09hg0o3","category_id":"cj6krbq5f004fg3fywc2p1me4","_id":"cj6krbq5g004ng3fy8ffqymbk"}],"PostTag":[{"post_id":"cj6krbq3f000cg3fyiavusz38","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq3j000gg3fy2ytu8ov1"},{"post_id":"cj6krbq3g000fg3fyxfehr5ut","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq3l000lg3fy7qyjlvxo"},{"post_id":"cj6krbq3g000fg3fyxfehr5ut","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq3n000ng3fyfhyqwtwz"},{"post_id":"cj6krbq3n000og3fykwpn6hua","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq3t000tg3fyadcywskn"},{"post_id":"cj6krbq3r000sg3fyg34amcu1","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq3w000xg3fy0dtct9jh"},{"post_id":"cj6krbq2y0002g3fy0xcmum5j","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq3y0010g3fyiq3e6uxp"},{"post_id":"cj6krbq2y0002g3fy0xcmum5j","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq400014g3fyao657mxl"},{"post_id":"cj6krbq2y0002g3fy0xcmum5j","tag_id":"cj6krbq3l000kg3fyt6w9m5n4","_id":"cj6krbq410018g3fyi7lybvwp"},{"post_id":"cj6krbq2y0002g3fy0xcmum5j","tag_id":"cj6krbq3p000rg3fyje5scx1b","_id":"cj6krbq44001bg3fy643wtmz5"},{"post_id":"cj6krbq3t000ug3fypmi5epcl","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq46001fg3fyz1okuifd"},{"post_id":"cj6krbq3w000zg3fya8brtdha","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq49001ig3fyl8apd641"},{"post_id":"cj6krbq3y0011g3fy7jh46o48","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4b001mg3fyk6v5ugp3"},{"post_id":"cj6krbq320004g3fy3w2yd2er","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4d001pg3fy6aj7teoe"},{"post_id":"cj6krbq320004g3fy3w2yd2er","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq4f001ug3fykairdyoh"},{"post_id":"cj6krbq420019g3fyqbon852g","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4h001xg3fyf74wkv0m"},{"post_id":"cj6krbq45001eg3fy3y23vlxo","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4k0022g3fy6mkxl14r"},{"post_id":"cj6krbq47001gg3fyoobb1pc1","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4n0025g3fye146gscb"},{"post_id":"cj6krbq3b0008g3fyhy1kse1y","tag_id":"cj6krbq45001dg3fyzsrvdcs2","_id":"cj6krbq4p002ag3fybc9apg0m"},{"post_id":"cj6krbq4a001jg3fymxtgcauz","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4q002cg3fyhq12gmxj"},{"post_id":"cj6krbq4a001jg3fymxtgcauz","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq4t002gg3fyig01chbb"},{"post_id":"cj6krbq3d000ag3fysr9irxf3","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4v002jg3fyfgibkvyb"},{"post_id":"cj6krbq3d000ag3fysr9irxf3","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq4w002ng3fyhan3pxnv"},{"post_id":"cj6krbq4d001qg3fymiv7l2mt","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq4y002rg3fylpwk17ow"},{"post_id":"cj6krbq4d001qg3fymiv7l2mt","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq51002vg3fyg5nnqgwo"},{"post_id":"cj6krbq3j000ig3fy8wivws0h","tag_id":"cj6krbq4e001rg3fy08lh0aul","_id":"cj6krbq53002yg3fypxublx8t"},{"post_id":"cj6krbq4p002bg3fy5bhoj035","tag_id":"cj6krbq3l000kg3fyt6w9m5n4","_id":"cj6krbq550032g3fyphxue73h"},{"post_id":"cj6krbq4z002sg3fyl778vg5o","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq570036g3fy7ftx7k7w"},{"post_id":"cj6krbq51002wg3fy42qcox47","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq580039g3fyi9uudqge"},{"post_id":"cj6krbq51002wg3fy42qcox47","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq59003bg3fyu3dxi0fo"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq4i001zg3fyqyatud5z","_id":"cj6krbq59003eg3fy7d4uu5tp"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq4p0028g3fyu7ofde2u","_id":"cj6krbq59003hg3fyvit0zscj"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq59003kg3fyh2sg5on1"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq4t002hg3fycoj1nvsb","_id":"cj6krbq5a003ng3fyxmd586rc"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq4x002pg3fypuxdyx1f","_id":"cj6krbq5b003pg3fyg2o48dge"},{"post_id":"cj6krbq3m000mg3fyupktbu9j","tag_id":"cj6krbq53002xg3fyf4t7mapn","_id":"cj6krbq5b003sg3fyv3jit5x5"},{"post_id":"cj6krbq400016g3fyy2j30ujy","tag_id":"cj6krbq570035g3fyj39q4a7g","_id":"cj6krbq5b003ug3fyyj2qybi4"},{"post_id":"cj6krbq400016g3fyy2j30ujy","tag_id":"cj6krbq3l000kg3fyt6w9m5n4","_id":"cj6krbq5c003xg3fyafludhjh"},{"post_id":"cj6krbq400016g3fyy2j30ujy","tag_id":"cj6krbq3g000eg3fybvd7sn6f","_id":"cj6krbq5c003yg3fyk6oroblc"},{"post_id":"cj6krbq400016g3fyy2j30ujy","tag_id":"cj6krbq59003cg3fyybc0tm43","_id":"cj6krbq5c0042g3fykbpygpzg"},{"post_id":"cj6krbq4b001ng3fyutq4btwk","tag_id":"cj6krbq59003ig3fyyjn4n2kb","_id":"cj6krbq5d0046g3fy9udas03w"},{"post_id":"cj6krbq4b001ng3fyutq4btwk","tag_id":"cj6krbq5b003og3fydk1a4rz7","_id":"cj6krbq5d0047g3fyp8yf17a9"},{"post_id":"cj6krbq4b001ng3fyutq4btwk","tag_id":"cj6krbq5b003tg3fy2h03j814","_id":"cj6krbq5d004bg3fyxpdnp6qt"},{"post_id":"cj6krbq4b001ng3fyutq4btwk","tag_id":"cj6krbq5c003zg3fy1tt37r5q","_id":"cj6krbq5e004cg3fymkxynybo"},{"post_id":"cj6krbq4f001vg3fyera53ifw","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq5f004gg3fye90ue769"},{"post_id":"cj6krbq4f001vg3fyera53ifw","tag_id":"cj6krbq59003ig3fyyjn4n2kb","_id":"cj6krbq5f004hg3fype92npfi"},{"post_id":"cj6krbq4f001vg3fyera53ifw","tag_id":"cj6krbq5d0048g3fy01x3vd4r","_id":"cj6krbq5f004kg3fyifcv4b9h"},{"post_id":"cj6krbq4h001yg3fypi5w3z0o","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq5f004lg3fyfoqe78i2"},{"post_id":"cj6krbq4h001yg3fypi5w3z0o","tag_id":"cj6krbq59003ig3fyyjn4n2kb","_id":"cj6krbq5g004og3fygryot6j2"},{"post_id":"cj6krbq4l0023g3fy0jie2n55","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq5g004pg3fyxnpg625x"},{"post_id":"cj6krbq4l0023g3fy0jie2n55","tag_id":"cj6krbq5f004ig3fy2idiimvz","_id":"cj6krbq5h004rg3fy4pks5aws"},{"post_id":"cj6krbq4n0026g3fyxg1dwsjq","tag_id":"cj6krbq5f004mg3fyhpej8tri","_id":"cj6krbq5h004sg3fy9capuusw"},{"post_id":"cj6krbq4n0026g3fyxg1dwsjq","tag_id":"cj6krbq45001dg3fyzsrvdcs2","_id":"cj6krbq5i004ug3fyavoa4a35"},{"post_id":"cj6krbq4r002dg3fyxnbgi613","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq5i004vg3fyjkmwpciq"},{"post_id":"cj6krbq4r002dg3fyxnbgi613","tag_id":"cj6krbq59003ig3fyyjn4n2kb","_id":"cj6krbq5i004xg3fy9opt36xv"},{"post_id":"cj6krbq4t002ig3fygkkqsxa3","tag_id":"cj6krbq5h004tg3fy5ulmx8a7","_id":"cj6krbq5j004yg3fyifpecn6y"},{"post_id":"cj6krbq4v002kg3fyd3z48r2m","tag_id":"cj6krbq3b0007g3fy6a0jqzxw","_id":"cj6krbq5k0051g3fygb12z0hw"},{"post_id":"cj6krbq4v002kg3fyd3z48r2m","tag_id":"cj6krbq59003ig3fyyjn4n2kb","_id":"cj6krbq5k0052g3fybjiq6ar4"},{"post_id":"cj6krbq4v002kg3fyd3z48r2m","tag_id":"cj6krbq5d0048g3fy01x3vd4r","_id":"cj6krbq5k0054g3fyce14epje"},{"post_id":"cj6krbq4w002og3fye09hg0o3","tag_id":"cj6krbq5j0050g3fywr9xf9uy","_id":"cj6krbq5k0056g3fyghop8cab"},{"post_id":"cj6krbq4w002og3fye09hg0o3","tag_id":"cj6krbq5k0053g3fy9j6y6jky","_id":"cj6krbq5k0057g3fylv8dibbs"},{"post_id":"cj6krbq53002zg3fyrcn2uekz","tag_id":"cj6krbq570035g3fyj39q4a7g","_id":"cj6krbq5l0059g3fybr7h5j17"},{"post_id":"cj6krbq53002zg3fyrcn2uekz","tag_id":"cj6krbq3l000kg3fyt6w9m5n4","_id":"cj6krbq5l005ag3fy0eqkknae"},{"post_id":"cj6krbq550033g3fywur8krhw","tag_id":"cj6krbq570035g3fyj39q4a7g","_id":"cj6krbq5l005bg3fy1jpnhudc"},{"post_id":"cj6krbq550033g3fywur8krhw","tag_id":"cj6krbq3l000kg3fyt6w9m5n4","_id":"cj6krbq5l005cg3fyfo2s346f"}],"Tag":[{"name":"JavaScript","_id":"cj6krbq3b0007g3fy6a0jqzxw"},{"name":"node.js","_id":"cj6krbq3g000eg3fybvd7sn6f"},{"name":"git","_id":"cj6krbq3l000kg3fyt6w9m5n4"},{"name":"php","_id":"cj6krbq3p000rg3fyje5scx1b"},{"name":"数据库","_id":"cj6krbq45001dg3fyzsrvdcs2"},{"name":"GraphQL","_id":"cj6krbq4e001rg3fy08lh0aul"},{"name":"C","_id":"cj6krbq4i001zg3fyqyatud5z"},{"name":"Java","_id":"cj6krbq4p0028g3fyu7ofde2u"},{"name":"Python","_id":"cj6krbq4t002hg3fycoj1nvsb"},{"name":"PHP","_id":"cj6krbq4x002pg3fypuxdyx1f"},{"name":"go","_id":"cj6krbq53002xg3fyf4t7mapn"},{"name":"hexo","_id":"cj6krbq570035g3fyj39q4a7g"},{"name":"javascript","_id":"cj6krbq59003cg3fyybc0tm43"},{"name":"React","_id":"cj6krbq59003ig3fyyjn4n2kb"},{"name":"React Native","_id":"cj6krbq5b003og3fydk1a4rz7"},{"name":"iOS","_id":"cj6krbq5b003tg3fy2h03j814"},{"name":"Android","_id":"cj6krbq5c003zg3fy1tt37r5q"},{"name":"Webpack","_id":"cj6krbq5d0048g3fy01x3vd4r"},{"name":"Vue.js","_id":"cj6krbq5f004ig3fy2idiimvz"},{"name":"Mongodb","_id":"cj6krbq5f004mg3fyhpej8tri"},{"name":"生活","_id":"cj6krbq5h004tg3fy5ulmx8a7"},{"name":"JavaScrip","_id":"cj6krbq5j0050g3fywr9xf9uy"},{"name":"小程序","_id":"cj6krbq5k0053g3fy9j6y6jky"}]}}